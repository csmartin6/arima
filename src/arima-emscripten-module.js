
var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
  return (
function(Module) {
  Module = Module || {};



// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
Module['ready'] = new Promise(function(resolve, reject) {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_fit_sarimax_old')) {
        Object.defineProperty(Module['ready'], '_fit_sarimax_old', { configurable: true, get: function() { abort('You are getting _fit_sarimax_old on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_fit_sarimax_old', { configurable: true, set: function() { abort('You are setting _fit_sarimax_old on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_predict_sarimax_old')) {
        Object.defineProperty(Module['ready'], '_predict_sarimax_old', { configurable: true, get: function() { abort('You are getting _predict_sarimax_old on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_predict_sarimax_old', { configurable: true, set: function() { abort('You are setting _predict_sarimax_old on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_fit_autoarima_old')) {
        Object.defineProperty(Module['ready'], '_fit_autoarima_old', { configurable: true, get: function() { abort('You are getting _fit_autoarima_old on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_fit_autoarima_old', { configurable: true, set: function() { abort('You are setting _fit_autoarima_old on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_predict_autoarima_old')) {
        Object.defineProperty(Module['ready'], '_predict_autoarima_old', { configurable: true, get: function() { abort('You are getting _predict_autoarima_old on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_predict_autoarima_old', { configurable: true, set: function() { abort('You are setting _predict_autoarima_old on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_get_end')) {
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_end', { configurable: true, get: function() { abort('You are getting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_end', { configurable: true, set: function() { abort('You are setting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_get_free')) {
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_free', { configurable: true, get: function() { abort('You are getting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_free', { configurable: true, set: function() { abort('You are setting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_init')) {
        Object.defineProperty(Module['ready'], '_emscripten_stack_init', { configurable: true, get: function() { abort('You are getting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_emscripten_stack_init', { configurable: true, set: function() { abort('You are setting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackSave')) {
        Object.defineProperty(Module['ready'], '_stackSave', { configurable: true, get: function() { abort('You are getting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackSave', { configurable: true, set: function() { abort('You are setting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackRestore')) {
        Object.defineProperty(Module['ready'], '_stackRestore', { configurable: true, get: function() { abort('You are getting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackRestore', { configurable: true, set: function() { abort('You are setting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackAlloc')) {
        Object.defineProperty(Module['ready'], '_stackAlloc', { configurable: true, get: function() { abort('You are getting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackAlloc', { configurable: true, set: function() { abort('You are setting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___wasm_call_ctors')) {
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, get: function() { abort('You are getting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, set: function() { abort('You are setting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_fflush')) {
        Object.defineProperty(Module['ready'], '_fflush', { configurable: true, get: function() { abort('You are getting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_fflush', { configurable: true, set: function() { abort('You are setting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___errno_location')) {
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, get: function() { abort('You are getting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, set: function() { abort('You are setting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_malloc')) {
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, get: function() { abort('You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, set: function() { abort('You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_free')) {
        Object.defineProperty(Module['ready'], '_free', { configurable: true, get: function() { abort('You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_free', { configurable: true, set: function() { abort('You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___getTypeName')) {
        Object.defineProperty(Module['ready'], '___getTypeName', { configurable: true, get: function() { abort('You are getting ___getTypeName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___getTypeName', { configurable: true, set: function() { abort('You are setting ___getTypeName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___embind_register_native_and_builtin_types')) {
        Object.defineProperty(Module['ready'], '___embind_register_native_and_builtin_types', { configurable: true, get: function() { abort('You are getting ___embind_register_native_and_builtin_types on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___embind_register_native_and_builtin_types', { configurable: true, set: function() { abort('You are setting ___embind_register_native_and_builtin_types on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], 'onRuntimeInitialized')) {
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, get: function() { abort('You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, set: function() { abort('You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


read_ = function shell_read(filename, binary) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
};

readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];
if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) {
  Object.defineProperty(Module, 'arguments', {
    configurable: true,
    get: function() {
      abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) {
  Object.defineProperty(Module, 'thisProgram', {
    configurable: true,
    get: function() {
      abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['quit']) quit_ = Module['quit'];
if (!Object.getOwnPropertyDescriptor(Module, 'quit')) {
  Object.defineProperty(Module, 'quit', {
    configurable: true,
    get: function() {
      abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');

if (!Object.getOwnPropertyDescriptor(Module, 'read')) {
  Object.defineProperty(Module, 'read', {
    configurable: true,
    get: function() {
      abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) {
  Object.defineProperty(Module, 'readAsync', {
    configurable: true,
    get: function() {
      abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) {
  Object.defineProperty(Module, 'readBinary', {
    configurable: true,
    get: function() {
      abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) {
  Object.defineProperty(Module, 'setWindowTitle', {
    configurable: true,
    get: function() {
      abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';




var STACK_ALIGN = 16;

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < wasmTable.length; i++) {
      var item = wasmTable.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    wasmTable.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    wasmTable.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) {
  Object.defineProperty(Module, 'wasmBinary', {
    configurable: true,
    get: function() {
      abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var noExitRuntime = Module['noExitRuntime'] || true;
if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) {
  Object.defineProperty(Module, 'noExitRuntime', {
    configurable: true,
    get: function() {
      abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(asmLibraryArg) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 12416, "AAAAoJmZqT8AAACgmZnJPwAAAAAAAOA/AAAAgB2vFUQAAACg8td6PgAAAOBNYlA/gC8AAGAlAACALwAA0CUAAAQwAACkJQAAAAAAAAEAAAC4MAAAAAAAAAQwAACAJQAAAAAAAAEAAADAMAAAAAAAAIAvAAD+JQAAYDAAABImAAAAAAAA2DAAAGAwAAA3JgAAAQAAANgwAAD4MAAAvC4AAPgwAABwLwAAAAAAAAAAAAC8LgAA+DAAAEAvAABwLwAAQC8AAAgxAABUMQAA2DAAAEAvAACALwAAaCYAAAAAAADULgAA2DAAAEAvAABwLwAAsDAAANgwAADYMAAAHC8AABwvAAAcLwAAHC8AABwvAAAcLwAAHC8AABwvAAAcLwAAHC8AABwvAADULgAAAAAAANgwAACwMAAA2DAAANgwAADYMAAAHC8AAAAAAAAAAAAA8DAAANgwAADYMAAAHC8AABwvAAAcLwAAHC8AABwvAAAcLwAAHC8AABwvAAAcLwAAHC8AABwvAAAcLwAAHC8AANQuAAAAAAAAAAAAAAAAAADYMAAA8DAAANgwAADYMAAA2DAAABwvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8DMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgOlAABQAAAAAAAAAAAAAASgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASwAAAEwAAAAYNgAAAAQAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAACv////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIDMAAA==");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 memory.grow = __wasm_memory_grow;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var fimport$0 = env.exit;
 var fimport$1 = env._embind_register_value_object;
 var fimport$2 = env._embind_register_value_object_field;
 var fimport$3 = env._embind_finalize_value_object;
 var fimport$4 = env._embind_register_class;
 var fimport$5 = env._embind_register_function;
 var fimport$6 = env.__cxa_allocate_exception;
 var fimport$7 = env.__cxa_throw;
 var fimport$8 = env._embind_register_class_constructor;
 var fimport$9 = env._embind_register_class_function;
 var fimport$10 = env._emval_incref;
 var fimport$11 = env._emval_decref;
 var fimport$12 = env._emval_take_value;
 var fimport$13 = env._embind_register_void;
 var fimport$14 = env._embind_register_bool;
 var fimport$15 = env._embind_register_std_string;
 var fimport$16 = env._embind_register_std_wstring;
 var fimport$17 = env._embind_register_emval;
 var fimport$18 = env._embind_register_integer;
 var fimport$19 = env._embind_register_float;
 var fimport$20 = env._embind_register_memory_view;
 var fimport$21 = env.abort;
 var fimport$22 = env.fd_write;
 var fimport$23 = env.emscripten_resize_heap;
 var fimport$24 = env.emscripten_memcpy_big;
 var fimport$25 = env.setTempRet0;
 var fimport$26 = env._embind_register_bigint;
 var global$0 = 5257760;
 var global$1 = 0;
 var global$2 = 0;
 var global$3 = 0;
 var global$4 = 1;
 var global$5 = 44;
 var global$6 = 11540;
 var global$7 = 11500;
 var global$8 = 12060;
 var global$9 = 12504;
 var global$10 = 12144;
 var global$11 = 12536;
 var global$12 = 12552;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $882();
  $585();
  $728();
 }
 
 function $1($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $153_1 = 0.0, $26_1 = 0, $99_1 = 0, $149_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 80 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 68 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 64 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    $153_1 = .05;
    break label$1;
   }
   $153_1 = +HEAPF64[(HEAP32[($8_1 + 64 | 0) >> 2] | 0) >> 3];
  }
  HEAPF64[($8_1 + 24 | 0) >> 3] = $153_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$4
    }
    $26_1 = 2;
    break label$3;
   }
   $26_1 = HEAP32[(HEAP32[($8_1 + 52 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($8_1 + 44 | 0) >> 2] = $26_1;
  HEAPF64[$8_1 >> 3] = +HEAPF64[($8_1 + 24 | 0) >> 3];
  $875(global$3 + 5276 | 0 | 0, $8_1 | 0) | 0;
  label$5 : {
   if (!((HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$5
   }
   $875(global$3 + 6248 | 0 | 0, 0 | 0) | 0;
   fimport$0(-1 | 0);
   abort();
  }
  label$6 : {
   if (!(+HEAPF64[($8_1 + 24 | 0) >> 3] < .01 & 1 | 0)) {
    break label$6
   }
   HEAPF64[($8_1 + 24 | 0) >> 3] = .01;
   $875(global$3 + 7182 | 0 | 0, 0 | 0) | 0;
  }
  label$7 : {
   if (!(+HEAPF64[($8_1 + 24 | 0) >> 3] > .1 & 1 | 0)) {
    break label$7
   }
   HEAPF64[($8_1 + 24 | 0) >> 3] = .1;
   $875(global$3 + 7258 | 0 | 0, 0 | 0) | 0;
  }
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $6(HEAP32[($8_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 68 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
  label$8 : {
   label$9 : {
    if (!((HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$9
    }
    HEAP32[($8_1 + 76 | 0) >> 2] = HEAP32[($8_1 + 48 | 0) >> 2] | 0;
    break label$8;
   }
   HEAP32[($8_1 + 36 | 0) >> 2] = HEAP32[($8_1 + 68 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $2(HEAP32[($8_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, +(+HEAPF64[($8_1 + 24 | 0) >> 3])) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
   label$10 : {
    if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) != (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$10
    }
    HEAP32[($8_1 + 76 | 0) >> 2] = HEAP32[($8_1 + 48 | 0) >> 2] | 0;
    break label$8;
   }
   (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
   $868(HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 72 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
   label$11 : while (1) {
    $99_1 = 0;
    label$12 : {
     if (!(HEAP32[($8_1 + 32 | 0) >> 2] | 0)) {
      break label$12
     }
     $99_1 = (HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0);
    }
    label$13 : {
     if (!($99_1 & 1 | 0)) {
      break label$13
     }
     HEAP32[($8_1 + 48 | 0) >> 2] = (HEAP32[($8_1 + 48 | 0) >> 2] | 0) + 1 | 0;
     (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $222(HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $6(HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
     label$14 : {
      if (!((HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$14
      }
      break label$13;
     }
     (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $2(HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, +(+HEAPF64[($8_1 + 24 | 0) >> 3])) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
     label$15 : {
      if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) != (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$15
      }
      HEAP32[($8_1 + 48 | 0) >> 2] = (HEAP32[($8_1 + 48 | 0) >> 2] | 0) + -1 | 0;
      break label$13;
     }
     $868(HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
     continue label$11;
    }
    break label$11;
   };
   $863(HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0);
   HEAP32[($8_1 + 76 | 0) >> 2] = HEAP32[($8_1 + 48 | 0) >> 2] | 0;
  }
  $149_1 = HEAP32[($8_1 + 76 | 0) >> 2] | 0;
  global$0 = $8_1 + 80 | 0;
  return $149_1 | 0;
 }
 
 function $2($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  var $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $232_1 = 0, $234_1 = 0, $15_1 = 0, $233_1 = 0, $27_1 = 0, $240_1 = 0.0, $62_1 = 0, $229_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $7_1 = global$0 - 256 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 252 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 248 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 244 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 240 | 0) >> 2] = $3_1;
  HEAPF64[($7_1 + 232 | 0) >> 3] = $4_1;
  $869($7_1 + 112 | 0 | 0, 0 | 0, 72 | 0) | 0;
  $15_1 = $7_1 + 80 | 0;
  i64toi32_i32$0 = 0;
  $232_1 = 0;
  i64toi32_i32$1 = $15_1;
  HEAP32[i64toi32_i32$1 >> 2] = $232_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $232_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $15_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $232_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $233_1 = 0;
  i64toi32_i32$1 = $7_1 + 64 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $233_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $233_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $27_1 = $7_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  $234_1 = 0;
  i64toi32_i32$1 = $27_1;
  HEAP32[i64toi32_i32$1 >> 2] = $234_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $234_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $27_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $234_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($739(HEAP32[($7_1 + 244 | 0) >> 2] | 0 | 0, global$3 + 1297 | 0 | 0) | 0) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($739(HEAP32[($7_1 + 240 | 0) >> 2] | 0 | 0, global$3 + 1982 | 0 | 0) | 0) {
       break label$4
      }
      HEAP32[($7_1 + 212 | 0) >> 2] = global$3 + 1982 | 0;
      break label$3;
     }
     label$5 : {
      label$6 : {
       if ($739(HEAP32[($7_1 + 240 | 0) >> 2] | 0 | 0, global$3 + 2677 | 0 | 0) | 0) {
        break label$6
       }
       HEAP32[($7_1 + 212 | 0) >> 2] = global$3 + 2677 | 0;
       break label$5;
      }
      $875(global$3 + 6865 | 0 | 0, 0 | 0) | 0;
      fimport$0(-1 | 0);
      abort();
     }
    }
    $240_1 = 3.0 * Math_sqrt(+(HEAP32[($7_1 + 248 | 0) >> 2] | 0 | 0)) / 13.0;
    label$7 : {
     label$8 : {
      if (!(Math_abs($240_1) < 2147483648.0)) {
       break label$8
      }
      $62_1 = ~~$240_1;
      break label$7;
     }
     $62_1 = -2147483648;
    }
    HEAP32[($7_1 + 224 | 0) >> 2] = $62_1;
    HEAP32[($7_1 + 220 | 0) >> 2] = 1;
    $234(HEAP32[($7_1 + 252 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 248 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, $7_1 + 224 | 0 | 0, $7_1 + 192 | 0 | 0, $7_1 + 184 | 0 | 0);
    HEAP32[($7_1 + 228 | 0) >> 2] = +HEAPF64[($7_1 + 184 | 0) >> 3] < +HEAPF64[($7_1 + 232 | 0) >> 3] & 1 | 0 ? 1 : 0;
    break label$1;
   }
   label$9 : {
    label$10 : {
     label$11 : {
      if (!($739(HEAP32[($7_1 + 244 | 0) >> 2] | 0 | 0, global$3 + 2340 | 0 | 0) | 0)) {
       break label$11
      }
      if ($739(HEAP32[($7_1 + 244 | 0) >> 2] | 0 | 0, global$3 + 2339 | 0 | 0) | 0) {
       break label$10
      }
     }
     label$12 : {
      label$13 : {
       if ($739(HEAP32[($7_1 + 240 | 0) >> 2] | 0 | 0, global$3 + 1982 | 0 | 0) | 0) {
        break label$13
       }
       HEAP32[($7_1 + 212 | 0) >> 2] = global$3 + 1255 | 0;
       break label$12;
      }
      label$14 : {
       label$15 : {
        if ($739(HEAP32[($7_1 + 240 | 0) >> 2] | 0 | 0, global$3 + 2677 | 0 | 0) | 0) {
         break label$15
        }
        HEAP32[($7_1 + 212 | 0) >> 2] = global$3 + 2677 | 0;
        break label$14;
       }
       $875(global$3 + 6865 | 0 | 0, 0 | 0) | 0;
       fimport$0(-1 | 0);
       abort();
      }
     }
     HEAP32[($7_1 + 204 | 0) >> 2] = global$3 + 2688 | 0;
     HEAP32[($7_1 + 224 | 0) >> 2] = 1;
     HEAP32[($7_1 + 24 | 0) >> 2] = 3;
     $233(HEAP32[($7_1 + 252 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 248 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, $7_1 + 224 | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0, $7_1 + 112 | 0 | 0, $7_1 + 20 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 80 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 12 | 0 | 0);
     HEAPF64[($7_1 + 192 | 0) >> 3] = +HEAPF64[($7_1 + 32 | 0) >> 3];
     (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$226($7_1 + 112 | 0 | 0, $7_1 + 80 | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($7_1 + 192 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 184 | 0) >> 3] = wasm2js_f64$0;
     HEAP32[($7_1 + 228 | 0) >> 2] = +HEAPF64[($7_1 + 184 | 0) >> 3] > +HEAPF64[($7_1 + 232 | 0) >> 3] & 1 | 0 ? 1 : 0;
     break label$9;
    }
    label$16 : {
     label$17 : {
      if ($739(HEAP32[($7_1 + 244 | 0) >> 2] | 0 | 0, global$3 + 1852 | 0 | 0) | 0) {
       break label$17
      }
      label$18 : {
       label$19 : {
        if ($739(HEAP32[($7_1 + 240 | 0) >> 2] | 0 | 0, global$3 + 1982 | 0 | 0) | 0) {
         break label$19
        }
        HEAP32[($7_1 + 208 | 0) >> 2] = global$3 + 1246 | 0;
        break label$18;
       }
       label$20 : {
        label$21 : {
         if ($739(HEAP32[($7_1 + 240 | 0) >> 2] | 0 | 0, global$3 + 2677 | 0 | 0) | 0) {
          break label$21
         }
         HEAP32[($7_1 + 208 | 0) >> 2] = global$3 + 2677 | 0;
         break label$20;
        }
        $875(global$3 + 6923 | 0 | 0, 0 | 0) | 0;
        fimport$0(-1 | 0);
        abort();
       }
      }
      HEAP32[($7_1 + 212 | 0) >> 2] = global$3 + 1134 | 0;
      HEAP32[($7_1 + 220 | 0) >> 2] = 1;
      HEAP32[($7_1 + 24 | 0) >> 2] = 3;
      $235(HEAP32[($7_1 + 252 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 248 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, 0 | 0, $7_1 + 112 | 0 | 0, $7_1 + 80 | 0 | 0, $7_1 + 64 | 0 | 0, $7_1 + 28 | 0 | 0, $7_1 + 192 | 0 | 0);
      (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$226($7_1 + 112 | 0 | 0, $7_1 + 80 | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($7_1 + 192 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 184 | 0) >> 3] = wasm2js_f64$0;
      HEAP32[($7_1 + 228 | 0) >> 2] = +HEAPF64[($7_1 + 184 | 0) >> 3] > +HEAPF64[($7_1 + 232 | 0) >> 3] & 1 | 0 ? 1 : 0;
      break label$16;
     }
     $875(global$3 + 4825 | 0 | 0, 0 | 0) | 0;
     fimport$0(-1 | 0);
     abort();
    }
   }
  }
  $229_1 = HEAP32[($7_1 + 228 | 0) >> 2] | 0;
  global$0 = $7_1 + 256 | 0;
  return $229_1 | 0;
 }
 
 function $3($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $163_1 = 0.0, $26_1 = 0, $118_1 = 0, $159_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 36 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 32 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    $163_1 = .05;
    break label$1;
   }
   $163_1 = +HEAPF64[(HEAP32[($8_1 + 44 | 0) >> 2] | 0) >> 3];
  }
  HEAPF64[($8_1 + 8 | 0) >> 3] = $163_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$4
    }
    $26_1 = 1;
    break label$3;
   }
   $26_1 = HEAP32[(HEAP32[($8_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($8_1 + 28 | 0) >> 2] = $26_1;
  label$5 : {
   if (!((HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$5
   }
   $875(global$3 + 6248 | 0 | 0, 0 | 0) | 0;
   fimport$0(-1 | 0);
   abort();
  }
  label$6 : {
   if (!(+HEAPF64[($8_1 + 8 | 0) >> 3] < .01 & 1 | 0)) {
    break label$6
   }
   HEAPF64[($8_1 + 8 | 0) >> 3] = .01;
   $875(global$3 + 7182 | 0 | 0, 0 | 0) | 0;
  }
  label$7 : {
   if (!(+HEAPF64[($8_1 + 8 | 0) >> 3] > .1 & 1 | 0)) {
    break label$7
   }
   HEAPF64[($8_1 + 8 | 0) >> 3] = .1;
   $875(global$3 + 7258 | 0 | 0, 0 | 0) | 0;
  }
  label$8 : {
   if ($739(HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0, global$3 + 2777 | 0 | 0) | 0) {
    break label$8
   }
   label$9 : {
    if (!(+HEAPF64[($8_1 + 8 | 0) >> 3] != .05 & 1 | 0)) {
     break label$9
    }
    $875(global$3 + 3922 | 0 | 0, 0 | 0) | 0;
    HEAPF64[($8_1 + 8 | 0) >> 3] = .05;
   }
  }
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $6(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  label$10 : {
   label$11 : {
    if (!((HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$11
    }
    HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 32 | 0) >> 2] | 0;
    break label$10;
   }
   HEAP32[($8_1 + 20 | 0) >> 2] = HEAP32[($8_1 + 52 | 0) >> 2] | 0;
   label$12 : {
    if (!((HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0) <= (1 | 0) & 1 | 0)) {
     break label$12
    }
    $875(global$3 + 7035 | 0 | 0, 0 | 0) | 0;
    HEAP32[($8_1 + 60 | 0) >> 2] = 0;
    break label$10;
   }
   (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $4(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862((HEAP32[($8_1 + 20 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862((HEAP32[($8_1 + 20 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $868(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 20 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
   label$13 : while (1) {
    $118_1 = 0;
    label$14 : {
     if (!((HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$14
     }
     $118_1 = (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0);
    }
    label$15 : {
     if (!($118_1 & 1 | 0)) {
      break label$15
     }
     HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $223(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[$8_1 >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $6(HEAP32[$8_1 >> 2] | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
     label$16 : {
      if (!((HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$16
      }
      break label$15;
     }
     (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $4(HEAP32[$8_1 >> 2] | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
     $868(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$8_1 >> 2] | 0 | 0, (HEAP32[($8_1 + 20 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
     continue label$13;
    }
    break label$13;
   };
   $863(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0);
   $863(HEAP32[$8_1 >> 2] | 0 | 0);
   HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 32 | 0) >> 2] | 0;
  }
  $159_1 = HEAP32[($8_1 + 60 | 0) >> 2] | 0;
  global$0 = $8_1 + 64 | 0;
  return $159_1 | 0;
 }
 
 function $4($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $53_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if ($739(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, global$3 + 2777 | 0 | 0) | 0) {
     break label$2
    }
    HEAP32[($6_1 + 24 | 0) >> 2] = 3;
    HEAP32[($6_1 + 4 | 0) >> 2] = global$3 + 2763 | 0;
    $193(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
    HEAP32[($6_1 + 28 | 0) >> 2] = +HEAPF64[($6_1 + 16 | 0) >> 3] > +HEAPF64[($6_1 + 8 | 0) >> 3] & 1 | 0 ? 1 : 0;
    break label$1;
   }
   label$3 : {
    if ($739(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, global$3 + 1489 | 0 | 0) | 0) {
     break label$3
    }
    HEAPF64[($6_1 + 8 | 0) >> 3] = .64;
    $198(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, $6_1 + 36 | 0 | 0, 1 | 0, $6_1 + 16 | 0 | 0);
    HEAP32[($6_1 + 28 | 0) >> 2] = +HEAPF64[($6_1 + 16 | 0) >> 3] > +HEAPF64[($6_1 + 8 | 0) >> 3] & 1 | 0 ? 1 : 0;
   }
  }
  $53_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 48 | 0;
  return $53_1 | 0;
 }
 
 function $5($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $34_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +$88()), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
  HEAP32[($4_1 + 28 | 0) >> 2] = 1;
  HEAP32[($4_1 + 32 | 0) >> 2] = 1;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 32 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
     label$4 : {
      if (!(Math_abs(+HEAPF64[($4_1 + 8 | 0) >> 3]) > +HEAPF64[($4_1 + 16 | 0) >> 3] & 1 | 0)) {
       break label$4
      }
      HEAP32[($4_1 + 44 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  }
  $34_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  return $34_1 | 0;
 }
 
 function $6($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = 1;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAPF64[$4_1 >> 3] = +HEAPF64[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$4 : {
      if (!(Math_abs(+HEAPF64[$4_1 >> 3]) > +(0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      break label$1;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 1;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  }
  return HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function $7($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $61_1 = 0.0, $66_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAPF64[($6_1 + 32 | 0) >> 3] = $2_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $3_1;
  (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = +$88() / 744.44), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
  label$1 : {
   label$2 : {
    if (!(Math_abs(+HEAPF64[($6_1 + 32 | 0) >> 3]) < +HEAPF64[($6_1 + 16 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      $61_1 = +$729(+(+HEAPF64[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]));
      HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $61_1;
      HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    break label$1;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     $66_1 = +$732(+(+HEAPF64[($6_1 + 32 | 0) >> 3] * +$729(+(+HEAPF64[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]))));
     HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $66_1 / +HEAPF64[($6_1 + 32 | 0) >> 3];
     HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
  }
  global$0 = $6_1 + 48 | 0;
  return;
 }
 
 function $8($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $81_1 = 0.0, $10_1 = 0, $86_1 = 0.0, $95_1 = 0.0, $112_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 56 | 0) >> 3] = $0_1;
  HEAP32[($4_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
  $81_1 = +HEAPF64[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 3];
  label$1 : {
   label$2 : {
    if (!(Math_abs($81_1) < 2147483648.0)) {
     break label$2
    }
    $10_1 = ~~$81_1;
    break label$1;
   }
   $10_1 = -2147483648;
  }
  HEAP32[($4_1 + 20 | 0) >> 2] = $10_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  HEAPF64[($4_1 + 24 | 0) >> 3] = +(0 | 0);
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $86_1 = +$729(+(+HEAPF64[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3]));
    HEAPF64[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $86_1;
    HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  label$5 : {
   label$6 : {
    if (!(+HEAPF64[($4_1 + 56 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
     break label$6
    }
    (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +$209(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 32 | 0) >> 3] = wasm2js_f64$0;
    break label$5;
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$7
     }
     $95_1 = +$734(+(+HEAPF64[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3]), +(+HEAPF64[($4_1 + 56 | 0) >> 3]));
     HEAPF64[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $95_1 / +HEAPF64[($4_1 + 56 | 0) >> 3];
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
   (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +$209(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 32 | 0) >> 3] = wasm2js_f64$0;
  }
  (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = (+HEAPF64[($4_1 + 56 | 0) >> 3] - 1.0) * +HEAPF64[($4_1 + 24 | 0) >> 3] - +HEAPF64[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 3] / 2.0 * +$729(+(+HEAPF64[($4_1 + 32 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
  $863(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $112_1 = -+HEAPF64[($4_1 + 40 | 0) >> 3];
  global$0 = $4_1 + 64 | 0;
  return +$112_1;
 }
 
 function $9($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $35_1 = 0, $37_1 = 0, $74_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $3_1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $6(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$1
   }
   $875(global$3 + 6568 | 0 | 0, 0 | 0) | 0;
   fimport$0(-1 | 0);
   abort();
  }
  label$2 : {
   if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$2
   }
   $875(global$3 + 6515 | 0 | 0, 0 | 0) | 0;
   fimport$0(-1 | 0);
   abort();
  }
  $35_1 = 3;
  $37_1 = 8;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862(((HEAP32[($6_1 + 56 | 0) >> 2] | 0) << $35_1 | 0) + $37_1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
  HEAPF64[(HEAP32[($6_1 + 44 | 0) >> 2] | 0) >> 3] = +(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0);
  $868((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $37_1 | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 56 | 0) >> 2] | 0) << $35_1 | 0 | 0) | 0;
  HEAP32[$6_1 >> 2] = global$4 + 0 | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAPF64[($6_1 + 24 | 0) >> 3] = -2.0;
    HEAPF64[($6_1 + 16 | 0) >> 3] = 2.0;
    (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = +$156($6_1 | 0, +(+HEAPF64[($6_1 + 24 | 0) >> 3]), +(+HEAPF64[($6_1 + 16 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 32 | 0) >> 3] = wasm2js_f64$0;
    break label$3;
   }
   HEAPF64[($6_1 + 32 | 0) >> 3] = +HEAPF64[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 3];
  }
  $7(HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6_1 + 32 | 0) >> 3]), HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0);
  $74_1 = +HEAPF64[($6_1 + 32 | 0) >> 3];
  global$0 = $6_1 + 64 | 0;
  return +$74_1;
 }
 
 function $10($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  $3_1 = +$3_1;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $315_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $8_1 = global$0 - 192 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 188 | 0) >> 2] = $0_1;
  HEAPF64[($8_1 + 176 | 0) >> 3] = $1_1;
  HEAPF64[($8_1 + 168 | 0) >> 3] = $2_1;
  HEAPF64[($8_1 + 160 | 0) >> 3] = $3_1;
  HEAPF64[($8_1 + 152 | 0) >> 3] = $4_1;
  HEAP32[($8_1 + 148 | 0) >> 2] = $5_1;
  HEAPF64[($8_1 + 8 | 0) >> 3] = +HEAPF64[($8_1 + 152 | 0) >> 3];
  HEAPF64[($8_1 + 136 | 0) >> 3] = (3.0 - Math_sqrt(5.0)) / 2.0;
  HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] = +HEAPF64[($8_1 + 176 | 0) >> 3] + +HEAPF64[($8_1 + 136 | 0) >> 3] * (+HEAPF64[($8_1 + 168 | 0) >> 3] - +HEAPF64[($8_1 + 176 | 0) >> 3]);
  HEAPF64[($8_1 + 48 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3];
  HEAPF64[($8_1 + 56 | 0) >> 3] = +HEAPF64[($8_1 + 48 | 0) >> 3];
  HEAPF64[($8_1 + 120 | 0) >> 3] = +(0 | 0);
  (wasm2js_i32$0 = $8_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($8_1 + 188 | 0) >> 2] | 0) >> 2] | 0 | 0](+HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3], HEAP32[((HEAP32[($8_1 + 188 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
  HEAPF64[($8_1 + 24 | 0) >> 3] = +HEAPF64[($8_1 + 16 | 0) >> 3];
  HEAPF64[($8_1 + 32 | 0) >> 3] = +HEAPF64[($8_1 + 24 | 0) >> 3];
  HEAPF64[($8_1 + 112 | 0) >> 3] = .5 * (+HEAPF64[($8_1 + 176 | 0) >> 3] + +HEAPF64[($8_1 + 168 | 0) >> 3]);
  HEAPF64[($8_1 + 80 | 0) >> 3] = +HEAPF64[($8_1 + 8 | 0) >> 3] * Math_abs(+HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3]) + +HEAPF64[($8_1 + 160 | 0) >> 3];
  HEAPF64[($8_1 + 72 | 0) >> 3] = 2.0 * +HEAPF64[($8_1 + 80 | 0) >> 3];
  label$1 : {
   label$2 : while (1) {
    if (!(Math_abs(+HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] - +HEAPF64[($8_1 + 112 | 0) >> 3]) > +HEAPF64[($8_1 + 72 | 0) >> 3] - .5 * (+HEAPF64[($8_1 + 168 | 0) >> 3] - +HEAPF64[($8_1 + 176 | 0) >> 3]) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($8_1 + 104 | 0) >> 3] = +(0 | 0);
    HEAPF64[($8_1 + 96 | 0) >> 3] = +(0 | 0);
    HEAPF64[($8_1 + 88 | 0) >> 3] = +(0 | 0);
    label$3 : {
     if (!(Math_abs(+HEAPF64[($8_1 + 120 | 0) >> 3]) > +HEAPF64[($8_1 + 80 | 0) >> 3] & 1 | 0)) {
      break label$3
     }
     HEAPF64[($8_1 + 88 | 0) >> 3] = (+HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] - +HEAPF64[($8_1 + 48 | 0) >> 3]) * (+HEAPF64[($8_1 + 16 | 0) >> 3] - +HEAPF64[($8_1 + 32 | 0) >> 3]);
     HEAPF64[($8_1 + 96 | 0) >> 3] = (+HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] - +HEAPF64[($8_1 + 56 | 0) >> 3]) * (+HEAPF64[($8_1 + 16 | 0) >> 3] - +HEAPF64[($8_1 + 24 | 0) >> 3]);
     HEAPF64[($8_1 + 104 | 0) >> 3] = (+HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] - +HEAPF64[($8_1 + 56 | 0) >> 3]) * +HEAPF64[($8_1 + 96 | 0) >> 3] - (+HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] - +HEAPF64[($8_1 + 48 | 0) >> 3]) * +HEAPF64[($8_1 + 88 | 0) >> 3];
     HEAPF64[($8_1 + 96 | 0) >> 3] = 2.0 * (+HEAPF64[($8_1 + 96 | 0) >> 3] - +HEAPF64[($8_1 + 88 | 0) >> 3]);
     label$4 : {
      label$5 : {
       if (!(+HEAPF64[($8_1 + 96 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$5
       }
       HEAPF64[($8_1 + 104 | 0) >> 3] = -+HEAPF64[($8_1 + 104 | 0) >> 3];
       break label$4;
      }
      HEAPF64[($8_1 + 96 | 0) >> 3] = -+HEAPF64[($8_1 + 96 | 0) >> 3];
     }
     HEAPF64[($8_1 + 88 | 0) >> 3] = +HEAPF64[($8_1 + 120 | 0) >> 3];
     HEAPF64[($8_1 + 120 | 0) >> 3] = +HEAPF64[($8_1 + 128 | 0) >> 3];
    }
    label$6 : {
     label$7 : {
      if (!(Math_abs(+HEAPF64[($8_1 + 104 | 0) >> 3]) < Math_abs(.5 * +HEAPF64[($8_1 + 96 | 0) >> 3] * +HEAPF64[($8_1 + 88 | 0) >> 3]) & 1 | 0)) {
       break label$7
      }
      if (!(+HEAPF64[($8_1 + 104 | 0) >> 3] < +HEAPF64[($8_1 + 96 | 0) >> 3] * (+HEAPF64[($8_1 + 176 | 0) >> 3] - +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3]) & 1 | 0)) {
       break label$7
      }
      if (!(+HEAPF64[($8_1 + 104 | 0) >> 3] < +HEAPF64[($8_1 + 96 | 0) >> 3] * (+HEAPF64[($8_1 + 168 | 0) >> 3] - +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3]) & 1 | 0)) {
       break label$7
      }
      HEAPF64[($8_1 + 128 | 0) >> 3] = +HEAPF64[($8_1 + 104 | 0) >> 3] / +HEAPF64[($8_1 + 96 | 0) >> 3];
      HEAPF64[($8_1 + 64 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] + +HEAPF64[($8_1 + 128 | 0) >> 3];
      label$8 : {
       label$9 : {
        if (+HEAPF64[($8_1 + 64 | 0) >> 3] - +HEAPF64[($8_1 + 176 | 0) >> 3] < +HEAPF64[($8_1 + 72 | 0) >> 3] & 1 | 0) {
         break label$9
        }
        if (!(+HEAPF64[($8_1 + 168 | 0) >> 3] - +HEAPF64[($8_1 + 64 | 0) >> 3] < +HEAPF64[($8_1 + 72 | 0) >> 3] & 1 | 0)) {
         break label$8
        }
       }
       label$10 : {
        label$11 : {
         if (!(+HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] < +HEAPF64[($8_1 + 112 | 0) >> 3] & 1 | 0)) {
          break label$11
         }
         HEAPF64[($8_1 + 128 | 0) >> 3] = +HEAPF64[($8_1 + 80 | 0) >> 3];
         break label$10;
        }
        HEAPF64[($8_1 + 128 | 0) >> 3] = -+HEAPF64[($8_1 + 80 | 0) >> 3];
       }
      }
      break label$6;
     }
     label$12 : {
      label$13 : {
       if (!(+HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] < +HEAPF64[($8_1 + 112 | 0) >> 3] & 1 | 0)) {
        break label$13
       }
       HEAPF64[($8_1 + 120 | 0) >> 3] = +HEAPF64[($8_1 + 168 | 0) >> 3] - +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3];
       break label$12;
      }
      HEAPF64[($8_1 + 120 | 0) >> 3] = +HEAPF64[($8_1 + 176 | 0) >> 3] - +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3];
     }
     HEAPF64[($8_1 + 128 | 0) >> 3] = +HEAPF64[($8_1 + 136 | 0) >> 3] * +HEAPF64[($8_1 + 120 | 0) >> 3];
    }
    label$14 : {
     label$15 : {
      if (!(Math_abs(+HEAPF64[($8_1 + 128 | 0) >> 3]) >= +HEAPF64[($8_1 + 80 | 0) >> 3] & 1 | 0)) {
       break label$15
      }
      HEAPF64[($8_1 + 64 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] + +HEAPF64[($8_1 + 128 | 0) >> 3];
      break label$14;
     }
     label$16 : {
      label$17 : {
       if (!(+HEAPF64[($8_1 + 128 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$17
       }
       HEAPF64[($8_1 + 64 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] + +HEAPF64[($8_1 + 80 | 0) >> 3];
       break label$16;
      }
      HEAPF64[($8_1 + 64 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] - +HEAPF64[($8_1 + 80 | 0) >> 3];
     }
    }
    (wasm2js_i32$0 = $8_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($8_1 + 188 | 0) >> 2] | 0) >> 2] | 0 | 0](+HEAPF64[($8_1 + 64 | 0) >> 3], HEAP32[((HEAP32[($8_1 + 188 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
    label$18 : {
     label$19 : {
      if (!(+HEAPF64[($8_1 + 40 | 0) >> 3] <= +HEAPF64[($8_1 + 16 | 0) >> 3] & 1 | 0)) {
       break label$19
      }
      label$20 : {
       label$21 : {
        if (!(+HEAPF64[($8_1 + 64 | 0) >> 3] < +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
         break label$21
        }
        HEAPF64[($8_1 + 168 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3];
        break label$20;
       }
       HEAPF64[($8_1 + 176 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3];
      }
      HEAPF64[($8_1 + 56 | 0) >> 3] = +HEAPF64[($8_1 + 48 | 0) >> 3];
      HEAPF64[($8_1 + 32 | 0) >> 3] = +HEAPF64[($8_1 + 24 | 0) >> 3];
      HEAPF64[($8_1 + 48 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3];
      HEAPF64[($8_1 + 24 | 0) >> 3] = +HEAPF64[($8_1 + 16 | 0) >> 3];
      HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] = +HEAPF64[($8_1 + 64 | 0) >> 3];
      HEAPF64[($8_1 + 16 | 0) >> 3] = +HEAPF64[($8_1 + 40 | 0) >> 3];
      break label$18;
     }
     label$22 : {
      label$23 : {
       if (!(+HEAPF64[($8_1 + 64 | 0) >> 3] < +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
        break label$23
       }
       HEAPF64[($8_1 + 176 | 0) >> 3] = +HEAPF64[($8_1 + 64 | 0) >> 3];
       break label$22;
      }
      HEAPF64[($8_1 + 168 | 0) >> 3] = +HEAPF64[($8_1 + 64 | 0) >> 3];
     }
     label$24 : {
      label$25 : {
       label$26 : {
        if (+HEAPF64[($8_1 + 40 | 0) >> 3] <= +HEAPF64[($8_1 + 24 | 0) >> 3] & 1 | 0) {
         break label$26
        }
        if (!(+HEAPF64[($8_1 + 48 | 0) >> 3] == +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
         break label$25
        }
       }
       HEAPF64[($8_1 + 56 | 0) >> 3] = +HEAPF64[($8_1 + 48 | 0) >> 3];
       HEAPF64[($8_1 + 32 | 0) >> 3] = +HEAPF64[($8_1 + 24 | 0) >> 3];
       HEAPF64[($8_1 + 48 | 0) >> 3] = +HEAPF64[($8_1 + 64 | 0) >> 3];
       HEAPF64[($8_1 + 24 | 0) >> 3] = +HEAPF64[($8_1 + 40 | 0) >> 3];
       break label$24;
      }
      label$27 : {
       label$28 : {
        if (+HEAPF64[($8_1 + 40 | 0) >> 3] <= +HEAPF64[($8_1 + 32 | 0) >> 3] & 1 | 0) {
         break label$28
        }
        if (+HEAPF64[($8_1 + 56 | 0) >> 3] == +HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3] & 1 | 0) {
         break label$28
        }
        if (!(+HEAPF64[($8_1 + 56 | 0) >> 3] == +HEAPF64[($8_1 + 48 | 0) >> 3] & 1 | 0)) {
         break label$27
        }
       }
       HEAPF64[($8_1 + 56 | 0) >> 3] = +HEAPF64[($8_1 + 64 | 0) >> 3];
       HEAPF64[($8_1 + 32 | 0) >> 3] = +HEAPF64[($8_1 + 40 | 0) >> 3];
      }
     }
    }
    HEAPF64[($8_1 + 112 | 0) >> 3] = .5 * (+HEAPF64[($8_1 + 176 | 0) >> 3] + +HEAPF64[($8_1 + 168 | 0) >> 3]);
    HEAPF64[($8_1 + 80 | 0) >> 3] = +HEAPF64[($8_1 + 8 | 0) >> 3] * Math_abs(+HEAPF64[(HEAP32[($8_1 + 148 | 0) >> 2] | 0) >> 3]) + +HEAPF64[($8_1 + 160 | 0) >> 3];
    HEAPF64[($8_1 + 72 | 0) >> 3] = 2.0 * +HEAPF64[($8_1 + 80 | 0) >> 3];
    continue label$2;
   };
  }
  $315_1 = +HEAPF64[($8_1 + 16 | 0) >> 3];
  global$0 = $8_1 + 192 | 0;
  return +$315_1;
 }
 
 function $11($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = +$8_1;
  $9_1 = +$9_1;
  $10_1 = +$10_1;
  $11_1 = +$11_1;
  $12_1 = $12_1 | 0;
  var $15_1 = 0, $201_1 = 0, $223_1 = 0, $276_1 = 0, $283_1 = 0, $394_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $15_1 = global$0 - 192 | 0;
  global$0 = $15_1;
  HEAP32[($15_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($15_1 + 184 | 0) >> 2] = $1_1;
  HEAP32[($15_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($15_1 + 176 | 0) >> 2] = $3_1;
  HEAP32[($15_1 + 172 | 0) >> 2] = $4_1;
  HEAPF64[($15_1 + 160 | 0) >> 3] = $5_1;
  HEAP32[($15_1 + 156 | 0) >> 2] = $6_1;
  HEAP32[($15_1 + 152 | 0) >> 2] = $7_1;
  HEAPF64[($15_1 + 144 | 0) >> 3] = $8_1;
  HEAPF64[($15_1 + 136 | 0) >> 3] = $9_1;
  HEAPF64[($15_1 + 128 | 0) >> 3] = $10_1;
  HEAPF64[($15_1 + 120 | 0) >> 3] = $11_1;
  HEAP32[($15_1 + 116 | 0) >> 2] = $12_1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862(64 | 0) | 0), HEAP32[(wasm2js_i32$0 + 80 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 76 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[(HEAP32[($15_1 + 152 | 0) >> 2] | 0) >> 2] = 0;
  HEAP32[($15_1 + 100 | 0) >> 2] = 0;
  HEAP32[($15_1 + 108 | 0) >> 2] = 0;
  HEAP32[($15_1 + 96 | 0) >> 2] = HEAP32[($15_1 + 176 | 0) >> 2] | 0;
  HEAP32[($15_1 + 88 | 0) >> 2] = HEAP32[($15_1 + 156 | 0) >> 2] | 0;
  HEAPF64[($15_1 + 32 | 0) >> 3] = Math_sqrt(+HEAPF64[($15_1 + 144 | 0) >> 3]);
  HEAP32[($15_1 + 92 | 0) >> 2] = 0;
  HEAPF64[($15_1 + 48 | 0) >> 3] = 1.0;
  HEAPF64[$15_1 >> 3] = 1.0;
  HEAP32[($15_1 + 112 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($15_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($15_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($15_1 + 112 | 0) >> 2] = (HEAP32[($15_1 + 112 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!(+HEAPF64[($15_1 + 160 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
    break label$3
   }
   HEAPF64[($15_1 + 160 | 0) >> 3] = 1.0e3;
   HEAPF64[($15_1 + 8 | 0) >> 3] = +(0 | 0);
   HEAPF64[($15_1 + 16 | 0) >> 3] = +(0 | 0);
   HEAP32[($15_1 + 112 | 0) >> 2] = 0;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($15_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAPF64[($15_1 + 16 | 0) >> 3] = +HEAPF64[($15_1 + 16 | 0) >> 3] + +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[($15_1 + 8 | 0) >> 3] = +HEAPF64[($15_1 + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($15_1 + 112 | 0) >> 2] = (HEAP32[($15_1 + 112 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
   HEAPF64[($15_1 + 16 | 0) >> 3] = Math_sqrt(+HEAPF64[($15_1 + 16 | 0) >> 3]);
   HEAPF64[($15_1 + 8 | 0) >> 3] = Math_sqrt(+HEAPF64[($15_1 + 8 | 0) >> 3]);
   label$6 : {
    label$7 : {
     if (!(+HEAPF64[($15_1 + 16 | 0) >> 3] > +HEAPF64[($15_1 + 8 | 0) >> 3] & 1 | 0)) {
      break label$7
     }
     HEAPF64[($15_1 + 160 | 0) >> 3] = +HEAPF64[($15_1 + 160 | 0) >> 3] * +HEAPF64[($15_1 + 16 | 0) >> 3];
     break label$6;
    }
    HEAPF64[($15_1 + 160 | 0) >> 3] = +HEAPF64[($15_1 + 160 | 0) >> 3] * +HEAPF64[($15_1 + 8 | 0) >> 3];
   }
  }
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $80(HEAP32[($15_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 172 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 32 | 0) >> 3]), HEAP32[($15_1 + 68 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 92 | 0) >> 2] = wasm2js_i32$1;
  label$8 : {
   if (!((HEAP32[($15_1 + 92 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
    break label$8
   }
   HEAP32[($15_1 + 108 | 0) >> 2] = 15;
  }
  HEAP32[($15_1 + 112 | 0) >> 2] = 0;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($15_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$9
    }
    HEAPF64[((HEAP32[($15_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[($15_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($15_1 + 116 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($15_1 + 112 | 0) >> 2] = (HEAP32[($15_1 + 112 | 0) >> 2] | 0) + 1 | 0;
    continue label$10;
   };
  }
  (wasm2js_i32$0 = $15_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($15_1 + 188 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($15_1 + 84 | 0) >> 2] | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0, HEAP32[((HEAP32[($15_1 + 188 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
  label$11 : {
   label$12 : {
    if (+HEAPF64[($15_1 + 40 | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
     break label$12
    }
    if (!(+HEAPF64[($15_1 + 40 | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
     break label$11
    }
   }
   $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
   HEAP32[($15_1 + 108 | 0) >> 2] = 15;
  }
  label$13 : {
   if (!(+HEAPF64[($15_1 + 40 | 0) >> 3] != +HEAPF64[($15_1 + 40 | 0) >> 3] & 1 | 0)) {
    break label$13
   }
   $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
   HEAP32[($15_1 + 108 | 0) >> 2] = 15;
  }
  label$14 : {
   if (!((HEAP32[($15_1 + 96 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$14
   }
   HEAP32[($15_1 + 96 | 0) >> 2] = HEAP32[($15_1 + 176 | 0) >> 2] | 0;
  }
  HEAPF64[($15_1 + 24 | 0) >> 3] = +HEAPF64[($15_1 + 40 | 0) >> 3];
  label$15 : while (1) {
   $201_1 = 0;
   label$16 : {
    if (HEAP32[($15_1 + 108 | 0) >> 2] | 0) {
     break label$16
    }
    $201_1 = (HEAP32[(HEAP32[($15_1 + 152 | 0) >> 2] | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 88 | 0) >> 2] | 0 | 0);
   }
   label$17 : {
    if (!($201_1 & 1 | 0)) {
     break label$17
    }
    HEAP32[(HEAP32[($15_1 + 152 | 0) >> 2] | 0) >> 2] = (HEAP32[(HEAP32[($15_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($15_1 + 100 | 0) >> 2] = (HEAP32[($15_1 + 100 | 0) >> 2] | 0) + 1 | 0;
    $223_1 = 1;
    $119(HEAP32[($15_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 80 | 0) >> 2] | 0 | 0, $223_1 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, $223_1 | 0);
    HEAP32[($15_1 + 112 | 0) >> 2] = 0;
    label$18 : {
     label$19 : while (1) {
      if (!((HEAP32[($15_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$18
      }
      HEAPF64[((HEAP32[($15_1 + 64 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($15_1 + 112 | 0) >> 2] = (HEAP32[($15_1 + 112 | 0) >> 2] | 0) + 1 | 0;
      continue label$19;
     };
    }
    (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $87(HEAP32[($15_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 84 | 0) >> 2] | 0 | 0, $15_1 + 40 | 0 | 0, HEAP32[($15_1 + 68 | 0) >> 2] | 0 | 0, $15_1 | 0, HEAP32[($15_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 172 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 160 | 0) >> 3]), HEAP32[($15_1 + 156 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 32 | 0) >> 3]), +(+HEAPF64[($15_1 + 128 | 0) >> 3]), +(+HEAPF64[($15_1 + 136 | 0) >> 3]), +(+HEAPF64[($15_1 + 120 | 0) >> 3]), HEAP32[($15_1 + 116 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 104 | 0) >> 2] = wasm2js_i32$1;
    label$20 : {
     if (!((HEAP32[($15_1 + 104 | 0) >> 2] | 0 | 0) == (100 | 0) & 1 | 0)) {
      break label$20
     }
     $875(global$3 + 2578 | 0 | 0, 0 | 0) | 0;
     break label$17;
    }
    $276_1 = 1;
    $119(HEAP32[($15_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 68 | 0) >> 2] | 0 | 0, (HEAP32[($15_1 + 80 | 0) >> 2] | 0) + 8 | 0 | 0, $276_1 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, $276_1 | 0);
    $283_1 = 1;
    $119(HEAP32[($15_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 68 | 0) >> 2] | 0 | 0, (HEAP32[($15_1 + 80 | 0) >> 2] | 0) + 24 | 0 | 0, $283_1 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, $283_1 | 0);
    HEAPF64[((HEAP32[($15_1 + 80 | 0) >> 2] | 0) + 16 | 0) >> 3] = (+HEAPF64[((HEAP32[($15_1 + 80 | 0) >> 2] | 0) + 8 | 0) >> 3] - +HEAPF64[((HEAP32[($15_1 + 80 | 0) >> 2] | 0) + 24 | 0) >> 3]) / +HEAPF64[(HEAP32[($15_1 + 80 | 0) >> 2] | 0) >> 3];
    label$21 : {
     if (!(+HEAPF64[((HEAP32[($15_1 + 80 | 0) >> 2] | 0) + 16 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
      break label$21
     }
     HEAPF64[((HEAP32[($15_1 + 80 | 0) >> 2] | 0) + 16 | 0) >> 3] = +(0 | 0);
    }
    label$22 : {
     label$23 : {
      if (!((HEAP32[($15_1 + 100 | 0) >> 2] | 0 | 0) == (HEAP32[($15_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$23
      }
      HEAP32[($15_1 + 112 | 0) >> 2] = 0;
      label$24 : {
       label$25 : while (1) {
        if (!((HEAP32[($15_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$24
        }
        HEAPF64[((HEAP32[($15_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[($15_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($15_1 + 112 | 0) >> 2] = (HEAP32[($15_1 + 112 | 0) >> 2] | 0) + 1 | 0;
        continue label$25;
       };
      }
      HEAP32[($15_1 + 100 | 0) >> 2] = 0;
      break label$22;
     }
     HEAP32[($15_1 + 112 | 0) >> 2] = 0;
     label$26 : {
      label$27 : while (1) {
       if (!((HEAP32[($15_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$26
       }
       HEAPF64[((HEAP32[($15_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 80 | 0) >> 2] | 0) + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($15_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($15_1 + 112 | 0) >> 2] = (HEAP32[($15_1 + 112 | 0) >> 2] | 0) + 1 | 0;
       continue label$27;
      };
     }
    }
    (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $84(+(+HEAPF64[($15_1 + 40 | 0) >> 3]), HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 24 | 0) >> 3]), HEAP32[($15_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 172 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 144 | 0) >> 3]), +(+HEAPF64[($15_1 + 136 | 0) >> 3]), +(+HEAPF64[($15_1 + 128 | 0) >> 3]), HEAP32[($15_1 + 104 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 108 | 0) >> 2] = wasm2js_i32$1;
    HEAPF64[($15_1 + 24 | 0) >> 3] = +HEAPF64[($15_1 + 40 | 0) >> 3];
    HEAP32[($15_1 + 112 | 0) >> 2] = 0;
    label$28 : {
     label$29 : while (1) {
      if (!((HEAP32[($15_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$28
      }
      HEAPF64[((HEAP32[($15_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 116 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($15_1 + 112 | 0) >> 2] = (HEAP32[($15_1 + 112 | 0) >> 2] | 0) + 1 | 0;
      continue label$29;
     };
    }
    continue label$15;
   }
   break label$15;
  };
  label$30 : {
   if (HEAP32[($15_1 + 108 | 0) >> 2] | 0) {
    break label$30
   }
   if (!((HEAP32[(HEAP32[($15_1 + 152 | 0) >> 2] | 0) >> 2] | 0 | 0) >= (HEAP32[($15_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$30
   }
   HEAP32[($15_1 + 108 | 0) >> 2] = 4;
  }
  $863(HEAP32[($15_1 + 80 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 76 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 72 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 68 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 60 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 64 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 84 | 0) >> 2] | 0 | 0);
  $394_1 = HEAP32[($15_1 + 108 | 0) >> 2] | 0;
  global$0 = $15_1 + 192 | 0;
  return $394_1 | 0;
 }
 
 function $12($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = +$8_1;
  $9_1 = +$9_1;
  $10_1 = +$10_1;
  $11_1 = +$11_1;
  $12_1 = $12_1 | 0;
  var $15_1 = 0, $33_1 = 0, $73_1 = 0, $87_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $15_1 = global$0 - 96 | 0;
  global$0 = $15_1;
  HEAP32[($15_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($15_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($15_1 + 84 | 0) >> 2] = $2_1;
  HEAP32[($15_1 + 80 | 0) >> 2] = $3_1;
  HEAP32[($15_1 + 76 | 0) >> 2] = $4_1;
  HEAPF64[($15_1 + 64 | 0) >> 3] = $5_1;
  HEAP32[($15_1 + 60 | 0) >> 2] = $6_1;
  HEAP32[($15_1 + 56 | 0) >> 2] = $7_1;
  HEAPF64[($15_1 + 48 | 0) >> 3] = $8_1;
  HEAPF64[($15_1 + 40 | 0) >> 3] = $9_1;
  HEAPF64[($15_1 + 32 | 0) >> 3] = $10_1;
  HEAPF64[($15_1 + 24 | 0) >> 3] = $11_1;
  HEAP32[($15_1 + 20 | 0) >> 2] = $12_1;
  HEAP32[($15_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($15_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $33_1 = (HEAP32[($15_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$33_1 >> 3] = +HEAPF64[$33_1 >> 3] * +HEAPF64[((HEAP32[($15_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($15_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 / +HEAPF64[((HEAP32[($15_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($15_1 + 12 | 0) >> 2] = (HEAP32[($15_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $11(HEAP32[($15_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 64 | 0) >> 3]), HEAP32[($15_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 56 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 48 | 0) >> 3]), +(+HEAPF64[($15_1 + 40 | 0) >> 3]), +(+HEAPF64[($15_1 + 32 | 0) >> 3]), +(+HEAPF64[($15_1 + 24 | 0) >> 3]), HEAP32[($15_1 + 20 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($15_1 + 12 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($15_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $73_1 = (HEAP32[($15_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$73_1 >> 3] = +HEAPF64[$73_1 >> 3] * +HEAPF64[((HEAP32[($15_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($15_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 / +HEAPF64[((HEAP32[($15_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($15_1 + 12 | 0) >> 2] = (HEAP32[($15_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $87_1 = HEAP32[($15_1 + 16 | 0) >> 2] | 0;
  global$0 = $15_1 + 96 | 0;
  return $87_1 | 0;
 }
 
 function $13($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $59_1 = 0, $228_1 = 0.0, $111_1 = 0, $156_1 = 0, $251_1 = 0.0, $208_1 = 0;
  $7_1 = global$0 - 64 | 0;
  HEAP32[($7_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = ((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + (HEAP32[($7_1 + 48 | 0) >> 2] | 0) | 0) - 1 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) >= (HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($7_1 + 36 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      HEAP32[($7_1 + 32 | 0) >> 2] = 0;
      label$5 : {
       label$6 : while (1) {
        if (!((HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) <= (HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$5
        }
        $59_1 = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0;
        HEAPF64[$59_1 >> 3] = +HEAPF64[$59_1 >> 3] + +HEAPF64[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 36 | 0) >> 2] | 0) - (HEAP32[($7_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($7_1 + 32 | 0) >> 2] = (HEAP32[($7_1 + 32 | 0) >> 2] | 0) + 1 | 0;
        continue label$6;
       };
      }
      HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($7_1 + 36 | 0) >> 2] = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
    label$7 : {
     label$8 : while (1) {
      if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      HEAP32[($7_1 + 28 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[($7_1 + 16 | 0) >> 3] = +(HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) + +(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0);
      label$9 : {
       label$10 : {
        if (!(+HEAPF64[($7_1 + 16 | 0) >> 3] < +(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$10
        }
        $228_1 = +HEAPF64[($7_1 + 16 | 0) >> 3];
        break label$9;
       }
       $228_1 = +(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0);
      }
      HEAPF64[($7_1 + 8 | 0) >> 3] = $228_1;
      HEAP32[($7_1 + 32 | 0) >> 2] = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
      label$11 : {
       label$12 : while (1) {
        if (!(+(HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) < +HEAPF64[($7_1 + 8 | 0) >> 3] & 1 | 0)) {
         break label$11
        }
        $111_1 = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0;
        HEAPF64[$111_1 >> 3] = +HEAPF64[$111_1 >> 3] + +HEAPF64[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 36 | 0) >> 2] | 0) - (HEAP32[($7_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($7_1 + 32 | 0) >> 2] = (HEAP32[($7_1 + 32 | 0) >> 2] | 0) + 1 | 0;
        continue label$12;
       };
      }
      HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$8;
     };
    }
    break label$1;
   }
   HEAP32[($7_1 + 36 | 0) >> 2] = 0;
   label$13 : {
    label$14 : while (1) {
     if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$13
     }
     HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAP32[($7_1 + 32 | 0) >> 2] = 0;
     label$15 : {
      label$16 : while (1) {
       if (!((HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) <= (HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       $156_1 = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$156_1 >> 3] = +HEAPF64[$156_1 >> 3] + +HEAPF64[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 36 | 0) >> 2] | 0) - (HEAP32[($7_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($7_1 + 32 | 0) >> 2] = (HEAP32[($7_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       continue label$16;
      };
     }
     HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$14;
    };
   }
   HEAP32[($7_1 + 36 | 0) >> 2] = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
   label$17 : {
    label$18 : while (1) {
     if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$17
     }
     HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAP32[($7_1 + 28 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     HEAPF64[($7_1 + 16 | 0) >> 3] = +(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) + +(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0);
     label$19 : {
      label$20 : {
       if (!(+HEAPF64[($7_1 + 16 | 0) >> 3] < +(HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$20
       }
       $251_1 = +HEAPF64[($7_1 + 16 | 0) >> 3];
       break label$19;
      }
      $251_1 = +(HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0);
     }
     HEAPF64[($7_1 + 8 | 0) >> 3] = $251_1;
     HEAP32[($7_1 + 32 | 0) >> 2] = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
     label$21 : {
      label$22 : while (1) {
       if (!(+(HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) < +HEAPF64[($7_1 + 8 | 0) >> 3] & 1 | 0)) {
        break label$21
       }
       $208_1 = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$208_1 >> 3] = +HEAPF64[$208_1 >> 3] + +HEAPF64[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 36 | 0) >> 2] | 0) - (HEAP32[($7_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($7_1 + 32 | 0) >> 2] = (HEAP32[($7_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       continue label$22;
      };
     }
     HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$18;
    };
   }
  }
  return;
 }
 
 function $14($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $12_1 = 0, $366_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $12_1 = global$0 - 64 | 0;
  global$0 = $12_1;
  HEAP32[($12_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($12_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($12_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($12_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($12_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($12_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($12_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($12_1 + 32 | 0) >> 2] = $7_1;
  HEAP32[($12_1 + 28 | 0) >> 2] = $8_1;
  HEAP32[($12_1 + 24 | 0) >> 2] = $9_1;
  HEAP32[($12_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   if (((HEAP32[($12_1 + 48 | 0) >> 2] | 0) + (HEAP32[($12_1 + 44 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 40 | 0) >> 2] | 0) | 0) {
    break label$1
   }
   HEAP32[($12_1 + 36 | 0) >> 2] = 0;
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($12_1 + 28 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$3
    }
    if (!((HEAP32[($12_1 + 28 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
     break label$2
    }
   }
   $875(global$3 + 6199 | 0 | 0, 0 | 0) | 0;
   fimport$0(-1 | 0);
   abort();
  }
  label$4 : {
   label$5 : {
    if (!(((HEAP32[($12_1 + 56 | 0) >> 2] | 0) + (HEAP32[($12_1 + 44 | 0) >> 2] | 0) | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($12_1 + 12 | 0) >> 2] = HEAP32[($12_1 + 32 | 0) >> 2] | 0;
    break label$4;
   }
   label$6 : {
    label$7 : {
     if (HEAP32[($12_1 + 28 | 0) >> 2] | 0) {
      break label$7
     }
     HEAP32[($12_1 + 12 | 0) >> 2] = HEAP32[($12_1 + 32 | 0) >> 2] | 0;
     break label$6;
    }
    HEAP32[($12_1 + 12 | 0) >> 2] = (HEAP32[($12_1 + 32 | 0) >> 2] | 0) + 1 | 0;
   }
  }
  label$8 : {
   label$9 : {
    if ((HEAP32[($12_1 + 60 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$9
    }
    if ((HEAP32[($12_1 + 56 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$9
    }
    if ((HEAP32[($12_1 + 52 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$9
    }
    if ((HEAP32[($12_1 + 24 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0) {
     break label$9
    }
    if ((HEAP32[($12_1 + 48 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$9
    }
    if ((HEAP32[($12_1 + 44 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$9
    }
    if (!((HEAP32[($12_1 + 40 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$8
    }
   }
   $875(global$3 + 6461 | 0 | 0, 0 | 0) | 0;
   fimport$0(-1 | 0);
   abort();
  }
  (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $862(((((((((((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (HEAP32[($12_1 + 52 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 48 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 40 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 12 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 24 | 0) >> 2] | 0) | 0) - (HEAP32[($12_1 + 56 | 0) >> 2] | 0) | 0) - Math_imul(HEAP32[($12_1 + 36 | 0) >> 2] | 0, HEAP32[($12_1 + 44 | 0) >> 2] | 0) | 0) << 3 | 0) + 136 | 0) + Math_imul((((((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (HEAP32[($12_1 + 52 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 48 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 40 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0, ((((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (HEAP32[($12_1 + 52 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 48 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 40 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 12 | 0) >> 2] | 0) | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($12_1 + 60 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($12_1 + 56 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($12_1 + 52 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($12_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($12_1 + 24 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[($12_1 + 36 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($12_1 + 48 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($12_1 + 44 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 40 | 0) >> 2] = HEAP32[($12_1 + 40 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] = ((HEAP32[($12_1 + 24 | 0) >> 2] | 0) - (HEAP32[($12_1 + 56 | 0) >> 2] | 0) | 0) - Math_imul(HEAP32[($12_1 + 36 | 0) >> 2] | 0, HEAP32[($12_1 + 44 | 0) >> 2] | 0) | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] = HEAP32[($12_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 44 | 0) >> 2] = HEAP32[($12_1 + 32 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 120 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 124 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 128 | 0) >> 2] = HEAP32[($12_1 + 28 | 0) >> 2] | 0;
  HEAP32[($12_1 + 16 | 0) >> 2] = 0;
  label$10 : {
   label$11 : while (1) {
    if (!((HEAP32[($12_1 + 16 | 0) >> 2] | 0 | 0) < (((((((((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (HEAP32[($12_1 + 52 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 48 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 40 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 12 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 24 | 0) >> 2] | 0) | 0) - (HEAP32[($12_1 + 56 | 0) >> 2] | 0) | 0) - Math_imul(HEAP32[($12_1 + 36 | 0) >> 2] | 0, HEAP32[($12_1 + 44 | 0) >> 2] | 0) | 0) + Math_imul(((((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (HEAP32[($12_1 + 52 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 48 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 40 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 12 | 0) >> 2] | 0) | 0, ((((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (HEAP32[($12_1 + 52 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 48 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 40 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 12 | 0) >> 2] | 0) | 0) | 0 | 0) & 1 | 0)) {
     break label$10
    }
    HEAPF64[(((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($12_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($12_1 + 16 | 0) >> 2] = (HEAP32[($12_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$11;
   };
  }
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 56 | 0) >> 2] = (HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 136 | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 60 | 0) >> 2] = ((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($12_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 64 | 0) >> 2] = ((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 136 | 0) + (((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (HEAP32[($12_1 + 52 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 68 | 0) >> 2] = ((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 136 | 0) + ((((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (HEAP32[($12_1 + 52 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 48 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 2] = ((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 136 | 0) + (((((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (HEAP32[($12_1 + 52 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 48 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 84 | 0) >> 2] = ((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 136 | 0) + ((((((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (HEAP32[($12_1 + 52 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 48 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 40 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 76 | 0) >> 2] = ((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 136 | 0) + (((((((((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (HEAP32[($12_1 + 52 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 48 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 40 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 12 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 24 | 0) >> 2] | 0) | 0) - (HEAP32[($12_1 + 56 | 0) >> 2] | 0) | 0) - Math_imul(HEAP32[($12_1 + 36 | 0) >> 2] | 0, HEAP32[($12_1 + 44 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 12 | 0) >> 2] = 5;
  HEAPF64[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 88 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 96 | 0) >> 3] = 1.0;
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 80 | 0) >> 2] = Math_imul(((((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (HEAP32[($12_1 + 52 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 48 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 40 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 12 | 0) >> 2] | 0) | 0, ((((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (HEAP32[($12_1 + 52 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 48 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 40 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 12 | 0) >> 2] | 0) | 0);
  HEAP32[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + 52 | 0) >> 2] = ((((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (HEAP32[($12_1 + 52 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 48 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 40 | 0) >> 2] | 0) | 0) + (HEAP32[($12_1 + 12 | 0) >> 2] | 0) | 0;
  $366_1 = HEAP32[($12_1 + 20 | 0) >> 2] | 0;
  global$0 = $12_1 + 64 | 0;
  return $366_1 | 0;
 }
 
 function $15($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $342_1 = 0, $417_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($7_1 + 36 | 0) >> 2] = 5;
    HEAP32[($7_1 + 32 | 0) >> 2] = 2;
    HEAP32[($7_1 + 28 | 0) >> 2] = 5;
    break label$1;
   }
   HEAP32[($7_1 + 36 | 0) >> 2] = HEAP32[(HEAP32[($7_1 + 60 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($7_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  }
  label$3 : {
   label$4 : {
    if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($7_1 + 24 | 0) >> 2] = 2;
    HEAP32[($7_1 + 20 | 0) >> 2] = 1;
    HEAP32[($7_1 + 16 | 0) >> 2] = 2;
    break label$3;
   }
   HEAP32[($7_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[($7_1 + 56 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  }
  HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + 2 | 0;
  label$5 : {
   label$6 : {
    if ((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$6
    }
    if ((HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$6
    }
    if ((HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$6
    }
    if ((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0) {
     break label$6
    }
    if ((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$6
    }
    if ((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$6
    }
    if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$5
    }
   }
   $875(global$3 + 6461 | 0 | 0, 0 | 0) | 0;
   fimport$0(-1 | 0);
   abort();
  }
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(((((((((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 44 | 0) >> 2] | 0) | 0) << 3 | 0) + 304 | 0) + Math_imul((((((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0, ((((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($7_1 + 40 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 52 | 0) >> 2] = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 68 | 0) >> 2] = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 144 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 148 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 212 | 0) >> 2] = 0;
  HEAP32[($7_1 + 12 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) < (((((((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 44 | 0) >> 2] | 0) | 0) + Math_imul(((((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0, ((((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAPF64[(((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 304 | 0) + ((HEAP32[($7_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($7_1 + 12 | 0) >> 2] = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 304 | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 84 | 0) >> 2] = ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 304 | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 88 | 0) >> 2] = ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 304 | 0) + (((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 92 | 0) >> 2] = ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 304 | 0) + ((((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 96 | 0) >> 2] = ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 304 | 0) + (((((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 108 | 0) >> 2] = ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 304 | 0) + ((((((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 100 | 0) >> 2] = ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 304 | 0) + (((((((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 44 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] = 5;
  HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 112 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 120 | 0) >> 3] = 1.0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 104 | 0) >> 2] = Math_imul(((((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0, ((((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0);
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 76 | 0) >> 2] = ((((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 200 | 0) >> 2] = 1;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 160 | 0) >> 2] = 0;
  $342_1 = 1;
  label$9 : {
   if ((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) > (150 | 0) & 1 | 0) {
    break label$9
   }
   $342_1 = (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) > (12 | 0);
  }
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 208 | 0) >> 2] = $342_1 & 1 | 0 ? 1 : 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 168 | 0) >> 2] = 5;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 164 | 0) >> 2] = 1;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 204 | 0) >> 2] = 94;
  HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 248 | 0) >> 3] = .05;
  HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 256 | 0) >> 3] = .05;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 152 | 0) >> 2] = 1;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 156 | 0) >> 2] = 1;
  $741((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 216 | 0 | 0, global$3 + 1297 | 0 | 0) | 0;
  $741((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 236 | 0 | 0, global$3 + 1489 | 0 | 0) | 0;
  $741((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 188 | 0 | 0, global$3 + 2767 | 0 | 0) | 0;
  $741((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 226 | 0 | 0, global$3 + 1982 | 0 | 0) | 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 172 | 0) >> 2] = 2;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 176 | 0) >> 2] = 2;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 180 | 0) >> 2] = 1;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 184 | 0) >> 2] = 1;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 64 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 60 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 48 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 40 | 0) >> 2] = 0;
  HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 296 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 288 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 280 | 0) >> 3] = +(0 | 0);
  $417_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
  global$0 = $7_1 + 64 | 0;
  return $417_1 | 0;
 }
 
 function $16($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $184_1 = 0, $555_1 = 0.0, $370_1 = 0, $576_1 = 0.0, $531_1 = 0, $597_1 = 0.0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
  HEAP32[($5_1 + 52 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 76 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
  HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
  HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = 1;
    $184_1 = $59(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 76 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0 | 0, ((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, ((((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (((((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 88 | 0 | 0, (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 96 | 0 | 0, ((((((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 104 | 0 | 0, (((((((((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) + ((0 - (HEAP32[($5_1 + 56 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) + ((0 - Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 128 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 120 | 0) >> 2] = $184_1;
    $555_1 = -.5 * (+(HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) * (2.0 * +HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 104 | 0) >> 3] + 1.0 + +$729(+(6.28318))));
    HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 104 | 0) >> 3] = $555_1;
    HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 112 | 0) >> 3] = -2.0 * +HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 104 | 0) >> 3] + 2.0 * +(((((HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) | 0 | 0) + 2.0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($5_1 + 16 | 0) >> 2] = 0;
     $370_1 = $59(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 76 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0 | 0, ((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, ((((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (((((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 88 | 0 | 0, (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 96 | 0 | 0, ((((((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 104 | 0 | 0, (((((((((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) + ((0 - (HEAP32[($5_1 + 56 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) + ((0 - Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 128 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 120 | 0) >> 2] = $370_1;
     $576_1 = -.5 * (+(HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) * (2.0 * +HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 104 | 0) >> 3] + 1.0 + +$729(+(6.28318))));
     HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 104 | 0) >> 3] = $576_1;
     HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 112 | 0) >> 3] = -2.0 * +HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 104 | 0) >> 3] + 2.0 * +(((((HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) | 0 | 0) + 2.0;
     break label$3;
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$6
      }
      $531_1 = $60(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 76 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0 | 0, ((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, ((((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (((((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 88 | 0 | 0, (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 96 | 0 | 0, (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 104 | 0 | 0, (((((((((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) + ((0 - (HEAP32[($5_1 + 56 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) + ((0 - Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 128 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 120 | 0) >> 2] = $531_1;
      $597_1 = -.5 * (+(HEAP32[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) * (2.0 * +HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 104 | 0) >> 3] + 1.0 + +$729(+(6.28318))));
      HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + 104 | 0) >> 3] = $597_1;
      break label$5;
     }
     $875(global$3 + 5602 | 0 | 0, 0 | 0) | 0;
     fimport$0(-1 | 0);
     abort();
    }
   }
  }
  global$0 = $5_1 + 80 | 0;
  return;
 }
 
 function $17($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $88_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 116 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
  HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 172 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 176 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 180 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 184 | 0) >> 2] | 0;
  $88_1 = 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $18(HEAP32[($5_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 124 | 0) >> 2] | 0) >> 2] | 0 | 0, $5_1 + 40 | 0 | 0, $5_1 + 28 | 0 | 0, (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 168 | 0 | 0, HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, $88_1 | 0, $88_1 | 0, $5_1 | 0, (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 160 | 0 | 0, (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 164 | 0 | 0, (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 188 | 0 | 0, (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 200 | 0 | 0, (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 204 | 0 | 0, (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 208 | 0 | 0, (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($5_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 216 | 0 | 0, (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 226 | 0 | 0, (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 248 | 0 | 0, (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 236 | 0 | 0, (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 256 | 0 | 0, (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 156 | 0 | 0, (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 152 | 0 | 0, HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 212 | 0) >> 2] | 0 | 0, $88_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 112 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($5_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 152 | 0) >> 2] | 0;
  HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 156 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 108 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    HEAP32[($5_1 + 104 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
    HEAP32[($5_1 + 100 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
    HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + 36 | 0) >> 2] | 0;
    HEAP32[($5_1 + 88 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
    HEAP32[($5_1 + 80 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
    HEAP32[($5_1 + 84 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
    HEAP32[($5_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    HEAP32[($5_1 + 76 | 0) >> 2] = HEAP32[(HEAP32[(HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($5_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + 120 | 0) >> 2] | 0;
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 112 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + 88 | 0) >> 3];
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 120 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + 96 | 0) >> 3];
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 128 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + 104 | 0) >> 3];
    HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 156 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 52 | 0) >> 2] = ((((((((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 72 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 76 | 0) >> 2] | 0) | 0) - (HEAP32[($5_1 + 104 | 0) >> 2] | 0) | 0) - Math_imul(HEAP32[($5_1 + 84 | 0) >> 2] | 0, HEAP32[($5_1 + 92 | 0) >> 2] | 0) | 0) + Math_imul(((((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 72 | 0) >> 2] | 0) | 0, ((((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 72 | 0) >> 2] | 0) | 0) | 0;
    HEAP32[($5_1 + 68 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[(((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 304 | 0) + ((HEAP32[($5_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(((HEAP32[(HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($5_1 + 68 | 0) >> 2] = (HEAP32[($5_1 + 68 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 272 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) + 40 | 0) >> 3];
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 280 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 3];
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 288 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 3];
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 296 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 3];
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 272 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) + 40 | 0) >> 3];
    break label$1;
   }
   label$5 : {
    if (!((HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($5_1 + 108 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    HEAP32[($5_1 + 104 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
    HEAP32[($5_1 + 100 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
    HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 36 | 0) >> 2] | 0;
    HEAP32[($5_1 + 88 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
    HEAP32[($5_1 + 80 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
    HEAP32[($5_1 + 84 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
    HEAP32[($5_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
    HEAP32[($5_1 + 76 | 0) >> 2] = HEAP32[(HEAP32[(HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($5_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 120 | 0) >> 2] | 0;
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 112 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 88 | 0) >> 3];
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 120 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 96 | 0) >> 3];
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 128 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 104 | 0) >> 3];
    HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 156 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 52 | 0) >> 2] = ((((((((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 72 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 76 | 0) >> 2] | 0) | 0) - (HEAP32[($5_1 + 104 | 0) >> 2] | 0) | 0) - Math_imul(HEAP32[($5_1 + 84 | 0) >> 2] | 0, HEAP32[($5_1 + 92 | 0) >> 2] | 0) | 0) + Math_imul(((((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 72 | 0) >> 2] | 0) | 0, ((((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 72 | 0) >> 2] | 0) | 0) | 0;
    HEAP32[($5_1 + 68 | 0) >> 2] = 0;
    label$6 : {
     label$7 : while (1) {
      if (!((HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAPF64[(((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 304 | 0) + ((HEAP32[($5_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(((HEAP32[(HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 136 | 0) + ((HEAP32[($5_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($5_1 + 68 | 0) >> 2] = (HEAP32[($5_1 + 68 | 0) >> 2] | 0) + 1 | 0;
      continue label$7;
     };
    }
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 272 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 40 | 0) >> 3];
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 280 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 16 | 0) >> 3];
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 288 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 24 | 0) >> 3];
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 296 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 32 | 0) >> 3];
    HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 272 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($5_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 40 | 0) >> 3];
   }
  }
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 40 | 0) >> 2] = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 44 | 0) >> 2] = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 48 | 0) >> 2] = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($5_1 + 124 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 76 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 52 | 0) >> 2] = HEAP32[($5_1 + 84 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 56 | 0) >> 2] = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 60 | 0) >> 2] = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 64 | 0) >> 2] = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 4 | 0) >> 2] = ((HEAP32[($5_1 + 76 | 0) >> 2] | 0) - (HEAP32[($5_1 + 104 | 0) >> 2] | 0) | 0) - Math_imul(HEAP32[($5_1 + 84 | 0) >> 2] | 0, HEAP32[($5_1 + 92 | 0) >> 2] | 0) | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 68 | 0) >> 2] = HEAP32[($5_1 + 80 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 144 | 0) >> 2] = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 80 | 0) >> 2] = (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 304 | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 84 | 0) >> 2] = ((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 304 | 0) + ((HEAP32[($5_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 88 | 0) >> 2] = ((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 304 | 0) + (((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 92 | 0) >> 2] = ((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 304 | 0) + ((((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 96 | 0) >> 2] = ((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 304 | 0) + (((((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 108 | 0) >> 2] = ((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 304 | 0) + ((((((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 72 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 100 | 0) >> 2] = ((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 304 | 0) + (((((((((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 72 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 76 | 0) >> 2] | 0) | 0) - (HEAP32[($5_1 + 104 | 0) >> 2] | 0) | 0) - Math_imul(HEAP32[($5_1 + 84 | 0) >> 2] | 0, HEAP32[($5_1 + 92 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 104 | 0) >> 2] = Math_imul(((((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 72 | 0) >> 2] | 0) | 0, ((((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 72 | 0) >> 2] | 0) | 0);
  HEAP32[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + 76 | 0) >> 2] = ((((HEAP32[($5_1 + 108 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 72 | 0) >> 2] | 0) | 0;
  $19(HEAP32[($5_1 + 112 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 128 | 0;
  return;
 }
 
 function $18($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1, $16_1, $17_1, $18_1, $19_1, $20_1, $21_1, $22_1, $23_1, $24_1, $25_1, $26_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  $15_1 = $15_1 | 0;
  $16_1 = $16_1 | 0;
  $17_1 = $17_1 | 0;
  $18_1 = $18_1 | 0;
  $19_1 = $19_1 | 0;
  $20_1 = $20_1 | 0;
  $21_1 = $21_1 | 0;
  $22_1 = $22_1 | 0;
  $23_1 = $23_1 | 0;
  $24_1 = $24_1 | 0;
  $25_1 = $25_1 | 0;
  $26_1 = $26_1 | 0;
  var $29_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $1473 = 0, $942 = 0, $1187 = 0, $697_1 = 0, $737_1 = 0, $770_1 = 0, $803_1 = 0, $3731 = 0, $3733 = 0, $241_1 = 0, $252_1 = 0, $266_1 = 0, $277_1 = 0, $378_1 = 0, $536_1 = 0, $844_1 = 0, $870_1 = 0, $908 = 0, $930 = 0, $967 = 0, $980 = 0, $993 = 0, $1051 = 0, $1062 = 0, $1075 = 0, $1077 = 0, $1086 = 0, $1088 = 0, $1097 = 0, $1099 = 0, $1108 = 0, $1110 = 0, $1202 = 0, $1208 = 0, $1212 = 0, $1254 = 0, $1309 = 0, $1315 = 0, $1319 = 0, $1365 = 0, $1418 = 0, $1424 = 0, $1428 = 0, $1462 = 0, $1487 = 0, $1493 = 0, $1497 = 0, $1519 = 0, $1608 = 0, $1614 = 0, $1618 = 0, $1708 = 0, $1714 = 0, $1718 = 0, $1808 = 0, $1814 = 0, $1818 = 0, $1908 = 0, $1914 = 0, $1918 = 0, $2019 = 0, $2025 = 0, $2029 = 0, $2133 = 0, $2139 = 0, $2143 = 0, $2247 = 0, $2253 = 0, $2257 = 0, $2361 = 0, $2367 = 0, $2371 = 0, $2464 = 0, $2470 = 0, $2474 = 0, $2564 = 0, $2570 = 0, $2574 = 0, $2664 = 0, $2670 = 0, $2674 = 0, $2764 = 0, $2770 = 0, $2774 = 0, $2875 = 0, $2881 = 0, $2885 = 0, $2989 = 0, $2995 = 0, $2999 = 0, $3103 = 0, $3109 = 0, $3113 = 0, $3217 = 0, $3223 = 0, $3227 = 0, $3321 = 0, $3327 = 0, $3331 = 0, $3334 = 0, $3921 = 0.0, $3378 = 0, $3924 = 0.0, $3393 = 0, $3927 = 0.0, $3408 = 0, $3930 = 0.0, $3423 = 0, $3933 = 0.0, $3438 = 0, $3936 = 0.0, $3453 = 0, $3939 = 0.0, $3468 = 0, $3944 = 0.0, $3563 = 0, $3947 = 0.0, $3584 = 0, $3950 = 0.0, $3604 = 0, $3953 = 0.0, $3625 = 0, $3956 = 0.0, $3654 = 0, $3661 = 0, $3677 = 0, $3683 = 0, $3687 = 0, $464_1 = 0, $606_1 = 0, $698_1 = 0, $738_1 = 0, $771_1 = 0, $804_1 = 0, $845_1 = 0, $871_1 = 0, $1027 = 0, $1178 = 0, $6677 = 0, $6699 = 0, $6709 = 0, $1281 = 0, $6922 = 0, $6944 = 0, $6954 = 0, $1390 = 0, $7176 = 0, $7198 = 0, $7208 = 0, $1463 = 0, $7364 = 0, $7386 = 0, $7396 = 0, $1582 = 0, $7665 = 0, $7687 = 0, $7697 = 0, $1682 = 0, $7928 = 0, $7950 = 0, $7960 = 0, $1782 = 0, $8193 = 0, $8215 = 0, $8225 = 0, $1882 = 0, $8458 = 0, $8480 = 0, $8490 = 0, $1993 = 0, $8739 = 0, $8761 = 0, $8771 = 0, $2107 = 0, $9029 = 0, $9051 = 0, $9061 = 0, $2221 = 0, $9319 = 0, $9341 = 0, $9351 = 0, $2335 = 0, $9611 = 0, $9633 = 0, $9643 = 0, $2438 = 0, $9881 = 0, $9903 = 0, $9913 = 0, $2538 = 0, $10144 = 0, $10166 = 0, $10176 = 0, $2638 = 0, $10409 = 0, $10431 = 0, $10441 = 0, $2738 = 0, $10674 = 0, $10696 = 0, $10706 = 0, $2849 = 0, $10955 = 0, $10977 = 0, $10987 = 0, $2963 = 0, $11245 = 0, $11267 = 0, $11277 = 0, $3077 = 0, $11535 = 0, $11557 = 0, $11567 = 0, $3191 = 0, $11827 = 0, $11849 = 0, $11859 = 0, $3295 = 0, $12102 = 0, $12124 = 0, $12134 = 0, $3380 = 0, $3395 = 0, $3410 = 0, $3425 = 0, $3440 = 0, $3455 = 0, $3629 = 0, $3630 = 0, $3633 = 0, $3636 = 0, $3662 = 0, $12895 = 0, $12917 = 0, $12927 = 0, $3717 = 0, $3727 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $29_1 = global$0 - 464 | 0;
  global$0 = $29_1;
  HEAP32[($29_1 + 456 | 0) >> 2] = $0_1;
  HEAP32[($29_1 + 452 | 0) >> 2] = $1_1;
  HEAP32[($29_1 + 448 | 0) >> 2] = $2_1;
  HEAP32[($29_1 + 444 | 0) >> 2] = $3_1;
  HEAP32[($29_1 + 440 | 0) >> 2] = $4_1;
  HEAP32[($29_1 + 436 | 0) >> 2] = $5_1;
  HEAP32[($29_1 + 432 | 0) >> 2] = $6_1;
  HEAP32[($29_1 + 428 | 0) >> 2] = $7_1;
  HEAP32[($29_1 + 424 | 0) >> 2] = $8_1;
  HEAP32[($29_1 + 420 | 0) >> 2] = $9_1;
  HEAP32[($29_1 + 416 | 0) >> 2] = $10_1;
  HEAP32[($29_1 + 412 | 0) >> 2] = $11_1;
  HEAP32[($29_1 + 408 | 0) >> 2] = $12_1;
  HEAP32[($29_1 + 404 | 0) >> 2] = $13_1;
  HEAP32[($29_1 + 400 | 0) >> 2] = $14_1;
  HEAP32[($29_1 + 396 | 0) >> 2] = $15_1;
  HEAP32[($29_1 + 392 | 0) >> 2] = $16_1;
  HEAP32[($29_1 + 388 | 0) >> 2] = $17_1;
  HEAP32[($29_1 + 384 | 0) >> 2] = $18_1;
  HEAP32[($29_1 + 380 | 0) >> 2] = $19_1;
  HEAP32[($29_1 + 376 | 0) >> 2] = $20_1;
  HEAP32[($29_1 + 372 | 0) >> 2] = $21_1;
  HEAP32[($29_1 + 368 | 0) >> 2] = $22_1;
  HEAP32[($29_1 + 364 | 0) >> 2] = $23_1;
  HEAP32[($29_1 + 360 | 0) >> 2] = $24_1;
  HEAP32[($29_1 + 356 | 0) >> 2] = $25_1;
  HEAP32[($29_1 + 352 | 0) >> 2] = $26_1;
  HEAP32[($29_1 + 348 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $29_1 + 144 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  $3731 = 0;
  i64toi32_i32$1 = $29_1 + 128 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $3731;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $3731;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $29_1 + 116 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  $3733 = 0;
  i64toi32_i32$1 = $29_1 + 96 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $3733;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $3733;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($29_1 + 92 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $862(12 | 0) | 0), HEAP32[(wasm2js_i32$0 + 348 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($29_1 + 448 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($29_1 + 344 | 0) >> 2] = 5;
    HEAP32[($29_1 + 336 | 0) >> 2] = 5;
    HEAP32[($29_1 + 340 | 0) >> 2] = 2;
    break label$1;
   }
   HEAP32[($29_1 + 344 | 0) >> 2] = HEAP32[(HEAP32[($29_1 + 448 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($29_1 + 340 | 0) >> 2] = HEAP32[((HEAP32[($29_1 + 448 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($29_1 + 336 | 0) >> 2] = HEAP32[((HEAP32[($29_1 + 448 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  }
  label$3 : {
   label$4 : {
    if (!((HEAP32[($29_1 + 444 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($29_1 + 332 | 0) >> 2] = 2;
    HEAP32[($29_1 + 324 | 0) >> 2] = 2;
    HEAP32[($29_1 + 328 | 0) >> 2] = 1;
    break label$3;
   }
   HEAP32[($29_1 + 332 | 0) >> 2] = HEAP32[(HEAP32[($29_1 + 444 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($29_1 + 328 | 0) >> 2] = HEAP32[((HEAP32[($29_1 + 444 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($29_1 + 324 | 0) >> 2] = HEAP32[((HEAP32[($29_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[($29_1 + 440 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($29_1 + 256 | 0) >> 2] = 5;
    break label$5;
   }
   HEAP32[($29_1 + 256 | 0) >> 2] = HEAP32[(HEAP32[($29_1 + 440 | 0) >> 2] | 0) >> 2] | 0;
  }
  label$7 : {
   label$8 : {
    if (!((HEAP32[($29_1 + 424 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP32[($29_1 + 300 | 0) >> 2] = 2;
    HEAP32[($29_1 + 296 | 0) >> 2] = 2;
    HEAP32[($29_1 + 292 | 0) >> 2] = 1;
    HEAP32[($29_1 + 288 | 0) >> 2] = 1;
    break label$7;
   }
   HEAP32[($29_1 + 300 | 0) >> 2] = HEAP32[(HEAP32[($29_1 + 424 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($29_1 + 296 | 0) >> 2] = HEAP32[((HEAP32[($29_1 + 424 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($29_1 + 292 | 0) >> 2] = HEAP32[((HEAP32[($29_1 + 424 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   HEAP32[($29_1 + 288 | 0) >> 2] = HEAP32[((HEAP32[($29_1 + 424 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  }
  label$9 : {
   label$10 : {
    if (!((HEAP32[($29_1 + 420 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$10
    }
    HEAP32[($29_1 + 252 | 0) >> 2] = 0;
    break label$9;
   }
   HEAP32[($29_1 + 252 | 0) >> 2] = HEAP32[(HEAP32[($29_1 + 420 | 0) >> 2] | 0) >> 2] | 0;
  }
  label$11 : {
   if (!((HEAP32[($29_1 + 416 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$11
   }
   HEAP32[($29_1 + 248 | 0) >> 2] = 1;
  }
  label$12 : {
   label$13 : {
    if (!((HEAP32[($29_1 + 408 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$13
    }
    HEAP32[($29_1 + 244 | 0) >> 2] = 1;
    break label$12;
   }
   HEAP32[($29_1 + 244 | 0) >> 2] = HEAP32[(HEAP32[($29_1 + 408 | 0) >> 2] | 0) >> 2] | 0;
  }
  label$14 : {
   label$15 : {
    if (!((HEAP32[($29_1 + 404 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$15
    }
    HEAP32[($29_1 + 240 | 0) >> 2] = 94;
    break label$14;
   }
   HEAP32[($29_1 + 240 | 0) >> 2] = HEAP32[(HEAP32[($29_1 + 404 | 0) >> 2] | 0) >> 2] | 0;
  }
  label$16 : {
   label$17 : {
    if (!((HEAP32[($29_1 + 360 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$17
    }
    HEAP32[($29_1 + 232 | 0) >> 2] = 1;
    break label$16;
   }
   HEAP32[($29_1 + 232 | 0) >> 2] = HEAP32[(HEAP32[($29_1 + 360 | 0) >> 2] | 0) >> 2] | 0;
  }
  label$18 : {
   label$19 : {
    if (!((HEAP32[($29_1 + 364 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$19
    }
    HEAP32[($29_1 + 236 | 0) >> 2] = 0;
    break label$18;
   }
   HEAP32[($29_1 + 236 | 0) >> 2] = HEAP32[(HEAP32[($29_1 + 364 | 0) >> 2] | 0) >> 2] | 0;
  }
  label$20 : {
   label$21 : {
    if (!((HEAP32[($29_1 + 396 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$21
    }
    HEAP32[($29_1 + 268 | 0) >> 2] = 0;
    break label$20;
   }
   HEAP32[($29_1 + 268 | 0) >> 2] = HEAP32[(HEAP32[($29_1 + 396 | 0) >> 2] | 0) >> 2] | 0;
  }
  (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $862((HEAP32[($29_1 + 452 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 200 | 0) >> 2] = wasm2js_i32$1;
  $868(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 456 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 452 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  label$22 : {
   label$23 : {
    if (!((HEAP32[($29_1 + 436 | 0) >> 2] | 0 | 0) <= (1 | 0) & 1 | 0)) {
     break label$23
    }
    HEAP32[($29_1 + 228 | 0) >> 2] = 1;
    break label$22;
   }
   HEAP32[($29_1 + 228 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
  }
  label$24 : {
   label$25 : {
    if (!((HEAP32[($29_1 + 400 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$25
    }
    label$26 : {
     label$27 : {
      label$28 : {
       if ((HEAP32[($29_1 + 436 | 0) >> 2] | 0 | 0) > (12 | 0) & 1 | 0) {
        break label$28
       }
       if (!((HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0) > (150 | 0) & 1 | 0)) {
        break label$27
       }
      }
      HEAP32[($29_1 + 264 | 0) >> 2] = 1;
      break label$26;
     }
     HEAP32[($29_1 + 264 | 0) >> 2] = 0;
    }
    break label$24;
   }
   HEAP32[($29_1 + 264 | 0) >> 2] = HEAP32[(HEAP32[($29_1 + 400 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($29_1 + 224 | 0) >> 2] = (HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0) / (3 | 0) | 0;
  label$29 : {
   label$30 : {
    if (!((HEAP32[($29_1 + 344 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$30
    }
    $241_1 = HEAP32[($29_1 + 344 | 0) >> 2] | 0;
    break label$29;
   }
   $241_1 = HEAP32[($29_1 + 224 | 0) >> 2] | 0;
  }
  HEAP32[($29_1 + 344 | 0) >> 2] = $241_1;
  label$31 : {
   label$32 : {
    if (!((HEAP32[($29_1 + 336 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$32
    }
    $252_1 = HEAP32[($29_1 + 336 | 0) >> 2] | 0;
    break label$31;
   }
   $252_1 = HEAP32[($29_1 + 224 | 0) >> 2] | 0;
  }
  HEAP32[($29_1 + 336 | 0) >> 2] = $252_1;
  HEAP32[($29_1 + 220 | 0) >> 2] = (HEAP32[($29_1 + 224 | 0) >> 2] | 0 | 0) / (HEAP32[($29_1 + 228 | 0) >> 2] | 0 | 0) | 0;
  label$33 : {
   label$34 : {
    if (!((HEAP32[($29_1 + 332 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 220 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$34
    }
    $266_1 = HEAP32[($29_1 + 332 | 0) >> 2] | 0;
    break label$33;
   }
   $266_1 = HEAP32[($29_1 + 220 | 0) >> 2] | 0;
  }
  HEAP32[($29_1 + 332 | 0) >> 2] = $266_1;
  label$35 : {
   label$36 : {
    if (!((HEAP32[($29_1 + 324 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 220 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$36
    }
    $277_1 = HEAP32[($29_1 + 324 | 0) >> 2] | 0;
    break label$35;
   }
   $277_1 = HEAP32[($29_1 + 220 | 0) >> 2] | 0;
  }
  HEAP32[($29_1 + 324 | 0) >> 2] = $277_1;
  label$37 : {
   if (!((HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0) <= (3 | 0) & 1 | 0)) {
    break label$37
   }
   HEAP32[($29_1 + 412 | 0) >> 2] = global$3 + 2763 | 0;
  }
  label$38 : {
   if (!((HEAP32[($29_1 + 352 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$38
   }
   $7(HEAP32[($29_1 + 456 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, +(+HEAPF64[(HEAP32[($29_1 + 352 | 0) >> 2] | 0) >> 3]), HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0);
  }
  (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $862((HEAP32[($29_1 + 452 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 196 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $862((HEAP32[($29_1 + 452 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 184 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($29_1 + 452 | 0) >> 2] | 0) << 3 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 188 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($29_1 + 452 | 0) >> 2] | 0) << 3 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 180 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $862((HEAP32[($29_1 + 452 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 176 | 0) >> 2] = wasm2js_i32$1;
  $868(HEAP32[($29_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 452 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  label$39 : {
   if (!((HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$39
   }
   (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $135(HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 216 | 0) >> 2] = wasm2js_i32$1;
   label$40 : {
    if (!((HEAP32[($29_1 + 216 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$40
    }
    $863(HEAP32[($29_1 + 196 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0);
    $875(global$3 + 6353 | 0 | 0, 0 | 0) | 0;
    fimport$0(-1 | 0);
    abort();
   }
   (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($29_1 + 388 | 0) >> 2] | 0) << 3 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 192 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $179(HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 164 | 0) >> 2] = wasm2js_i32$1;
   $182(HEAP32[($29_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 192 | 0) >> 2] | 0 | 0, +(.95));
   $863(HEAP32[($29_1 + 192 | 0) >> 2] | 0 | 0);
  }
  label$41 : {
   label$42 : {
    if (!((HEAP32[($29_1 + 432 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$42
    }
    $378_1 = -1;
    break label$41;
   }
   $378_1 = HEAP32[(HEAP32[($29_1 + 432 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($29_1 + 280 | 0) >> 2] = $378_1;
  label$43 : {
   if (!(HEAP32[($29_1 + 252 | 0) >> 2] | 0)) {
    break label$43
   }
   HEAP32[($29_1 + 280 | 0) >> 2] = 0;
   HEAP32[($29_1 + 284 | 0) >> 2] = 0;
  }
  label$44 : {
   label$45 : {
    if (!((HEAP32[($29_1 + 228 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$45
    }
    HEAP32[($29_1 + 324 | 0) >> 2] = 0;
    HEAP32[($29_1 + 332 | 0) >> 2] = 0;
    HEAP32[($29_1 + 280 | 0) >> 2] = 0;
    break label$44;
   }
   label$46 : {
    if (!((HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
     break label$46
    }
    (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $3(HEAP32[($29_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 436 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 368 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 372 | 0) >> 2] | 0 | 0, $29_1 + 328 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 280 | 0) >> 2] = wasm2js_i32$1;
    label$47 : {
     if (!((HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$47
     }
     if (!((HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$47
     }
     HEAP32[($29_1 + 208 | 0) >> 2] = 0;
     HEAP32[($29_1 + 276 | 0) >> 2] = (HEAP32[($29_1 + 452 | 0) >> 2] | 0) - Math_imul(HEAP32[($29_1 + 436 | 0) >> 2] | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0) | 0;
     HEAP32[($29_1 + 212 | 0) >> 2] = 0;
     label$48 : {
      label$49 : while (1) {
       if (!((HEAP32[($29_1 + 212 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$48
       }
       $223((HEAP32[($29_1 + 392 | 0) >> 2] | 0) + (Math_imul(HEAP32[($29_1 + 212 | 0) >> 2] | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 436 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 188 | 0) >> 2] | 0) + (Math_imul(HEAP32[($29_1 + 212 | 0) >> 2] | 0, HEAP32[($29_1 + 276 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
       $464_1 = $5((HEAP32[($29_1 + 188 | 0) >> 2] | 0) + (Math_imul(HEAP32[($29_1 + 212 | 0) >> 2] | 0, HEAP32[($29_1 + 276 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($29_1 + 276 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($29_1 + 208 | 0) >> 2] = (HEAP32[($29_1 + 208 | 0) >> 2] | 0) + $464_1 | 0;
       HEAP32[($29_1 + 212 | 0) >> 2] = (HEAP32[($29_1 + 212 | 0) >> 2] | 0) + 1 | 0;
       continue label$49;
      };
     }
     label$50 : {
      if (!((HEAP32[($29_1 + 208 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$50
      }
      HEAP32[($29_1 + 280 | 0) >> 2] = (HEAP32[($29_1 + 280 | 0) >> 2] | 0) - 1 | 0;
     }
    }
   }
  }
  HEAP32[($29_1 + 276 | 0) >> 2] = (HEAP32[($29_1 + 452 | 0) >> 2] | 0) - Math_imul(HEAP32[($29_1 + 436 | 0) >> 2] | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0) | 0;
  label$51 : {
   label$52 : {
    if (!((HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$52
    }
    (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $223(HEAP32[($29_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 436 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 184 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 276 | 0) >> 2] = wasm2js_i32$1;
    break label$51;
   }
   $868(HEAP32[($29_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 196 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 452 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
   HEAP32[($29_1 + 276 | 0) >> 2] = HEAP32[($29_1 + 452 | 0) >> 2] | 0;
  }
  label$53 : {
   if (!((HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$53
   }
   label$54 : {
    label$55 : {
     if (!((HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$55
     }
     $223(HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 436 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 188 | 0) >> 2] | 0 | 0) | 0;
     break label$54;
    }
    $868(HEAP32[($29_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($29_1 + 452 | 0) >> 2] | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0) | 0) | 0;
   }
  }
  label$56 : {
   label$57 : {
    if (!((HEAP32[($29_1 + 428 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$57
    }
    $536_1 = -1;
    break label$56;
   }
   $536_1 = HEAP32[(HEAP32[($29_1 + 428 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($29_1 + 284 | 0) >> 2] = $536_1;
  label$58 : {
   if (!((HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
    break label$58
   }
   (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $1(HEAP32[($29_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 276 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 376 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 384 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 380 | 0) >> 2] | 0 | 0, $29_1 + 340 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 284 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($29_1 + 272 | 0) >> 2] = (HEAP32[($29_1 + 276 | 0) >> 2] | 0) - (HEAP32[($29_1 + 284 | 0) >> 2] | 0) | 0;
   label$59 : {
    if (!((HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$59
    }
    if (!((HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$59
    }
    HEAP32[($29_1 + 208 | 0) >> 2] = 0;
    HEAP32[($29_1 + 212 | 0) >> 2] = 0;
    label$60 : {
     label$61 : while (1) {
      if (!((HEAP32[($29_1 + 212 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$60
      }
      $222((HEAP32[($29_1 + 188 | 0) >> 2] | 0) + (Math_imul(HEAP32[($29_1 + 212 | 0) >> 2] | 0, HEAP32[($29_1 + 276 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($29_1 + 276 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 180 | 0) >> 2] | 0) + (Math_imul(HEAP32[($29_1 + 212 | 0) >> 2] | 0, HEAP32[($29_1 + 272 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
      $606_1 = $5((HEAP32[($29_1 + 180 | 0) >> 2] | 0) + (Math_imul(HEAP32[($29_1 + 212 | 0) >> 2] | 0, HEAP32[($29_1 + 272 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($29_1 + 272 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($29_1 + 208 | 0) >> 2] = (HEAP32[($29_1 + 208 | 0) >> 2] | 0) + $606_1 | 0;
      HEAP32[($29_1 + 212 | 0) >> 2] = (HEAP32[($29_1 + 212 | 0) >> 2] | 0) + 1 | 0;
      continue label$61;
     };
    }
    label$62 : {
     if (!((HEAP32[($29_1 + 208 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$62
     }
     HEAP32[($29_1 + 284 | 0) >> 2] = (HEAP32[($29_1 + 284 | 0) >> 2] | 0) - 1 | 0;
    }
   }
  }
  HEAP32[($29_1 + 272 | 0) >> 2] = (HEAP32[($29_1 + 276 | 0) >> 2] | 0) - (HEAP32[($29_1 + 284 | 0) >> 2] | 0) | 0;
  label$63 : {
   label$64 : {
    if (!((HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$64
    }
    (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $222(HEAP32[($29_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 276 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 176 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 272 | 0) >> 2] = wasm2js_i32$1;
    break label$63;
   }
   HEAP32[($29_1 + 272 | 0) >> 2] = HEAP32[($29_1 + 276 | 0) >> 2] | 0;
   $868(HEAP32[($29_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 184 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 272 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  }
  label$65 : {
   label$66 : {
    if (HEAP32[($29_1 + 272 | 0) >> 2] | 0) {
     break label$66
    }
    $863(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 196 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 184 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 188 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 180 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 176 | 0) >> 2] | 0 | 0);
    HEAP32[(HEAP32[($29_1 + 348 | 0) >> 2] | 0) >> 2] = 0;
    HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
    $875(global$3 + 6607 | 0 | 0, 0 | 0) | 0;
    HEAP32[($29_1 + 460 | 0) >> 2] = HEAP32[($29_1 + 348 | 0) >> 2] | 0;
    break label$65;
   }
   label$67 : {
    if (!($5(HEAP32[($29_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 272 | 0) >> 2] | 0 | 0) | 0)) {
     break label$67
    }
    label$68 : {
     label$69 : {
      if (!((HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
       break label$69
      }
      label$70 : {
       label$71 : {
        if (!((HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
         break label$71
        }
        if (HEAP32[($29_1 + 284 | 0) >> 2] | 0) {
         break label$71
        }
        HEAP32[($29_1 + 136 | 0) >> 2] = 0;
        HEAP32[($29_1 + 128 | 0) >> 2] = 0;
        HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
        HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 228 | 0) >> 2] | 0;
        HEAP32[($29_1 + 152 | 0) >> 2] = 0;
        HEAP32[($29_1 + 148 | 0) >> 2] = 0;
        HEAP32[($29_1 + 144 | 0) >> 2] = 0;
        HEAP32[($29_1 + 232 | 0) >> 2] = 1;
        HEAP32[($29_1 + 236 | 0) >> 2] = 1;
        $697_1 = 0;
        $698_1 = $20($697_1 | 0, HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, HEAP32[($29_1 + 416 | 0) >> 2] | 0 | 0, $697_1 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 232 | 0) >> 2] | 0 | 0, $697_1 | 0, HEAP32[($29_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 268 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[(HEAP32[($29_1 + 348 | 0) >> 2] | 0) >> 2] = $698_1;
        HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
        HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 8 | 0) >> 2] = 2;
        break label$70;
       }
       label$72 : {
        label$73 : {
         if (!((HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
          break label$73
         }
         if (!((HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
          break label$73
         }
         HEAP32[($29_1 + 136 | 0) >> 2] = 0;
         HEAP32[($29_1 + 128 | 0) >> 2] = 0;
         HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
         HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 228 | 0) >> 2] | 0;
         HEAP32[($29_1 + 152 | 0) >> 2] = 0;
         HEAP32[($29_1 + 144 | 0) >> 2] = 0;
         HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
         HEAP32[($29_1 + 236 | 0) >> 2] = 0;
         $737_1 = 0;
         $738_1 = $20($737_1 | 0, HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, HEAP32[($29_1 + 416 | 0) >> 2] | 0 | 0, $737_1 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 232 | 0) >> 2] | 0 | 0, $737_1 | 0, HEAP32[($29_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 268 | 0) >> 2] | 0 | 0) | 0;
         HEAP32[(HEAP32[($29_1 + 348 | 0) >> 2] | 0) >> 2] = $738_1;
         HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
         HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 8 | 0) >> 2] = 2;
         break label$72;
        }
        label$74 : {
         label$75 : {
          if (!((HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
           break label$75
          }
          HEAP32[($29_1 + 136 | 0) >> 2] = 0;
          HEAP32[($29_1 + 128 | 0) >> 2] = 0;
          HEAP32[($29_1 + 132 | 0) >> 2] = 0;
          HEAP32[($29_1 + 140 | 0) >> 2] = 0;
          HEAP32[($29_1 + 152 | 0) >> 2] = 0;
          HEAP32[($29_1 + 144 | 0) >> 2] = 0;
          HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
          HEAP32[($29_1 + 236 | 0) >> 2] = 0;
          $770_1 = 0;
          $771_1 = $20($770_1 | 0, HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, HEAP32[($29_1 + 416 | 0) >> 2] | 0 | 0, $770_1 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 232 | 0) >> 2] | 0 | 0, $770_1 | 0, HEAP32[($29_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 268 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[(HEAP32[($29_1 + 348 | 0) >> 2] | 0) >> 2] = $771_1;
          HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
          HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 8 | 0) >> 2] = 2;
          break label$74;
         }
         label$76 : {
          label$77 : {
           if (!((HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
            break label$77
           }
           HEAP32[($29_1 + 136 | 0) >> 2] = 0;
           HEAP32[($29_1 + 128 | 0) >> 2] = 0;
           HEAP32[($29_1 + 132 | 0) >> 2] = 0;
           HEAP32[($29_1 + 140 | 0) >> 2] = 0;
           HEAP32[($29_1 + 152 | 0) >> 2] = 0;
           HEAP32[($29_1 + 144 | 0) >> 2] = 0;
           HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
           HEAP32[($29_1 + 236 | 0) >> 2] = 1;
           $803_1 = 0;
           $804_1 = $20($803_1 | 0, HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, HEAP32[($29_1 + 416 | 0) >> 2] | 0 | 0, $803_1 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 232 | 0) >> 2] | 0 | 0, $803_1 | 0, HEAP32[($29_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 268 | 0) >> 2] | 0 | 0) | 0;
           HEAP32[(HEAP32[($29_1 + 348 | 0) >> 2] | 0) >> 2] = $804_1;
           HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
           HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 8 | 0) >> 2] = 2;
           break label$76;
          }
          $875(global$3 + 6664 | 0 | 0, 0 | 0) | 0;
          HEAP32[(HEAP32[($29_1 + 348 | 0) >> 2] | 0) >> 2] = 0;
          HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
         }
        }
       }
      }
      break label$68;
     }
     label$78 : {
      label$79 : {
       if (!((HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
        break label$79
       }
       HEAP32[($29_1 + 136 | 0) >> 2] = 0;
       HEAP32[($29_1 + 128 | 0) >> 2] = 0;
       HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
       HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 228 | 0) >> 2] | 0;
       HEAP32[($29_1 + 152 | 0) >> 2] = 0;
       HEAP32[($29_1 + 144 | 0) >> 2] = 0;
       HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
       $844_1 = 0;
       $845_1 = $20($844_1 | 0, HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, HEAP32[($29_1 + 416 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 232 | 0) >> 2] | 0 | 0, $844_1 | 0, HEAP32[($29_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 268 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[(HEAP32[($29_1 + 348 | 0) >> 2] | 0) >> 2] = $845_1;
       HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
       HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 8 | 0) >> 2] = 2;
       break label$78;
      }
      HEAP32[($29_1 + 136 | 0) >> 2] = 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = 0;
      HEAP32[($29_1 + 144 | 0) >> 2] = 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      $870_1 = 0;
      $871_1 = $20($870_1 | 0, HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, HEAP32[($29_1 + 416 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 232 | 0) >> 2] | 0 | 0, $870_1 | 0, HEAP32[($29_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 268 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[(HEAP32[($29_1 + 348 | 0) >> 2] | 0) >> 2] = $871_1;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 8 | 0) >> 2] = 2;
     }
    }
    $863(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 196 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 184 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 188 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 180 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 176 | 0) >> 2] | 0 | 0);
    HEAP32[($29_1 + 460 | 0) >> 2] = HEAP32[($29_1 + 348 | 0) >> 2] | 0;
    break label$65;
   }
   label$80 : {
    if (!((HEAP32[($29_1 + 228 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
     break label$80
    }
    label$81 : {
     if (!((HEAP32[($29_1 + 332 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$81
     }
     label$82 : {
      label$83 : {
       if (!((HEAP32[($29_1 + 344 | 0) >> 2] | 0 | 0) < ((HEAP32[($29_1 + 228 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
        break label$83
       }
       $908 = HEAP32[($29_1 + 344 | 0) >> 2] | 0;
       break label$82;
      }
      $908 = (HEAP32[($29_1 + 228 | 0) >> 2] | 0) - 1 | 0;
     }
     HEAP32[($29_1 + 344 | 0) >> 2] = $908;
    }
    label$84 : {
     if (!((HEAP32[($29_1 + 324 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$84
     }
     label$85 : {
      label$86 : {
       if (!((HEAP32[($29_1 + 336 | 0) >> 2] | 0 | 0) < ((HEAP32[($29_1 + 228 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
        break label$86
       }
       $930 = HEAP32[($29_1 + 336 | 0) >> 2] | 0;
       break label$85;
      }
      $930 = (HEAP32[($29_1 + 228 | 0) >> 2] | 0) - 1 | 0;
     }
     HEAP32[($29_1 + 336 | 0) >> 2] = $930;
    }
   }
   label$87 : {
    label$88 : {
     if (!(HEAP32[($29_1 + 264 | 0) >> 2] | 0)) {
      break label$88
     }
     $942 = 0;
     (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $14($942 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, $942 | 0, $942 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, $942 | 0, HEAP32[($29_1 + 436 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 160 | 0) >> 2] = wasm2js_i32$1;
     label$89 : {
      label$90 : {
       if (HEAP32[($29_1 + 388 | 0) >> 2] | 0) {
        break label$90
       }
       $16(HEAP32[($29_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0);
       break label$89;
      }
      $16(HEAP32[($29_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0);
     }
     label$91 : {
      label$92 : {
       if (!((HEAP32[((HEAP32[($29_1 + 160 | 0) >> 2] | 0) + 120 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$92
       }
       (wasm2js_i32$0 = $29_1, wasm2js_f64$0 = -2.0 * +HEAPF64[((HEAP32[($29_1 + 160 | 0) >> 2] | 0) + 104 | 0) >> 3] - +(HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0) * +$729(+(+HEAPF64[((HEAP32[($29_1 + 160 | 0) >> 2] | 0) + 96 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 72 | 0) >> 3] = wasm2js_f64$0;
       break label$91;
      }
      HEAPF64[($29_1 + 72 | 0) >> 3] = +(0 | 0);
     }
     $21(HEAP32[($29_1 + 160 | 0) >> 2] | 0 | 0);
     break label$87;
    }
    HEAPF64[($29_1 + 72 | 0) >> 3] = +(0 | 0);
   }
   $967 = 0;
   label$93 : {
    if (!(HEAP32[($29_1 + 236 | 0) >> 2] | 0)) {
     break label$93
    }
    $967 = ((HEAP32[($29_1 + 284 | 0) >> 2] | 0) + (HEAP32[($29_1 + 280 | 0) >> 2] | 0) | 0 | 0) == (1 | 0);
   }
   HEAP32[($29_1 + 236 | 0) >> 2] = $967 & 1 | 0;
   $980 = 0;
   label$94 : {
    if (!(HEAP32[($29_1 + 232 | 0) >> 2] | 0)) {
     break label$94
    }
    $980 = ((HEAP32[($29_1 + 284 | 0) >> 2] | 0) + (HEAP32[($29_1 + 280 | 0) >> 2] | 0) | 0 | 0) == (0 | 0);
   }
   HEAP32[($29_1 + 232 | 0) >> 2] = $980 & 1 | 0;
   $993 = 1;
   label$95 : {
    if (HEAP32[($29_1 + 236 | 0) >> 2] | 0) {
     break label$95
    }
    $993 = (HEAP32[($29_1 + 232 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   HEAP32[($29_1 + 260 | 0) >> 2] = $993 & 1 | 0;
   label$96 : {
    if (HEAP32[($29_1 + 244 | 0) >> 2] | 0) {
     break label$96
    }
    HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 8 | 0) >> 2] = 1;
    HEAP32[(HEAP32[($29_1 + 348 | 0) >> 2] | 0) >> 2] = 0;
    HEAP32[($29_1 + 232 | 0) >> 2] = 1;
    $1027 = $22(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 344 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 336 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 332 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 324 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 256 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 252 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 436 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 356 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 268 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $1027;
    $863(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 196 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 184 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 188 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 180 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($29_1 + 176 | 0) >> 2] | 0 | 0);
    HEAP32[($29_1 + 460 | 0) >> 2] = HEAP32[($29_1 + 348 | 0) >> 2] | 0;
    break label$65;
   }
   label$97 : {
    if (!((HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0) < (10 | 0) & 1 | 0)) {
     break label$97
    }
    label$98 : {
     label$99 : {
      if (!((HEAP32[($29_1 + 300 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0)) {
       break label$99
      }
      $1051 = HEAP32[($29_1 + 300 | 0) >> 2] | 0;
      break label$98;
     }
     $1051 = 1;
    }
    HEAP32[($29_1 + 300 | 0) >> 2] = $1051;
    label$100 : {
     label$101 : {
      if (!((HEAP32[($29_1 + 296 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0)) {
       break label$101
      }
      $1062 = HEAP32[($29_1 + 296 | 0) >> 2] | 0;
      break label$100;
     }
     $1062 = 1;
    }
    HEAP32[($29_1 + 296 | 0) >> 2] = $1062;
    HEAP32[($29_1 + 292 | 0) >> 2] = 0;
    HEAP32[($29_1 + 288 | 0) >> 2] = 0;
   }
   label$102 : {
    label$103 : {
     if (!((HEAP32[($29_1 + 300 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 344 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$103
     }
     $1075 = HEAP32[($29_1 + 300 | 0) >> 2] | 0;
     break label$102;
    }
    $1075 = HEAP32[($29_1 + 344 | 0) >> 2] | 0;
   }
   $1077 = $1075;
   HEAP32[($29_1 + 300 | 0) >> 2] = $1077;
   HEAP32[($29_1 + 320 | 0) >> 2] = $1077;
   label$104 : {
    label$105 : {
     if (!((HEAP32[($29_1 + 296 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 336 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$105
     }
     $1086 = HEAP32[($29_1 + 296 | 0) >> 2] | 0;
     break label$104;
    }
    $1086 = HEAP32[($29_1 + 336 | 0) >> 2] | 0;
   }
   $1088 = $1086;
   HEAP32[($29_1 + 296 | 0) >> 2] = $1088;
   HEAP32[($29_1 + 316 | 0) >> 2] = $1088;
   label$106 : {
    label$107 : {
     if (!((HEAP32[($29_1 + 292 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 332 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$107
     }
     $1097 = HEAP32[($29_1 + 292 | 0) >> 2] | 0;
     break label$106;
    }
    $1097 = HEAP32[($29_1 + 332 | 0) >> 2] | 0;
   }
   $1099 = $1097;
   HEAP32[($29_1 + 292 | 0) >> 2] = $1099;
   HEAP32[($29_1 + 312 | 0) >> 2] = $1099;
   label$108 : {
    label$109 : {
     if (!((HEAP32[($29_1 + 288 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$109
     }
     $1108 = HEAP32[($29_1 + 288 | 0) >> 2] | 0;
     break label$108;
    }
    $1108 = HEAP32[($29_1 + 324 | 0) >> 2] | 0;
   }
   $1110 = $1108;
   HEAP32[($29_1 + 288 | 0) >> 2] = $1110;
   HEAP32[($29_1 + 308 | 0) >> 2] = $1110;
   (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $864((HEAP32[($29_1 + 240 | 0) >> 2] | 0) << 3 | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 172 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($29_1 + 116 | 0) >> 2] = HEAP32[($29_1 + 320 | 0) >> 2] | 0;
   HEAP32[($29_1 + 120 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
   HEAP32[($29_1 + 124 | 0) >> 2] = HEAP32[($29_1 + 316 | 0) >> 2] | 0;
   HEAP32[($29_1 + 96 | 0) >> 2] = HEAP32[($29_1 + 312 | 0) >> 2] | 0;
   HEAP32[($29_1 + 100 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
   HEAP32[($29_1 + 104 | 0) >> 2] = HEAP32[($29_1 + 308 | 0) >> 2] | 0;
   HEAP32[($29_1 + 108 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
   HEAP32[($29_1 + 304 | 0) >> 2] = 0;
   HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 116 | 0 | 0, $29_1 + 96 | 0 | 0, HEAP32[($29_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 156 | 0) >> 2] = wasm2js_i32$1;
   HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[($29_1 + 156 | 0) >> 2] | 0) + 8 | 0) >> 3];
   $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[($29_1 + 156 | 0) >> 2] | 0) + 8 | 0) >> 3]));
   HEAP32[(HEAP32[($29_1 + 348 | 0) >> 2] | 0) >> 2] = 0;
   HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 8 | 0) >> 2] = 1;
   HEAP32[($29_1 + 144 | 0) >> 2] = 0;
   HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
   HEAP32[($29_1 + 152 | 0) >> 2] = 0;
   HEAP32[($29_1 + 128 | 0) >> 2] = 0;
   HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
   HEAP32[($29_1 + 136 | 0) >> 2] = 0;
   HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
   $1178 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
   HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $1178;
   $1187 = 0;
   $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, 2 | 0, $1187 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, $1187 | 0, $1187 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, $1187 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
   label$110 : {
    if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[((HEAP32[($29_1 + 156 | 0) >> 2] | 0) + 8 | 0) >> 3] & 1 | 0)) {
     break label$110
    }
    HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
    i64toi32_i32$2 = $29_1 + 144 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $6677 = i64toi32_i32$0;
    i64toi32_i32$0 = $29_1 + 116 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $6677;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1202 = 8;
    HEAP32[(i64toi32_i32$0 + $1202 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $1202 | 0) >> 2] | 0;
    $1208 = $29_1 + 96 | 0;
    i64toi32_i32$2 = $29_1 + 128 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $6699 = i64toi32_i32$1;
    i64toi32_i32$1 = $1208;
    HEAP32[i64toi32_i32$1 >> 2] = $6699;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1212 = 8;
    i64toi32_i32$2 = i64toi32_i32$2 + $1212 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $6709 = i64toi32_i32$0;
    i64toi32_i32$0 = $1208 + $1212 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $6709;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
    HEAP32[($29_1 + 308 | 0) >> 2] = 0;
    HEAP32[($29_1 + 312 | 0) >> 2] = 0;
    HEAP32[($29_1 + 316 | 0) >> 2] = 0;
    HEAP32[($29_1 + 320 | 0) >> 2] = 0;
   }
   HEAP32[($29_1 + 204 | 0) >> 2] = 2;
   $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   label$111 : {
    label$112 : {
     if ((HEAP32[($29_1 + 344 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0) {
      break label$112
     }
     if (!((HEAP32[($29_1 + 332 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$111
     }
    }
    HEAP32[($29_1 + 144 | 0) >> 2] = (HEAP32[($29_1 + 344 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0;
    HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
    HEAP32[($29_1 + 152 | 0) >> 2] = 0;
    $1254 = 0;
    label$113 : {
     if (!((HEAP32[($29_1 + 332 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$113
     }
     $1254 = (HEAP32[($29_1 + 228 | 0) >> 2] | 0 | 0) > (1 | 0);
    }
    HEAP32[($29_1 + 128 | 0) >> 2] = $1254 & 1 | 0;
    HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
    HEAP32[($29_1 + 136 | 0) >> 2] = 0;
    HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
    $1281 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
    HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $1281;
    $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
    label$114 : {
     if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
      break label$114
     }
     HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
     i64toi32_i32$2 = $29_1 + 144 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $6922 = i64toi32_i32$1;
     i64toi32_i32$1 = $29_1 + 116 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $6922;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $1309 = 8;
     HEAP32[(i64toi32_i32$1 + $1309 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $1309 | 0) >> 2] | 0;
     $1315 = $29_1 + 96 | 0;
     i64toi32_i32$2 = $29_1 + 128 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $6944 = i64toi32_i32$0;
     i64toi32_i32$0 = $1315;
     HEAP32[i64toi32_i32$0 >> 2] = $6944;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $1319 = 8;
     i64toi32_i32$2 = i64toi32_i32$2 + $1319 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $6954 = i64toi32_i32$1;
     i64toi32_i32$1 = $1315 + $1319 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $6954;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
     HEAP32[($29_1 + 320 | 0) >> 2] = HEAP32[($29_1 + 144 | 0) >> 2] | 0;
     HEAP32[($29_1 + 312 | 0) >> 2] = HEAP32[($29_1 + 128 | 0) >> 2] | 0;
     HEAP32[($29_1 + 308 | 0) >> 2] = 0;
     HEAP32[($29_1 + 316 | 0) >> 2] = 0;
    }
    HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
    $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   }
   label$115 : {
    label$116 : {
     if ((HEAP32[($29_1 + 336 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0) {
      break label$116
     }
     if (!((HEAP32[($29_1 + 324 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$115
     }
    }
    HEAP32[($29_1 + 144 | 0) >> 2] = 0;
    HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
    HEAP32[($29_1 + 152 | 0) >> 2] = (HEAP32[($29_1 + 336 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0;
    HEAP32[($29_1 + 128 | 0) >> 2] = 0;
    HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
    $1365 = 0;
    label$117 : {
     if (!((HEAP32[($29_1 + 324 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$117
     }
     $1365 = (HEAP32[($29_1 + 228 | 0) >> 2] | 0 | 0) > (1 | 0);
    }
    HEAP32[($29_1 + 136 | 0) >> 2] = $1365 & 1 | 0;
    HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
    $1390 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
    HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $1390;
    $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
    label$118 : {
     if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
      break label$118
     }
     HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
     i64toi32_i32$2 = $29_1 + 144 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $7176 = i64toi32_i32$0;
     i64toi32_i32$0 = $29_1 + 116 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $7176;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $1418 = 8;
     HEAP32[(i64toi32_i32$0 + $1418 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $1418 | 0) >> 2] | 0;
     $1424 = $29_1 + 96 | 0;
     i64toi32_i32$2 = $29_1 + 128 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $7198 = i64toi32_i32$1;
     i64toi32_i32$1 = $1424;
     HEAP32[i64toi32_i32$1 >> 2] = $7198;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $1428 = 8;
     i64toi32_i32$2 = i64toi32_i32$2 + $1428 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $7208 = i64toi32_i32$0;
     i64toi32_i32$0 = $1424 + $1428 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $7208;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
     HEAP32[($29_1 + 316 | 0) >> 2] = HEAP32[($29_1 + 152 | 0) >> 2] | 0;
     HEAP32[($29_1 + 308 | 0) >> 2] = HEAP32[($29_1 + 136 | 0) >> 2] | 0;
     HEAP32[($29_1 + 312 | 0) >> 2] = 0;
     HEAP32[($29_1 + 320 | 0) >> 2] = 0;
    }
    HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
    $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   }
   label$119 : {
    if (!(HEAP32[($29_1 + 260 | 0) >> 2] | 0)) {
     break label$119
    }
    HEAP32[($29_1 + 144 | 0) >> 2] = 0;
    HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
    HEAP32[($29_1 + 152 | 0) >> 2] = 0;
    HEAP32[($29_1 + 128 | 0) >> 2] = 0;
    HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
    HEAP32[($29_1 + 136 | 0) >> 2] = 0;
    HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
    $1462 = 0;
    $1463 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, $1462 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, $1462 | 0) | 0;
    HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $1463;
    $1473 = 0;
    $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0 | 0, $1473 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, $1473 | 0, $1473 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, $1473 | 0, $1473 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
    label$120 : {
     if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
      break label$120
     }
     HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
     i64toi32_i32$2 = $29_1 + 144 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $7364 = i64toi32_i32$1;
     i64toi32_i32$1 = $29_1 + 116 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $7364;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $1487 = 8;
     HEAP32[(i64toi32_i32$1 + $1487 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $1487 | 0) >> 2] | 0;
     $1493 = $29_1 + 96 | 0;
     i64toi32_i32$2 = $29_1 + 128 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $7386 = i64toi32_i32$0;
     i64toi32_i32$0 = $1493;
     HEAP32[i64toi32_i32$0 >> 2] = $7386;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $1497 = 8;
     i64toi32_i32$2 = i64toi32_i32$2 + $1497 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $7396 = i64toi32_i32$1;
     i64toi32_i32$1 = $1493 + $1497 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $7396;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($29_1 + 88 | 0) >> 2] = 0;
     HEAP32[($29_1 + 308 | 0) >> 2] = 0;
     HEAP32[($29_1 + 312 | 0) >> 2] = 0;
     HEAP32[($29_1 + 316 | 0) >> 2] = 0;
     HEAP32[($29_1 + 320 | 0) >> 2] = 0;
    }
    HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
    $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($29_1 + 84 | 0) >> 2] = 0;
   label$121 : while (1) {
    $1519 = 0;
    label$122 : {
     if (!((HEAP32[($29_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$122
     }
     $1519 = (HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0);
    }
    label$123 : {
     if (!($1519 & 1 | 0)) {
      break label$123
     }
     HEAP32[($29_1 + 84 | 0) >> 2] = HEAP32[($29_1 + 204 | 0) >> 2] | 0;
     label$124 : {
      if (!((HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$124
      }
      if (!($26(HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 312 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$124
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$125 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$125
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = HEAP32[($29_1 + 320 | 0) >> 2] | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = HEAP32[($29_1 + 316 | 0) >> 2] | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = (HEAP32[($29_1 + 312 | 0) >> 2] | 0) - 1 | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = HEAP32[($29_1 + 308 | 0) >> 2] | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $1582 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $1582;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$126 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$126
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $7665 = i64toi32_i32$0;
       i64toi32_i32$0 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7665;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $1608 = 8;
       HEAP32[(i64toi32_i32$0 + $1608 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $1608 | 0) >> 2] | 0;
       $1614 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $7687 = i64toi32_i32$1;
       i64toi32_i32$1 = $1614;
       HEAP32[i64toi32_i32$1 >> 2] = $7687;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $1618 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $1618 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $7697 = i64toi32_i32$0;
       i64toi32_i32$0 = $1614 + $1618 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7697;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 312 | 0) >> 2] = (HEAP32[($29_1 + 312 | 0) >> 2] | 0) - 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$127 : {
      if (!((HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$127
      }
      if (!($26(HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 308 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$127
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$128 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$128
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = HEAP32[($29_1 + 320 | 0) >> 2] | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = HEAP32[($29_1 + 316 | 0) >> 2] | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = HEAP32[($29_1 + 312 | 0) >> 2] | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = (HEAP32[($29_1 + 308 | 0) >> 2] | 0) - 1 | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $1682 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $1682;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$129 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$129
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $7928 = i64toi32_i32$1;
       i64toi32_i32$1 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $7928;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $1708 = 8;
       HEAP32[(i64toi32_i32$1 + $1708 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $1708 | 0) >> 2] | 0;
       $1714 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $7950 = i64toi32_i32$0;
       i64toi32_i32$0 = $1714;
       HEAP32[i64toi32_i32$0 >> 2] = $7950;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $1718 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $1718 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $7960 = i64toi32_i32$1;
       i64toi32_i32$1 = $1714 + $1718 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $7960;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 308 | 0) >> 2] = (HEAP32[($29_1 + 308 | 0) >> 2] | 0) - 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$130 : {
      if (!((HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 332 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$130
      }
      if (!($26(HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 312 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$130
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$131 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$131
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = HEAP32[($29_1 + 320 | 0) >> 2] | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = HEAP32[($29_1 + 316 | 0) >> 2] | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = (HEAP32[($29_1 + 312 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = HEAP32[($29_1 + 308 | 0) >> 2] | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $1782 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $1782;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$132 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$132
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $8193 = i64toi32_i32$0;
       i64toi32_i32$0 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $8193;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $1808 = 8;
       HEAP32[(i64toi32_i32$0 + $1808 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $1808 | 0) >> 2] | 0;
       $1814 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $8215 = i64toi32_i32$1;
       i64toi32_i32$1 = $1814;
       HEAP32[i64toi32_i32$1 >> 2] = $8215;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $1818 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $1818 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $8225 = i64toi32_i32$0;
       i64toi32_i32$0 = $1814 + $1818 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $8225;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 312 | 0) >> 2] = (HEAP32[($29_1 + 312 | 0) >> 2] | 0) + 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$133 : {
      if (!((HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$133
      }
      if (!($26(HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 308 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$133
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$134 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$134
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = HEAP32[($29_1 + 320 | 0) >> 2] | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = HEAP32[($29_1 + 316 | 0) >> 2] | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = HEAP32[($29_1 + 312 | 0) >> 2] | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = (HEAP32[($29_1 + 308 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $1882 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $1882;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$135 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$135
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $8458 = i64toi32_i32$1;
       i64toi32_i32$1 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $8458;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $1908 = 8;
       HEAP32[(i64toi32_i32$1 + $1908 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $1908 | 0) >> 2] | 0;
       $1914 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $8480 = i64toi32_i32$0;
       i64toi32_i32$0 = $1914;
       HEAP32[i64toi32_i32$0 >> 2] = $8480;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $1918 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $1918 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $8490 = i64toi32_i32$1;
       i64toi32_i32$1 = $1914 + $1918 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $8490;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 308 | 0) >> 2] = (HEAP32[($29_1 + 308 | 0) >> 2] | 0) + 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$136 : {
      if (!((HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$136
      }
      if (!((HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$136
      }
      if (!($26(HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 312 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 308 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$136
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$137 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$137
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = HEAP32[($29_1 + 320 | 0) >> 2] | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = HEAP32[($29_1 + 316 | 0) >> 2] | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = (HEAP32[($29_1 + 312 | 0) >> 2] | 0) - 1 | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = (HEAP32[($29_1 + 308 | 0) >> 2] | 0) - 1 | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $1993 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $1993;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$138 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$138
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $8739 = i64toi32_i32$0;
       i64toi32_i32$0 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $8739;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $2019 = 8;
       HEAP32[(i64toi32_i32$0 + $2019 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $2019 | 0) >> 2] | 0;
       $2025 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $8761 = i64toi32_i32$1;
       i64toi32_i32$1 = $2025;
       HEAP32[i64toi32_i32$1 >> 2] = $8761;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $2029 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $2029 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $8771 = i64toi32_i32$0;
       i64toi32_i32$0 = $2025 + $2029 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $8771;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 312 | 0) >> 2] = (HEAP32[($29_1 + 312 | 0) >> 2] | 0) - 1 | 0;
       HEAP32[($29_1 + 308 | 0) >> 2] = (HEAP32[($29_1 + 308 | 0) >> 2] | 0) - 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$139 : {
      if (!((HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$139
      }
      if (!((HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$139
      }
      if (!($26(HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 312 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 308 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$139
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$140 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$140
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = HEAP32[($29_1 + 320 | 0) >> 2] | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = HEAP32[($29_1 + 316 | 0) >> 2] | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = (HEAP32[($29_1 + 312 | 0) >> 2] | 0) - 1 | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = (HEAP32[($29_1 + 308 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $2107 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2107;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$141 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$141
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $9029 = i64toi32_i32$1;
       i64toi32_i32$1 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $9029;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $2133 = 8;
       HEAP32[(i64toi32_i32$1 + $2133 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $2133 | 0) >> 2] | 0;
       $2139 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $9051 = i64toi32_i32$0;
       i64toi32_i32$0 = $2139;
       HEAP32[i64toi32_i32$0 >> 2] = $9051;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $2143 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $2143 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $9061 = i64toi32_i32$1;
       i64toi32_i32$1 = $2139 + $2143 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $9061;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 312 | 0) >> 2] = (HEAP32[($29_1 + 312 | 0) >> 2] | 0) - 1 | 0;
       HEAP32[($29_1 + 308 | 0) >> 2] = (HEAP32[($29_1 + 308 | 0) >> 2] | 0) + 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$142 : {
      if (!((HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$142
      }
      if (!((HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 332 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$142
      }
      if (!($26(HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 312 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 308 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$142
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$143 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$143
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = HEAP32[($29_1 + 320 | 0) >> 2] | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = HEAP32[($29_1 + 316 | 0) >> 2] | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = (HEAP32[($29_1 + 312 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = (HEAP32[($29_1 + 308 | 0) >> 2] | 0) - 1 | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $2221 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2221;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$144 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$144
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $9319 = i64toi32_i32$0;
       i64toi32_i32$0 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $9319;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $2247 = 8;
       HEAP32[(i64toi32_i32$0 + $2247 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $2247 | 0) >> 2] | 0;
       $2253 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $9341 = i64toi32_i32$1;
       i64toi32_i32$1 = $2253;
       HEAP32[i64toi32_i32$1 >> 2] = $9341;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $2257 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $2257 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $9351 = i64toi32_i32$0;
       i64toi32_i32$0 = $2253 + $2257 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $9351;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 312 | 0) >> 2] = (HEAP32[($29_1 + 312 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($29_1 + 308 | 0) >> 2] = (HEAP32[($29_1 + 308 | 0) >> 2] | 0) - 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$145 : {
      if (!((HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$145
      }
      if (!((HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 332 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$145
      }
      if (!($26(HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 312 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 308 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$145
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$146 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$146
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = HEAP32[($29_1 + 320 | 0) >> 2] | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = HEAP32[($29_1 + 316 | 0) >> 2] | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = (HEAP32[($29_1 + 312 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = (HEAP32[($29_1 + 308 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $2335 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2335;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$147 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$147
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $9611 = i64toi32_i32$1;
       i64toi32_i32$1 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $9611;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $2361 = 8;
       HEAP32[(i64toi32_i32$1 + $2361 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $2361 | 0) >> 2] | 0;
       $2367 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $9633 = i64toi32_i32$0;
       i64toi32_i32$0 = $2367;
       HEAP32[i64toi32_i32$0 >> 2] = $9633;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $2371 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $2371 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $9643 = i64toi32_i32$1;
       i64toi32_i32$1 = $2367 + $2371 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $9643;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 312 | 0) >> 2] = (HEAP32[($29_1 + 312 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($29_1 + 308 | 0) >> 2] = (HEAP32[($29_1 + 308 | 0) >> 2] | 0) + 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$148 : {
      if (!((HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$148
      }
      if (!($26((HEAP32[($29_1 + 320 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$148
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$149 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$149
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = (HEAP32[($29_1 + 320 | 0) >> 2] | 0) - 1 | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = HEAP32[($29_1 + 316 | 0) >> 2] | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = HEAP32[($29_1 + 312 | 0) >> 2] | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = HEAP32[($29_1 + 308 | 0) >> 2] | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $2438 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2438;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$150 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$150
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $9881 = i64toi32_i32$0;
       i64toi32_i32$0 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $9881;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $2464 = 8;
       HEAP32[(i64toi32_i32$0 + $2464 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $2464 | 0) >> 2] | 0;
       $2470 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $9903 = i64toi32_i32$1;
       i64toi32_i32$1 = $2470;
       HEAP32[i64toi32_i32$1 >> 2] = $9903;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $2474 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $2474 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $9913 = i64toi32_i32$0;
       i64toi32_i32$0 = $2470 + $2474 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $9913;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 320 | 0) >> 2] = (HEAP32[($29_1 + 320 | 0) >> 2] | 0) - 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$151 : {
      if (!((HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$151
      }
      if (!($26(HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 316 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$151
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$152 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$152
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = HEAP32[($29_1 + 320 | 0) >> 2] | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = (HEAP32[($29_1 + 316 | 0) >> 2] | 0) - 1 | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = HEAP32[($29_1 + 312 | 0) >> 2] | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = HEAP32[($29_1 + 308 | 0) >> 2] | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $2538 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2538;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$153 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$153
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $10144 = i64toi32_i32$1;
       i64toi32_i32$1 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $10144;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $2564 = 8;
       HEAP32[(i64toi32_i32$1 + $2564 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $2564 | 0) >> 2] | 0;
       $2570 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $10166 = i64toi32_i32$0;
       i64toi32_i32$0 = $2570;
       HEAP32[i64toi32_i32$0 >> 2] = $10166;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $2574 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $2574 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $10176 = i64toi32_i32$1;
       i64toi32_i32$1 = $2570 + $2574 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $10176;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 316 | 0) >> 2] = (HEAP32[($29_1 + 316 | 0) >> 2] | 0) - 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$154 : {
      if (!((HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 344 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$154
      }
      if (!($26((HEAP32[($29_1 + 320 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$154
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$155 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$155
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = (HEAP32[($29_1 + 320 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = HEAP32[($29_1 + 316 | 0) >> 2] | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = HEAP32[($29_1 + 312 | 0) >> 2] | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = HEAP32[($29_1 + 308 | 0) >> 2] | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $2638 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2638;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$156 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$156
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $10409 = i64toi32_i32$0;
       i64toi32_i32$0 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $10409;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $2664 = 8;
       HEAP32[(i64toi32_i32$0 + $2664 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $2664 | 0) >> 2] | 0;
       $2670 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $10431 = i64toi32_i32$1;
       i64toi32_i32$1 = $2670;
       HEAP32[i64toi32_i32$1 >> 2] = $10431;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $2674 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $2674 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $10441 = i64toi32_i32$0;
       i64toi32_i32$0 = $2670 + $2674 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $10441;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 320 | 0) >> 2] = (HEAP32[($29_1 + 320 | 0) >> 2] | 0) + 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$157 : {
      if (!((HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 336 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$157
      }
      if (!($26(HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 316 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$157
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$158 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$158
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = HEAP32[($29_1 + 320 | 0) >> 2] | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = (HEAP32[($29_1 + 316 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = HEAP32[($29_1 + 312 | 0) >> 2] | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = HEAP32[($29_1 + 308 | 0) >> 2] | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $2738 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2738;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$159 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$159
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $10674 = i64toi32_i32$1;
       i64toi32_i32$1 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $10674;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $2764 = 8;
       HEAP32[(i64toi32_i32$1 + $2764 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $2764 | 0) >> 2] | 0;
       $2770 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $10696 = i64toi32_i32$0;
       i64toi32_i32$0 = $2770;
       HEAP32[i64toi32_i32$0 >> 2] = $10696;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $2774 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $2774 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $10706 = i64toi32_i32$1;
       i64toi32_i32$1 = $2770 + $2774 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $10706;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 316 | 0) >> 2] = (HEAP32[($29_1 + 316 | 0) >> 2] | 0) + 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$160 : {
      if (!((HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$160
      }
      if (!((HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$160
      }
      if (!($26((HEAP32[($29_1 + 320 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 316 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$160
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$161 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$161
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = (HEAP32[($29_1 + 320 | 0) >> 2] | 0) - 1 | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = (HEAP32[($29_1 + 316 | 0) >> 2] | 0) - 1 | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = HEAP32[($29_1 + 312 | 0) >> 2] | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = HEAP32[($29_1 + 308 | 0) >> 2] | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $2849 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2849;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$162 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$162
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $10955 = i64toi32_i32$0;
       i64toi32_i32$0 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $10955;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $2875 = 8;
       HEAP32[(i64toi32_i32$0 + $2875 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $2875 | 0) >> 2] | 0;
       $2881 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $10977 = i64toi32_i32$1;
       i64toi32_i32$1 = $2881;
       HEAP32[i64toi32_i32$1 >> 2] = $10977;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $2885 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $2885 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $10987 = i64toi32_i32$0;
       i64toi32_i32$0 = $2881 + $2885 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $10987;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 320 | 0) >> 2] = (HEAP32[($29_1 + 320 | 0) >> 2] | 0) - 1 | 0;
       HEAP32[($29_1 + 316 | 0) >> 2] = (HEAP32[($29_1 + 316 | 0) >> 2] | 0) - 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$163 : {
      if (!((HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 336 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$163
      }
      if (!((HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$163
      }
      if (!($26((HEAP32[($29_1 + 320 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 316 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$163
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$164 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$164
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = (HEAP32[($29_1 + 320 | 0) >> 2] | 0) - 1 | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = (HEAP32[($29_1 + 316 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = HEAP32[($29_1 + 312 | 0) >> 2] | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = HEAP32[($29_1 + 308 | 0) >> 2] | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $2963 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2963;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$165 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$165
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $11245 = i64toi32_i32$1;
       i64toi32_i32$1 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $11245;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $2989 = 8;
       HEAP32[(i64toi32_i32$1 + $2989 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $2989 | 0) >> 2] | 0;
       $2995 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $11267 = i64toi32_i32$0;
       i64toi32_i32$0 = $2995;
       HEAP32[i64toi32_i32$0 >> 2] = $11267;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $2999 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $2999 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $11277 = i64toi32_i32$1;
       i64toi32_i32$1 = $2995 + $2999 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $11277;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 320 | 0) >> 2] = (HEAP32[($29_1 + 320 | 0) >> 2] | 0) - 1 | 0;
       HEAP32[($29_1 + 316 | 0) >> 2] = (HEAP32[($29_1 + 316 | 0) >> 2] | 0) + 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$166 : {
      if (!((HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$166
      }
      if (!((HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 344 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$166
      }
      if (!($26((HEAP32[($29_1 + 320 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 316 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$166
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$167 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$167
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = (HEAP32[($29_1 + 320 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = (HEAP32[($29_1 + 316 | 0) >> 2] | 0) - 1 | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = HEAP32[($29_1 + 312 | 0) >> 2] | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = HEAP32[($29_1 + 308 | 0) >> 2] | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $3077 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $3077;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$168 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$168
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $11535 = i64toi32_i32$0;
       i64toi32_i32$0 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $11535;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $3103 = 8;
       HEAP32[(i64toi32_i32$0 + $3103 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $3103 | 0) >> 2] | 0;
       $3109 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $11557 = i64toi32_i32$1;
       i64toi32_i32$1 = $3109;
       HEAP32[i64toi32_i32$1 >> 2] = $11557;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $3113 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $3113 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $11567 = i64toi32_i32$0;
       i64toi32_i32$0 = $3109 + $3113 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $11567;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 320 | 0) >> 2] = (HEAP32[($29_1 + 320 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($29_1 + 316 | 0) >> 2] = (HEAP32[($29_1 + 316 | 0) >> 2] | 0) - 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$169 : {
      if (!((HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 336 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$169
      }
      if (!((HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 344 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$169
      }
      if (!($26((HEAP32[($29_1 + 320 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, (HEAP32[($29_1 + 316 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
       break label$169
      }
      HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      label$170 : {
       if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$170
       }
       continue label$121;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = (HEAP32[($29_1 + 320 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      HEAP32[($29_1 + 152 | 0) >> 2] = (HEAP32[($29_1 + 316 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($29_1 + 128 | 0) >> 2] = HEAP32[($29_1 + 312 | 0) >> 2] | 0;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      HEAP32[($29_1 + 136 | 0) >> 2] = HEAP32[($29_1 + 308 | 0) >> 2] | 0;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $3191 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $3191;
      $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
      label$171 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$171
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $11827 = i64toi32_i32$1;
       i64toi32_i32$1 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $11827;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $3217 = 8;
       HEAP32[(i64toi32_i32$1 + $3217 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $3217 | 0) >> 2] | 0;
       $3223 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $11849 = i64toi32_i32$0;
       i64toi32_i32$0 = $3223;
       HEAP32[i64toi32_i32$0 >> 2] = $11849;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $3227 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $3227 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $11859 = i64toi32_i32$1;
       i64toi32_i32$1 = $3223 + $3227 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $11859;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       HEAP32[($29_1 + 320 | 0) >> 2] = (HEAP32[($29_1 + 320 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($29_1 + 316 | 0) >> 2] = (HEAP32[($29_1 + 316 | 0) >> 2] | 0) + 1 | 0;
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       continue label$121;
      }
      $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     }
     label$172 : {
      label$173 : {
       if (HEAP32[($29_1 + 236 | 0) >> 2] | 0) {
        break label$173
       }
       if (!(HEAP32[($29_1 + 232 | 0) >> 2] | 0)) {
        break label$172
       }
      }
      HEAP32[($29_1 + 80 | 0) >> 2] = (HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0 ? 0 : 1;
      label$174 : {
       if (!($26(HEAP32[($29_1 + 320 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 284 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 316 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 308 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) | 0)) {
        break label$174
       }
       HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + 1 | 0;
       label$175 : {
        if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) > (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$175
        }
        continue label$121;
       }
       HEAP32[($29_1 + 144 | 0) >> 2] = HEAP32[($29_1 + 320 | 0) >> 2] | 0;
       HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
       HEAP32[($29_1 + 152 | 0) >> 2] = HEAP32[($29_1 + 316 | 0) >> 2] | 0;
       HEAP32[($29_1 + 128 | 0) >> 2] = HEAP32[($29_1 + 312 | 0) >> 2] | 0;
       HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
       HEAP32[($29_1 + 136 | 0) >> 2] = HEAP32[($29_1 + 308 | 0) >> 2] | 0;
       HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
       $3295 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 144 | 0 | 0, $29_1 + 128 | 0 | 0, HEAP32[($29_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
       HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $3295;
       $24(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 80 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3]));
       label$176 : {
        if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < +HEAPF64[($29_1 + 64 | 0) >> 3] & 1 | 0)) {
         break label$176
        }
        HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
        i64toi32_i32$2 = $29_1 + 144 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $12102 = i64toi32_i32$0;
        i64toi32_i32$0 = $29_1 + 116 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $12102;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        $3321 = 8;
        HEAP32[(i64toi32_i32$0 + $3321 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $3321 | 0) >> 2] | 0;
        $3327 = $29_1 + 96 | 0;
        i64toi32_i32$2 = $29_1 + 128 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $12124 = i64toi32_i32$1;
        i64toi32_i32$1 = $3327;
        HEAP32[i64toi32_i32$1 >> 2] = $12124;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        $3331 = 8;
        i64toi32_i32$2 = i64toi32_i32$2 + $3331 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $12134 = i64toi32_i32$0;
        i64toi32_i32$0 = $3327 + $3331 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $12134;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        $3334 = HEAP32[($29_1 + 80 | 0) >> 2] | 0;
        HEAP32[($29_1 + 260 | 0) >> 2] = $3334;
        HEAP32[($29_1 + 88 | 0) >> 2] = $3334;
       }
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
      }
     }
     continue label$121;
    }
    break label$121;
   };
   HEAP32[($29_1 + 204 | 0) >> 2] = (HEAP32[($29_1 + 204 | 0) >> 2] | 0) + -1 | 0;
   label$177 : {
    if (!((HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) == (HEAP32[($29_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$177
    }
    HEAP32[($29_1 + 48 | 0) >> 2] = HEAP32[($29_1 + 240 | 0) >> 2] | 0;
    $875(global$3 + 5437 | 0 | 0, $29_1 + 48 | 0 | 0) | 0;
   }
   label$178 : {
    if (!((HEAP32[($29_1 + 356 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$178
    }
    HEAP32[($29_1 + 212 | 0) >> 2] = 0;
    label$179 : {
     label$180 : while (1) {
      if (!((HEAP32[($29_1 + 212 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$179
      }
      $3921 = +HEAPF64[((HEAP32[($29_1 + 172 | 0) >> 2] | 0) + (((HEAP32[($29_1 + 212 | 0) >> 2] | 0) << 3 | 0) << 3 | 0) | 0) >> 3];
      label$181 : {
       label$182 : {
        if (!(Math_abs($3921) < 2147483648.0)) {
         break label$182
        }
        $3378 = ~~$3921;
        break label$181;
       }
       $3378 = -2147483648;
      }
      $3380 = $3378;
      $3924 = +HEAPF64[((HEAP32[($29_1 + 172 | 0) >> 2] | 0) + ((((HEAP32[($29_1 + 212 | 0) >> 2] | 0) << 3 | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
      label$183 : {
       label$184 : {
        if (!(Math_abs($3924) < 2147483648.0)) {
         break label$184
        }
        $3393 = ~~$3924;
        break label$183;
       }
       $3393 = -2147483648;
      }
      $3395 = $3393;
      $3927 = +HEAPF64[((HEAP32[($29_1 + 172 | 0) >> 2] | 0) + ((((HEAP32[($29_1 + 212 | 0) >> 2] | 0) << 3 | 0) + 2 | 0) << 3 | 0) | 0) >> 3];
      label$185 : {
       label$186 : {
        if (!(Math_abs($3927) < 2147483648.0)) {
         break label$186
        }
        $3408 = ~~$3927;
        break label$185;
       }
       $3408 = -2147483648;
      }
      $3410 = $3408;
      $3930 = +HEAPF64[((HEAP32[($29_1 + 172 | 0) >> 2] | 0) + ((((HEAP32[($29_1 + 212 | 0) >> 2] | 0) << 3 | 0) + 3 | 0) << 3 | 0) | 0) >> 3];
      label$187 : {
       label$188 : {
        if (!(Math_abs($3930) < 2147483648.0)) {
         break label$188
        }
        $3423 = ~~$3930;
        break label$187;
       }
       $3423 = -2147483648;
      }
      $3425 = $3423;
      $3933 = +HEAPF64[((HEAP32[($29_1 + 172 | 0) >> 2] | 0) + ((((HEAP32[($29_1 + 212 | 0) >> 2] | 0) << 3 | 0) + 4 | 0) << 3 | 0) | 0) >> 3];
      label$189 : {
       label$190 : {
        if (!(Math_abs($3933) < 2147483648.0)) {
         break label$190
        }
        $3438 = ~~$3933;
        break label$189;
       }
       $3438 = -2147483648;
      }
      $3440 = $3438;
      $3936 = +HEAPF64[((HEAP32[($29_1 + 172 | 0) >> 2] | 0) + ((((HEAP32[($29_1 + 212 | 0) >> 2] | 0) << 3 | 0) + 5 | 0) << 3 | 0) | 0) >> 3];
      label$191 : {
       label$192 : {
        if (!(Math_abs($3936) < 2147483648.0)) {
         break label$192
        }
        $3453 = ~~$3936;
        break label$191;
       }
       $3453 = -2147483648;
      }
      $3455 = $3453;
      $3939 = +HEAPF64[((HEAP32[($29_1 + 172 | 0) >> 2] | 0) + ((((HEAP32[($29_1 + 212 | 0) >> 2] | 0) << 3 | 0) + 6 | 0) << 3 | 0) | 0) >> 3];
      label$193 : {
       label$194 : {
        if (!(Math_abs($3939) < 2147483648.0)) {
         break label$194
        }
        $3468 = ~~$3939;
        break label$193;
       }
       $3468 = -2147483648;
      }
      HEAPF64[($29_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($29_1 + 172 | 0) >> 2] | 0) + ((((HEAP32[($29_1 + 212 | 0) >> 2] | 0) << 3 | 0) + 7 | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($29_1 + 24 | 0) >> 2] = $3468;
      HEAP32[($29_1 + 20 | 0) >> 2] = $3455;
      HEAP32[($29_1 + 16 | 0) >> 2] = $3440;
      HEAP32[($29_1 + 12 | 0) >> 2] = $3425;
      HEAP32[($29_1 + 8 | 0) >> 2] = $3410;
      HEAP32[($29_1 + 4 | 0) >> 2] = $3395;
      HEAP32[$29_1 >> 2] = $3380;
      $875(global$3 + 5221 | 0 | 0, $29_1 | 0) | 0;
      HEAP32[($29_1 + 212 | 0) >> 2] = (HEAP32[($29_1 + 212 | 0) >> 2] | 0) + 1 | 0;
      continue label$180;
     };
    }
   }
   $25(HEAP32[($29_1 + 156 | 0) >> 2] | 0 | 0);
   label$195 : {
    if (!(HEAP32[($29_1 + 264 | 0) >> 2] | 0)) {
     break label$195
    }
    (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $862((HEAP32[($29_1 + 204 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 168 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $29_1, wasm2js_i32$1 = $864(HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, 4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
    HEAP32[($29_1 + 212 | 0) >> 2] = 0;
    label$196 : {
     label$197 : while (1) {
      if (!((HEAP32[($29_1 + 212 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$196
      }
      HEAPF64[((HEAP32[($29_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($29_1 + 212 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($29_1 + 172 | 0) >> 2] | 0) + ((((HEAP32[($29_1 + 212 | 0) >> 2] | 0) << 3 | 0) + 7 | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($29_1 + 212 | 0) >> 2] = (HEAP32[($29_1 + 212 | 0) >> 2] | 0) + 1 | 0;
      continue label$197;
     };
    }
    $99(HEAP32[($29_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 60 | 0) >> 2] | 0 | 0);
    HEAP32[($29_1 + 212 | 0) >> 2] = 0;
    label$198 : {
     label$199 : while (1) {
      if (!((HEAP32[($29_1 + 212 | 0) >> 2] | 0 | 0) < (HEAP32[($29_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$198
      }
      label$200 : {
       if (!((HEAP32[($29_1 + 212 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
        break label$200
       }
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
      }
      $3944 = +HEAPF64[((HEAP32[($29_1 + 172 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[($29_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($29_1 + 212 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) << 3 | 0) | 0) >> 3];
      label$201 : {
       label$202 : {
        if (!(Math_abs($3944) < 2147483648.0)) {
         break label$202
        }
        $3563 = ~~$3944;
        break label$201;
       }
       $3563 = -2147483648;
      }
      HEAP32[($29_1 + 144 | 0) >> 2] = $3563;
      HEAP32[($29_1 + 148 | 0) >> 2] = HEAP32[($29_1 + 284 | 0) >> 2] | 0;
      $3947 = +HEAPF64[((HEAP32[($29_1 + 172 | 0) >> 2] | 0) + ((((HEAP32[((HEAP32[($29_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($29_1 + 212 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) + 2 | 0) << 3 | 0) | 0) >> 3];
      label$203 : {
       label$204 : {
        if (!(Math_abs($3947) < 2147483648.0)) {
         break label$204
        }
        $3584 = ~~$3947;
        break label$203;
       }
       $3584 = -2147483648;
      }
      HEAP32[($29_1 + 152 | 0) >> 2] = $3584;
      $3950 = +HEAPF64[((HEAP32[($29_1 + 172 | 0) >> 2] | 0) + ((((HEAP32[((HEAP32[($29_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($29_1 + 212 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) + 3 | 0) << 3 | 0) | 0) >> 3];
      label$205 : {
       label$206 : {
        if (!(Math_abs($3950) < 2147483648.0)) {
         break label$206
        }
        $3604 = ~~$3950;
        break label$205;
       }
       $3604 = -2147483648;
      }
      HEAP32[($29_1 + 128 | 0) >> 2] = $3604;
      HEAP32[($29_1 + 132 | 0) >> 2] = HEAP32[($29_1 + 280 | 0) >> 2] | 0;
      $3953 = +HEAPF64[((HEAP32[($29_1 + 172 | 0) >> 2] | 0) + ((((HEAP32[((HEAP32[($29_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($29_1 + 212 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) + 5 | 0) << 3 | 0) | 0) >> 3];
      label$207 : {
       label$208 : {
        if (!(Math_abs($3953) < 2147483648.0)) {
         break label$208
        }
        $3625 = ~~$3953;
        break label$207;
       }
       $3625 = -2147483648;
      }
      HEAP32[($29_1 + 136 | 0) >> 2] = $3625;
      HEAP32[($29_1 + 140 | 0) >> 2] = HEAP32[($29_1 + 436 | 0) >> 2] | 0;
      $3629 = HEAP32[($29_1 + 200 | 0) >> 2] | 0;
      $3630 = HEAP32[($29_1 + 452 | 0) >> 2] | 0;
      $3633 = $29_1 + 144 | 0;
      $3636 = $29_1 + 128 | 0;
      $3956 = +HEAPF64[((HEAP32[($29_1 + 172 | 0) >> 2] | 0) + ((((HEAP32[((HEAP32[($29_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($29_1 + 212 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) + 6 | 0) << 3 | 0) | 0) >> 3];
      label$209 : {
       label$210 : {
        if (!(Math_abs($3956) < 2147483648.0)) {
         break label$210
        }
        $3654 = ~~$3956;
        break label$209;
       }
       $3654 = -2147483648;
      }
      $3661 = 0;
      $3662 = $23($3629 | 0, $3630 | 0, $3633 | 0, $3636 | 0, $3654 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, $3661 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, $3661 | 0) | 0;
      HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $3662;
      label$211 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] < 1797693134862315708145274.0e284 & 1 | 0)) {
        break label$211
       }
       HEAPF64[($29_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 3];
       i64toi32_i32$2 = $29_1 + 144 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $12895 = i64toi32_i32$1;
       i64toi32_i32$1 = $29_1 + 116 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $12895;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $3677 = 8;
       HEAP32[(i64toi32_i32$1 + $3677 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $3677 | 0) >> 2] | 0;
       $3683 = $29_1 + 96 | 0;
       i64toi32_i32$2 = $29_1 + 128 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $12917 = i64toi32_i32$0;
       i64toi32_i32$0 = $3683;
       HEAP32[i64toi32_i32$0 >> 2] = $12917;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $3687 = 8;
       i64toi32_i32$2 = i64toi32_i32$2 + $3687 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $12927 = i64toi32_i32$1;
       i64toi32_i32$1 = $3683 + $3687 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $12927;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($29_1 + 88 | 0) >> 2] = HEAP32[($29_1 + 260 | 0) >> 2] | 0;
       $863(HEAP32[($29_1 + 168 | 0) >> 2] | 0 | 0);
       $863(HEAP32[($29_1 + 60 | 0) >> 2] | 0 | 0);
       $25(HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       HEAP32[($29_1 + 264 | 0) >> 2] = 0;
       break label$198;
      }
      HEAP32[($29_1 + 212 | 0) >> 2] = (HEAP32[($29_1 + 212 | 0) >> 2] | 0) + 1 | 0;
      continue label$199;
     };
    }
    label$212 : {
     if (!(HEAP32[($29_1 + 264 | 0) >> 2] | 0)) {
      break label$212
     }
     $863(HEAP32[($29_1 + 168 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($29_1 + 60 | 0) >> 2] | 0 | 0);
    }
   }
   $3717 = $23(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 452 | 0) >> 2] | 0 | 0, $29_1 + 116 | 0 | 0, $29_1 + 96 | 0 | 0, HEAP32[($29_1 + 260 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 412 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($29_1 + 72 | 0) >> 3]), HEAP32[($29_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($29_1 + 388 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
   HEAP32[((HEAP32[($29_1 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] = $3717;
   $863(HEAP32[($29_1 + 200 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($29_1 + 196 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($29_1 + 184 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($29_1 + 188 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($29_1 + 180 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($29_1 + 176 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($29_1 + 172 | 0) >> 2] | 0 | 0);
   HEAP32[($29_1 + 460 | 0) >> 2] = HEAP32[($29_1 + 348 | 0) >> 2] | 0;
  }
  $3727 = HEAP32[($29_1 + 460 | 0) >> 2] | 0;
  global$0 = $29_1 + 464 | 0;
  return $3727 | 0;
 }
 
 function $19($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    $863(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $863(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
  }
  $863(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $20($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $14_1 = 0, $186_1 = 0, $297_1 = 0.0, $275_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $14_1 = global$0 - 128 | 0;
  global$0 = $14_1;
  HEAP32[($14_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($14_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($14_1 + 116 | 0) >> 2] = $2_1;
  HEAP32[($14_1 + 112 | 0) >> 2] = $3_1;
  HEAP32[($14_1 + 108 | 0) >> 2] = $4_1;
  HEAP32[($14_1 + 104 | 0) >> 2] = $5_1;
  HEAP32[($14_1 + 100 | 0) >> 2] = $6_1;
  HEAP32[($14_1 + 96 | 0) >> 2] = $7_1;
  HEAP32[($14_1 + 92 | 0) >> 2] = $8_1;
  HEAP32[($14_1 + 88 | 0) >> 2] = $9_1;
  HEAP32[($14_1 + 84 | 0) >> 2] = $10_1;
  HEAP32[($14_1 + 80 | 0) >> 2] = $11_1;
  HEAP32[($14_1 + 76 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862((HEAP32[($14_1 + 116 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862((HEAP32[($14_1 + 116 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862(48 | 0) | 0), HEAP32[(wasm2js_i32$0 + 76 | 0) >> 2] = wasm2js_i32$1;
  $868(HEAP32[($14_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 120 | 0) >> 2] | 0 | 0, (HEAP32[($14_1 + 116 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  $868(HEAP32[($14_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 120 | 0) >> 2] | 0 | 0, (HEAP32[($14_1 + 116 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($14_1 + 88 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $7(HEAP32[($14_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 116 | 0) >> 2] | 0 | 0, +(+HEAPF64[(HEAP32[($14_1 + 88 | 0) >> 2] | 0) >> 3]), HEAP32[($14_1 + 28 | 0) >> 2] | 0 | 0);
  }
  label$2 : {
   if (!((HEAP32[($14_1 + 108 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($14_1 + 44 | 0) >> 2] = 0;
   HEAP32[($14_1 + 48 | 0) >> 2] = 0;
   HEAP32[($14_1 + 52 | 0) >> 2] = 0;
   HEAP32[($14_1 + 56 | 0) >> 2] = 0;
  }
  label$3 : {
   if (!((HEAP32[($14_1 + 124 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($14_1 + 68 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 112 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($14_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($14_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   label$4 : {
    if (!((HEAP32[($14_1 + 108 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($14_1 + 56 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 108 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($14_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($14_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    HEAP32[($14_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
   }
   label$5 : {
    label$6 : {
     if (!((HEAP32[($14_1 + 96 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($14_1 + 36 | 0) >> 2] = 1;
     break label$5;
    }
    HEAP32[($14_1 + 36 | 0) >> 2] = 0;
   }
   label$7 : {
    if (!(((HEAP32[($14_1 + 64 | 0) >> 2] | 0) + (HEAP32[($14_1 + 52 | 0) >> 2] | 0) | 0 | 0) > (1 | 0) & 1 | 0)) {
     break label$7
    }
    if (!((HEAP32[($14_1 + 96 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$7
    }
    HEAP32[($14_1 + 36 | 0) >> 2] = 0;
   }
   HEAP32[($14_1 + 32 | 0) >> 2] = HEAP32[($14_1 + 100 | 0) >> 2] | 0;
   label$8 : {
    label$9 : {
     if (!((HEAP32[($14_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$9
     }
     HEAP32[((HEAP32[($14_1 + 76 | 0) >> 2] | 0) + 4 | 0) >> 2] = 1;
     HEAP32[($14_1 + 32 | 0) >> 2] = (HEAP32[($14_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($14_1 + 116 | 0) >> 2] | 0) << 3 | 0, HEAP32[($14_1 + 32 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
     HEAP32[($14_1 + 72 | 0) >> 2] = 0;
     label$10 : {
      label$11 : while (1) {
       if (!((HEAP32[($14_1 + 72 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$10
       }
       HEAPF64[((HEAP32[($14_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 72 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($14_1 + 72 | 0) >> 2] | 0) + 1 | 0 | 0);
       HEAP32[($14_1 + 72 | 0) >> 2] = (HEAP32[($14_1 + 72 | 0) >> 2] | 0) + 1 | 0;
       continue label$11;
      };
     }
     $868((HEAP32[($14_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($14_1 + 104 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[($14_1 + 116 | 0) >> 2] | 0) << 3 | 0, (HEAP32[($14_1 + 32 | 0) >> 2] | 0) - 1 | 0) | 0) | 0;
     break label$8;
    }
    (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($14_1 + 116 | 0) >> 2] | 0) << 3 | 0, HEAP32[($14_1 + 32 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
    $868(HEAP32[($14_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 104 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[($14_1 + 116 | 0) >> 2] | 0) << 3 | 0, HEAP32[($14_1 + 32 | 0) >> 2] | 0) | 0) | 0;
   }
   $186_1 = $14(HEAP32[($14_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 116 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[(HEAP32[($14_1 + 76 | 0) >> 2] | 0) >> 2] = $186_1;
   $16(HEAP32[(HEAP32[($14_1 + 76 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 20 | 0) >> 2] | 0 | 0);
   HEAPF64[((HEAP32[($14_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[($14_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + 112 | 0) >> 3];
   HEAP32[($14_1 + 40 | 0) >> 2] = (((((HEAP32[((HEAP32[(HEAP32[($14_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + (HEAP32[((HEAP32[(HEAP32[($14_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[(HEAP32[($14_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[(HEAP32[($14_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[(HEAP32[($14_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) | 0) + 1 | 0;
   HEAPF64[((HEAP32[($14_1 + 76 | 0) >> 2] | 0) + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 3] + +((HEAP32[($14_1 + 40 | 0) >> 2] | 0) << 1 | 0 | 0) * (+(HEAP32[((HEAP32[(HEAP32[($14_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) / +(((HEAP32[((HEAP32[(HEAP32[($14_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - (HEAP32[($14_1 + 40 | 0) >> 2] | 0) | 0) - 1 | 0 | 0) - 1.0);
   $297_1 = +HEAPF64[((HEAP32[($14_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 3] + +(HEAP32[($14_1 + 40 | 0) >> 2] | 0 | 0) * (+$729(+(+(HEAP32[((HEAP32[(HEAP32[($14_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0))) - 2.0);
   HEAPF64[((HEAP32[($14_1 + 76 | 0) >> 2] | 0) + 16 | 0) >> 3] = $297_1;
   HEAPF64[($14_1 + 8 | 0) >> 3] = +(0 | 0);
   HEAP32[($14_1 + 72 | 0) >> 2] = 0;
   label$12 : {
    label$13 : while (1) {
     if (!((HEAP32[($14_1 + 72 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[(HEAP32[($14_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$12
     }
     HEAPF64[($14_1 + 8 | 0) >> 3] = +HEAPF64[($14_1 + 8 | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[(HEAP32[($14_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + 84 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 72 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[(HEAP32[($14_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + 84 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 72 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($14_1 + 72 | 0) >> 2] = (HEAP32[($14_1 + 72 | 0) >> 2] | 0) + 1 | 0;
     continue label$13;
    };
   }
   HEAPF64[((HEAP32[($14_1 + 76 | 0) >> 2] | 0) + 40 | 0) >> 3] = +HEAPF64[($14_1 + 8 | 0) >> 3] / +(((HEAP32[((HEAP32[(HEAP32[($14_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - (HEAP32[($14_1 + 40 | 0) >> 2] | 0) | 0) + 1 | 0 | 0);
  }
  $863(HEAP32[($14_1 + 28 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($14_1 + 24 | 0) >> 2] | 0 | 0);
  $275_1 = HEAP32[($14_1 + 76 | 0) >> 2] | 0;
  global$0 = $14_1 + 128 | 0;
  return $275_1 | 0;
 }
 
 function $21($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $863(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $22($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1, $16_1, $17_1, $18_1, $19_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  $15_1 = +$15_1;
  $16_1 = $16_1 | 0;
  $17_1 = $17_1 | 0;
  $18_1 = $18_1 | 0;
  $19_1 = $19_1 | 0;
  var $22_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $300_1 = 0, $302_1 = 0, $48_1 = 0, $61_1 = 0, $74_1 = 0, $213_1 = 0, $219_1 = 0, $223_1 = 0, $313_1 = 0.0, $254_1 = 0, $320_1 = 0.0, $286_1 = 0, $177_1 = 0, $178_1 = 0, $181_1 = 0, $184_1 = 0, $185_1 = 0, $188_1 = 0, $189_1 = 0, $795_1 = 0, $817_1 = 0, $827_1 = 0, $243_1 = 0, $244_1 = 0, $247_1 = 0, $250_1 = 0, $271_1 = 0, $272_1 = 0, $273_1 = 0, $274_1 = 0, $275_1 = 0, $276_1 = 0, $277_1 = 0, $278_1 = 0, $279_1 = 0, $280_1 = 0, $281_1 = 0, $282_1 = 0, $296_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $22_1 = global$0 - 272 | 0;
  global$0 = $22_1;
  HEAP32[($22_1 + 268 | 0) >> 2] = $0_1;
  HEAP32[($22_1 + 264 | 0) >> 2] = $1_1;
  HEAP32[($22_1 + 260 | 0) >> 2] = $2_1;
  HEAP32[($22_1 + 256 | 0) >> 2] = $3_1;
  HEAP32[($22_1 + 252 | 0) >> 2] = $4_1;
  HEAP32[($22_1 + 248 | 0) >> 2] = $5_1;
  HEAP32[($22_1 + 244 | 0) >> 2] = $6_1;
  HEAP32[($22_1 + 240 | 0) >> 2] = $7_1;
  HEAP32[($22_1 + 236 | 0) >> 2] = $8_1;
  HEAP32[($22_1 + 232 | 0) >> 2] = $9_1;
  HEAP32[($22_1 + 228 | 0) >> 2] = $10_1;
  HEAP32[($22_1 + 224 | 0) >> 2] = $11_1;
  HEAP32[($22_1 + 220 | 0) >> 2] = $12_1;
  HEAP32[($22_1 + 216 | 0) >> 2] = $13_1;
  HEAP32[($22_1 + 212 | 0) >> 2] = $14_1;
  HEAPF64[($22_1 + 200 | 0) >> 3] = $15_1;
  HEAP32[($22_1 + 196 | 0) >> 2] = $16_1;
  HEAP32[($22_1 + 192 | 0) >> 2] = $17_1;
  HEAP32[($22_1 + 188 | 0) >> 2] = $18_1;
  HEAP32[($22_1 + 184 | 0) >> 2] = $19_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $22_1 + 108 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  $300_1 = 0;
  i64toi32_i32$1 = $22_1 + 80 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $300_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $300_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $22_1 + 68 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  $302_1 = 0;
  i64toi32_i32$1 = $22_1 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $302_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $302_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($22_1 + 44 | 0) >> 2] = 0;
  $48_1 = 0;
  label$1 : {
   if (!(HEAP32[($22_1 + 196 | 0) >> 2] | 0)) {
    break label$1
   }
   $48_1 = ((HEAP32[($22_1 + 260 | 0) >> 2] | 0) + (HEAP32[($22_1 + 256 | 0) >> 2] | 0) | 0 | 0) == (1 | 0);
  }
  HEAP32[($22_1 + 180 | 0) >> 2] = $48_1 & 1 | 0;
  $61_1 = 0;
  label$2 : {
   if (!(HEAP32[($22_1 + 192 | 0) >> 2] | 0)) {
    break label$2
   }
   $61_1 = ((HEAP32[($22_1 + 260 | 0) >> 2] | 0) + (HEAP32[($22_1 + 256 | 0) >> 2] | 0) | 0 | 0) == (0 | 0);
  }
  HEAP32[($22_1 + 176 | 0) >> 2] = $61_1 & 1 | 0;
  $74_1 = 1;
  label$3 : {
   if (HEAP32[($22_1 + 180 | 0) >> 2] | 0) {
    break label$3
   }
   $74_1 = (HEAP32[($22_1 + 176 | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  HEAP32[($22_1 + 172 | 0) >> 2] = $74_1 & 1 | 0;
  HEAPF64[($22_1 + 144 | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAP32[($22_1 + 168 | 0) >> 2] = 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($22_1 + 168 | 0) >> 2] | 0 | 0) <= (HEAP32[($22_1 + 252 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($22_1 + 164 | 0) >> 2] = 0;
    label$6 : {
     label$7 : while (1) {
      if (!((HEAP32[($22_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($22_1 + 248 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($22_1 + 160 | 0) >> 2] = 0;
      label$8 : {
       label$9 : while (1) {
        if (!((HEAP32[($22_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($22_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$8
        }
        HEAP32[($22_1 + 156 | 0) >> 2] = 0;
        label$10 : {
         label$11 : while (1) {
          if (!((HEAP32[($22_1 + 156 | 0) >> 2] | 0 | 0) <= (HEAP32[($22_1 + 240 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$10
          }
          label$12 : {
           if (!(((((HEAP32[($22_1 + 168 | 0) >> 2] | 0) + (HEAP32[($22_1 + 164 | 0) >> 2] | 0) | 0) + (HEAP32[($22_1 + 160 | 0) >> 2] | 0) | 0) + (HEAP32[($22_1 + 156 | 0) >> 2] | 0) | 0 | 0) <= (HEAP32[($22_1 + 236 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$12
           }
           HEAP32[($22_1 + 152 | 0) >> 2] = 0;
           label$13 : {
            label$14 : while (1) {
             if (!((HEAP32[($22_1 + 152 | 0) >> 2] | 0 | 0) <= (HEAP32[($22_1 + 172 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$13
             }
             HEAP32[($22_1 + 108 | 0) >> 2] = HEAP32[($22_1 + 168 | 0) >> 2] | 0;
             HEAP32[($22_1 + 112 | 0) >> 2] = HEAP32[($22_1 + 260 | 0) >> 2] | 0;
             HEAP32[($22_1 + 116 | 0) >> 2] = HEAP32[($22_1 + 164 | 0) >> 2] | 0;
             label$15 : {
              label$16 : {
               if (HEAP32[($22_1 + 228 | 0) >> 2] | 0) {
                break label$16
               }
               HEAP32[($22_1 + 92 | 0) >> 2] = 0;
               HEAP32[($22_1 + 88 | 0) >> 2] = 0;
               HEAP32[($22_1 + 84 | 0) >> 2] = 0;
               HEAP32[($22_1 + 80 | 0) >> 2] = 0;
               break label$15;
              }
              label$17 : {
               label$18 : {
                if (HEAP32[($22_1 + 160 | 0) >> 2] | 0) {
                 break label$18
                }
                if (HEAP32[($22_1 + 156 | 0) >> 2] | 0) {
                 break label$18
                }
                if (HEAP32[($22_1 + 256 | 0) >> 2] | 0) {
                 break label$18
                }
                HEAP32[($22_1 + 92 | 0) >> 2] = 0;
                break label$17;
               }
               HEAP32[($22_1 + 80 | 0) >> 2] = HEAP32[($22_1 + 160 | 0) >> 2] | 0;
               HEAP32[($22_1 + 84 | 0) >> 2] = HEAP32[($22_1 + 256 | 0) >> 2] | 0;
               HEAP32[($22_1 + 88 | 0) >> 2] = HEAP32[($22_1 + 156 | 0) >> 2] | 0;
               HEAP32[($22_1 + 92 | 0) >> 2] = HEAP32[($22_1 + 228 | 0) >> 2] | 0;
              }
             }
             (wasm2js_i32$0 = $22_1, wasm2js_i32$1 = $23(HEAP32[($22_1 + 268 | 0) >> 2] | 0 | 0, HEAP32[($22_1 + 264 | 0) >> 2] | 0 | 0, $22_1 + 108 | 0 | 0, $22_1 + 80 | 0 | 0, HEAP32[($22_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($22_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($22_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($22_1 + 220 | 0) >> 2] | 0 | 0, +(+HEAPF64[($22_1 + 200 | 0) >> 3]), HEAP32[($22_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($22_1 + 212 | 0) >> 2] | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 120 | 0) >> 2] = wasm2js_i32$1;
             label$19 : {
              if (!((HEAP32[($22_1 + 188 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
               break label$19
              }
              $177_1 = HEAP32[((HEAP32[(HEAP32[($22_1 + 120 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
              $178_1 = HEAP32[($22_1 + 260 | 0) >> 2] | 0;
              $181_1 = HEAP32[((HEAP32[(HEAP32[($22_1 + 120 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
              $184_1 = HEAP32[((HEAP32[(HEAP32[($22_1 + 120 | 0) >> 2] | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
              $185_1 = HEAP32[($22_1 + 256 | 0) >> 2] | 0;
              $188_1 = HEAP32[((HEAP32[(HEAP32[($22_1 + 120 | 0) >> 2] | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
              $189_1 = HEAP32[($22_1 + 152 | 0) >> 2] | 0;
              HEAPF64[($22_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($22_1 + 120 | 0) >> 2] | 0) + 8 | 0) >> 3];
              HEAP32[($22_1 + 24 | 0) >> 2] = $189_1;
              HEAP32[($22_1 + 20 | 0) >> 2] = $188_1;
              HEAP32[($22_1 + 16 | 0) >> 2] = $185_1;
              HEAP32[($22_1 + 12 | 0) >> 2] = $184_1;
              HEAP32[($22_1 + 8 | 0) >> 2] = $181_1;
              HEAP32[($22_1 + 4 | 0) >> 2] = $178_1;
              HEAP32[$22_1 >> 2] = $177_1;
              $875(global$3 + 5221 | 0 | 0, $22_1 | 0) | 0;
             }
             label$20 : {
              if (!(+HEAPF64[($22_1 + 144 | 0) >> 3] > +HEAPF64[((HEAP32[($22_1 + 120 | 0) >> 2] | 0) + 8 | 0) >> 3] & 1 | 0)) {
               break label$20
              }
              HEAPF64[($22_1 + 144 | 0) >> 3] = +HEAPF64[((HEAP32[($22_1 + 120 | 0) >> 2] | 0) + 8 | 0) >> 3];
              i64toi32_i32$2 = $22_1 + 108 | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $795_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $22_1 + 68 | 0;
              HEAP32[i64toi32_i32$0 >> 2] = $795_1;
              HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
              $213_1 = 8;
              HEAP32[(i64toi32_i32$0 + $213_1 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $213_1 | 0) >> 2] | 0;
              $219_1 = $22_1 + 48 | 0;
              i64toi32_i32$2 = $22_1 + 80 | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $817_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $219_1;
              HEAP32[i64toi32_i32$1 >> 2] = $817_1;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              $223_1 = 8;
              i64toi32_i32$2 = i64toi32_i32$2 + $223_1 | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $827_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $219_1 + $223_1 | 0;
              HEAP32[i64toi32_i32$0 >> 2] = $827_1;
              HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
              HEAPF64[($22_1 + 136 | 0) >> 3] = +(HEAP32[($22_1 + 152 | 0) >> 2] | 0 | 0);
             }
             $25(HEAP32[($22_1 + 120 | 0) >> 2] | 0 | 0);
             HEAP32[($22_1 + 152 | 0) >> 2] = (HEAP32[($22_1 + 152 | 0) >> 2] | 0) + 1 | 0;
             continue label$14;
            };
           }
          }
          HEAP32[($22_1 + 156 | 0) >> 2] = (HEAP32[($22_1 + 156 | 0) >> 2] | 0) + 1 | 0;
          continue label$11;
         };
        }
        HEAP32[($22_1 + 160 | 0) >> 2] = (HEAP32[($22_1 + 160 | 0) >> 2] | 0) + 1 | 0;
        continue label$9;
       };
      }
      HEAP32[($22_1 + 164 | 0) >> 2] = (HEAP32[($22_1 + 164 | 0) >> 2] | 0) + 1 | 0;
      continue label$7;
     };
    }
    HEAP32[($22_1 + 168 | 0) >> 2] = (HEAP32[($22_1 + 168 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  $243_1 = HEAP32[($22_1 + 268 | 0) >> 2] | 0;
  $244_1 = HEAP32[($22_1 + 264 | 0) >> 2] | 0;
  $247_1 = $22_1 + 68 | 0;
  $250_1 = $22_1 + 48 | 0;
  $313_1 = +HEAPF64[($22_1 + 136 | 0) >> 3];
  label$21 : {
   label$22 : {
    if (!(Math_abs($313_1) < 2147483648.0)) {
     break label$22
    }
    $254_1 = ~~$313_1;
    break label$21;
   }
   $254_1 = -2147483648;
  }
  (wasm2js_i32$0 = $22_1, wasm2js_i32$1 = $23($243_1 | 0, $244_1 | 0, $247_1 | 0, $250_1 | 0, $254_1 | 0, HEAP32[($22_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($22_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($22_1 + 220 | 0) >> 2] | 0 | 0, +(+HEAPF64[($22_1 + 200 | 0) >> 3]), HEAP32[($22_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($22_1 + 212 | 0) >> 2] | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 124 | 0) >> 2] = wasm2js_i32$1;
  label$23 : {
   if (!(HEAP32[($22_1 + 220 | 0) >> 2] | 0)) {
    break label$23
   }
   label$24 : {
    if (!(+HEAPF64[((HEAP32[($22_1 + 124 | 0) >> 2] | 0) + 8 | 0) >> 3] == 1797693134862315708145274.0e284 & 1 | 0)) {
     break label$24
    }
    HEAPF64[($22_1 + 128 | 0) >> 3] = +(0 | 0);
    $25(HEAP32[($22_1 + 124 | 0) >> 2] | 0 | 0);
    $271_1 = HEAP32[($22_1 + 268 | 0) >> 2] | 0;
    $272_1 = HEAP32[($22_1 + 264 | 0) >> 2] | 0;
    $273_1 = HEAP32[($22_1 + 260 | 0) >> 2] | 0;
    $274_1 = HEAP32[($22_1 + 256 | 0) >> 2] | 0;
    $275_1 = HEAP32[($22_1 + 252 | 0) >> 2] | 0;
    $276_1 = HEAP32[($22_1 + 248 | 0) >> 2] | 0;
    $277_1 = HEAP32[($22_1 + 244 | 0) >> 2] | 0;
    $278_1 = HEAP32[($22_1 + 240 | 0) >> 2] | 0;
    $279_1 = HEAP32[($22_1 + 236 | 0) >> 2] | 0;
    $280_1 = HEAP32[($22_1 + 232 | 0) >> 2] | 0;
    $281_1 = HEAP32[($22_1 + 228 | 0) >> 2] | 0;
    $282_1 = HEAP32[($22_1 + 224 | 0) >> 2] | 0;
    $320_1 = +HEAPF64[($22_1 + 128 | 0) >> 3];
    label$25 : {
     label$26 : {
      if (!(Math_abs($320_1) < 2147483648.0)) {
       break label$26
      }
      $286_1 = ~~$320_1;
      break label$25;
     }
     $286_1 = -2147483648;
    }
    (wasm2js_i32$0 = $22_1, wasm2js_i32$1 = $22($271_1 | 0, $272_1 | 0, $273_1 | 0, $274_1 | 0, $275_1 | 0, $276_1 | 0, $277_1 | 0, $278_1 | 0, $279_1 | 0, $280_1 | 0, $281_1 | 0, $282_1 | 0, $286_1 | 0, HEAP32[($22_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($22_1 + 212 | 0) >> 2] | 0 | 0, +(+HEAPF64[($22_1 + 200 | 0) >> 3]), HEAP32[($22_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($22_1 + 192 | 0) >> 2] | 0 | 0, HEAP32[($22_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($22_1 + 184 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 124 | 0) >> 2] = wasm2js_i32$1;
   }
  }
  $296_1 = HEAP32[($22_1 + 124 | 0) >> 2] | 0;
  global$0 = $22_1 + 272 | 0;
  return $296_1 | 0;
 }
 
 function $23($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = +$8_1;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $14_1 = 0, $470_1 = 0, $505_1 = 0, $535_1 = 0, $570_1 = 0, $585_1 = 0, $682_1 = 0, $169_1 = 0, $207_1 = 0, $227_1 = 0, $864_1 = 0.0, $877_1 = 0.0, $850_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $14_1 = global$0 - 208 | 0;
  global$0 = $14_1;
  HEAP32[($14_1 + 204 | 0) >> 2] = $0_1;
  HEAP32[($14_1 + 200 | 0) >> 2] = $1_1;
  HEAP32[($14_1 + 196 | 0) >> 2] = $2_1;
  HEAP32[($14_1 + 192 | 0) >> 2] = $3_1;
  HEAP32[($14_1 + 188 | 0) >> 2] = $4_1;
  HEAP32[($14_1 + 184 | 0) >> 2] = $5_1;
  HEAP32[($14_1 + 180 | 0) >> 2] = $6_1;
  HEAP32[($14_1 + 176 | 0) >> 2] = $7_1;
  HEAPF64[($14_1 + 168 | 0) >> 3] = $8_1;
  HEAP32[($14_1 + 164 | 0) >> 2] = $9_1;
  HEAP32[($14_1 + 160 | 0) >> 2] = $10_1;
  HEAP32[($14_1 + 156 | 0) >> 2] = $11_1;
  HEAP32[($14_1 + 152 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862(48 | 0) | 0), HEAP32[(wasm2js_i32$0 + 152 | 0) >> 2] = wasm2js_i32$1;
  HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 32 | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 24 | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 16 | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 8 | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAPF64[($14_1 + 32 | 0) >> 3] = 1.0e-08;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($14_1 + 196 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($14_1 + 144 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 196 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($14_1 + 140 | 0) >> 2] = HEAP32[((HEAP32[($14_1 + 196 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($14_1 + 136 | 0) >> 2] = HEAP32[((HEAP32[($14_1 + 196 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($14_1 + 144 | 0) >> 2] = 0;
   HEAP32[($14_1 + 140 | 0) >> 2] = 0;
   HEAP32[($14_1 + 136 | 0) >> 2] = 0;
  }
  label$3 : {
   label$4 : {
    if (!((HEAP32[($14_1 + 192 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($14_1 + 132 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 192 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($14_1 + 128 | 0) >> 2] = HEAP32[((HEAP32[($14_1 + 192 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    HEAP32[($14_1 + 124 | 0) >> 2] = HEAP32[((HEAP32[($14_1 + 192 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    HEAP32[($14_1 + 120 | 0) >> 2] = HEAP32[((HEAP32[($14_1 + 192 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    label$5 : {
     label$6 : {
      if (!((HEAP32[($14_1 + 120 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($14_1 + 148 | 0) >> 2] = HEAP32[($14_1 + 120 | 0) >> 2] | 0;
      break label$5;
     }
     HEAP32[($14_1 + 148 | 0) >> 2] = 1;
    }
    break label$3;
   }
   HEAP32[($14_1 + 132 | 0) >> 2] = 0;
   HEAP32[($14_1 + 128 | 0) >> 2] = 0;
   HEAP32[($14_1 + 124 | 0) >> 2] = 0;
   HEAP32[($14_1 + 120 | 0) >> 2] = 0;
   HEAP32[($14_1 + 148 | 0) >> 2] = 1;
  }
  HEAP32[($14_1 + 116 | 0) >> 2] = (HEAP32[($14_1 + 140 | 0) >> 2] | 0) + (HEAP32[($14_1 + 128 | 0) >> 2] | 0) | 0;
  label$7 : {
   label$8 : {
    if (!((((HEAP32[($14_1 + 132 | 0) >> 2] | 0) + (HEAP32[($14_1 + 128 | 0) >> 2] | 0) | 0) + (HEAP32[($14_1 + 124 | 0) >> 2] | 0) | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$8
    }
    if (!((HEAP32[($14_1 + 120 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP32[($14_1 + 84 | 0) >> 2] = 1;
    break label$7;
   }
   HEAP32[($14_1 + 84 | 0) >> 2] = 0;
  }
  label$9 : {
   label$10 : {
    if (!((HEAP32[($14_1 + 156 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$10
    }
    label$11 : {
     label$12 : {
      if (!(HEAP32[($14_1 + 176 | 0) >> 2] | 0)) {
       break label$12
      }
      HEAP32[($14_1 + 80 | 0) >> 2] = 2;
      break label$11;
     }
     HEAP32[($14_1 + 80 | 0) >> 2] = 0;
    }
    break label$9;
   }
   HEAP32[($14_1 + 80 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 156 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($14_1 + 88 | 0) >> 2] = HEAP32[($14_1 + 160 | 0) >> 2] | 0;
  label$13 : {
   label$14 : {
    if (!((HEAP32[($14_1 + 116 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$14
    }
    if (!((HEAP32[($14_1 + 188 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$14
    }
    HEAP32[($14_1 + 104 | 0) >> 2] = 1;
    HEAP32[($14_1 + 88 | 0) >> 2] = (HEAP32[($14_1 + 88 | 0) >> 2] | 0) + 1 | 0;
    (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($14_1 + 200 | 0) >> 2] | 0) << 3 | 0, HEAP32[($14_1 + 88 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
    HEAP32[($14_1 + 112 | 0) >> 2] = 0;
    label$15 : {
     label$16 : while (1) {
      if (!((HEAP32[($14_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 200 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$15
      }
      HEAPF64[((HEAP32[($14_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0 | 0);
      HEAP32[($14_1 + 112 | 0) >> 2] = (HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0;
      continue label$16;
     };
    }
    $868((HEAP32[($14_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[($14_1 + 200 | 0) >> 2] | 0) << 3 | 0, (HEAP32[($14_1 + 88 | 0) >> 2] | 0) - 1 | 0) | 0) | 0;
    $169_1 = $14(HEAP32[($14_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 200 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] = $169_1;
    $16(HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 20 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($14_1 + 20 | 0) >> 2] | 0 | 0);
    break label$13;
   }
   HEAP32[($14_1 + 104 | 0) >> 2] = HEAP32[($14_1 + 188 | 0) >> 2] | 0;
   label$17 : {
    label$18 : {
     if (!((HEAP32[($14_1 + 88 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$18
     }
     (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($14_1 + 200 | 0) >> 2] | 0) << 3 | 0, HEAP32[($14_1 + 88 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
     $868(HEAP32[($14_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[($14_1 + 200 | 0) >> 2] | 0) << 3 | 0, HEAP32[($14_1 + 88 | 0) >> 2] | 0) | 0) | 0;
     $207_1 = $14(HEAP32[($14_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 200 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] = $207_1;
     $27(HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 80 | 0) >> 2] | 0 | 0);
     $16(HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 20 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($14_1 + 20 | 0) >> 2] | 0 | 0);
     break label$17;
    }
    $227_1 = $14(HEAP32[($14_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 120 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($14_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 200 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] = $227_1;
    $27(HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 80 | 0) >> 2] | 0 | 0);
    $16(HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 204 | 0) >> 2] | 0 | 0, 0 | 0);
   }
  }
  label$19 : {
   label$20 : {
    if (!((HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 120 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$20
    }
    HEAP32[($14_1 + 100 | 0) >> 2] = (((((HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + (HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) | 0) + 1 | 0;
    label$21 : {
     if (!((HEAP32[($14_1 + 80 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$21
     }
     $864_1 = +HEAPF64[($14_1 + 168 | 0) >> 3] + +(HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) * +$729(+(+HEAPF64[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 96 | 0) >> 3]));
     HEAPF64[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 112 | 0) >> 3] = $864_1 + +((HEAP32[($14_1 + 100 | 0) >> 2] | 0) << 1 | 0 | 0);
    }
    label$22 : {
     label$23 : {
      if (!(+HEAPF64[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 112 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
       break label$23
      }
      HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 16 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 112 | 0) >> 3];
      $877_1 = +HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 16 | 0) >> 3] + +(HEAP32[($14_1 + 100 | 0) >> 2] | 0 | 0) * (+$729(+(+(HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0))) - 2.0);
      HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 24 | 0) >> 3] = $877_1;
      HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 16 | 0) >> 3] + +(Math_imul((HEAP32[($14_1 + 100 | 0) >> 2] | 0) << 1 | 0, (HEAP32[($14_1 + 100 | 0) >> 2] | 0) + 1 | 0) | 0) / +(((HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - (HEAP32[($14_1 + 100 | 0) >> 2] | 0) | 0) - 1 | 0 | 0);
      label$24 : {
       label$25 : {
        if ($739(HEAP32[($14_1 + 184 | 0) >> 2] | 0 | 0, global$3 + 2763 | 0 | 0) | 0) {
         break label$25
        }
        HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 16 | 0) >> 3];
        break label$24;
       }
       label$26 : {
        label$27 : {
         if ($739(HEAP32[($14_1 + 184 | 0) >> 2] | 0 | 0, global$3 + 2759 | 0 | 0) | 0) {
          break label$27
         }
         HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 24 | 0) >> 3];
         break label$26;
        }
        label$28 : {
         if ($739(HEAP32[($14_1 + 184 | 0) >> 2] | 0 | 0, global$3 + 2767 | 0 | 0) | 0) {
          break label$28
         }
         HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 32 | 0) >> 3];
        }
       }
      }
      break label$22;
     }
     HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 32 | 0) >> 3] = 1797693134862315708145274.0e284;
     HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 24 | 0) >> 3] = 1797693134862315708145274.0e284;
     HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 16 | 0) >> 3] = 1797693134862315708145274.0e284;
     HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 8 | 0) >> 3] = 1797693134862315708145274.0e284;
    }
    HEAPF64[($14_1 + 48 | 0) >> 3] = +(0 | 0);
    HEAP32[($14_1 + 112 | 0) >> 2] = 0;
    label$29 : {
     label$30 : while (1) {
      if (!((HEAP32[($14_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$29
      }
      HEAPF64[($14_1 + 48 | 0) >> 3] = +HEAPF64[($14_1 + 48 | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 84 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 84 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($14_1 + 112 | 0) >> 2] = (HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0;
      continue label$30;
     };
    }
    HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 40 | 0) >> 3] = +HEAPF64[($14_1 + 48 | 0) >> 3] / +(((HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - (HEAP32[($14_1 + 100 | 0) >> 2] | 0) | 0) + 1 | 0 | 0);
    HEAPF64[($14_1 + 40 | 0) >> 3] = 2.0;
    HEAP32[($14_1 + 72 | 0) >> 2] = ((HEAP32[($14_1 + 144 | 0) >> 2] | 0) + Math_imul(HEAP32[($14_1 + 120 | 0) >> 2] | 0, HEAP32[($14_1 + 132 | 0) >> 2] | 0) | 0) + 1 | 0;
    HEAP32[($14_1 + 68 | 0) >> 2] = ((HEAP32[($14_1 + 136 | 0) >> 2] | 0) + Math_imul(HEAP32[($14_1 + 120 | 0) >> 2] | 0, HEAP32[($14_1 + 124 | 0) >> 2] | 0) | 0) + 1 | 0;
    (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $864(HEAP32[($14_1 + 72 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $864(HEAP32[($14_1 + 68 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    HEAPF64[(HEAP32[($14_1 + 12 | 0) >> 2] | 0) >> 3] = 1.0;
    HEAPF64[(HEAP32[($14_1 + 16 | 0) >> 2] | 0) >> 3] = 1.0;
    HEAP32[($14_1 + 112 | 0) >> 2] = 0;
    label$31 : {
     label$32 : while (1) {
      if (!((HEAP32[($14_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 144 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$31
      }
      HEAPF64[((HEAP32[($14_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($14_1 + 112 | 0) >> 2] = (HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0;
      continue label$32;
     };
    }
    HEAP32[($14_1 + 112 | 0) >> 2] = 0;
    label$33 : {
     label$34 : while (1) {
      if (!((HEAP32[($14_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$33
      }
      HEAPF64[((HEAP32[($14_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] = -1.0 * +HEAPF64[((HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($14_1 + 112 | 0) >> 2] = (HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0;
      continue label$34;
     };
    }
    HEAP32[($14_1 + 108 | 0) >> 2] = 0;
    label$35 : {
     label$36 : while (1) {
      if (!((HEAP32[($14_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$35
      }
      $470_1 = (HEAP32[($14_1 + 16 | 0) >> 2] | 0) + (Math_imul((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + 1 | 0, HEAP32[($14_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAPF64[$470_1 >> 3] = +HEAPF64[$470_1 >> 3] + +HEAPF64[((HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($14_1 + 112 | 0) >> 2] = 0;
      label$37 : {
       label$38 : while (1) {
        if (!((HEAP32[($14_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 144 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$37
        }
        $505_1 = (HEAP32[($14_1 + 16 | 0) >> 2] | 0) + (((Math_imul((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + 1 | 0, HEAP32[($14_1 + 120 | 0) >> 2] | 0) + (HEAP32[($14_1 + 112 | 0) >> 2] | 0) | 0) + 1 | 0) << 3 | 0) | 0;
        HEAPF64[$505_1 >> 3] = +HEAPF64[$505_1 >> 3] - +HEAPF64[((HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($14_1 + 112 | 0) >> 2] = (HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0;
        continue label$38;
       };
      }
      HEAP32[($14_1 + 108 | 0) >> 2] = (HEAP32[($14_1 + 108 | 0) >> 2] | 0) + 1 | 0;
      continue label$36;
     };
    }
    HEAP32[($14_1 + 108 | 0) >> 2] = 0;
    label$39 : {
     label$40 : while (1) {
      if (!((HEAP32[($14_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$39
      }
      $535_1 = (HEAP32[($14_1 + 12 | 0) >> 2] | 0) + (Math_imul((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + 1 | 0, HEAP32[($14_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAPF64[$535_1 >> 3] = +HEAPF64[$535_1 >> 3] - +HEAPF64[((HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($14_1 + 112 | 0) >> 2] = 0;
      label$41 : {
       label$42 : while (1) {
        if (!((HEAP32[($14_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$41
        }
        $570_1 = (HEAP32[($14_1 + 12 | 0) >> 2] | 0) + (((Math_imul((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + 1 | 0, HEAP32[($14_1 + 120 | 0) >> 2] | 0) + (HEAP32[($14_1 + 112 | 0) >> 2] | 0) | 0) + 1 | 0) << 3 | 0) | 0;
        HEAPF64[$570_1 >> 3] = +HEAPF64[$570_1 >> 3] + +HEAPF64[((HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($14_1 + 112 | 0) >> 2] = (HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0;
        continue label$42;
       };
      }
      HEAP32[($14_1 + 108 | 0) >> 2] = (HEAP32[($14_1 + 108 | 0) >> 2] | 0) + 1 | 0;
      continue label$40;
     };
    }
    label$43 : {
     label$44 : {
      if (!((HEAP32[($14_1 + 72 | 0) >> 2] | 0 | 0) > (HEAP32[($14_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$44
      }
      $585_1 = HEAP32[($14_1 + 72 | 0) >> 2] | 0;
      break label$43;
     }
     $585_1 = HEAP32[($14_1 + 68 | 0) >> 2] | 0;
    }
    HEAP32[($14_1 + 64 | 0) >> 2] = $585_1;
    (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862((HEAP32[($14_1 + 64 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862((HEAP32[($14_1 + 64 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862((HEAP32[($14_1 + 64 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
    label$45 : {
     if (!(((HEAP32[($14_1 + 144 | 0) >> 2] | 0) + (HEAP32[($14_1 + 132 | 0) >> 2] | 0) | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$45
     }
     HEAP32[($14_1 + 96 | 0) >> 2] = 0;
     HEAP32[($14_1 + 92 | 0) >> 2] = -1;
     HEAP32[($14_1 + 112 | 0) >> 2] = 0;
     label$46 : {
      label$47 : while (1) {
       if (!((HEAP32[($14_1 + 112 | 0) >> 2] | 0 | 0) < ((HEAP32[($14_1 + 72 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
        break label$46
       }
       HEAP32[((HEAP32[$14_1 >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_abs(+HEAPF64[((HEAP32[($14_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3]) > +HEAPF64[($14_1 + 32 | 0) >> 3] & 1 | 0 ? 1 : 0;
       label$48 : {
        if (!((HEAP32[((HEAP32[$14_1 >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$48
        }
        HEAP32[($14_1 + 96 | 0) >> 2] = (HEAP32[($14_1 + 96 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($14_1 + 92 | 0) >> 2] = HEAP32[($14_1 + 112 | 0) >> 2] | 0;
       }
       HEAP32[($14_1 + 112 | 0) >> 2] = (HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0;
       continue label$47;
      };
     }
     HEAP32[($14_1 + 76 | 0) >> 2] = (HEAP32[($14_1 + 92 | 0) >> 2] | 0) + 1 | 0;
     label$49 : {
      if (!((HEAP32[($14_1 + 76 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$49
      }
      HEAP32[($14_1 + 112 | 0) >> 2] = 0;
      label$50 : {
       label$51 : while (1) {
        if (!((HEAP32[($14_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$50
        }
        $682_1 = (HEAP32[($14_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0;
        HEAPF64[$682_1 >> 3] = +HEAPF64[$682_1 >> 3] * -1.0;
        HEAP32[($14_1 + 112 | 0) >> 2] = (HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0;
        continue label$51;
       };
      }
      (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $177(HEAP32[($14_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
      label$52 : {
       label$53 : {
        if (HEAP32[($14_1 + 60 | 0) >> 2] | 0) {
         break label$53
        }
        HEAP32[($14_1 + 112 | 0) >> 2] = 0;
        label$54 : {
         label$55 : while (1) {
          if (!((HEAP32[($14_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$54
          }
          HEAPF64[($14_1 + 24 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[($14_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($14_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
          label$56 : {
           if (!(+HEAPF64[($14_1 + 24 | 0) >> 3] < +HEAPF64[($14_1 + 40 | 0) >> 3] & 1 | 0)) {
            break label$56
           }
           HEAPF64[($14_1 + 40 | 0) >> 3] = +HEAPF64[($14_1 + 24 | 0) >> 3];
          }
          HEAP32[($14_1 + 112 | 0) >> 2] = (HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0;
          continue label$55;
         };
        }
        break label$52;
       }
       HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 8 | 0) >> 3] = 1797693134862315708145274.0e284;
      }
     }
    }
    label$57 : {
     if (!(((HEAP32[($14_1 + 136 | 0) >> 2] | 0) + (HEAP32[($14_1 + 124 | 0) >> 2] | 0) | 0 | 0) > (1 | 0) & 1 | 0)) {
      break label$57
     }
     if (!(+HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 8 | 0) >> 3] < 1797693134862315708145274.0e284 & 1 | 0)) {
      break label$57
     }
     HEAP32[($14_1 + 96 | 0) >> 2] = 0;
     HEAP32[($14_1 + 92 | 0) >> 2] = -1;
     HEAP32[($14_1 + 112 | 0) >> 2] = 0;
     label$58 : {
      label$59 : while (1) {
       if (!((HEAP32[($14_1 + 112 | 0) >> 2] | 0 | 0) < ((HEAP32[($14_1 + 68 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
        break label$58
       }
       HEAP32[((HEAP32[$14_1 >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_abs(+HEAPF64[((HEAP32[($14_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3]) > +HEAPF64[($14_1 + 32 | 0) >> 3] & 1 | 0 ? 1 : 0;
       label$60 : {
        if (!((HEAP32[((HEAP32[$14_1 >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$60
        }
        HEAP32[($14_1 + 96 | 0) >> 2] = (HEAP32[($14_1 + 96 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($14_1 + 92 | 0) >> 2] = HEAP32[($14_1 + 112 | 0) >> 2] | 0;
       }
       HEAP32[($14_1 + 112 | 0) >> 2] = (HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0;
       continue label$59;
      };
     }
     HEAP32[($14_1 + 76 | 0) >> 2] = (HEAP32[($14_1 + 92 | 0) >> 2] | 0) + 1 | 0;
     label$61 : {
      if (!((HEAP32[($14_1 + 76 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$61
      }
      (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $177(HEAP32[($14_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
      label$62 : {
       label$63 : {
        if (HEAP32[($14_1 + 60 | 0) >> 2] | 0) {
         break label$63
        }
        HEAP32[($14_1 + 112 | 0) >> 2] = 0;
        label$64 : {
         label$65 : while (1) {
          if (!((HEAP32[($14_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$64
          }
          HEAPF64[($14_1 + 24 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[($14_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($14_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
          label$66 : {
           if (!(+HEAPF64[($14_1 + 24 | 0) >> 3] < +HEAPF64[($14_1 + 40 | 0) >> 3] & 1 | 0)) {
            break label$66
           }
           HEAPF64[($14_1 + 40 | 0) >> 3] = +HEAPF64[($14_1 + 24 | 0) >> 3];
          }
          HEAP32[($14_1 + 112 | 0) >> 2] = (HEAP32[($14_1 + 112 | 0) >> 2] | 0) + 1 | 0;
          continue label$65;
         };
        }
        break label$62;
       }
       HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 8 | 0) >> 3] = 1797693134862315708145274.0e284;
      }
     }
    }
    label$67 : {
     if (!(+HEAPF64[($14_1 + 40 | 0) >> 3] < 1.01 & 1 | 0)) {
      break label$67
     }
     HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 8 | 0) >> 3] = 1797693134862315708145274.0e284;
    }
    $863(HEAP32[($14_1 + 16 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($14_1 + 12 | 0) >> 2] | 0 | 0);
    $863(HEAP32[$14_1 >> 2] | 0 | 0);
    $863(HEAP32[($14_1 + 8 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($14_1 + 4 | 0) >> 2] | 0 | 0);
    break label$19;
   }
   HEAPF64[((HEAP32[($14_1 + 152 | 0) >> 2] | 0) + 8 | 0) >> 3] = 1797693134862315708145274.0e284;
  }
  $850_1 = HEAP32[($14_1 + 152 | 0) >> 2] | 0;
  global$0 = $14_1 + 208 | 0;
  return $850_1 | 0;
 }
 
 function $24($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = +$9_1;
  var $12_1 = 0;
  $12_1 = global$0 - 64 | 0;
  HEAP32[($12_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($12_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($12_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($12_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($12_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($12_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($12_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($12_1 + 32 | 0) >> 2] = $7_1;
  HEAP32[($12_1 + 28 | 0) >> 2] = $8_1;
  HEAPF64[($12_1 + 16 | 0) >> 3] = $9_1;
  HEAP32[($12_1 + 12 | 0) >> 2] = ((HEAP32[($12_1 + 56 | 0) >> 2] | 0) - 1 | 0) << 3 | 0;
  HEAPF64[((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($12_1 + 52 | 0) >> 2] | 0 | 0);
  HEAPF64[((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 12 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($12_1 + 48 | 0) >> 2] | 0 | 0);
  HEAPF64[((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 12 | 0) >> 2] | 0) + 2 | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($12_1 + 44 | 0) >> 2] | 0 | 0);
  HEAPF64[((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 12 | 0) >> 2] | 0) + 3 | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($12_1 + 40 | 0) >> 2] | 0 | 0);
  HEAPF64[((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 12 | 0) >> 2] | 0) + 4 | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($12_1 + 36 | 0) >> 2] | 0 | 0);
  HEAPF64[((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 12 | 0) >> 2] | 0) + 5 | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($12_1 + 32 | 0) >> 2] | 0 | 0);
  HEAPF64[((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 12 | 0) >> 2] | 0) + 6 | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($12_1 + 28 | 0) >> 2] | 0 | 0);
  HEAPF64[((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 12 | 0) >> 2] | 0) + 7 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($12_1 + 16 | 0) >> 3];
  return;
 }
 
 function $25($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $21(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
  $863(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $26($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0;
  $11_1 = global$0 - 64 | 0;
  HEAP32[($11_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 48 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 44 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 40 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 36 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 32 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 24 | 0) >> 2] = $8_1;
  HEAP32[($11_1 + 12 | 0) >> 2] = 8;
  HEAP32[($11_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[($11_1 + 16 | 0) >> 2] = Math_imul(HEAP32[($11_1 + 20 | 0) >> 2] | 0, HEAP32[($11_1 + 12 | 0) >> 2] | 0);
     label$4 : {
      if (!(+(HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0) == +HEAPF64[((HEAP32[($11_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + 0 | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$4
      }
      if (!(+(HEAP32[($11_1 + 52 | 0) >> 2] | 0 | 0) == +HEAPF64[((HEAP32[($11_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$4
      }
      if (!(+(HEAP32[($11_1 + 48 | 0) >> 2] | 0 | 0) == +HEAPF64[((HEAP32[($11_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + 2 | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$4
      }
      if (!(+(HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0) == +HEAPF64[((HEAP32[($11_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + 3 | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$4
      }
      if (!(+(HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0) == +HEAPF64[((HEAP32[($11_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + 4 | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$4
      }
      if (!(+(HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) == +HEAPF64[((HEAP32[($11_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + 5 | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$4
      }
      if (!(+(HEAP32[($11_1 + 32 | 0) >> 2] | 0 | 0) == +HEAPF64[((HEAP32[($11_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + 6 | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$4
      }
      HEAP32[($11_1 + 60 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP32[($11_1 + 20 | 0) >> 2] = (HEAP32[($11_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP32[($11_1 + 60 | 0) >> 2] = 1;
  }
  return HEAP32[($11_1 + 60 | 0) >> 2] | 0 | 0;
 }
 
 function $27($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($4_1 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = 1;
     break label$3;
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = 2;
      break label$5;
     }
     $875(global$3 + 5695 | 0 | 0, 0 | 0) | 0;
    }
   }
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $28($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($4_1 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = 1;
     break label$3;
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = 2;
      break label$5;
     }
     $875(global$3 + 5695 | 0 | 0, 0 | 0) | 0;
    }
   }
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $29($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($4_1 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 1;
     break label$3;
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 2;
      break label$5;
     }
     label$7 : {
      label$8 : {
       if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
        break label$8
       }
       HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 3;
       break label$7;
      }
      label$9 : {
       label$10 : {
        if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
         break label$10
        }
        HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 4;
        break label$9;
       }
       label$11 : {
        label$12 : {
         if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (5 | 0) & 1 | 0)) {
          break label$12
         }
         HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 5;
         break label$11;
        }
        label$13 : {
         label$14 : {
          if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (6 | 0) & 1 | 0)) {
           break label$14
          }
          HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 6;
          break label$13;
         }
         label$15 : {
          label$16 : {
           if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
            break label$16
           }
           HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 7;
           break label$15;
          }
          $875(global$3 + 5912 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 5410 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 4977 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 4897 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 5056 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 4709 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 5792 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 5757 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 5011 | 0 | 0, 0 | 0) | 0;
         }
        }
       }
      }
     }
    }
   }
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $30($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (HEAP32[($4_1 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 1;
     break label$3;
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 2;
      break label$5;
     }
     label$7 : {
      label$8 : {
       if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
        break label$8
       }
       HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 3;
       break label$7;
      }
      label$9 : {
       label$10 : {
        if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
         break label$10
        }
        HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 4;
        break label$9;
       }
       label$11 : {
        label$12 : {
         if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (5 | 0) & 1 | 0)) {
          break label$12
         }
         HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 5;
         break label$11;
        }
        label$13 : {
         label$14 : {
          if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (6 | 0) & 1 | 0)) {
           break label$14
          }
          HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 6;
          break label$13;
         }
         label$15 : {
          label$16 : {
           if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
            break label$16
           }
           HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = 7;
           break label$15;
          }
          $875(global$3 + 5912 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 5410 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 4977 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 4897 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 5056 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 4709 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 5792 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 5757 | 0 | 0, 0 | 0) | 0;
          $875(global$3 + 5011 | 0 | 0, 0 | 0) | 0;
         }
        }
       }
      }
     }
    }
   }
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $31($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP32[($4_1 + 8 | 0) >> 2] | 0)) {
      break label$3
     }
     if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 208 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   $875(global$3 + 6033 | 0 | 0, 0 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $32($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP32[($4_1 + 8 | 0) >> 2] | 0)) {
      break label$3
     }
     if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 200 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   $875(global$3 + 6145 | 0 | 0, 0 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $33($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP32[($4_1 + 8 | 0) >> 2] | 0)) {
      break label$3
     }
     if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 212 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   $875(global$3 + 6092 | 0 | 0, 0 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $34($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $184_1 = 0, $221_1 = 0, $330_1 = 0, $361_1 = 0, $392_1 = 0, $423_1 = 0, $460_1 = 0, $489_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $9_1 = global$0 - 128 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 116 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 112 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 108 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 104 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 100 | 0) >> 2] = $6_1;
  HEAP32[($9_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
  HEAP32[($9_1 + 88 | 0) >> 2] = HEAP32[(HEAP32[($9_1 + 124 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($9_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP32[($9_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
  HEAP32[($9_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0;
  HEAP32[($9_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
  HEAP32[($9_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
  HEAP32[($9_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
  HEAP32[($9_1 + 84 | 0) >> 2] = (HEAP32[($9_1 + 56 | 0) >> 2] | 0) + Math_imul(HEAP32[($9_1 + 60 | 0) >> 2] | 0, HEAP32[($9_1 + 68 | 0) >> 2] | 0) | 0;
  HEAP32[($9_1 + 80 | 0) >> 2] = (HEAP32[($9_1 + 52 | 0) >> 2] | 0) + Math_imul(HEAP32[($9_1 + 60 | 0) >> 2] | 0, HEAP32[($9_1 + 64 | 0) >> 2] | 0) | 0;
  HEAP32[($9_1 + 76 | 0) >> 2] = (HEAP32[($9_1 + 56 | 0) >> 2] | 0) + Math_imul(HEAP32[($9_1 + 60 | 0) >> 2] | 0, HEAP32[($9_1 + 68 | 0) >> 2] | 0) | 0;
  HEAP32[($9_1 + 48 | 0) >> 2] = ((HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 1 | 0) + Math_imul(HEAP32[($9_1 + 60 | 0) >> 2] | 0, HEAP32[($9_1 + 64 | 0) >> 2] | 0) | 0;
  label$1 : {
   if (!((HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($9_1 + 76 | 0) >> 2] = HEAP32[($9_1 + 48 | 0) >> 2] | 0;
  }
  HEAP32[($9_1 + 44 | 0) >> 2] = HEAP32[($9_1 + 68 | 0) >> 2] | 0;
  HEAP32[($9_1 + 40 | 0) >> 2] = HEAP32[($9_1 + 64 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862(((HEAP32[($9_1 + 96 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((Math_imul(HEAP32[($9_1 + 72 | 0) >> 2] | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((((HEAP32[($9_1 + 96 | 0) >> 2] | 0) + Math_imul(HEAP32[($9_1 + 72 | 0) >> 2] | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0) | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 88 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 88 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 76 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 76 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  HEAPF64[$9_1 >> 3] = +(0 | 0);
  HEAPF64[(HEAP32[($9_1 + 28 | 0) >> 2] | 0) >> 3] = 1.0;
  HEAPF64[(HEAP32[($9_1 + 32 | 0) >> 2] | 0) >> 3] = 1.0;
  label$2 : {
   if (HEAP32[($9_1 + 96 | 0) >> 2] | 0) {
    break label$2
   }
   if (HEAP32[($9_1 + 72 | 0) >> 2] | 0) {
    break label$2
   }
   HEAPF64[(HEAP32[($9_1 + 24 | 0) >> 2] | 0) >> 3] = 1.0;
   HEAPF64[$9_1 >> 3] = +HEAPF64[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 88 | 0) >> 3];
  }
  label$3 : {
   if (!((HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$3
   }
   $220(HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0);
  }
  label$4 : {
   if (!((HEAP32[($9_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$4
   }
   $221(HEAP32[($9_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 28 | 0) >> 2] | 0 | 0);
  }
  $73(HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 96 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($9_1 + 28 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($9_1 + 72 | 0) >> 2] | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($9_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($9_1 + 92 | 0) >> 2] = 1;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) <= ((HEAP32[($9_1 + 96 | 0) >> 2] | 0) + Math_imul(HEAP32[($9_1 + 72 | 0) >> 2] | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF64[((HEAP32[($9_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -1.0 * +HEAPF64[((HEAP32[($9_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[($9_1 + 92 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAPF64[((HEAP32[($9_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 120 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$9 : {
     if (HEAP32[($9_1 + 96 | 0) >> 2] | 0) {
      break label$9
     }
     if (HEAP32[($9_1 + 72 | 0) >> 2] | 0) {
      break label$9
     }
     $184_1 = (HEAP32[($9_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAPF64[$184_1 >> 3] = +HEAPF64[$184_1 >> 3] - +HEAPF64[$9_1 >> 3];
    }
    label$10 : {
     if (!((HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$10
     }
     HEAP32[($9_1 + 36 | 0) >> 2] = 0;
     label$11 : {
      label$12 : while (1) {
       if (!((HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$11
       }
       $221_1 = (HEAP32[($9_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$221_1 >> 3] = +HEAPF64[$221_1 >> 3] - +HEAPF64[((HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 116 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($9_1 + 36 | 0) >> 2] | 0, HEAP32[($9_1 + 88 | 0) >> 2] | 0) + (HEAP32[($9_1 + 92 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($9_1 + 36 | 0) >> 2] = (HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 1 | 0;
       continue label$12;
      };
     }
    }
    HEAPF64[((HEAP32[($9_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 84 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  HEAP32[($9_1 + 92 | 0) >> 2] = 0;
  label$13 : {
   label$14 : while (1) {
    if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$13
    }
    HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAPF64[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0;
    continue label$14;
   };
  }
  HEAP32[($9_1 + 92 | 0) >> 2] = 0;
  label$15 : {
   label$16 : while (1) {
    if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$15
    }
    HEAPF64[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0;
    continue label$16;
   };
  }
  HEAP32[($9_1 + 92 | 0) >> 2] = 0;
  label$17 : {
   label$18 : while (1) {
    if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$17
    }
    HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -1.0 * +HEAPF64[((HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0;
    continue label$18;
   };
  }
  HEAP32[($9_1 + 36 | 0) >> 2] = 0;
  label$19 : {
   label$20 : while (1) {
    if (!((HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$19
    }
    $330_1 = (HEAP32[($9_1 + 12 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 1 | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
    HEAPF64[$330_1 >> 3] = +HEAPF64[$330_1 >> 3] + +HEAPF64[((HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($9_1 + 92 | 0) >> 2] = 0;
    label$21 : {
     label$22 : while (1) {
      if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$21
      }
      $361_1 = (HEAP32[($9_1 + 12 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 1 | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0) + (HEAP32[($9_1 + 92 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
      HEAPF64[$361_1 >> 3] = +HEAPF64[$361_1 >> 3] - +HEAPF64[((HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0;
      continue label$22;
     };
    }
    HEAP32[($9_1 + 36 | 0) >> 2] = (HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$20;
   };
  }
  HEAP32[($9_1 + 36 | 0) >> 2] = 0;
  label$23 : {
   label$24 : while (1) {
    if (!((HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$23
    }
    $392_1 = (HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 1 | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
    HEAPF64[$392_1 >> 3] = +HEAPF64[$392_1 >> 3] - +HEAPF64[((HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($9_1 + 92 | 0) >> 2] = 0;
    label$25 : {
     label$26 : while (1) {
      if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$25
      }
      $423_1 = (HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 1 | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0) + (HEAP32[($9_1 + 92 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
      HEAPF64[$423_1 >> 3] = +HEAPF64[$423_1 >> 3] + +HEAPF64[((HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0;
      continue label$26;
     };
    }
    HEAP32[($9_1 + 36 | 0) >> 2] = (HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$24;
   };
  }
  $58(HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 80 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 96 | 0) >> 2] | 0) + Math_imul(HEAP32[($9_1 + 72 | 0) >> 2] | 0, HEAP32[($9_1 + 60 | 0) >> 2] | 0) | 0 | 0, HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 24 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($9_1 + 92 | 0) >> 2] = 0;
  label$27 : {
   label$28 : while (1) {
    if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$27
    }
    $460_1 = (HEAP32[($9_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$460_1 >> 3] = +HEAPF64[$460_1 >> 3] + +HEAPF64[$9_1 >> 3];
    HEAP32[($9_1 + 36 | 0) >> 2] = 0;
    label$29 : {
     label$30 : while (1) {
      if (!((HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$29
      }
      $489_1 = (HEAP32[($9_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAPF64[$489_1 >> 3] = +HEAPF64[$489_1 >> 3] + +HEAPF64[((HEAP32[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 108 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($9_1 + 36 | 0) >> 2] | 0, HEAP32[($9_1 + 112 | 0) >> 2] | 0) + (HEAP32[($9_1 + 92 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($9_1 + 36 | 0) >> 2] = (HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$30;
     };
    }
    HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0;
    continue label$28;
   };
  }
  $863(HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 28 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 24 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $9_1 + 128 | 0;
  return;
 }
 
 function $35($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $194_1 = 0, $212_1 = 0, $251_1 = 0, $360_1 = 0, $391_1 = 0, $422_1 = 0, $453_1 = 0, $490_1 = 0, $510_1 = 0, $541_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $9_1 = global$0 - 144 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 140 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 136 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 132 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 128 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 124 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 120 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 116 | 0) >> 2] = $6_1;
  HEAP32[($9_1 + 112 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
  HEAP32[($9_1 + 104 | 0) >> 2] = HEAP32[(HEAP32[($9_1 + 140 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($9_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
  HEAP32[($9_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
  HEAP32[($9_1 + 88 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
  HEAP32[($9_1 + 84 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0;
  HEAP32[($9_1 + 80 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0;
  HEAP32[($9_1 + 76 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0;
  HEAP32[($9_1 + 100 | 0) >> 2] = (HEAP32[($9_1 + 72 | 0) >> 2] | 0) + Math_imul(HEAP32[($9_1 + 76 | 0) >> 2] | 0, HEAP32[($9_1 + 84 | 0) >> 2] | 0) | 0;
  HEAP32[($9_1 + 96 | 0) >> 2] = (HEAP32[($9_1 + 68 | 0) >> 2] | 0) + Math_imul(HEAP32[($9_1 + 76 | 0) >> 2] | 0, HEAP32[($9_1 + 80 | 0) >> 2] | 0) | 0;
  HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 72 | 0) >> 2] | 0) + Math_imul(HEAP32[($9_1 + 76 | 0) >> 2] | 0, HEAP32[($9_1 + 84 | 0) >> 2] | 0) | 0;
  HEAP32[($9_1 + 64 | 0) >> 2] = ((HEAP32[($9_1 + 68 | 0) >> 2] | 0) + 1 | 0) + Math_imul(HEAP32[($9_1 + 76 | 0) >> 2] | 0, HEAP32[($9_1 + 80 | 0) >> 2] | 0) | 0;
  label$1 : {
   if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($9_1 + 92 | 0) >> 2] = HEAP32[($9_1 + 64 | 0) >> 2] | 0;
  }
  HEAP32[($9_1 + 60 | 0) >> 2] = HEAP32[($9_1 + 84 | 0) >> 2] | 0;
  HEAP32[($9_1 + 56 | 0) >> 2] = HEAP32[($9_1 + 80 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862(((HEAP32[($9_1 + 112 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((Math_imul(HEAP32[($9_1 + 88 | 0) >> 2] | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((((HEAP32[($9_1 + 112 | 0) >> 2] | 0) + Math_imul(HEAP32[($9_1 + 88 | 0) >> 2] | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0) | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 104 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 104 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($9_1 + 48 | 0) >> 2] = 0;
  label$2 : {
   if (!((HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 156 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($9_1 + 48 | 0) >> 2] = 1;
  }
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  HEAPF64[($9_1 + 8 | 0) >> 3] = +(0 | 0);
  HEAPF64[(HEAP32[($9_1 + 40 | 0) >> 2] | 0) >> 3] = 1.0;
  HEAPF64[(HEAP32[($9_1 + 44 | 0) >> 2] | 0) >> 3] = 1.0;
  label$3 : {
   if (HEAP32[($9_1 + 112 | 0) >> 2] | 0) {
    break label$3
   }
   if (HEAP32[($9_1 + 88 | 0) >> 2] | 0) {
    break label$3
   }
   HEAPF64[(HEAP32[($9_1 + 36 | 0) >> 2] | 0) >> 3] = 1.0;
   HEAPF64[($9_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 112 | 0) >> 3];
  }
  label$4 : {
   if (!((HEAP32[($9_1 + 112 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$4
   }
   $220(HEAP32[($9_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 44 | 0) >> 2] | 0 | 0);
  }
  label$5 : {
   if (!((HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$5
   }
   $221(HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 40 | 0) >> 2] | 0 | 0);
  }
  $73(HEAP32[($9_1 + 44 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 112 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($9_1 + 40 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($9_1 + 88 | 0) >> 2] | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0) + 1 | 0 | 0, HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0);
  HEAP32[($9_1 + 108 | 0) >> 2] = 1;
  label$6 : {
   label$7 : while (1) {
    if (!((HEAP32[($9_1 + 108 | 0) >> 2] | 0 | 0) <= ((HEAP32[($9_1 + 112 | 0) >> 2] | 0) + Math_imul(HEAP32[($9_1 + 88 | 0) >> 2] | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAPF64[((HEAP32[($9_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -1.0 * +HEAPF64[((HEAP32[($9_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($9_1 + 108 | 0) >> 2] = (HEAP32[($9_1 + 108 | 0) >> 2] | 0) + 1 | 0;
    continue label$7;
   };
  }
  HEAP32[($9_1 + 108 | 0) >> 2] = 0;
  label$8 : {
   label$9 : while (1) {
    if (!((HEAP32[($9_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAPF64[((HEAP32[($9_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$10 : {
     if (HEAP32[($9_1 + 112 | 0) >> 2] | 0) {
      break label$10
     }
     if (HEAP32[($9_1 + 88 | 0) >> 2] | 0) {
      break label$10
     }
     $194_1 = (HEAP32[($9_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAPF64[$194_1 >> 3] = +HEAPF64[$194_1 >> 3] - +HEAPF64[($9_1 + 8 | 0) >> 3];
    }
    label$11 : {
     if (!((HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 156 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$11
     }
     $212_1 = (HEAP32[($9_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAPF64[$212_1 >> 3] = +HEAPF64[$212_1 >> 3] - +HEAPF64[(HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0) >> 3] * +((HEAP32[($9_1 + 108 | 0) >> 2] | 0) + 1 | 0 | 0);
    }
    label$12 : {
     if (!((HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP32[($9_1 + 52 | 0) >> 2] = HEAP32[($9_1 + 48 | 0) >> 2] | 0;
     label$13 : {
      label$14 : while (1) {
       if (!((HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$13
       }
       $251_1 = (HEAP32[($9_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$251_1 >> 3] = +HEAPF64[$251_1 >> 3] - +HEAPF64[((HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 132 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($9_1 + 52 | 0) >> 2] | 0) - (HEAP32[($9_1 + 48 | 0) >> 2] | 0) | 0, HEAP32[($9_1 + 104 | 0) >> 2] | 0) + (HEAP32[($9_1 + 108 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($9_1 + 52 | 0) >> 2] = (HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 1 | 0;
       continue label$14;
      };
     }
    }
    HEAPF64[((HEAP32[($9_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 108 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($9_1 + 108 | 0) >> 2] = (HEAP32[($9_1 + 108 | 0) >> 2] | 0) + 1 | 0;
    continue label$9;
   };
  }
  HEAP32[($9_1 + 108 | 0) >> 2] = 0;
  label$15 : {
   label$16 : while (1) {
    if (!((HEAP32[($9_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$15
    }
    HEAPF64[((HEAP32[($9_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAPF64[((HEAP32[($9_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($9_1 + 108 | 0) >> 2] = (HEAP32[($9_1 + 108 | 0) >> 2] | 0) + 1 | 0;
    continue label$16;
   };
  }
  HEAP32[($9_1 + 108 | 0) >> 2] = 0;
  label$17 : {
   label$18 : while (1) {
    if (!((HEAP32[($9_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$17
    }
    HEAPF64[((HEAP32[($9_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($9_1 + 108 | 0) >> 2] = (HEAP32[($9_1 + 108 | 0) >> 2] | 0) + 1 | 0;
    continue label$18;
   };
  }
  HEAP32[($9_1 + 108 | 0) >> 2] = 0;
  label$19 : {
   label$20 : while (1) {
    if (!((HEAP32[($9_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$19
    }
    HEAPF64[((HEAP32[($9_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -1.0 * +HEAPF64[((HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 84 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($9_1 + 108 | 0) >> 2] = (HEAP32[($9_1 + 108 | 0) >> 2] | 0) + 1 | 0;
    continue label$20;
   };
  }
  HEAP32[($9_1 + 52 | 0) >> 2] = 0;
  label$21 : {
   label$22 : while (1) {
    if (!((HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$21
    }
    $360_1 = (HEAP32[($9_1 + 24 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 1 | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
    HEAPF64[$360_1 >> 3] = +HEAPF64[$360_1 >> 3] + +HEAPF64[((HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($9_1 + 108 | 0) >> 2] = 0;
    label$23 : {
     label$24 : while (1) {
      if (!((HEAP32[($9_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$23
      }
      $391_1 = (HEAP32[($9_1 + 24 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 1 | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0) + (HEAP32[($9_1 + 108 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
      HEAPF64[$391_1 >> 3] = +HEAPF64[$391_1 >> 3] - +HEAPF64[((HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($9_1 + 108 | 0) >> 2] = (HEAP32[($9_1 + 108 | 0) >> 2] | 0) + 1 | 0;
      continue label$24;
     };
    }
    HEAP32[($9_1 + 52 | 0) >> 2] = (HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    continue label$22;
   };
  }
  HEAP32[($9_1 + 52 | 0) >> 2] = 0;
  label$25 : {
   label$26 : while (1) {
    if (!((HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$25
    }
    $422_1 = (HEAP32[($9_1 + 20 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 1 | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
    HEAPF64[$422_1 >> 3] = +HEAPF64[$422_1 >> 3] - +HEAPF64[((HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 92 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($9_1 + 108 | 0) >> 2] = 0;
    label$27 : {
     label$28 : while (1) {
      if (!((HEAP32[($9_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$27
      }
      $453_1 = (HEAP32[($9_1 + 20 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 1 | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0) + (HEAP32[($9_1 + 108 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
      HEAPF64[$453_1 >> 3] = +HEAPF64[$453_1 >> 3] + +HEAPF64[((HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 84 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 92 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($9_1 + 108 | 0) >> 2] = (HEAP32[($9_1 + 108 | 0) >> 2] | 0) + 1 | 0;
      continue label$28;
     };
    }
    HEAP32[($9_1 + 52 | 0) >> 2] = (HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    continue label$26;
   };
  }
  $58(HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 112 | 0) >> 2] | 0) + Math_imul(HEAP32[($9_1 + 88 | 0) >> 2] | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0) | 0 | 0, HEAP32[($9_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0, (HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($9_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($9_1 + 108 | 0) >> 2] = 0;
  label$29 : {
   label$30 : while (1) {
    if (!((HEAP32[($9_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 128 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$29
    }
    $490_1 = (HEAP32[($9_1 + 120 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$490_1 >> 3] = +HEAPF64[$490_1 >> 3] + +HEAPF64[($9_1 + 8 | 0) >> 3];
    label$31 : {
     if (!((HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 156 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$31
     }
     $510_1 = (HEAP32[($9_1 + 120 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAPF64[$510_1 >> 3] = +HEAPF64[$510_1 >> 3] + +HEAPF64[(HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0) >> 3] * +(((HEAP32[($9_1 + 108 | 0) >> 2] | 0) + 1 | 0) + (HEAP32[($9_1 + 104 | 0) >> 2] | 0) | 0 | 0);
    }
    HEAP32[($9_1 + 52 | 0) >> 2] = HEAP32[($9_1 + 48 | 0) >> 2] | 0;
    label$32 : {
     label$33 : while (1) {
      if (!((HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$32
      }
      $541_1 = (HEAP32[($9_1 + 120 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAPF64[$541_1 >> 3] = +HEAPF64[$541_1 >> 3] + +HEAPF64[((HEAP32[((HEAP32[($9_1 + 140 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($9_1 + 52 | 0) >> 2] | 0) - (HEAP32[($9_1 + 48 | 0) >> 2] | 0) | 0, HEAP32[($9_1 + 128 | 0) >> 2] | 0) + (HEAP32[($9_1 + 108 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($9_1 + 52 | 0) >> 2] = (HEAP32[($9_1 + 52 | 0) >> 2] | 0) + 1 | 0;
      continue label$33;
     };
    }
    HEAP32[($9_1 + 108 | 0) >> 2] = (HEAP32[($9_1 + 108 | 0) >> 2] | 0) + 1 | 0;
    continue label$30;
   };
  }
  $863(HEAP32[($9_1 + 44 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 40 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 28 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 24 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $9_1 + 144 | 0;
  return;
 }
 
 function $36($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $156_1 = 0, $373_1 = 0, $422_1 = 0, $472_1 = 0, $483_1 = 0, $495_1 = 0, $674_1 = 0, $700_1 = 0, $757_1 = 0, $783_1 = 0, $131_1 = 0, $133_1 = 0, $135_1 = 0, $137_1 = 0, $139_1 = 0, $177_1 = 0, $854_1 = 0.0, $217_1 = 0, $857_1 = 0.0, $262_1 = 0, $860_1 = 0.0, $310_1 = 0, $863_1 = 0.0, $866_1 = 0.0, $869_1 = 0.0, $872_1 = 0.0, $880_1 = 0.0, $884_1 = 0.0, $891 = 0.0, $895 = 0.0;
  $3_1 = global$0 - 448 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 444 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 436 | 0) >> 2] = ((((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($3_1 + 420 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0)) {
     break label$2
    }
    if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $875(global$3 + 4743 | 0 | 0, 0 | 0) | 0;
   HEAP32[($3_1 + 416 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 120 | 0) >> 2] | 0;
   $875(global$3 + 5526 | 0 | 0, $3_1 + 416 | 0 | 0) | 0;
   $875(global$3 + 4204 | 0 | 0, 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 120 | 0) >> 2] | 0) {
      break label$4
     }
     $875(global$3 + 1594 | 0 | 0, 0 | 0) | 0;
     break label$3;
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 120 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$6
      }
      $875(global$3 + 1302 | 0 | 0, 0 | 0) | 0;
      break label$5;
     }
     label$7 : {
      label$8 : {
       if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 120 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
        break label$8
       }
       $875(global$3 + 2619 | 0 | 0, 0 | 0) | 0;
       break label$7;
      }
      label$9 : {
       label$10 : {
        if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 120 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
         break label$10
        }
        $875(global$3 + 1779 | 0 | 0, 0 | 0) | 0;
        break label$9;
       }
       label$11 : {
        label$12 : {
         if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 120 | 0) >> 2] | 0 | 0) == (10 | 0) & 1 | 0)) {
          break label$12
         }
         $875(global$3 + 1161 | 0 | 0, 0 | 0) | 0;
         break label$11;
        }
        label$13 : {
         label$14 : {
          if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 120 | 0) >> 2] | 0 | 0) == (12 | 0) & 1 | 0)) {
           break label$14
          }
          $875(global$3 + 1183 | 0 | 0, 0 | 0) | 0;
          break label$13;
         }
         label$15 : {
          if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 120 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
           break label$15
          }
          $875(global$3 + 1437 | 0 | 0, 0 | 0) | 0;
         }
        }
       }
      }
     }
    }
   }
  }
  $875(global$3 + 7702 | 0 | 0, 0 | 0) | 0;
  $131_1 = HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  $133_1 = HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
  $135_1 = HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
  $137_1 = HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
  $139_1 = HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0;
  HEAP32[($3_1 + 388 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
  HEAP32[($3_1 + 384 | 0) >> 2] = $139_1;
  HEAP32[($3_1 + 380 | 0) >> 2] = $137_1;
  HEAP32[($3_1 + 376 | 0) >> 2] = $135_1;
  HEAP32[($3_1 + 372 | 0) >> 2] = $133_1;
  HEAP32[($3_1 + 368 | 0) >> 2] = $131_1;
  $875(global$3 + 7515 | 0 | 0, $3_1 + 368 | 0 | 0) | 0;
  $875(global$3 + 7703 | 0 | 0, 0 | 0) | 0;
  $156_1 = global$3;
  HEAP32[($3_1 + 408 | 0) >> 2] = $156_1 + 1606 | 0;
  HEAP32[($3_1 + 404 | 0) >> 2] = $156_1 + 2560 | 0;
  HEAP32[($3_1 + 400 | 0) >> 2] = $156_1 + 1284 | 0;
  $875($156_1 + 7686 | 0 | 0, $3_1 + 400 | 0 | 0) | 0;
  HEAP32[($3_1 + 440 | 0) >> 2] = 0;
  label$16 : {
   label$17 : while (1) {
    if (!((HEAP32[($3_1 + 440 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$16
    }
    $177_1 = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    $854_1 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[($3_1 + 16 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 440 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 436 | 0) >> 2] | 0, HEAP32[($3_1 + 440 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
    HEAPF64[($3_1 + 8 | 0) >> 3] = $854_1;
    HEAP32[$3_1 >> 2] = $177_1;
    $875(global$3 + 5139 | 0 | 0, $3_1 | 0) | 0;
    HEAP32[($3_1 + 440 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    continue label$17;
   };
  }
  HEAP32[($3_1 + 440 | 0) >> 2] = 0;
  label$18 : {
   label$19 : while (1) {
    if (!((HEAP32[($3_1 + 440 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$18
    }
    HEAP32[($3_1 + 432 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + (HEAP32[($3_1 + 440 | 0) >> 2] | 0) | 0;
    $217_1 = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    $857_1 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[($3_1 + 48 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 432 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 436 | 0) >> 2] | 0, HEAP32[($3_1 + 432 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
    HEAPF64[($3_1 + 40 | 0) >> 3] = $857_1;
    HEAP32[($3_1 + 32 | 0) >> 2] = $217_1;
    $875(global$3 + 5159 | 0 | 0, $3_1 + 32 | 0 | 0) | 0;
    HEAP32[($3_1 + 440 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    continue label$19;
   };
  }
  HEAP32[($3_1 + 440 | 0) >> 2] = 0;
  label$20 : {
   label$21 : while (1) {
    if (!((HEAP32[($3_1 + 440 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$20
    }
    HEAP32[($3_1 + 432 | 0) >> 2] = ((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) + (HEAP32[($3_1 + 440 | 0) >> 2] | 0) | 0;
    $262_1 = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    $860_1 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[($3_1 + 80 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 432 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 436 | 0) >> 2] | 0, HEAP32[($3_1 + 432 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
    HEAPF64[($3_1 + 72 | 0) >> 3] = $860_1;
    HEAP32[($3_1 + 64 | 0) >> 2] = $262_1;
    $875(global$3 + 5179 | 0 | 0, $3_1 + 64 | 0 | 0) | 0;
    HEAP32[($3_1 + 440 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    continue label$21;
   };
  }
  HEAP32[($3_1 + 440 | 0) >> 2] = 0;
  label$22 : {
   label$23 : while (1) {
    if (!((HEAP32[($3_1 + 440 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$22
    }
    HEAP32[($3_1 + 432 | 0) >> 2] = (((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) | 0) + (HEAP32[($3_1 + 440 | 0) >> 2] | 0) | 0;
    $310_1 = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    $863_1 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[($3_1 + 112 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 432 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 436 | 0) >> 2] | 0, HEAP32[($3_1 + 432 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
    HEAPF64[($3_1 + 104 | 0) >> 3] = $863_1;
    HEAP32[($3_1 + 96 | 0) >> 2] = $310_1;
    $875(global$3 + 5200 | 0 | 0, $3_1 + 96 | 0 | 0) | 0;
    HEAP32[($3_1 + 440 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    continue label$23;
   };
  }
  $875(global$3 + 7703 | 0 | 0, 0 | 0) | 0;
  HEAP32[($3_1 + 432 | 0) >> 2] = (((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) | 0;
  label$24 : {
   label$25 : {
    if (!((HEAP32[($3_1 + 420 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$25
    }
    $866_1 = +HEAPF64[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 88 | 0) >> 3];
    HEAPF64[($3_1 + 304 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 432 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 436 | 0) >> 2] | 0, HEAP32[($3_1 + 432 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
    HEAPF64[($3_1 + 296 | 0) >> 3] = $866_1;
    $373_1 = global$3;
    HEAP32[($3_1 + 288 | 0) >> 2] = $373_1 + 2893 | 0;
    $875($373_1 + 5121 | 0 | 0, $3_1 + 288 | 0 | 0) | 0;
    HEAP32[($3_1 + 440 | 0) >> 2] = 1;
    label$26 : {
     label$27 : while (1) {
      if (!((HEAP32[($3_1 + 440 | 0) >> 2] | 0 | 0) <= (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$26
      }
      HEAP32[($3_1 + 432 | 0) >> 2] = ((((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) | 0) + (HEAP32[($3_1 + 440 | 0) >> 2] | 0) | 0;
      $869_1 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 440 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[($3_1 + 144 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 432 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 436 | 0) >> 2] | 0, HEAP32[($3_1 + 432 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
      HEAPF64[($3_1 + 136 | 0) >> 3] = $869_1;
      $422_1 = global$3;
      HEAP32[($3_1 + 128 | 0) >> 2] = $422_1 + 2943 | 0;
      $875($422_1 + 5121 | 0 | 0, $3_1 + 128 | 0 | 0) | 0;
      HEAP32[($3_1 + 440 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
      continue label$27;
     };
    }
    break label$24;
   }
   HEAP32[($3_1 + 440 | 0) >> 2] = 0;
   label$28 : {
    label$29 : while (1) {
     if (!((HEAP32[($3_1 + 440 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$28
     }
     HEAP32[($3_1 + 432 | 0) >> 2] = ((((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) | 0) + (HEAP32[($3_1 + 440 | 0) >> 2] | 0) | 0;
     $872_1 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[($3_1 + 336 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 432 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 436 | 0) >> 2] | 0, HEAP32[($3_1 + 432 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
     HEAPF64[($3_1 + 328 | 0) >> 3] = $872_1;
     $472_1 = global$3;
     HEAP32[($3_1 + 320 | 0) >> 2] = $472_1 + 2943 | 0;
     $875($472_1 + 5121 | 0 | 0, $3_1 + 320 | 0 | 0) | 0;
     HEAP32[($3_1 + 440 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
     continue label$29;
    };
   }
   HEAPF64[($3_1 + 360 | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 88 | 0) >> 3];
   $483_1 = global$3;
   HEAP32[($3_1 + 352 | 0) >> 2] = $483_1 + 2893 | 0;
   $875($483_1 + 5108 | 0 | 0, $3_1 + 352 | 0 | 0) | 0;
  }
  $875(global$3 + 7703 | 0 | 0, 0 | 0) | 0;
  HEAPF64[($3_1 + 280 | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 96 | 0) >> 3];
  $495_1 = global$3;
  HEAP32[($3_1 + 272 | 0) >> 2] = $495_1 + 3623 | 0;
  $875($495_1 + 5108 | 0 | 0, $3_1 + 272 | 0 | 0) | 0;
  $875(global$3 + 7703 | 0 | 0, 0 | 0) | 0;
  $875(global$3 + 4243 | 0 | 0, 0 | 0) | 0;
  label$30 : {
   label$31 : {
    if (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) {
     break label$31
    }
    $875(global$3 + 2963 | 0 | 0, 0 | 0) | 0;
    break label$30;
   }
   label$32 : {
    label$33 : {
     if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$33
     }
     $875(global$3 + 2967 | 0 | 0, 0 | 0) | 0;
     break label$32;
    }
    label$34 : {
     if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$34
     }
     $875(global$3 + 2830 | 0 | 0, 0 | 0) | 0;
    }
   }
  }
  $875(global$3 + 7702 | 0 | 0, 0 | 0) | 0;
  $875(global$3 + 4220 | 0 | 0, 0 | 0) | 0;
  label$35 : {
   label$36 : {
    if (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) {
     break label$36
    }
    $875(global$3 + 2747 | 0 | 0, 0 | 0) | 0;
    break label$35;
   }
   label$37 : {
    label$38 : {
     if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$38
     }
     $875(global$3 + 2160 | 0 | 0, 0 | 0) | 0;
     break label$37;
    }
    label$39 : {
     label$40 : {
      if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$40
      }
      $875(global$3 + 1855 | 0 | 0, 0 | 0) | 0;
      break label$39;
     }
     label$41 : {
      label$42 : {
       if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
        break label$42
       }
       $875(global$3 + 2291 | 0 | 0, 0 | 0) | 0;
       break label$41;
      }
      label$43 : {
       label$44 : {
        if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
         break label$44
        }
        $875(global$3 + 1227 | 0 | 0, 0 | 0) | 0;
        break label$43;
       }
       label$45 : {
        label$46 : {
         if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (5 | 0) & 1 | 0)) {
          break label$46
         }
         $875(global$3 + 2836 | 0 | 0, 0 | 0) | 0;
         break label$45;
        }
        label$47 : {
         label$48 : {
          if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (6 | 0) & 1 | 0)) {
           break label$48
          }
          $875(global$3 + 2834 | 0 | 0, 0 | 0) | 0;
          break label$47;
         }
         label$49 : {
          if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
           break label$49
          }
          $875(global$3 + 2179 | 0 | 0, 0 | 0) | 0;
         }
        }
       }
      }
     }
    }
   }
  }
  $875(global$3 + 7702 | 0 | 0, 0 | 0) | 0;
  $875(global$3 + 4175 | 0 | 0, 0 | 0) | 0;
  HEAP32[($3_1 + 440 | 0) >> 2] = 0;
  label$50 : {
   label$51 : while (1) {
    if (!((HEAP32[($3_1 + 440 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$50
    }
    label$52 : {
     label$53 : {
      if (!(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$53
      }
      $880_1 = Math_abs(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      HEAP32[($3_1 + 168 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[($3_1 + 160 | 0) >> 3] = $880_1;
      $674_1 = global$3;
      HEAP32[($3_1 + 172 | 0) >> 2] = $674_1 + 2828 | 0;
      $875($674_1 + 1494 | 0 | 0, $3_1 + 160 | 0 | 0) | 0;
      break label$52;
     }
     label$54 : {
      if (!(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(0 | 0) & 1 | 0)) {
       break label$54
      }
      $884_1 = Math_abs(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      HEAP32[($3_1 + 184 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[($3_1 + 176 | 0) >> 3] = $884_1;
      $700_1 = global$3;
      HEAP32[($3_1 + 188 | 0) >> 2] = $700_1 + 4201 | 0;
      $875($700_1 + 1510 | 0 | 0, $3_1 + 176 | 0 | 0) | 0;
     }
    }
    HEAP32[($3_1 + 440 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    continue label$51;
   };
  }
  $875(global$3 + 3621 | 0 | 0, 0 | 0) | 0;
  label$55 : {
   if (!(+HEAPF64[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 88 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
    break label$55
   }
   HEAPF64[($3_1 + 256 | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 88 | 0) >> 3];
   $875(global$3 + 4028 | 0 | 0, $3_1 + 256 | 0 | 0) | 0;
  }
  $875(global$3 + 4197 | 0 | 0, 0 | 0) | 0;
  HEAP32[($3_1 + 440 | 0) >> 2] = 0;
  label$56 : {
   label$57 : while (1) {
    if (!((HEAP32[($3_1 + 440 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$56
    }
    label$58 : {
     label$59 : {
      if (!(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$59
      }
      $891 = Math_abs(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      HEAP32[($3_1 + 200 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[($3_1 + 192 | 0) >> 3] = $891;
      $757_1 = global$3;
      HEAP32[($3_1 + 204 | 0) >> 2] = $757_1 + 2828 | 0;
      $875($757_1 + 1526 | 0 | 0, $3_1 + 192 | 0 | 0) | 0;
      break label$58;
     }
     label$60 : {
      if (!(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(0 | 0) & 1 | 0)) {
       break label$60
      }
      $895 = Math_abs(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      HEAP32[($3_1 + 216 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[($3_1 + 208 | 0) >> 3] = $895;
      $783_1 = global$3;
      HEAP32[($3_1 + 220 | 0) >> 2] = $783_1 + 4201 | 0;
      $875($783_1 + 1542 | 0 | 0, $3_1 + 208 | 0 | 0) | 0;
     }
    }
    HEAP32[($3_1 + 440 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    continue label$57;
   };
  }
  $875(global$3 + 7702 | 0 | 0, 0 | 0) | 0;
  label$61 : {
   label$62 : {
    if (!(HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0)) {
     break label$62
    }
    if ((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
     break label$62
    }
    if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$61
    }
   }
   HEAPF64[($3_1 + 240 | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 104 | 0) >> 3];
   $875(global$3 + 4125 | 0 | 0, $3_1 + 240 | 0 | 0) | 0;
   $875(global$3 + 7702 | 0 | 0, 0 | 0) | 0;
  }
  label$63 : {
   label$64 : {
    label$65 : {
     if (!(HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0)) {
      break label$65
     }
     if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$64
     }
    }
    HEAPF64[($3_1 + 224 | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 112 | 0) >> 3];
    $875(global$3 + 4084 | 0 | 0, $3_1 + 224 | 0 | 0) | 0;
    $875(global$3 + 7702 | 0 | 0, 0 | 0) | 0;
    break label$63;
   }
   $875(global$3 + 4146 | 0 | 0, 0 | 0) | 0;
   $875(global$3 + 7702 | 0 | 0, 0 | 0) | 0;
  }
  global$0 = $3_1 + 448 | 0;
  return;
 }
 
 function $37($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $685_1 = 0, $157_1 = 0, $374_1 = 0, $385_1 = 0, $415_1 = 0, $428_1 = 0, $462_1 = 0, $480_1 = 0, $687_1 = 0, $692_1 = 0, $695_1 = 0, $697_1 = 0, $131_1 = 0, $133_1 = 0, $135_1 = 0, $137_1 = 0, $139_1 = 0, $178_1 = 0, $714_1 = 0.0, $218_1 = 0, $717_1 = 0.0, $263_1 = 0, $720_1 = 0.0, $311_1 = 0, $723_1 = 0.0, $726_1 = 0.0, $730_1 = 0.0, i64toi32_i32$0 = 0, $733_1 = 0.0;
  $3_1 = global$0 - 448 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 444 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 436 | 0) >> 2] = ((((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) | 0;
  HEAP32[($3_1 + 424 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0)) {
     break label$2
    }
    if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $875(global$3 + 4743 | 0 | 0, 0 | 0) | 0;
   HEAP32[($3_1 + 416 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 144 | 0) >> 2] | 0;
   $875(global$3 + 5526 | 0 | 0, $3_1 + 416 | 0 | 0) | 0;
   $875(global$3 + 4204 | 0 | 0, 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 144 | 0) >> 2] | 0) {
      break label$4
     }
     $875(global$3 + 1594 | 0 | 0, 0 | 0) | 0;
     break label$3;
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 144 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$6
      }
      $875(global$3 + 1302 | 0 | 0, 0 | 0) | 0;
      break label$5;
     }
     label$7 : {
      label$8 : {
       if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 144 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
        break label$8
       }
       $875(global$3 + 2619 | 0 | 0, 0 | 0) | 0;
       break label$7;
      }
      label$9 : {
       label$10 : {
        if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 144 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
         break label$10
        }
        $875(global$3 + 1779 | 0 | 0, 0 | 0) | 0;
        break label$9;
       }
       label$11 : {
        label$12 : {
         if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 144 | 0) >> 2] | 0 | 0) == (10 | 0) & 1 | 0)) {
          break label$12
         }
         $875(global$3 + 1161 | 0 | 0, 0 | 0) | 0;
         break label$11;
        }
        label$13 : {
         label$14 : {
          if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 144 | 0) >> 2] | 0 | 0) == (12 | 0) & 1 | 0)) {
           break label$14
          }
          $875(global$3 + 1183 | 0 | 0, 0 | 0) | 0;
          break label$13;
         }
         label$15 : {
          if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 144 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
           break label$15
          }
          $875(global$3 + 1437 | 0 | 0, 0 | 0) | 0;
         }
        }
       }
      }
     }
    }
   }
  }
  $875(global$3 + 7702 | 0 | 0, 0 | 0) | 0;
  $131_1 = HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0;
  $133_1 = HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
  $135_1 = HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0;
  $137_1 = HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0;
  $139_1 = HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
  HEAP32[($3_1 + 388 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0;
  HEAP32[($3_1 + 384 | 0) >> 2] = $139_1;
  HEAP32[($3_1 + 380 | 0) >> 2] = $137_1;
  HEAP32[($3_1 + 376 | 0) >> 2] = $135_1;
  HEAP32[($3_1 + 372 | 0) >> 2] = $133_1;
  HEAP32[($3_1 + 368 | 0) >> 2] = $131_1;
  $875(global$3 + 7515 | 0 | 0, $3_1 + 368 | 0 | 0) | 0;
  $875(global$3 + 7703 | 0 | 0, 0 | 0) | 0;
  HEAP32[($3_1 + 432 | 0) >> 2] = 0;
  $157_1 = global$3;
  HEAP32[($3_1 + 408 | 0) >> 2] = $157_1 + 1606 | 0;
  HEAP32[($3_1 + 404 | 0) >> 2] = $157_1 + 2560 | 0;
  HEAP32[($3_1 + 400 | 0) >> 2] = $157_1 + 1284 | 0;
  $875($157_1 + 7686 | 0 | 0, $3_1 + 400 | 0 | 0) | 0;
  HEAP32[($3_1 + 440 | 0) >> 2] = 0;
  label$16 : {
   label$17 : while (1) {
    if (!((HEAP32[($3_1 + 440 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$16
    }
    $178_1 = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    $714_1 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[($3_1 + 16 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 100 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 440 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 436 | 0) >> 2] | 0, HEAP32[($3_1 + 440 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
    HEAPF64[($3_1 + 8 | 0) >> 3] = $714_1;
    HEAP32[$3_1 >> 2] = $178_1;
    $875(global$3 + 5139 | 0 | 0, $3_1 | 0) | 0;
    HEAP32[($3_1 + 440 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    continue label$17;
   };
  }
  HEAP32[($3_1 + 440 | 0) >> 2] = 0;
  label$18 : {
   label$19 : while (1) {
    if (!((HEAP32[($3_1 + 440 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$18
    }
    HEAP32[($3_1 + 432 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + (HEAP32[($3_1 + 440 | 0) >> 2] | 0) | 0;
    $218_1 = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    $717_1 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 84 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[($3_1 + 48 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 100 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 432 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 436 | 0) >> 2] | 0, HEAP32[($3_1 + 432 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
    HEAPF64[($3_1 + 40 | 0) >> 3] = $717_1;
    HEAP32[($3_1 + 32 | 0) >> 2] = $218_1;
    $875(global$3 + 5159 | 0 | 0, $3_1 + 32 | 0 | 0) | 0;
    HEAP32[($3_1 + 440 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    continue label$19;
   };
  }
  HEAP32[($3_1 + 440 | 0) >> 2] = 0;
  label$20 : {
   label$21 : while (1) {
    if (!((HEAP32[($3_1 + 440 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$20
    }
    HEAP32[($3_1 + 432 | 0) >> 2] = ((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) | 0) + (HEAP32[($3_1 + 440 | 0) >> 2] | 0) | 0;
    $263_1 = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    $720_1 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[($3_1 + 80 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 100 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 432 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 436 | 0) >> 2] | 0, HEAP32[($3_1 + 432 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
    HEAPF64[($3_1 + 72 | 0) >> 3] = $720_1;
    HEAP32[($3_1 + 64 | 0) >> 2] = $263_1;
    $875(global$3 + 5179 | 0 | 0, $3_1 + 64 | 0 | 0) | 0;
    HEAP32[($3_1 + 440 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    continue label$21;
   };
  }
  HEAP32[($3_1 + 440 | 0) >> 2] = 0;
  label$22 : {
   label$23 : while (1) {
    if (!((HEAP32[($3_1 + 440 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$22
    }
    HEAP32[($3_1 + 432 | 0) >> 2] = (((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) | 0) + (HEAP32[($3_1 + 440 | 0) >> 2] | 0) | 0;
    $311_1 = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    $723_1 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 92 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[($3_1 + 112 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 100 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 432 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 436 | 0) >> 2] | 0, HEAP32[($3_1 + 432 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
    HEAPF64[($3_1 + 104 | 0) >> 3] = $723_1;
    HEAP32[($3_1 + 96 | 0) >> 2] = $311_1;
    $875(global$3 + 5200 | 0 | 0, $3_1 + 96 | 0 | 0) | 0;
    HEAP32[($3_1 + 440 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    continue label$23;
   };
  }
  $875(global$3 + 7703 | 0 | 0, 0 | 0) | 0;
  HEAP32[($3_1 + 432 | 0) >> 2] = (((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) | 0) + (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) | 0;
  label$24 : {
   label$25 : {
    if (!((HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$25
    }
    $726_1 = +HEAPF64[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 112 | 0) >> 3];
    HEAPF64[($3_1 + 336 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 100 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 432 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 436 | 0) >> 2] | 0, HEAP32[($3_1 + 432 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
    HEAPF64[($3_1 + 328 | 0) >> 3] = $726_1;
    $374_1 = global$3;
    HEAP32[($3_1 + 320 | 0) >> 2] = $374_1 + 2893 | 0;
    $875($374_1 + 5121 | 0 | 0, $3_1 + 320 | 0 | 0) | 0;
    HEAP32[($3_1 + 432 | 0) >> 2] = (HEAP32[($3_1 + 432 | 0) >> 2] | 0) + 1 | 0;
    break label$24;
   }
   HEAPF64[($3_1 + 360 | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 112 | 0) >> 3];
   $385_1 = global$3;
   HEAP32[($3_1 + 352 | 0) >> 2] = $385_1 + 2893 | 0;
   $875($385_1 + 5108 | 0 | 0, $3_1 + 352 | 0 | 0) | 0;
  }
  HEAP32[($3_1 + 428 | 0) >> 2] = 0;
  label$26 : {
   label$27 : {
    if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 156 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$27
    }
    $730_1 = +HEAPF64[(HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0) >> 3];
    HEAPF64[($3_1 + 288 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 100 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 432 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 436 | 0) >> 2] | 0, HEAP32[($3_1 + 432 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
    HEAPF64[($3_1 + 280 | 0) >> 3] = $730_1;
    $415_1 = global$3;
    HEAP32[($3_1 + 272 | 0) >> 2] = $415_1 + 2993 | 0;
    $875($415_1 + 5121 | 0 | 0, $3_1 + 272 | 0 | 0) | 0;
    HEAP32[($3_1 + 432 | 0) >> 2] = (HEAP32[($3_1 + 432 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($3_1 + 428 | 0) >> 2] = (HEAP32[($3_1 + 428 | 0) >> 2] | 0) + 1 | 0;
    break label$26;
   }
   i64toi32_i32$0 = 0;
   HEAP32[($3_1 + 312 | 0) >> 2] = 0;
   HEAP32[($3_1 + 316 | 0) >> 2] = i64toi32_i32$0;
   $428_1 = global$3;
   HEAP32[($3_1 + 304 | 0) >> 2] = $428_1 + 2993 | 0;
   $875($428_1 + 5108 | 0 | 0, $3_1 + 304 | 0 | 0) | 0;
  }
  HEAP32[($3_1 + 440 | 0) >> 2] = HEAP32[($3_1 + 428 | 0) >> 2] | 0;
  label$28 : {
   label$29 : while (1) {
    if (!((HEAP32[($3_1 + 440 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$28
    }
    $733_1 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 440 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[($3_1 + 144 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 100 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 432 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 436 | 0) >> 2] | 0, HEAP32[($3_1 + 432 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
    HEAPF64[($3_1 + 136 | 0) >> 3] = $733_1;
    $462_1 = global$3;
    HEAP32[($3_1 + 128 | 0) >> 2] = $462_1 + 2943 | 0;
    $875($462_1 + 5121 | 0 | 0, $3_1 + 128 | 0 | 0) | 0;
    HEAP32[($3_1 + 432 | 0) >> 2] = (HEAP32[($3_1 + 432 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($3_1 + 440 | 0) >> 2] = (HEAP32[($3_1 + 440 | 0) >> 2] | 0) + 1 | 0;
    continue label$29;
   };
  }
  $875(global$3 + 7703 | 0 | 0, 0 | 0) | 0;
  HEAPF64[($3_1 + 264 | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 272 | 0) >> 3];
  $480_1 = global$3;
  HEAP32[($3_1 + 256 | 0) >> 2] = $480_1 + 3623 | 0;
  $875($480_1 + 5108 | 0 | 0, $3_1 + 256 | 0 | 0) | 0;
  $875(global$3 + 7703 | 0 | 0, 0 | 0) | 0;
  $875(global$3 + 4243 | 0 | 0, 0 | 0) | 0;
  label$30 : {
   label$31 : {
    if (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) {
     break label$31
    }
    $875(global$3 + 2963 | 0 | 0, 0 | 0) | 0;
    break label$30;
   }
   label$32 : {
    label$33 : {
     if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$33
     }
     $875(global$3 + 2967 | 0 | 0, 0 | 0) | 0;
     break label$32;
    }
    label$34 : {
     if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$34
     }
     $875(global$3 + 2830 | 0 | 0, 0 | 0) | 0;
    }
   }
  }
  $875(global$3 + 7702 | 0 | 0, 0 | 0) | 0;
  $875(global$3 + 4220 | 0 | 0, 0 | 0) | 0;
  label$35 : {
   label$36 : {
    if (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) {
     break label$36
    }
    $875(global$3 + 2747 | 0 | 0, 0 | 0) | 0;
    break label$35;
   }
   label$37 : {
    label$38 : {
     if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$38
     }
     $875(global$3 + 2160 | 0 | 0, 0 | 0) | 0;
     break label$37;
    }
    label$39 : {
     label$40 : {
      if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$40
      }
      $875(global$3 + 1855 | 0 | 0, 0 | 0) | 0;
      break label$39;
     }
     label$41 : {
      label$42 : {
       if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
        break label$42
       }
       $875(global$3 + 2291 | 0 | 0, 0 | 0) | 0;
       break label$41;
      }
      label$43 : {
       label$44 : {
        if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
         break label$44
        }
        $875(global$3 + 1227 | 0 | 0, 0 | 0) | 0;
        break label$43;
       }
       label$45 : {
        label$46 : {
         if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (5 | 0) & 1 | 0)) {
          break label$46
         }
         $875(global$3 + 2836 | 0 | 0, 0 | 0) | 0;
         break label$45;
        }
        label$47 : {
         label$48 : {
          if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (6 | 0) & 1 | 0)) {
           break label$48
          }
          $875(global$3 + 2834 | 0 | 0, 0 | 0) | 0;
          break label$47;
         }
         label$49 : {
          if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
           break label$49
          }
          $875(global$3 + 2179 | 0 | 0, 0 | 0) | 0;
         }
        }
       }
      }
     }
    }
   }
  }
  $875(global$3 + 7702 | 0 | 0, 0 | 0) | 0;
  HEAPF64[($3_1 + 208 | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 280 | 0) >> 3];
  $875(global$3 + 4084 | 0 | 0, $3_1 + 208 | 0 | 0) | 0;
  $875(global$3 + 7702 | 0 | 0, 0 | 0) | 0;
  HEAPF64[($3_1 + 224 | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 288 | 0) >> 3];
  $875(global$3 + 4064 | 0 | 0, $3_1 + 224 | 0 | 0) | 0;
  $875(global$3 + 7702 | 0 | 0, 0 | 0) | 0;
  HEAPF64[($3_1 + 240 | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 296 | 0) >> 3];
  $875(global$3 + 4104 | 0 | 0, $3_1 + 240 | 0 | 0) | 0;
  $875(global$3 + 7702 | 0 | 0, 0 | 0) | 0;
  label$50 : {
   label$51 : {
    if (!(HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0)) {
     break label$51
    }
    if ((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
     break label$51
    }
    if (!((HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$50
    }
   }
   HEAPF64[($3_1 + 192 | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 128 | 0) >> 3];
   $875(global$3 + 4125 | 0 | 0, $3_1 + 192 | 0 | 0) | 0;
   $875(global$3 + 7702 | 0 | 0, 0 | 0) | 0;
  }
  $685_1 = global$3;
  $687_1 = 0;
  $875($685_1 + 4041 | 0 | 0, $687_1 | 0) | 0;
  $875($685_1 + 7702 | 0 | 0, $687_1 | 0) | 0;
  $692_1 = 1;
  $695_1 = $685_1 + 2957 | 0;
  $697_1 = $685_1 + 2952 | 0;
  HEAP32[($3_1 + 160 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0 | 0) == ($692_1 | 0) ? $697_1 : $695_1;
  $875($685_1 + 4805 | 0 | 0, $3_1 + 160 | 0 | 0) | 0;
  HEAP32[($3_1 + 176 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 444 | 0) >> 2] | 0) + 200 | 0) >> 2] | 0 | 0) == ($692_1 | 0) ? $697_1 : $695_1;
  $875(global$3 + 1558 | 0 | 0, $3_1 + 176 | 0 | 0) | 0;
  global$0 = $3_1 + 448 | 0;
  return;
 }
 
 function $38($0_1) {
  $0_1 = +$0_1;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF64[($3_1 + 8 | 0) >> 3] = $0_1;
  label$1 : {
   if (!(+HEAPF64[($3_1 + 8 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($3_1 + 8 | 0) >> 3] = -+HEAPF64[($3_1 + 8 | 0) >> 3];
  }
  return +(+HEAPF64[($3_1 + 8 | 0) >> 3]);
 }
 
 function $39($0_1) {
  $0_1 = +$0_1;
  var $3_1 = 0, $42_1 = 0.0, $18_1 = 0, $51_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  HEAPF64[($3_1 + 40 | 0) >> 3] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = +$734(+(2.0), +(-52.0))), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
  label$1 : {
   if (!(+HEAPF64[($3_1 + 40 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($3_1 + 40 | 0) >> 3] = -+HEAPF64[($3_1 + 40 | 0) >> 3];
  }
  label$2 : {
   if (!(+HEAPF64[($3_1 + 40 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
    break label$2
   }
   if (!(+HEAPF64[($3_1 + 40 | 0) >> 3] < 1.0 & 1 | 0)) {
    break label$2
   }
   HEAPF64[($3_1 + 40 | 0) >> 3] = +HEAPF64[($3_1 + 40 | 0) >> 3] / 2.0;
  }
  $42_1 = +$729(+(+HEAPF64[($3_1 + 40 | 0) >> 3])) / +$729(+(2.0));
  label$3 : {
   label$4 : {
    if (!(Math_abs($42_1) < 2147483648.0)) {
     break label$4
    }
    $18_1 = ~~$42_1;
    break label$3;
   }
   $18_1 = -2147483648;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $18_1;
  (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = +$734(+(2.0), +(+(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0)))), HEAPF64[(wasm2js_i32$0 + 24 | 0) >> 3] = wasm2js_f64$0;
  HEAPF64[($3_1 + 32 | 0) >> 3] = +HEAPF64[($3_1 + 16 | 0) >> 3] * +HEAPF64[($3_1 + 24 | 0) >> 3];
  $51_1 = +HEAPF64[($3_1 + 32 | 0) >> 3];
  global$0 = $3_1 + 48 | 0;
  return +$51_1;
 }
 
 function $40($0_1) {
  $0_1 = +$0_1;
  var $3_1 = 0, $19_1 = 0.0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAPF64[($3_1 + 24 | 0) >> 3] = $0_1;
  HEAPF64[($3_1 + 16 | 0) >> 3] = 1.0 + +HEAPF64[($3_1 + 24 | 0) >> 3];
  HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[($3_1 + 16 | 0) >> 3] - 1.0;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($3_1 + 8 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
     break label$2
    }
    $19_1 = +HEAPF64[($3_1 + 24 | 0) >> 3];
    break label$1;
   }
   $19_1 = +HEAPF64[($3_1 + 24 | 0) >> 3] * +$729(+(+HEAPF64[($3_1 + 16 | 0) >> 3])) / +HEAPF64[($3_1 + 8 | 0) >> 3];
  }
  global$0 = $3_1 + 32 | 0;
  return +$19_1;
 }
 
 function $41($0_1) {
  $0_1 = +$0_1;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $33_1 = 0, $60_1 = 0, $87_1 = 0, $114_1 = 0, $141_1 = 0, $9_1 = 0, $36_1 = 0, $63_1 = 0, $90_1 = 0, $117_1 = 0, $144_1 = 0, $169_1 = 0, $10_1 = 0, $13_1 = 0, $16_1 = 0, $19_1 = 0, $22_1 = 0, $25_1 = 0, $28_1 = 0, $37_1 = 0, $40_1 = 0, $43_1 = 0, $46_1 = 0, $49_1 = 0, $52_1 = 0, $55_1 = 0, $64_1 = 0, $67_1 = 0, $70_1 = 0, $73_1 = 0, $76_1 = 0, $79_1 = 0, $82_1 = 0, $91_1 = 0, $94_1 = 0, $97_1 = 0, $100_1 = 0, $103_1 = 0, $106_1 = 0, $109_1 = 0, $118_1 = 0, $121_1 = 0, $124_1 = 0, $127_1 = 0, $130_1 = 0, $133_1 = 0, $136_1 = 0, $145_1 = 0, $148_1 = 0, $151_1 = 0, $154_1 = 0, $157_1 = 0, $160_1 = 0, $163_1 = 0, $170_1 = 0, $173_1 = 0, $176_1 = 0, $179_1 = 0, $182_1 = 0, $185_1 = 0, $684_1 = 0, $694_1 = 0, $704_1 = 0, $714_1 = 0, $724_1 = 0, $734_1 = 0, $744_1 = 0, $754_1 = 0, $766_1 = 0, $776_1 = 0, $786_1 = 0, $796_1 = 0, $806_1 = 0, $816_1 = 0, $826_1 = 0, $836_1 = 0, $850_1 = 0, $860_1 = 0, $870_1 = 0, $880_1 = 0, $890 = 0, $900 = 0, $910 = 0, $920 = 0, $932 = 0, $942 = 0, $952 = 0, $962 = 0, $972 = 0, $982 = 0, $992 = 0, $1002 = 0, $1016 = 0, $1026 = 0, $1036 = 0, $1046 = 0, $1056 = 0, $1066 = 0, $1076 = 0, $1086 = 0, $1098 = 0, $1108 = 0, $1118 = 0, $1128 = 0, $1138 = 0, $1148 = 0, $1158 = 0, $1168 = 0, $1177 = 0, $1187 = 0, $1197 = 0, $1207 = 0, $1217 = 0, $1227 = 0, $1237 = 0, $594_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $3_1 = global$0 - 608 | 0;
  global$0 = $3_1;
  HEAPF64[($3_1 + 600 | 0) >> 3] = $0_1;
  HEAPF64[($3_1 + 536 | 0) >> 3] = .9189385332046728;
  HEAPF64[($3_1 + 528 | 0) >> 3] = 3.141592653589793;
  HEAPF64[($3_1 + 520 | 0) >> 3] = 171.624;
  HEAPF64[($3_1 + 512 | 0) >> 3] = 1.79e+308;
  HEAPF64[($3_1 + 504 | 0) >> 3] = 2.22e-16;
  HEAPF64[($3_1 + 496 | 0) >> 3] = 1.1567e+77;
  HEAPF64[($3_1 + 488 | 0) >> 3] = .6796875;
  HEAPF64[($3_1 + 480 | 0) >> 3] = -.5772156649015329;
  $6_1 = $3_1 + 416 | 0;
  $9_1 = global$3 + 7712 | 0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $684_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[i64toi32_i32$0 >> 2] = $684_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $10_1 = 56;
  i64toi32_i32$2 = i64toi32_i32$2 + $10_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $694_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + $10_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $694_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $13_1 = 48;
  i64toi32_i32$2 = $9_1 + $13_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $704_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + $13_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $704_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $16_1 = 40;
  i64toi32_i32$2 = $9_1 + $16_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $714_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + $16_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $714_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $19_1 = 32;
  i64toi32_i32$2 = $9_1 + $19_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $724_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + $19_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $724_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $22_1 = 24;
  i64toi32_i32$2 = $9_1 + $22_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $734_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + $22_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $734_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $25_1 = 16;
  i64toi32_i32$2 = $9_1 + $25_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $744_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + $25_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $744_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $28_1 = 8;
  i64toi32_i32$2 = $9_1 + $28_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $754_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + $28_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $754_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $33_1 = $3_1 + 352 | 0;
  $36_1 = global$3 + 7776 | 0;
  i64toi32_i32$2 = $36_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $766_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $33_1;
  HEAP32[i64toi32_i32$0 >> 2] = $766_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $37_1 = 56;
  i64toi32_i32$2 = i64toi32_i32$2 + $37_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $776_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $33_1 + $37_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $776_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $40_1 = 48;
  i64toi32_i32$2 = $36_1 + $40_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $786_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $33_1 + $40_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $786_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $43_1 = 40;
  i64toi32_i32$2 = $36_1 + $43_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $796_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $33_1 + $43_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $796_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $46_1 = 32;
  i64toi32_i32$2 = $36_1 + $46_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $806_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $33_1 + $46_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $806_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $49_1 = 24;
  i64toi32_i32$2 = $36_1 + $49_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $816_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $33_1 + $49_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $816_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $52_1 = 16;
  i64toi32_i32$2 = $36_1 + $52_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $826_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $33_1 + $52_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $826_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $55_1 = 8;
  i64toi32_i32$2 = $36_1 + $55_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $836_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $33_1 + $55_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $836_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF64[($3_1 + 344 | 0) >> 3] = .42278433509846713;
  $60_1 = $3_1 + 272 | 0;
  $63_1 = global$3 + 7840 | 0;
  i64toi32_i32$2 = $63_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $850_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $60_1;
  HEAP32[i64toi32_i32$0 >> 2] = $850_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $64_1 = 56;
  i64toi32_i32$2 = i64toi32_i32$2 + $64_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $860_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $60_1 + $64_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $860_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $67_1 = 48;
  i64toi32_i32$2 = $63_1 + $67_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $870_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $60_1 + $67_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $870_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $70_1 = 40;
  i64toi32_i32$2 = $63_1 + $70_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $880_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $60_1 + $70_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $880_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $73_1 = 32;
  i64toi32_i32$2 = $63_1 + $73_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $890 = i64toi32_i32$0;
  i64toi32_i32$0 = $60_1 + $73_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $890;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $76_1 = 24;
  i64toi32_i32$2 = $63_1 + $76_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $900 = i64toi32_i32$1;
  i64toi32_i32$1 = $60_1 + $76_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $900;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $79_1 = 16;
  i64toi32_i32$2 = $63_1 + $79_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $910 = i64toi32_i32$0;
  i64toi32_i32$0 = $60_1 + $79_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $910;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $82_1 = 8;
  i64toi32_i32$2 = $63_1 + $82_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $920 = i64toi32_i32$1;
  i64toi32_i32$1 = $60_1 + $82_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $920;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $87_1 = $3_1 + 208 | 0;
  $90_1 = global$3 + 7904 | 0;
  i64toi32_i32$2 = $90_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $932 = i64toi32_i32$0;
  i64toi32_i32$0 = $87_1;
  HEAP32[i64toi32_i32$0 >> 2] = $932;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $91_1 = 56;
  i64toi32_i32$2 = i64toi32_i32$2 + $91_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $942 = i64toi32_i32$1;
  i64toi32_i32$1 = $87_1 + $91_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $942;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $94_1 = 48;
  i64toi32_i32$2 = $90_1 + $94_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $952 = i64toi32_i32$0;
  i64toi32_i32$0 = $87_1 + $94_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $952;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $97_1 = 40;
  i64toi32_i32$2 = $90_1 + $97_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $962 = i64toi32_i32$1;
  i64toi32_i32$1 = $87_1 + $97_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $962;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $100_1 = 32;
  i64toi32_i32$2 = $90_1 + $100_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $972 = i64toi32_i32$0;
  i64toi32_i32$0 = $87_1 + $100_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $972;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $103_1 = 24;
  i64toi32_i32$2 = $90_1 + $103_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $982 = i64toi32_i32$1;
  i64toi32_i32$1 = $87_1 + $103_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $982;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $106_1 = 16;
  i64toi32_i32$2 = $90_1 + $106_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $992 = i64toi32_i32$0;
  i64toi32_i32$0 = $87_1 + $106_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $992;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $109_1 = 8;
  i64toi32_i32$2 = $90_1 + $109_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1002 = i64toi32_i32$1;
  i64toi32_i32$1 = $87_1 + $109_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1002;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF64[($3_1 + 200 | 0) >> 3] = 1.791759469228055;
  $114_1 = $3_1 + 128 | 0;
  $117_1 = global$3 + 7968 | 0;
  i64toi32_i32$2 = $117_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1016 = i64toi32_i32$0;
  i64toi32_i32$0 = $114_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1016;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $118_1 = 56;
  i64toi32_i32$2 = i64toi32_i32$2 + $118_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1026 = i64toi32_i32$1;
  i64toi32_i32$1 = $114_1 + $118_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1026;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $121_1 = 48;
  i64toi32_i32$2 = $117_1 + $121_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1036 = i64toi32_i32$0;
  i64toi32_i32$0 = $114_1 + $121_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1036;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $124_1 = 40;
  i64toi32_i32$2 = $117_1 + $124_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1046 = i64toi32_i32$1;
  i64toi32_i32$1 = $114_1 + $124_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1046;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $127_1 = 32;
  i64toi32_i32$2 = $117_1 + $127_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1056 = i64toi32_i32$0;
  i64toi32_i32$0 = $114_1 + $127_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1056;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $130_1 = 24;
  i64toi32_i32$2 = $117_1 + $130_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1066 = i64toi32_i32$1;
  i64toi32_i32$1 = $114_1 + $130_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1066;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $133_1 = 16;
  i64toi32_i32$2 = $117_1 + $133_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1076 = i64toi32_i32$0;
  i64toi32_i32$0 = $114_1 + $133_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1076;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $136_1 = 8;
  i64toi32_i32$2 = $117_1 + $136_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1086 = i64toi32_i32$1;
  i64toi32_i32$1 = $114_1 + $136_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1086;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $141_1 = $3_1 + 64 | 0;
  $144_1 = global$3 + 8032 | 0;
  i64toi32_i32$2 = $144_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1098 = i64toi32_i32$0;
  i64toi32_i32$0 = $141_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1098;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $145_1 = 56;
  i64toi32_i32$2 = i64toi32_i32$2 + $145_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1108 = i64toi32_i32$1;
  i64toi32_i32$1 = $141_1 + $145_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1108;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $148_1 = 48;
  i64toi32_i32$2 = $144_1 + $148_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1118 = i64toi32_i32$0;
  i64toi32_i32$0 = $141_1 + $148_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1118;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $151_1 = 40;
  i64toi32_i32$2 = $144_1 + $151_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1128 = i64toi32_i32$1;
  i64toi32_i32$1 = $141_1 + $151_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1128;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $154_1 = 32;
  i64toi32_i32$2 = $144_1 + $154_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1138 = i64toi32_i32$0;
  i64toi32_i32$0 = $141_1 + $154_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1138;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $157_1 = 24;
  i64toi32_i32$2 = $144_1 + $157_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1148 = i64toi32_i32$1;
  i64toi32_i32$1 = $141_1 + $157_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1148;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $160_1 = 16;
  i64toi32_i32$2 = $144_1 + $160_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1158 = i64toi32_i32$0;
  i64toi32_i32$0 = $141_1 + $160_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1158;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $163_1 = 8;
  i64toi32_i32$2 = $144_1 + $163_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1168 = i64toi32_i32$1;
  i64toi32_i32$1 = $141_1 + $163_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1168;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $169_1 = global$3 + 8096 | 0;
  i64toi32_i32$2 = $169_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1177 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[$3_1 >> 2] = $1177;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $170_1 = 48;
  i64toi32_i32$2 = i64toi32_i32$2 + $170_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1187 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1 + $170_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1187;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $173_1 = 40;
  i64toi32_i32$2 = $169_1 + $173_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1197 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1 + $173_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1197;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $176_1 = 32;
  i64toi32_i32$2 = $169_1 + $176_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1207 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1 + $176_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1207;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $179_1 = 24;
  i64toi32_i32$2 = $169_1 + $179_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1217 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1 + $179_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1217;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $182_1 = 16;
  i64toi32_i32$2 = $169_1 + $182_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1227 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1 + $182_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1227;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $185_1 = 8;
  i64toi32_i32$2 = $169_1 + $185_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1237 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1 + $185_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1237;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAPF64[($3_1 + 584 | 0) >> 3] = +HEAPF64[($3_1 + 600 | 0) >> 3];
  label$1 : {
   if (!(+HEAPF64[($3_1 + 600 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
    break label$1
   }
   $875(global$3 + 2107 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$2 : {
   if (!(+HEAPF64[($3_1 + 600 | 0) >> 3] > +HEAPF64[($3_1 + 512 | 0) >> 3] & 1 | 0)) {
    break label$2
   }
   $875(global$3 + 1119 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$3 : {
   if (!(+HEAPF64[($3_1 + 600 | 0) >> 3] <= +HEAPF64[($3_1 + 504 | 0) >> 3] & 1 | 0)) {
    break label$3
   }
   (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = -+$729(+(+HEAPF64[($3_1 + 600 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 584 | 0) >> 3] = wasm2js_f64$0;
  }
  label$4 : {
   if (!(+HEAPF64[($3_1 + 600 | 0) >> 3] > +HEAPF64[($3_1 + 504 | 0) >> 3] & 1 | 0)) {
    break label$4
   }
   if (!(+HEAPF64[($3_1 + 600 | 0) >> 3] <= .5 & 1 | 0)) {
    break label$4
   }
   HEAPF64[($3_1 + 592 | 0) >> 3] = +HEAPF64[($3_1 + 600 | 0) >> 3];
   HEAPF64[($3_1 + 560 | 0) >> 3] = +(0 | 0);
   HEAPF64[($3_1 + 552 | 0) >> 3] = 1.0;
   HEAP32[($3_1 + 548 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($3_1 + 548 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
      break label$5
     }
     HEAPF64[($3_1 + 560 | 0) >> 3] = +HEAPF64[($3_1 + 560 | 0) >> 3] * +HEAPF64[($3_1 + 592 | 0) >> 3] + +HEAPF64[(($3_1 + 416 | 0) + ((HEAP32[($3_1 + 548 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[($3_1 + 552 | 0) >> 3] = +HEAPF64[($3_1 + 552 | 0) >> 3] * +HEAPF64[($3_1 + 592 | 0) >> 3] + +HEAPF64[(($3_1 + 352 | 0) + ((HEAP32[($3_1 + 548 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($3_1 + 548 | 0) >> 2] = (HEAP32[($3_1 + 548 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = -+$729(+(+HEAPF64[($3_1 + 592 | 0) >> 3])) + +HEAPF64[($3_1 + 592 | 0) >> 3] * (+HEAPF64[($3_1 + 480 | 0) >> 3] + +HEAPF64[($3_1 + 592 | 0) >> 3] * (+HEAPF64[($3_1 + 560 | 0) >> 3] / +HEAPF64[($3_1 + 552 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 584 | 0) >> 3] = wasm2js_f64$0;
  }
  label$7 : {
   if (!(+HEAPF64[($3_1 + 600 | 0) >> 3] > .5 & 1 | 0)) {
    break label$7
   }
   if (!(+HEAPF64[($3_1 + 600 | 0) >> 3] <= +HEAPF64[($3_1 + 488 | 0) >> 3] & 1 | 0)) {
    break label$7
   }
   HEAPF64[($3_1 + 592 | 0) >> 3] = +HEAPF64[($3_1 + 600 | 0) >> 3] - .5 - .5;
   HEAPF64[($3_1 + 560 | 0) >> 3] = +(0 | 0);
   HEAPF64[($3_1 + 552 | 0) >> 3] = 1.0;
   HEAP32[($3_1 + 548 | 0) >> 2] = 0;
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($3_1 + 548 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
      break label$8
     }
     HEAPF64[($3_1 + 560 | 0) >> 3] = +HEAPF64[($3_1 + 560 | 0) >> 3] * +HEAPF64[($3_1 + 592 | 0) >> 3] + +HEAPF64[(($3_1 + 272 | 0) + ((HEAP32[($3_1 + 548 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[($3_1 + 552 | 0) >> 3] = +HEAPF64[($3_1 + 552 | 0) >> 3] * +HEAPF64[($3_1 + 592 | 0) >> 3] + +HEAPF64[(($3_1 + 208 | 0) + ((HEAP32[($3_1 + 548 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($3_1 + 548 | 0) >> 2] = (HEAP32[($3_1 + 548 | 0) >> 2] | 0) + 1 | 0;
     continue label$9;
    };
   }
   (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = -+$729(+(+HEAPF64[($3_1 + 600 | 0) >> 3])) + +HEAPF64[($3_1 + 592 | 0) >> 3] * (+HEAPF64[($3_1 + 344 | 0) >> 3] + +HEAPF64[($3_1 + 592 | 0) >> 3] * (+HEAPF64[($3_1 + 560 | 0) >> 3] / +HEAPF64[($3_1 + 552 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 584 | 0) >> 3] = wasm2js_f64$0;
  }
  label$10 : {
   if (!(+HEAPF64[($3_1 + 600 | 0) >> 3] > +HEAPF64[($3_1 + 488 | 0) >> 3] & 1 | 0)) {
    break label$10
   }
   if (!(+HEAPF64[($3_1 + 600 | 0) >> 3] <= 1.5 & 1 | 0)) {
    break label$10
   }
   HEAPF64[($3_1 + 592 | 0) >> 3] = +HEAPF64[($3_1 + 600 | 0) >> 3] - .5 - .5;
   HEAPF64[($3_1 + 560 | 0) >> 3] = +(0 | 0);
   HEAPF64[($3_1 + 552 | 0) >> 3] = 1.0;
   HEAP32[($3_1 + 548 | 0) >> 2] = 0;
   label$11 : {
    label$12 : while (1) {
     if (!((HEAP32[($3_1 + 548 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
      break label$11
     }
     HEAPF64[($3_1 + 560 | 0) >> 3] = +HEAPF64[($3_1 + 560 | 0) >> 3] * +HEAPF64[($3_1 + 592 | 0) >> 3] + +HEAPF64[(($3_1 + 416 | 0) + ((HEAP32[($3_1 + 548 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[($3_1 + 552 | 0) >> 3] = +HEAPF64[($3_1 + 552 | 0) >> 3] * +HEAPF64[($3_1 + 592 | 0) >> 3] + +HEAPF64[(($3_1 + 352 | 0) + ((HEAP32[($3_1 + 548 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($3_1 + 548 | 0) >> 2] = (HEAP32[($3_1 + 548 | 0) >> 2] | 0) + 1 | 0;
     continue label$12;
    };
   }
   HEAPF64[($3_1 + 584 | 0) >> 3] = +HEAPF64[($3_1 + 592 | 0) >> 3] * (+HEAPF64[($3_1 + 480 | 0) >> 3] + +HEAPF64[($3_1 + 592 | 0) >> 3] * (+HEAPF64[($3_1 + 560 | 0) >> 3] / +HEAPF64[($3_1 + 552 | 0) >> 3]));
  }
  label$13 : {
   if (!(+HEAPF64[($3_1 + 600 | 0) >> 3] > 1.5 & 1 | 0)) {
    break label$13
   }
   if (!(+HEAPF64[($3_1 + 600 | 0) >> 3] <= 4.0 & 1 | 0)) {
    break label$13
   }
   HEAPF64[($3_1 + 592 | 0) >> 3] = +HEAPF64[($3_1 + 600 | 0) >> 3] - 2.0;
   HEAPF64[($3_1 + 560 | 0) >> 3] = +(0 | 0);
   HEAPF64[($3_1 + 552 | 0) >> 3] = 1.0;
   HEAP32[($3_1 + 548 | 0) >> 2] = 0;
   label$14 : {
    label$15 : while (1) {
     if (!((HEAP32[($3_1 + 548 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
      break label$14
     }
     HEAPF64[($3_1 + 560 | 0) >> 3] = +HEAPF64[($3_1 + 560 | 0) >> 3] * +HEAPF64[($3_1 + 592 | 0) >> 3] + +HEAPF64[(($3_1 + 272 | 0) + ((HEAP32[($3_1 + 548 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[($3_1 + 552 | 0) >> 3] = +HEAPF64[($3_1 + 552 | 0) >> 3] * +HEAPF64[($3_1 + 592 | 0) >> 3] + +HEAPF64[(($3_1 + 208 | 0) + ((HEAP32[($3_1 + 548 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($3_1 + 548 | 0) >> 2] = (HEAP32[($3_1 + 548 | 0) >> 2] | 0) + 1 | 0;
     continue label$15;
    };
   }
   HEAPF64[($3_1 + 584 | 0) >> 3] = +HEAPF64[($3_1 + 592 | 0) >> 3] * (+HEAPF64[($3_1 + 344 | 0) >> 3] + +HEAPF64[($3_1 + 592 | 0) >> 3] * (+HEAPF64[($3_1 + 560 | 0) >> 3] / +HEAPF64[($3_1 + 552 | 0) >> 3]));
  }
  label$16 : {
   if (!(+HEAPF64[($3_1 + 600 | 0) >> 3] > 4.0 & 1 | 0)) {
    break label$16
   }
   if (!(+HEAPF64[($3_1 + 600 | 0) >> 3] <= 12.0 & 1 | 0)) {
    break label$16
   }
   HEAPF64[($3_1 + 592 | 0) >> 3] = +HEAPF64[($3_1 + 600 | 0) >> 3] - 4.0;
   HEAPF64[($3_1 + 560 | 0) >> 3] = +(0 | 0);
   HEAPF64[($3_1 + 552 | 0) >> 3] = -1.0;
   HEAP32[($3_1 + 548 | 0) >> 2] = 0;
   label$17 : {
    label$18 : while (1) {
     if (!((HEAP32[($3_1 + 548 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
      break label$17
     }
     HEAPF64[($3_1 + 560 | 0) >> 3] = +HEAPF64[($3_1 + 560 | 0) >> 3] * +HEAPF64[($3_1 + 592 | 0) >> 3] + +HEAPF64[(($3_1 + 128 | 0) + ((HEAP32[($3_1 + 548 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[($3_1 + 552 | 0) >> 3] = +HEAPF64[($3_1 + 552 | 0) >> 3] * +HEAPF64[($3_1 + 592 | 0) >> 3] + +HEAPF64[(($3_1 + 64 | 0) + ((HEAP32[($3_1 + 548 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($3_1 + 548 | 0) >> 2] = (HEAP32[($3_1 + 548 | 0) >> 2] | 0) + 1 | 0;
     continue label$18;
    };
   }
   HEAPF64[($3_1 + 584 | 0) >> 3] = +HEAPF64[($3_1 + 200 | 0) >> 3] + +HEAPF64[($3_1 + 592 | 0) >> 3] * (+HEAPF64[($3_1 + 560 | 0) >> 3] / +HEAPF64[($3_1 + 552 | 0) >> 3]);
  }
  label$19 : {
   if (!(+HEAPF64[($3_1 + 600 | 0) >> 3] > 12.0 & 1 | 0)) {
    break label$19
   }
   HEAPF64[($3_1 + 584 | 0) >> 3] = +(0 | 0);
   HEAPF64[($3_1 + 592 | 0) >> 3] = +HEAPF64[($3_1 + 600 | 0) >> 3];
   label$20 : {
    if (!(+HEAPF64[($3_1 + 592 | 0) >> 3] <= +HEAPF64[($3_1 + 496 | 0) >> 3] & 1 | 0)) {
     break label$20
    }
    HEAPF64[($3_1 + 584 | 0) >> 3] = +HEAPF64[($3_1 + 48 | 0) >> 3];
    HEAPF64[($3_1 + 568 | 0) >> 3] = +HEAPF64[($3_1 + 592 | 0) >> 3] * +HEAPF64[($3_1 + 592 | 0) >> 3];
    HEAP32[($3_1 + 548 | 0) >> 2] = 0;
    label$21 : {
     label$22 : while (1) {
      if (!((HEAP32[($3_1 + 548 | 0) >> 2] | 0 | 0) < (6 | 0) & 1 | 0)) {
       break label$21
      }
      HEAPF64[($3_1 + 584 | 0) >> 3] = +HEAPF64[($3_1 + 584 | 0) >> 3] / +HEAPF64[($3_1 + 568 | 0) >> 3] + +HEAPF64[($3_1 + ((HEAP32[($3_1 + 548 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($3_1 + 548 | 0) >> 2] = (HEAP32[($3_1 + 548 | 0) >> 2] | 0) + 1 | 0;
      continue label$22;
     };
    }
   }
   HEAPF64[($3_1 + 584 | 0) >> 3] = +HEAPF64[($3_1 + 584 | 0) >> 3] / +HEAPF64[($3_1 + 592 | 0) >> 3];
   (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = +$729(+(+HEAPF64[($3_1 + 592 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 576 | 0) >> 3] = wasm2js_f64$0;
   HEAPF64[($3_1 + 584 | 0) >> 3] = +HEAPF64[($3_1 + 584 | 0) >> 3] + (+HEAPF64[($3_1 + 536 | 0) >> 3] - .5 * +HEAPF64[($3_1 + 576 | 0) >> 3] + +HEAPF64[($3_1 + 592 | 0) >> 3] * (+HEAPF64[($3_1 + 576 | 0) >> 3] - 1.0));
  }
  $594_1 = +HEAPF64[($3_1 + 584 | 0) >> 3];
  global$0 = $3_1 + 608 | 0;
  return +$594_1;
 }
 
 function $42($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $4_1 = 0, $34_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 24 | 0) >> 3] = $0_1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $1_1;
  label$1 : {
   label$2 : {
    if (+HEAPF64[($4_1 + 24 | 0) >> 3] < +(0 | 0) & 1 | 0) {
     break label$2
    }
    if (!(+HEAPF64[($4_1 + 16 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $875(global$3 + 2060 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +$41(+(+HEAPF64[($4_1 + 24 | 0) >> 3])) + +$41(+(+HEAPF64[($4_1 + 16 | 0) >> 3])) - +$41(+(+HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 16 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
  $34_1 = +HEAPF64[($4_1 + 8 | 0) >> 3];
  global$0 = $4_1 + 32 | 0;
  return +$34_1;
 }
 
 function $43($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $4_1 = 0, $233_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 120 | 0) >> 3] = $0_1;
  HEAPF64[($4_1 + 112 | 0) >> 3] = $1_1;
  label$1 : {
   if (!(+HEAPF64[($4_1 + 112 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
    break label$1
   }
   $875(global$3 + 2418 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  HEAPF64[($4_1 + 72 | 0) >> 3] = 2.0e20;
  label$2 : {
   if (!(+HEAPF64[($4_1 + 112 | 0) >> 3] > +HEAPF64[($4_1 + 72 | 0) >> 3] & 1 | 0)) {
    break label$2
   }
   HEAPF64[($4_1 + 120 | 0) >> 3] = +HEAPF64[($4_1 + 72 | 0) >> 3] - .3333333333333333 + Math_sqrt(+HEAPF64[($4_1 + 72 | 0) >> 3] / +HEAPF64[($4_1 + 112 | 0) >> 3]) * (+HEAPF64[($4_1 + 120 | 0) >> 3] - (+HEAPF64[($4_1 + 112 | 0) >> 3] - .3333333333333333));
   HEAPF64[($4_1 + 112 | 0) >> 3] = +HEAPF64[($4_1 + 72 | 0) >> 3];
   label$3 : {
    if (!(+HEAPF64[($4_1 + 120 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[($4_1 + 120 | 0) >> 3] = +(0 | 0);
   }
  }
  label$4 : {
   if (!(+HEAPF64[($4_1 + 112 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
    break label$4
   }
   if (!(+HEAPF64[($4_1 + 120 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
    break label$4
   }
   if (!(+HEAPF64[($4_1 + 120 | 0) >> 3] < +HEAPF64[($4_1 + 112 | 0) >> 3] + 1.0 & 1 | 0)) {
    break label$4
   }
   HEAPF64[($4_1 + 96 | 0) >> 3] = +HEAPF64[($4_1 + 112 | 0) >> 3];
   HEAPF64[($4_1 + 88 | 0) >> 3] = 1.0;
   HEAPF64[($4_1 + 80 | 0) >> 3] = 1.0;
   label$5 : {
    label$6 : while (1) {
     if (!(+$38(+(+HEAPF64[($4_1 + 88 | 0) >> 3])) >= 100.0 * +$39(+(+HEAPF64[($4_1 + 80 | 0) >> 3])) & 1 | 0)) {
      break label$5
     }
     HEAPF64[($4_1 + 96 | 0) >> 3] = +HEAPF64[($4_1 + 96 | 0) >> 3] + 1.0;
     HEAPF64[($4_1 + 88 | 0) >> 3] = +HEAPF64[($4_1 + 120 | 0) >> 3] * +HEAPF64[($4_1 + 88 | 0) >> 3] / +HEAPF64[($4_1 + 96 | 0) >> 3];
     HEAPF64[($4_1 + 80 | 0) >> 3] = +HEAPF64[($4_1 + 80 | 0) >> 3] + +HEAPF64[($4_1 + 88 | 0) >> 3];
     continue label$6;
    };
   }
   (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +HEAPF64[($4_1 + 80 | 0) >> 3] * +$730(+(-+HEAPF64[($4_1 + 120 | 0) >> 3] + +HEAPF64[($4_1 + 112 | 0) >> 3] * +$729(+(+HEAPF64[($4_1 + 120 | 0) >> 3])) - +$41(+(+HEAPF64[($4_1 + 112 | 0) >> 3] + 1.0))))), HEAPF64[(wasm2js_i32$0 + 104 | 0) >> 3] = wasm2js_f64$0;
   label$7 : {
    if (!(+HEAPF64[($4_1 + 120 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
     break label$7
    }
    if (!(+HEAPF64[($4_1 + 104 | 0) >> 3] > 1.0 & 1 | 0)) {
     break label$7
    }
    HEAPF64[($4_1 + 104 | 0) >> 3] = 1.0;
   }
  }
  label$8 : {
   if (!(+HEAPF64[($4_1 + 112 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
    break label$8
   }
   if (!(+HEAPF64[($4_1 + 120 | 0) >> 3] >= +HEAPF64[($4_1 + 112 | 0) >> 3] + 1.0 & 1 | 0)) {
    break label$8
   }
   HEAPF64[($4_1 + 64 | 0) >> 3] = 1.0;
   HEAPF64[($4_1 + 56 | 0) >> 3] = +HEAPF64[($4_1 + 120 | 0) >> 3];
   HEAPF64[($4_1 + 48 | 0) >> 3] = +(0 | 0);
   HEAPF64[($4_1 + 40 | 0) >> 3] = 1.0;
   HEAPF64[($4_1 + 8 | 0) >> 3] = 1.0 / +HEAPF64[($4_1 + 56 | 0) >> 3];
   HEAPF64[($4_1 + 96 | 0) >> 3] = 1.0;
   HEAPF64[($4_1 + 32 | 0) >> 3] = +HEAPF64[($4_1 + 40 | 0) >> 3] * +HEAPF64[($4_1 + 8 | 0) >> 3];
   HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[($4_1 + 48 | 0) >> 3];
   (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +$38(+(+HEAPF64[($4_1 + 32 | 0) >> 3] - +HEAPF64[($4_1 + 24 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
   label$9 : {
    label$10 : while (1) {
     if (!(+HEAPF64[($4_1 + 16 | 0) >> 3] >= 100.0 * +$39(+(+$38(+(+HEAPF64[($4_1 + 32 | 0) >> 3])))) & 1 | 0)) {
      break label$9
     }
     HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[($4_1 + 32 | 0) >> 3];
     HEAPF64[($4_1 + 88 | 0) >> 3] = +HEAPF64[($4_1 + 96 | 0) >> 3] - +HEAPF64[($4_1 + 112 | 0) >> 3];
     HEAPF64[($4_1 + 64 | 0) >> 3] = (+HEAPF64[($4_1 + 56 | 0) >> 3] + +HEAPF64[($4_1 + 64 | 0) >> 3] * +HEAPF64[($4_1 + 88 | 0) >> 3]) * +HEAPF64[($4_1 + 8 | 0) >> 3];
     HEAPF64[($4_1 + 48 | 0) >> 3] = (+HEAPF64[($4_1 + 40 | 0) >> 3] + +HEAPF64[($4_1 + 48 | 0) >> 3] * +HEAPF64[($4_1 + 88 | 0) >> 3]) * +HEAPF64[($4_1 + 8 | 0) >> 3];
     HEAPF64[($4_1 + 80 | 0) >> 3] = +HEAPF64[($4_1 + 96 | 0) >> 3] * +HEAPF64[($4_1 + 8 | 0) >> 3];
     HEAPF64[($4_1 + 56 | 0) >> 3] = +HEAPF64[($4_1 + 120 | 0) >> 3] * +HEAPF64[($4_1 + 64 | 0) >> 3] + +HEAPF64[($4_1 + 80 | 0) >> 3] * +HEAPF64[($4_1 + 56 | 0) >> 3];
     HEAPF64[($4_1 + 40 | 0) >> 3] = +HEAPF64[($4_1 + 120 | 0) >> 3] * +HEAPF64[($4_1 + 48 | 0) >> 3] + +HEAPF64[($4_1 + 80 | 0) >> 3] * +HEAPF64[($4_1 + 40 | 0) >> 3];
     HEAPF64[($4_1 + 8 | 0) >> 3] = 1.0 / +HEAPF64[($4_1 + 56 | 0) >> 3];
     HEAPF64[($4_1 + 96 | 0) >> 3] = +HEAPF64[($4_1 + 96 | 0) >> 3] + 1.0;
     HEAPF64[($4_1 + 32 | 0) >> 3] = +HEAPF64[($4_1 + 40 | 0) >> 3] * +HEAPF64[($4_1 + 8 | 0) >> 3];
     (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +$38(+(+HEAPF64[($4_1 + 32 | 0) >> 3] - +HEAPF64[($4_1 + 24 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
     continue label$10;
    };
   }
   (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = 1.0 - +HEAPF64[($4_1 + 32 | 0) >> 3] * +$730(+(-+HEAPF64[($4_1 + 120 | 0) >> 3] + +HEAPF64[($4_1 + 112 | 0) >> 3] * +$729(+(+HEAPF64[($4_1 + 120 | 0) >> 3])) - +$41(+(+HEAPF64[($4_1 + 112 | 0) >> 3]))))), HEAPF64[(wasm2js_i32$0 + 104 | 0) >> 3] = wasm2js_f64$0;
  }
  label$11 : {
   if (!(+HEAPF64[($4_1 + 120 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
    break label$11
   }
   HEAPF64[($4_1 + 104 | 0) >> 3] = +(0 | 0);
  }
  label$12 : {
   if (!(+HEAPF64[($4_1 + 112 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
    break label$12
   }
   HEAPF64[($4_1 + 104 | 0) >> 3] = 1.0;
  }
  $233_1 = +HEAPF64[($4_1 + 104 | 0) >> 3];
  global$0 = $4_1 + 128 | 0;
  return +$233_1;
 }
 
 function $44($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $4_1 = 0, $12_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 24 | 0) >> 3] = $0_1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +$43(+(+HEAPF64[($4_1 + 24 | 0) >> 3]), +(+HEAPF64[($4_1 + 16 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
  $12_1 = 1.0 - +HEAPF64[($4_1 + 8 | 0) >> 3];
  global$0 = $4_1 + 32 | 0;
  return +$12_1;
 }
 
 function $45($0_1, $1_1, $2_1, $3_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $17_1 = 0, $140_1 = 0.0;
  $6_1 = global$0 - 160 | 0;
  global$0 = $6_1;
  HEAPF64[($6_1 + 152 | 0) >> 3] = $0_1;
  HEAPF64[($6_1 + 144 | 0) >> 3] = $1_1;
  HEAPF64[($6_1 + 136 | 0) >> 3] = $2_1;
  HEAP32[($6_1 + 132 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = 1;
  HEAPF64[($6_1 + 56 | 0) >> 3] = 1.0;
  HEAPF64[($6_1 + 64 | 0) >> 3] = 1.0;
  HEAPF64[($6_1 + 72 | 0) >> 3] = 1.0;
  HEAPF64[($6_1 + 48 | 0) >> 3] = +(0 | 0);
  HEAPF64[($6_1 + 80 | 0) >> 3] = +(0 | 0);
  HEAPF64[($6_1 + 88 | 0) >> 3] = +(0 | 0);
  HEAPF64[($6_1 + 96 | 0) >> 3] = +(0 | 0);
  HEAPF64[($6_1 + 104 | 0) >> 3] = +(0 | 0);
  HEAPF64[($6_1 + 16 | 0) >> 3] = 1.0 - (+HEAPF64[($6_1 + 144 | 0) >> 3] + +HEAPF64[($6_1 + 136 | 0) >> 3]) * +HEAPF64[($6_1 + 152 | 0) >> 3] / (+HEAPF64[($6_1 + 144 | 0) >> 3] + 1.0);
  HEAPF64[($6_1 + 40 | 0) >> 3] = Math_abs(+HEAPF64[($6_1 + 56 | 0) >> 3] - +HEAPF64[($6_1 + 48 | 0) >> 3]);
  label$1 : while (1) {
   $17_1 = 0;
   label$2 : {
    if (!(+HEAPF64[($6_1 + 40 | 0) >> 3] > 1.0e3 * +$39(+(+HEAPF64[($6_1 + 56 | 0) >> 3])) & 1 | 0)) {
     break label$2
    }
    $17_1 = (HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (1e3 | 0);
   }
   label$3 : {
    if (!($17_1 & 1 | 0)) {
     break label$3
    }
    HEAPF64[($6_1 + 32 | 0) >> 3] = +HEAPF64[($6_1 + 144 | 0) >> 3] + +(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
    HEAPF64[($6_1 + 24 | 0) >> 3] = +HEAPF64[($6_1 + 32 | 0) >> 3] + +(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
    HEAPF64[($6_1 + 48 | 0) >> 3] = +HEAPF64[($6_1 + 56 | 0) >> 3];
    HEAPF64[($6_1 + 120 | 0) >> 3] = +(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) * (+HEAPF64[($6_1 + 136 | 0) >> 3] - +(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0)) * +HEAPF64[($6_1 + 152 | 0) >> 3] / (+HEAPF64[($6_1 + 24 | 0) >> 3] * (+HEAPF64[($6_1 + 24 | 0) >> 3] - 1.0));
    HEAPF64[($6_1 + 112 | 0) >> 3] = -+HEAPF64[($6_1 + 32 | 0) >> 3] * (+HEAPF64[($6_1 + 32 | 0) >> 3] + +HEAPF64[($6_1 + 136 | 0) >> 3]) * +HEAPF64[($6_1 + 152 | 0) >> 3] / (+HEAPF64[($6_1 + 24 | 0) >> 3] * (+HEAPF64[($6_1 + 24 | 0) >> 3] + 1.0));
    HEAPF64[($6_1 + 104 | 0) >> 3] = +HEAPF64[($6_1 + 56 | 0) >> 3] + +HEAPF64[($6_1 + 120 | 0) >> 3] * +HEAPF64[($6_1 + 72 | 0) >> 3];
    HEAPF64[($6_1 + 96 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3] + +HEAPF64[($6_1 + 120 | 0) >> 3] * +HEAPF64[($6_1 + 64 | 0) >> 3];
    HEAPF64[($6_1 + 88 | 0) >> 3] = +HEAPF64[($6_1 + 104 | 0) >> 3] + +HEAPF64[($6_1 + 112 | 0) >> 3] * +HEAPF64[($6_1 + 56 | 0) >> 3];
    HEAPF64[($6_1 + 80 | 0) >> 3] = +HEAPF64[($6_1 + 96 | 0) >> 3] + +HEAPF64[($6_1 + 112 | 0) >> 3] * +HEAPF64[($6_1 + 16 | 0) >> 3];
    label$4 : {
     if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$4
     }
     HEAPF64[($6_1 + 16 | 0) >> 3] = 1.0;
    }
    HEAPF64[($6_1 + 72 | 0) >> 3] = +HEAPF64[($6_1 + 104 | 0) >> 3] / +HEAPF64[($6_1 + 80 | 0) >> 3];
    HEAPF64[($6_1 + 64 | 0) >> 3] = +HEAPF64[($6_1 + 96 | 0) >> 3] / +HEAPF64[($6_1 + 80 | 0) >> 3];
    HEAPF64[($6_1 + 56 | 0) >> 3] = +HEAPF64[($6_1 + 88 | 0) >> 3] / +HEAPF64[($6_1 + 80 | 0) >> 3];
    HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    HEAPF64[($6_1 + 40 | 0) >> 3] = Math_abs(+HEAPF64[($6_1 + 56 | 0) >> 3] - +HEAPF64[($6_1 + 48 | 0) >> 3]);
    continue label$1;
   }
   break label$1;
  };
  HEAP32[(HEAP32[($6_1 + 132 | 0) >> 2] | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $140_1 = +HEAPF64[($6_1 + 56 | 0) >> 3];
  global$0 = $6_1 + 160 | 0;
  return +$140_1;
 }
 
 function $46($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $132_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  HEAPF64[($5_1 + 72 | 0) >> 3] = $0_1;
  HEAPF64[($5_1 + 64 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 56 | 0) >> 3] = $2_1;
  label$1 : {
   label$2 : {
    if (+HEAPF64[($5_1 + 72 | 0) >> 3] < +(0 | 0) & 1 | 0) {
     break label$2
    }
    if (!(+HEAPF64[($5_1 + 72 | 0) >> 3] > 1.0 & 1 | 0)) {
     break label$1
    }
   }
   $875(global$3 + 3759 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$3 : {
   label$4 : {
    if (+HEAPF64[($5_1 + 64 | 0) >> 3] < +(0 | 0) & 1 | 0) {
     break label$4
    }
    if (!(+HEAPF64[($5_1 + 56 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
     break label$3
    }
   }
   $875(global$3 + 2060 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  HEAPF64[($5_1 + 40 | 0) >> 3] = (+HEAPF64[($5_1 + 64 | 0) >> 3] + +HEAPF64[($5_1 + 56 | 0) >> 3] - 1.0) * (1.0 - +HEAPF64[($5_1 + 72 | 0) >> 3]);
  label$5 : {
   label$6 : {
    if (!(+HEAPF64[($5_1 + 40 | 0) >> 3] <= .8 & 1 | 0)) {
     break label$6
    }
    HEAPF64[($5_1 + 32 | 0) >> 3] = (+HEAPF64[($5_1 + 40 | 0) >> 3] * (3.0 - +HEAPF64[($5_1 + 72 | 0) >> 3]) - (+HEAPF64[($5_1 + 56 | 0) >> 3] - 1.0) * (1.0 - +HEAPF64[($5_1 + 72 | 0) >> 3])) / 2.0;
    (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$44(+(+HEAPF64[($5_1 + 32 | 0) >> 3]), +(+HEAPF64[($5_1 + 56 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
    break label$5;
   }
   label$7 : {
    if (!(+HEAPF64[($5_1 + 40 | 0) >> 3] > .8 & 1 | 0)) {
     break label$7
    }
    (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$734(+(+HEAPF64[($5_1 + 56 | 0) >> 3] * +HEAPF64[($5_1 + 72 | 0) >> 3]), +(.3333333333333333))), HEAPF64[(wasm2js_i32$0 + 24 | 0) >> 3] = wasm2js_f64$0;
    (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$734(+(+HEAPF64[($5_1 + 64 | 0) >> 3] * (1.0 - +HEAPF64[($5_1 + 72 | 0) >> 3])), +(.3333333333333333))), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
    HEAPF64[($5_1 + 8 | 0) >> 3] = -3.0 * (+HEAPF64[($5_1 + 24 | 0) >> 3] * (1.0 - 1.0 / (9.0 * +HEAPF64[($5_1 + 56 | 0) >> 3])) - +HEAPF64[($5_1 + 16 | 0) >> 3] * (1.0 - 1.0 / (9.0 * +HEAPF64[($5_1 + 64 | 0) >> 3]))) / Math_sqrt(2.0);
    HEAPF64[$5_1 >> 3] = Math_sqrt(+HEAPF64[($5_1 + 24 | 0) >> 3] * +HEAPF64[($5_1 + 24 | 0) >> 3] / +HEAPF64[($5_1 + 56 | 0) >> 3] + +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] / +HEAPF64[($5_1 + 64 | 0) >> 3]);
    (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$70(+(+HEAPF64[($5_1 + 8 | 0) >> 3] / +HEAPF64[$5_1 >> 3])) / 2.0), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
   }
  }
  $132_1 = +HEAPF64[($5_1 + 48 | 0) >> 3];
  global$0 = $5_1 + 80 | 0;
  return +$132_1;
 }
 
 function $47($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $151_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAPF64[($5_1 + 40 | 0) >> 3] = $0_1;
  HEAPF64[($5_1 + 32 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 24 | 0) >> 3] = $2_1;
  label$1 : {
   label$2 : {
    if (+HEAPF64[($5_1 + 40 | 0) >> 3] < +(0 | 0) & 1 | 0) {
     break label$2
    }
    if (!(+HEAPF64[($5_1 + 40 | 0) >> 3] > 1.0 & 1 | 0)) {
     break label$1
    }
   }
   $875(global$3 + 3759 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$3 : {
   label$4 : {
    if (+HEAPF64[($5_1 + 32 | 0) >> 3] < +(0 | 0) & 1 | 0) {
     break label$4
    }
    if (!(+HEAPF64[($5_1 + 24 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
     break label$3
    }
   }
   $875(global$3 + 2060 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = 0;
  label$5 : {
   if (!(+HEAPF64[($5_1 + 40 | 0) >> 3] < (+HEAPF64[($5_1 + 32 | 0) >> 3] + 1.0) / (+HEAPF64[($5_1 + 32 | 0) >> 3] + +HEAPF64[($5_1 + 24 | 0) >> 3] + 2.0) & 1 | 0)) {
    break label$5
   }
   (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$730(+(+$41(+(+HEAPF64[($5_1 + 32 | 0) >> 3] + +HEAPF64[($5_1 + 24 | 0) >> 3])) - +$41(+(+HEAPF64[($5_1 + 32 | 0) >> 3] + 1.0)) - +$41(+(+HEAPF64[($5_1 + 24 | 0) >> 3])) + +HEAPF64[($5_1 + 32 | 0) >> 3] * +$729(+(+HEAPF64[($5_1 + 40 | 0) >> 3])) + +HEAPF64[($5_1 + 24 | 0) >> 3] * +$40(+-+HEAPF64[($5_1 + 40 | 0) >> 3])))), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
   (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +HEAPF64[($5_1 + 8 | 0) >> 3] * +$45(+(+HEAPF64[($5_1 + 40 | 0) >> 3]), +(+HEAPF64[($5_1 + 32 | 0) >> 3]), +(+HEAPF64[($5_1 + 24 | 0) >> 3]), $5_1 + 4 | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
  }
  label$6 : {
   if (!(+HEAPF64[($5_1 + 40 | 0) >> 3] >= (+HEAPF64[($5_1 + 32 | 0) >> 3] + 1.0) / (+HEAPF64[($5_1 + 32 | 0) >> 3] + +HEAPF64[($5_1 + 24 | 0) >> 3] + 2.0) & 1 | 0)) {
    break label$6
   }
   (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$730(+(+$41(+(+HEAPF64[($5_1 + 32 | 0) >> 3] + +HEAPF64[($5_1 + 24 | 0) >> 3])) - +$41(+(+HEAPF64[($5_1 + 24 | 0) >> 3] + 1.0)) - +$41(+(+HEAPF64[($5_1 + 32 | 0) >> 3])) + +HEAPF64[($5_1 + 32 | 0) >> 3] * +$729(+(+HEAPF64[($5_1 + 40 | 0) >> 3])) + +HEAPF64[($5_1 + 24 | 0) >> 3] * +$40(+-+HEAPF64[($5_1 + 40 | 0) >> 3])))), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
   (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = 1.0 - +HEAPF64[($5_1 + 8 | 0) >> 3] * +$45(+(1.0 - +HEAPF64[($5_1 + 40 | 0) >> 3]), +(+HEAPF64[($5_1 + 24 | 0) >> 3]), +(+HEAPF64[($5_1 + 32 | 0) >> 3]), $5_1 + 4 | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
  }
  label$7 : {
   if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == (1e3 | 0) & 1 | 0)) {
    break label$7
   }
   HEAPF64[($5_1 + 16 | 0) >> 3] = +(0 | 0);
   (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$46(+(+HEAPF64[($5_1 + 40 | 0) >> 3]), +(+HEAPF64[($5_1 + 32 | 0) >> 3]), +(+HEAPF64[($5_1 + 24 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
  }
  $151_1 = +HEAPF64[($5_1 + 16 | 0) >> 3];
  global$0 = $5_1 + 48 | 0;
  return +$151_1;
 }
 
 function $48($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $14_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAPF64[($5_1 + 24 | 0) >> 3] = $0_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$47(+(1.0 - +HEAPF64[($5_1 + 24 | 0) >> 3]), +(+HEAPF64[($5_1 + 8 | 0) >> 3]), +(+HEAPF64[($5_1 + 16 | 0) >> 3]))), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  $14_1 = +HEAPF64[$5_1 >> 3];
  global$0 = $5_1 + 32 | 0;
  return +$14_1;
 }
 
 function $49($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $18_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAPF64[($5_1 + 24 | 0) >> 3] = $0_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$47(+(+HEAPF64[($5_1 + 24 | 0) >> 3]), +(+HEAPF64[($5_1 + 16 | 0) >> 3]), +(+HEAPF64[($5_1 + 8 | 0) >> 3]))), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  label$1 : {
   if (!(+HEAPF64[$5_1 >> 3] > 1.0 & 1 | 0)) {
    break label$1
   }
   HEAPF64[$5_1 >> 3] = 1.0;
  }
  $18_1 = +HEAPF64[$5_1 >> 3];
  global$0 = $5_1 + 32 | 0;
  return +$18_1;
 }
 
 function $50($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAPF64[($4_1 + 24 | 0) >> 3] = $0_1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $1_1;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($4_1 + 16 | 0) >> 3] < +HEAPF64[($4_1 + 24 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[($4_1 + 24 | 0) >> 3];
    break label$1;
   }
   HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3];
  }
  return +(+HEAPF64[($4_1 + 8 | 0) >> 3]);
 }
 
 function $51($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $316_1 = 0.0, $67_1 = 0, $400_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAPF64[($5_1 + 192 | 0) >> 3] = $0_1;
  HEAPF64[($5_1 + 184 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 176 | 0) >> 3] = $2_1;
  HEAPF64[($5_1 + 72 | 0) >> 3] = -37.0;
  (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$42(+(+HEAPF64[($5_1 + 184 | 0) >> 3]), +(+HEAPF64[($5_1 + 176 | 0) >> 3]))), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$734(+(10.0), +(+HEAPF64[($5_1 + 72 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 144 | 0) >> 3] = wasm2js_f64$0;
  HEAPF64[($5_1 + 40 | 0) >> 3] = +HEAPF64[($5_1 + 192 | 0) >> 3];
  label$1 : {
   label$2 : {
    if (+HEAPF64[($5_1 + 184 | 0) >> 3] < +(0 | 0) & 1 | 0) {
     break label$2
    }
    if (!(+HEAPF64[($5_1 + 176 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $875(global$3 + 2018 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$3 : {
   label$4 : {
    if (+HEAPF64[($5_1 + 192 | 0) >> 3] < +(0 | 0) & 1 | 0) {
     break label$4
    }
    if (!(1.0 < +HEAPF64[($5_1 + 192 | 0) >> 3] & 1 | 0)) {
     break label$3
    }
   }
   $875(global$3 + 3672 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$5 : {
   label$6 : {
    if (!(+HEAPF64[($5_1 + 192 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAPF64[($5_1 + 40 | 0) >> 3] = +(0 | 0);
    HEAPF64[($5_1 + 200 | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3];
    break label$5;
   }
   label$7 : {
    if (!(+HEAPF64[($5_1 + 192 | 0) >> 3] == 1.0 & 1 | 0)) {
     break label$7
    }
    HEAPF64[($5_1 + 40 | 0) >> 3] = 1.0;
    HEAPF64[($5_1 + 200 | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3];
    break label$5;
   }
   label$8 : {
    label$9 : {
     if (!(.5 < +HEAPF64[($5_1 + 192 | 0) >> 3] & 1 | 0)) {
      break label$9
     }
     HEAPF64[($5_1 + 168 | 0) >> 3] = 1.0 - +HEAPF64[($5_1 + 192 | 0) >> 3];
     HEAPF64[($5_1 + 112 | 0) >> 3] = +HEAPF64[($5_1 + 176 | 0) >> 3];
     HEAPF64[($5_1 + 96 | 0) >> 3] = +HEAPF64[($5_1 + 184 | 0) >> 3];
     HEAP32[($5_1 + 120 | 0) >> 2] = 1;
     break label$8;
    }
    HEAPF64[($5_1 + 168 | 0) >> 3] = +HEAPF64[($5_1 + 192 | 0) >> 3];
    HEAPF64[($5_1 + 112 | 0) >> 3] = +HEAPF64[($5_1 + 184 | 0) >> 3];
    HEAPF64[($5_1 + 96 | 0) >> 3] = +HEAPF64[($5_1 + 176 | 0) >> 3];
    HEAP32[($5_1 + 120 | 0) >> 2] = 0;
   }
   (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = Math_sqrt(-+$729(+(+HEAPF64[($5_1 + 168 | 0) >> 3] * +HEAPF64[($5_1 + 168 | 0) >> 3])))), HEAPF64[(wasm2js_i32$0 + 88 | 0) >> 3] = wasm2js_f64$0;
   HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[($5_1 + 88 | 0) >> 3] - (2.30753 + .27061 * +HEAPF64[($5_1 + 88 | 0) >> 3]) / (1.0 + (.99229 + .04481 * +HEAPF64[($5_1 + 88 | 0) >> 3]) * +HEAPF64[($5_1 + 88 | 0) >> 3]);
   label$10 : {
    label$11 : {
     if (!(1.0 < +HEAPF64[($5_1 + 112 | 0) >> 3] & 1 | 0)) {
      break label$11
     }
     if (!(1.0 < +HEAPF64[($5_1 + 96 | 0) >> 3] & 1 | 0)) {
      break label$11
     }
     HEAPF64[($5_1 + 88 | 0) >> 3] = (+HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] - 3.0) / 6.0;
     HEAPF64[($5_1 + 80 | 0) >> 3] = 1.0 / (+HEAPF64[($5_1 + 112 | 0) >> 3] + +HEAPF64[($5_1 + 112 | 0) >> 3] - 1.0);
     HEAPF64[($5_1 + 56 | 0) >> 3] = 1.0 / (+HEAPF64[($5_1 + 96 | 0) >> 3] + +HEAPF64[($5_1 + 96 | 0) >> 3] - 1.0);
     HEAPF64[($5_1 + 128 | 0) >> 3] = 2.0 / (+HEAPF64[($5_1 + 80 | 0) >> 3] + +HEAPF64[($5_1 + 56 | 0) >> 3]);
     HEAPF64[($5_1 + 32 | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] * Math_sqrt(+HEAPF64[($5_1 + 128 | 0) >> 3] + +HEAPF64[($5_1 + 88 | 0) >> 3]) / +HEAPF64[($5_1 + 128 | 0) >> 3] - (+HEAPF64[($5_1 + 56 | 0) >> 3] - +HEAPF64[($5_1 + 80 | 0) >> 3]) * (+HEAPF64[($5_1 + 88 | 0) >> 3] + .8333333333333334 - 2.0 / (3.0 * +HEAPF64[($5_1 + 128 | 0) >> 3]));
     (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +HEAPF64[($5_1 + 112 | 0) >> 3] / (+HEAPF64[($5_1 + 112 | 0) >> 3] + +HEAPF64[($5_1 + 96 | 0) >> 3] * +$730(+(+HEAPF64[($5_1 + 32 | 0) >> 3] + +HEAPF64[($5_1 + 32 | 0) >> 3])))), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
     break label$10;
    }
    HEAPF64[($5_1 + 88 | 0) >> 3] = +HEAPF64[($5_1 + 96 | 0) >> 3] + +HEAPF64[($5_1 + 96 | 0) >> 3];
    HEAPF64[($5_1 + 56 | 0) >> 3] = 1.0 / (9.0 * +HEAPF64[($5_1 + 96 | 0) >> 3]);
    (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +HEAPF64[($5_1 + 88 | 0) >> 3] * +$734(+(1.0 - +HEAPF64[($5_1 + 56 | 0) >> 3] + +HEAPF64[($5_1 + 16 | 0) >> 3] * Math_sqrt(+HEAPF64[($5_1 + 56 | 0) >> 3])), +(3.0))), HEAPF64[(wasm2js_i32$0 + 56 | 0) >> 3] = wasm2js_f64$0;
    label$12 : {
     label$13 : {
      if (!(+HEAPF64[($5_1 + 56 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
       break label$13
      }
      (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = 1.0 - +$730(+((+$729(+((1.0 - +HEAPF64[($5_1 + 168 | 0) >> 3]) * +HEAPF64[($5_1 + 96 | 0) >> 3])) + +HEAPF64[$5_1 >> 3]) / +HEAPF64[($5_1 + 96 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
      break label$12;
     }
     HEAPF64[($5_1 + 56 | 0) >> 3] = (4.0 * +HEAPF64[($5_1 + 112 | 0) >> 3] + +HEAPF64[($5_1 + 88 | 0) >> 3] - 2.0) / +HEAPF64[($5_1 + 56 | 0) >> 3];
     label$14 : {
      label$15 : {
       if (!(+HEAPF64[($5_1 + 56 | 0) >> 3] <= 1.0 & 1 | 0)) {
        break label$15
       }
       (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$730(+((+$729(+(+HEAPF64[($5_1 + 168 | 0) >> 3] * +HEAPF64[($5_1 + 112 | 0) >> 3])) + +HEAPF64[$5_1 >> 3]) / +HEAPF64[($5_1 + 112 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
       break label$14;
      }
      HEAPF64[($5_1 + 40 | 0) >> 3] = 1.0 - 2.0 / (+HEAPF64[($5_1 + 56 | 0) >> 3] + 1.0);
     }
    }
   }
   HEAPF64[($5_1 + 88 | 0) >> 3] = 1.0 - +HEAPF64[($5_1 + 112 | 0) >> 3];
   HEAPF64[($5_1 + 56 | 0) >> 3] = 1.0 - +HEAPF64[($5_1 + 96 | 0) >> 3];
   HEAPF64[($5_1 + 8 | 0) >> 3] = +(0 | 0);
   HEAPF64[($5_1 + 64 | 0) >> 3] = 1.0;
   HEAPF64[($5_1 + 104 | 0) >> 3] = 1.0;
   label$16 : {
    if (!(+HEAPF64[($5_1 + 40 | 0) >> 3] < .0001 & 1 | 0)) {
     break label$16
    }
    HEAPF64[($5_1 + 40 | 0) >> 3] = .0001;
   }
   label$17 : {
    if (!(.9999 < +HEAPF64[($5_1 + 40 | 0) >> 3] & 1 | 0)) {
     break label$17
    }
    HEAPF64[($5_1 + 40 | 0) >> 3] = .9999;
   }
   $316_1 = +$50(+(-5.0 / +HEAPF64[($5_1 + 112 | 0) >> 3] / +HEAPF64[($5_1 + 112 | 0) >> 3] - 1.0 / +$734(+(+HEAPF64[($5_1 + 168 | 0) >> 3]), +(.2)) - 13.0), +(+HEAPF64[($5_1 + 72 | 0) >> 3]));
   label$18 : {
    label$19 : {
     if (!(Math_abs($316_1) < 2147483648.0)) {
      break label$19
     }
     $67_1 = ~~$316_1;
     break label$18;
    }
    $67_1 = -2147483648;
   }
   HEAP32[($5_1 + 124 | 0) >> 2] = $67_1;
   (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$734(+(10.0), +(+(HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0)))), HEAPF64[(wasm2js_i32$0 + 160 | 0) >> 3] = wasm2js_f64$0;
   label$20 : while (1) {
    (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$49(+(+HEAPF64[($5_1 + 40 | 0) >> 3]), +(+HEAPF64[($5_1 + 112 | 0) >> 3]), +(+HEAPF64[($5_1 + 96 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
    HEAPF64[($5_1 + 24 | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3];
    (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = (+HEAPF64[($5_1 + 16 | 0) >> 3] - +HEAPF64[($5_1 + 168 | 0) >> 3]) * +$730(+(+HEAPF64[$5_1 >> 3] + +HEAPF64[($5_1 + 88 | 0) >> 3] * +$729(+(+HEAPF64[($5_1 + 24 | 0) >> 3])) + +HEAPF64[($5_1 + 56 | 0) >> 3] * +$729(+(1.0 - +HEAPF64[($5_1 + 24 | 0) >> 3]))))), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
    label$21 : {
     if (!(+HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 8 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
      break label$21
     }
     (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$50(+(+HEAPF64[($5_1 + 64 | 0) >> 3]), +(+HEAPF64[($5_1 + 144 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 104 | 0) >> 3] = wasm2js_f64$0;
    }
    HEAPF64[($5_1 + 136 | 0) >> 3] = 1.0;
    label$22 : while (1) {
     label$23 : {
      label$24 : while (1) {
       HEAPF64[($5_1 + 152 | 0) >> 3] = +HEAPF64[($5_1 + 136 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3];
       HEAPF64[($5_1 + 64 | 0) >> 3] = +HEAPF64[($5_1 + 152 | 0) >> 3] * +HEAPF64[($5_1 + 152 | 0) >> 3];
       label$25 : {
        if (!(+HEAPF64[($5_1 + 64 | 0) >> 3] < +HEAPF64[($5_1 + 104 | 0) >> 3] & 1 | 0)) {
         break label$25
        }
        HEAPF64[($5_1 + 48 | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3] - +HEAPF64[($5_1 + 152 | 0) >> 3];
        label$26 : {
         if (!(+(0 | 0) <= +HEAPF64[($5_1 + 48 | 0) >> 3] & 1 | 0)) {
          break label$26
         }
         if (!(+HEAPF64[($5_1 + 48 | 0) >> 3] <= 1.0 & 1 | 0)) {
          break label$26
         }
         break label$23;
        }
       }
       HEAPF64[($5_1 + 136 | 0) >> 3] = +HEAPF64[($5_1 + 136 | 0) >> 3] / 3.0;
       continue label$24;
      };
     }
     label$27 : {
      if (!(+HEAPF64[($5_1 + 104 | 0) >> 3] <= +HEAPF64[($5_1 + 160 | 0) >> 3] & 1 | 0)) {
       break label$27
      }
      label$28 : {
       if (!(HEAP32[($5_1 + 120 | 0) >> 2] | 0)) {
        break label$28
       }
       HEAPF64[($5_1 + 40 | 0) >> 3] = 1.0 - +HEAPF64[($5_1 + 40 | 0) >> 3];
      }
      HEAPF64[($5_1 + 200 | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3];
      break label$5;
     }
     label$29 : {
      if (!(+HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 16 | 0) >> 3] <= +HEAPF64[($5_1 + 160 | 0) >> 3] & 1 | 0)) {
       break label$29
      }
      label$30 : {
       if (!(HEAP32[($5_1 + 120 | 0) >> 2] | 0)) {
        break label$30
       }
       HEAPF64[($5_1 + 40 | 0) >> 3] = 1.0 - +HEAPF64[($5_1 + 40 | 0) >> 3];
      }
      HEAPF64[($5_1 + 200 | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3];
      break label$5;
     }
     label$31 : {
      label$32 : {
       if (!(+HEAPF64[($5_1 + 48 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
        break label$32
       }
       if (!(+HEAPF64[($5_1 + 48 | 0) >> 3] != 1.0 & 1 | 0)) {
        break label$32
       }
       break label$31;
      }
      HEAPF64[($5_1 + 136 | 0) >> 3] = +HEAPF64[($5_1 + 136 | 0) >> 3] / 3.0;
      continue label$22;
     }
     break label$22;
    };
    label$33 : {
     label$34 : {
      if (!(+HEAPF64[($5_1 + 48 | 0) >> 3] == +HEAPF64[($5_1 + 40 | 0) >> 3] & 1 | 0)) {
       break label$34
      }
      break label$33;
     }
     HEAPF64[($5_1 + 40 | 0) >> 3] = +HEAPF64[($5_1 + 48 | 0) >> 3];
     HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3];
     continue label$20;
    }
    break label$20;
   };
   label$35 : {
    if (!(HEAP32[($5_1 + 120 | 0) >> 2] | 0)) {
     break label$35
    }
    HEAPF64[($5_1 + 40 | 0) >> 3] = 1.0 - +HEAPF64[($5_1 + 40 | 0) >> 3];
   }
   HEAPF64[($5_1 + 200 | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3];
  }
  $400_1 = +HEAPF64[($5_1 + 200 | 0) >> 3];
  global$0 = $5_1 + 208 | 0;
  return +$400_1;
 }
 
 function $52($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, $158_1 = 0.0, $153_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 64 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 32 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 28 | 0) >> 2] = $8_1;
  HEAP32[($11_1 + 24 | 0) >> 2] = 0;
  HEAP32[($11_1 + 16 | 0) >> 2] = (HEAP32[($11_1 + 60 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 48 | 0) >> 2] | 0, HEAP32[($11_1 + 44 | 0) >> 2] | 0) | 0;
  HEAP32[($11_1 + 12 | 0) >> 2] = ((HEAP32[($11_1 + 52 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 48 | 0) >> 2] | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0) + 1 | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($11_1 + 16 | 0) >> 2] = HEAP32[($11_1 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($11_1 + 12 | 0) >> 2] = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
  }
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862((((HEAP32[($11_1 + 16 | 0) >> 2] | 0) << 4 | 0) + 104 | 0) + Math_imul(((HEAP32[($11_1 + 32 | 0) >> 2] | 0) + 3 | 0) << 3 | 0, HEAP32[($11_1 + 28 | 0) >> 2] | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[(HEAP32[($11_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($11_1 + 60 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($11_1 + 56 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($11_1 + 52 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($11_1 + 48 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($11_1 + 44 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($11_1 + 40 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($11_1 + 36 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 44 | 0) >> 2] = HEAP32[($11_1 + 32 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 40 | 0) >> 2] = HEAP32[($11_1 + 28 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 48 | 0) >> 2] = HEAP32[($11_1 + 28 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($11_1 + 28 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] = ((((HEAP32[($11_1 + 60 | 0) >> 2] | 0) + (HEAP32[($11_1 + 52 | 0) >> 2] | 0) | 0) + (HEAP32[($11_1 + 44 | 0) >> 2] | 0) | 0) + (HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0) + (HEAP32[($11_1 + 32 | 0) >> 2] | 0) | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] = (HEAP32[($11_1 + 60 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 48 | 0) >> 2] | 0, HEAP32[($11_1 + 44 | 0) >> 2] | 0) | 0;
  HEAP32[($11_1 + 12 | 0) >> 2] = ((HEAP32[($11_1 + 52 | 0) >> 2] | 0) + 1 | 0) + Math_imul(HEAP32[($11_1 + 48 | 0) >> 2] | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0;
  label$3 : {
   if (!((HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[($11_1 + 12 | 0) >> 2] | 0;
  }
  HEAP32[($11_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 88 | 0) >> 2] = (HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) << 1 | 0;
  HEAP32[($11_1 + 20 | 0) >> 2] = 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAPF64[(((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 96 | 0) + ((HEAP32[($11_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($11_1 + 20 | 0) >> 2] = (HEAP32[($11_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  HEAP32[($11_1 + 20 | 0) >> 2] = 0;
  label$6 : {
   label$7 : while (1) {
    if (!((HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAPF64[(((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 96 | 0) + (((HEAP32[($11_1 + 20 | 0) >> 2] | 0) + (HEAP32[($11_1 + 16 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($11_1 + 20 | 0) >> 2] = (HEAP32[($11_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$7;
   };
  }
  $158_1 = +$88();
  HEAPF64[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 56 | 0) >> 3] = $158_1;
  HEAPF64[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 64 | 0) >> 3] = +(0 | 0);
  $153_1 = HEAP32[($11_1 + 24 | 0) >> 2] | 0;
  global$0 = $11_1 + 64 | 0;
  return $153_1 | 0;
 }
 
 function $53($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, $156_1 = 0.0, $151_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 64 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 32 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 28 | 0) >> 2] = $8_1;
  HEAP32[($11_1 + 24 | 0) >> 2] = 0;
  HEAP32[($11_1 + 16 | 0) >> 2] = (HEAP32[($11_1 + 60 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 48 | 0) >> 2] | 0, HEAP32[($11_1 + 44 | 0) >> 2] | 0) | 0;
  HEAP32[($11_1 + 12 | 0) >> 2] = ((HEAP32[($11_1 + 52 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 48 | 0) >> 2] | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0) + 1 | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($11_1 + 16 | 0) >> 2] = HEAP32[($11_1 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($11_1 + 12 | 0) >> 2] = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
  }
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862((((HEAP32[($11_1 + 16 | 0) >> 2] | 0) << 4 | 0) + 96 | 0) + Math_imul(((HEAP32[($11_1 + 32 | 0) >> 2] | 0) + 3 | 0) << 3 | 0, HEAP32[($11_1 + 28 | 0) >> 2] | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[(HEAP32[($11_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($11_1 + 60 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($11_1 + 56 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($11_1 + 52 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($11_1 + 48 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($11_1 + 44 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($11_1 + 40 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($11_1 + 36 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 40 | 0) >> 2] = HEAP32[($11_1 + 28 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 44 | 0) >> 2] = HEAP32[($11_1 + 32 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($11_1 + 28 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] = ((((HEAP32[($11_1 + 60 | 0) >> 2] | 0) + (HEAP32[($11_1 + 52 | 0) >> 2] | 0) | 0) + (HEAP32[($11_1 + 44 | 0) >> 2] | 0) | 0) + (HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0) + (HEAP32[($11_1 + 32 | 0) >> 2] | 0) | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] = (HEAP32[($11_1 + 60 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 48 | 0) >> 2] | 0, HEAP32[($11_1 + 44 | 0) >> 2] | 0) | 0;
  HEAP32[($11_1 + 12 | 0) >> 2] = ((HEAP32[($11_1 + 52 | 0) >> 2] | 0) + 1 | 0) + Math_imul(HEAP32[($11_1 + 48 | 0) >> 2] | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0;
  label$3 : {
   if (!((HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[($11_1 + 12 | 0) >> 2] | 0;
  }
  HEAP32[($11_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 80 | 0) >> 2] = (HEAP32[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) << 1 | 0;
  HEAP32[($11_1 + 20 | 0) >> 2] = 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAPF64[(((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 88 | 0) + ((HEAP32[($11_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($11_1 + 20 | 0) >> 2] = (HEAP32[($11_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  HEAP32[($11_1 + 20 | 0) >> 2] = 0;
  label$6 : {
   label$7 : while (1) {
    if (!((HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAPF64[(((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 88 | 0) + (((HEAP32[($11_1 + 20 | 0) >> 2] | 0) + (HEAP32[($11_1 + 16 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($11_1 + 20 | 0) >> 2] = (HEAP32[($11_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$7;
   };
  }
  $156_1 = +$88();
  HEAPF64[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 48 | 0) >> 3] = $156_1;
  HEAPF64[((HEAP32[($11_1 + 24 | 0) >> 2] | 0) + 56 | 0) >> 3] = +(0 | 0);
  $151_1 = HEAP32[($11_1 + 24 | 0) >> 2] | 0;
  global$0 = $11_1 + 64 | 0;
  return $151_1 | 0;
 }
 
 function $54($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $328_1 = 0, $357_1 = 0, $541_1 = 0, $553_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $9_1 = global$0 - 176 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 168 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 164 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 160 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 156 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 152 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 148 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 144 | 0) >> 2] = $6_1;
  HEAP32[($9_1 + 140 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($9_1 + 168 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($9_1 + 140 | 0) >> 2] = 1;
  }
  label$2 : {
   if (!((HEAP32[($9_1 + 164 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($9_1 + 140 | 0) >> 2] = 2;
  }
  label$3 : {
   if (Math_imul(HEAP32[($9_1 + 168 | 0) >> 2] | 0, HEAP32[($9_1 + 168 | 0) >> 2] | 0) + Math_imul(HEAP32[($9_1 + 164 | 0) >> 2] | 0, HEAP32[($9_1 + 164 | 0) >> 2] | 0) | 0) {
    break label$3
   }
   HEAP32[($9_1 + 140 | 0) >> 2] = 4;
  }
  HEAP32[($9_1 + 136 | 0) >> 2] = (HEAP32[($9_1 + 164 | 0) >> 2] | 0) + 1 | 0;
  label$4 : {
   if (!((HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[($9_1 + 136 | 0) >> 2] = HEAP32[($9_1 + 168 | 0) >> 2] | 0;
  }
  HEAP32[($9_1 + 132 | 0) >> 2] = (Math_imul(HEAP32[($9_1 + 136 | 0) >> 2] | 0, (HEAP32[($9_1 + 136 | 0) >> 2] | 0) + 1 | 0) | 0) / (2 | 0) | 0;
  HEAP32[($9_1 + 128 | 0) >> 2] = (Math_imul(HEAP32[($9_1 + 132 | 0) >> 2] | 0, (HEAP32[($9_1 + 132 | 0) >> 2] | 0) - 1 | 0) | 0) / (2 | 0) | 0;
  label$5 : {
   if (!((HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[($9_1 + 140 | 0) >> 2] = 8;
  }
  label$6 : {
   label$7 : {
    if (!(HEAP32[($9_1 + 140 | 0) >> 2] | 0)) {
     break label$7
    }
    HEAP32[($9_1 + 172 | 0) >> 2] = HEAP32[($9_1 + 140 | 0) >> 2] | 0;
    break label$6;
   }
   (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 132 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 132 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 132 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 128 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   HEAP32[($9_1 + 124 | 0) >> 2] = 1;
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAPF64[((HEAP32[($9_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     label$10 : {
      if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) >= (HEAP32[($9_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      HEAPF64[((HEAP32[($9_1 + 160 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     }
     HEAPF64[((HEAP32[($9_1 + 144 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     label$11 : {
      if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) < ((HEAP32[($9_1 + 164 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
       break label$11
      }
      HEAPF64[((HEAP32[($9_1 + 144 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 124 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
     }
     HEAP32[($9_1 + 124 | 0) >> 2] = (HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 1 | 0;
     continue label$9;
    };
   }
   HEAPF64[(HEAP32[($9_1 + 152 | 0) >> 2] | 0) >> 3] = +(0 | 0);
   label$12 : {
    if (HEAP32[($9_1 + 168 | 0) >> 2] | 0) {
     break label$12
    }
    HEAPF64[(HEAP32[($9_1 + 160 | 0) >> 2] | 0) >> 3] = +(0 | 0);
   }
   HEAPF64[(HEAP32[($9_1 + 144 | 0) >> 2] | 0) >> 3] = 1.0;
   HEAP32[($9_1 + 120 | 0) >> 2] = HEAP32[($9_1 + 136 | 0) >> 2] | 0;
   HEAP32[($9_1 + 116 | 0) >> 2] = 1;
   label$13 : {
    label$14 : while (1) {
     if (!((HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$13
     }
     HEAPF64[($9_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 144 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($9_1 + 124 | 0) >> 2] = HEAP32[($9_1 + 116 | 0) >> 2] | 0;
     label$15 : {
      label$16 : while (1) {
       if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       HEAPF64[((HEAP32[($9_1 + 144 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 144 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($9_1 + 64 | 0) >> 3];
       HEAP32[($9_1 + 120 | 0) >> 2] = (HEAP32[($9_1 + 120 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($9_1 + 124 | 0) >> 2] = (HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 1 | 0;
       continue label$16;
      };
     }
     HEAP32[($9_1 + 116 | 0) >> 2] = (HEAP32[($9_1 + 116 | 0) >> 2] | 0) + 1 | 0;
     continue label$14;
    };
   }
   label$17 : {
    label$18 : {
     if (!(HEAP32[($9_1 + 168 | 0) >> 2] | 0)) {
      break label$18
     }
     HEAP32[($9_1 + 112 | 0) >> 2] = (HEAP32[($9_1 + 136 | 0) >> 2] | 0) - 1 | 0;
     HEAP32[($9_1 + 108 | 0) >> 2] = 0;
     HEAP32[($9_1 + 104 | 0) >> 2] = 0;
     HEAPF64[($9_1 + 56 | 0) >> 3] = +(0 | 0);
     HEAP32[($9_1 + 124 | 0) >> 2] = 0;
     label$19 : {
      label$20 : while (1) {
       if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 128 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$19
       }
       HEAPF64[((HEAP32[$9_1 >> 2] | 0) + ((HEAP32[($9_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
       HEAP32[($9_1 + 124 | 0) >> 2] = (HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 1 | 0;
       continue label$20;
      };
     }
     HEAP32[($9_1 + 124 | 0) >> 2] = 0;
     label$21 : {
      label$22 : while (1) {
       if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$21
       }
       HEAPF64[((HEAP32[($9_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
       HEAPF64[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
       HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
       HEAP32[($9_1 + 124 | 0) >> 2] = (HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 1 | 0;
       continue label$22;
      };
     }
     HEAP32[($9_1 + 120 | 0) >> 2] = 0;
     HEAP32[($9_1 + 92 | 0) >> 2] = -1;
     HEAP32[($9_1 + 100 | 0) >> 2] = (HEAP32[($9_1 + 132 | 0) >> 2] | 0) - (HEAP32[($9_1 + 136 | 0) >> 2] | 0) | 0;
     HEAP32[($9_1 + 96 | 0) >> 2] = (HEAP32[($9_1 + 100 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($9_1 + 84 | 0) >> 2] = HEAP32[($9_1 + 100 | 0) >> 2] | 0;
     HEAP32[($9_1 + 88 | 0) >> 2] = (HEAP32[($9_1 + 100 | 0) >> 2] | 0) - 1 | 0;
     HEAP32[($9_1 + 116 | 0) >> 2] = 0;
     label$23 : {
      label$24 : while (1) {
       if (!((HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$23
       }
       HEAPF64[($9_1 + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 160 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
       HEAP32[($9_1 + 84 | 0) >> 2] = (HEAP32[($9_1 + 84 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($9_1 + 80 | 0) >> 2] = (HEAP32[($9_1 + 96 | 0) >> 2] | 0) + (HEAP32[($9_1 + 116 | 0) >> 2] | 0) | 0;
       HEAP32[($9_1 + 124 | 0) >> 2] = HEAP32[($9_1 + 116 | 0) >> 2] | 0;
       label$25 : {
        label$26 : while (1) {
         if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$25
         }
         HEAPF64[($9_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 144 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($9_1 + 120 | 0) >> 2] = (HEAP32[($9_1 + 120 | 0) >> 2] | 0) + 1 | 0;
         HEAPF64[($9_1 + 40 | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 160 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         label$27 : {
          if (!((HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0) != ((HEAP32[($9_1 + 136 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
           break label$27
          }
          HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[($9_1 + 40 | 0) >> 3];
          label$28 : {
           if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) != ((HEAP32[($9_1 + 136 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
            break label$28
           }
           $328_1 = (HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0;
           HEAPF64[$328_1 >> 3] = +HEAPF64[$328_1 >> 3] - +HEAPF64[($9_1 + 48 | 0) >> 3];
           HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0;
           HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -1.0;
          }
         }
         HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[($9_1 + 40 | 0) >> 3] * +HEAPF64[($9_1 + 48 | 0) >> 3];
         HEAP32[($9_1 + 88 | 0) >> 2] = (HEAP32[($9_1 + 88 | 0) >> 2] | 0) + 1 | 0;
         label$29 : {
          if (!((HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0) >= (HEAP32[($9_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$29
          }
          HEAP32[($9_1 + 88 | 0) >> 2] = 0;
         }
         $357_1 = (HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0;
         HEAPF64[$357_1 >> 3] = +HEAPF64[$357_1 >> 3] + 1.0;
         HEAPF64[($9_1 + 24 | 0) >> 3] = 1.0;
         (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $55(HEAP32[($9_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 128 | 0) >> 2] | 0 | 0, +(+HEAPF64[($9_1 + 24 | 0) >> 3]), HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0, +(+HEAPF64[($9_1 + 32 | 0) >> 3]), HEAP32[($9_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[$9_1 >> 2] | 0 | 0, HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0, $9_1 + 56 | 0 | 0, $9_1 + 16 | 0 | 0, $9_1 + 108 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 104 | 0) >> 2] = wasm2js_i32$1;
         HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
         label$30 : {
          if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) != ((HEAP32[($9_1 + 136 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
           break label$30
          }
          HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
          HEAP32[($9_1 + 80 | 0) >> 2] = (HEAP32[($9_1 + 80 | 0) >> 2] | 0) + 1 | 0;
          HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
         }
         HEAP32[($9_1 + 124 | 0) >> 2] = (HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 1 | 0;
         continue label$26;
        };
       }
       HEAP32[($9_1 + 116 | 0) >> 2] = (HEAP32[($9_1 + 116 | 0) >> 2] | 0) + 1 | 0;
       continue label$24;
      };
     }
     $56(HEAP32[($9_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[$9_1 >> 2] | 0 | 0, HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 148 | 0) >> 2] | 0 | 0);
     HEAP32[($9_1 + 120 | 0) >> 2] = HEAP32[($9_1 + 100 | 0) >> 2] | 0;
     HEAP32[($9_1 + 124 | 0) >> 2] = 0;
     label$31 : {
      label$32 : while (1) {
       if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$31
       }
       HEAP32[($9_1 + 120 | 0) >> 2] = (HEAP32[($9_1 + 120 | 0) >> 2] | 0) + 1 | 0;
       HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 148 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 120 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($9_1 + 124 | 0) >> 2] = (HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 1 | 0;
       continue label$32;
      };
     }
     HEAP32[($9_1 + 120 | 0) >> 2] = HEAP32[($9_1 + 132 | 0) >> 2] | 0;
     HEAP32[($9_1 + 92 | 0) >> 2] = HEAP32[($9_1 + 100 | 0) >> 2] | 0;
     HEAP32[($9_1 + 124 | 0) >> 2] = 0;
     label$33 : {
      label$34 : while (1) {
       if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$33
       }
       HEAPF64[((HEAP32[($9_1 + 148 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 120 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 148 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 92 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($9_1 + 120 | 0) >> 2] = (HEAP32[($9_1 + 120 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($9_1 + 124 | 0) >> 2] = (HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 1 | 0;
       continue label$34;
      };
     }
     HEAP32[($9_1 + 124 | 0) >> 2] = 0;
     label$35 : {
      label$36 : while (1) {
       if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$35
       }
       HEAPF64[((HEAP32[($9_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($9_1 + 124 | 0) >> 2] = (HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 1 | 0;
       continue label$36;
      };
     }
     break label$17;
    }
    HEAP32[($9_1 + 76 | 0) >> 2] = HEAP32[($9_1 + 132 | 0) >> 2] | 0;
    HEAP32[($9_1 + 120 | 0) >> 2] = HEAP32[($9_1 + 132 | 0) >> 2] | 0;
    HEAP32[($9_1 + 124 | 0) >> 2] = 0;
    label$37 : {
     label$38 : while (1) {
      if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$37
      }
      HEAP32[($9_1 + 116 | 0) >> 2] = 0;
      label$39 : {
       label$40 : while (1) {
        if (!((HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0) <= (HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$39
        }
        HEAP32[($9_1 + 120 | 0) >> 2] = (HEAP32[($9_1 + 120 | 0) >> 2] | 0) + -1 | 0;
        HEAPF64[((HEAP32[($9_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 144 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$41 : {
         if (!(HEAP32[($9_1 + 116 | 0) >> 2] | 0)) {
          break label$41
         }
         HEAP32[($9_1 + 76 | 0) >> 2] = (HEAP32[($9_1 + 76 | 0) >> 2] | 0) + -1 | 0;
         $541_1 = (HEAP32[($9_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0;
         HEAPF64[$541_1 >> 3] = +HEAPF64[$541_1 >> 3] + +HEAPF64[((HEAP32[($9_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        }
        HEAP32[($9_1 + 116 | 0) >> 2] = (HEAP32[($9_1 + 116 | 0) >> 2] | 0) + 1 | 0;
        continue label$40;
       };
      }
      HEAP32[($9_1 + 124 | 0) >> 2] = (HEAP32[($9_1 + 124 | 0) >> 2] | 0) + 1 | 0;
      continue label$38;
     };
    }
   }
   $863(HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0);
   $863(HEAP32[$9_1 >> 2] | 0 | 0);
   HEAP32[($9_1 + 172 | 0) >> 2] = HEAP32[($9_1 + 140 | 0) >> 2] | 0;
  }
  $553_1 = HEAP32[($9_1 + 172 | 0) >> 2] | 0;
  global$0 = $9_1 + 176 | 0;
  return $553_1 | 0;
 }
 
 function $55($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $14_1 = 0, $163_1 = 0;
  $14_1 = global$0 - 160 | 0;
  global$0 = $14_1;
  HEAP32[($14_1 + 152 | 0) >> 2] = $0_1;
  HEAP32[($14_1 + 148 | 0) >> 2] = $1_1;
  HEAPF64[($14_1 + 136 | 0) >> 3] = $2_1;
  HEAP32[($14_1 + 132 | 0) >> 2] = $3_1;
  HEAP32[($14_1 + 128 | 0) >> 2] = $4_1;
  HEAPF64[($14_1 + 120 | 0) >> 3] = $5_1;
  HEAP32[($14_1 + 116 | 0) >> 2] = $6_1;
  HEAP32[($14_1 + 112 | 0) >> 2] = $7_1;
  HEAP32[($14_1 + 108 | 0) >> 2] = $8_1;
  HEAP32[($14_1 + 104 | 0) >> 2] = $9_1;
  HEAP32[($14_1 + 100 | 0) >> 2] = $10_1;
  HEAP32[($14_1 + 96 | 0) >> 2] = $11_1;
  HEAPF64[($14_1 + 64 | 0) >> 3] = +HEAPF64[($14_1 + 120 | 0) >> 3];
  HEAPF64[($14_1 + 56 | 0) >> 3] = +HEAPF64[($14_1 + 136 | 0) >> 3];
  HEAP32[($14_1 + 88 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($14_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($14_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 132 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($14_1 + 88 | 0) >> 2] = (HEAP32[($14_1 + 88 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[(HEAP32[($14_1 + 100 | 0) >> 2] | 0) >> 3] = +(0 | 0);
  HEAP32[($14_1 + 92 | 0) >> 2] = 1;
  label$3 : {
   label$4 : {
    if (!(+HEAPF64[($14_1 + 56 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($14_1 + 156 | 0) >> 2] = HEAP32[($14_1 + 92 | 0) >> 2] | 0;
    break label$3;
   }
   HEAP32[($14_1 + 92 | 0) >> 2] = 0;
   HEAP32[($14_1 + 84 | 0) >> 2] = 0;
   HEAP32[($14_1 + 88 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($14_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     label$7 : {
      label$8 : {
       if (!(+HEAPF64[((HEAP32[($14_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] != +(0 | 0) & 1 | 0)) {
        break label$8
       }
       HEAPF64[($14_1 + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[($14_1 + 40 | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 116 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[($14_1 + 32 | 0) >> 3] = +HEAPF64[($14_1 + 40 | 0) >> 3] + +HEAPF64[($14_1 + 56 | 0) >> 3] * +HEAPF64[($14_1 + 48 | 0) >> 3] * +HEAPF64[($14_1 + 48 | 0) >> 3];
       HEAPF64[((HEAP32[($14_1 + 116 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 32 | 0) >> 3];
       HEAPF64[($14_1 + 24 | 0) >> 3] = +HEAPF64[($14_1 + 40 | 0) >> 3] / +HEAPF64[($14_1 + 32 | 0) >> 3];
       HEAPF64[($14_1 + 16 | 0) >> 3] = +HEAPF64[($14_1 + 56 | 0) >> 3] * +HEAPF64[($14_1 + 48 | 0) >> 3] / +HEAPF64[($14_1 + 32 | 0) >> 3];
       HEAPF64[($14_1 + 56 | 0) >> 3] = +HEAPF64[($14_1 + 24 | 0) >> 3] * +HEAPF64[($14_1 + 56 | 0) >> 3];
       label$9 : {
        if (!((HEAP32[($14_1 + 88 | 0) >> 2] | 0 | 0) != ((HEAP32[($14_1 + 152 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
         break label$9
        }
        HEAP32[($14_1 + 80 | 0) >> 2] = (HEAP32[($14_1 + 88 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($14_1 + 76 | 0) >> 2] = HEAP32[($14_1 + 80 | 0) >> 2] | 0;
        label$10 : {
         label$11 : while (1) {
          if (!((HEAP32[($14_1 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$10
          }
          HEAPF64[($14_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          HEAPF64[$14_1 >> 3] = +HEAPF64[((HEAP32[($14_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          HEAPF64[((HEAP32[($14_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 8 | 0) >> 3] - +HEAPF64[($14_1 + 48 | 0) >> 3] * +HEAPF64[$14_1 >> 3];
          HEAPF64[((HEAP32[($14_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 24 | 0) >> 3] * +HEAPF64[$14_1 >> 3] + +HEAPF64[($14_1 + 16 | 0) >> 3] * +HEAPF64[($14_1 + 8 | 0) >> 3];
          HEAP32[($14_1 + 84 | 0) >> 2] = (HEAP32[($14_1 + 84 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($14_1 + 76 | 0) >> 2] = (HEAP32[($14_1 + 76 | 0) >> 2] | 0) + 1 | 0;
          continue label$11;
         };
        }
       }
       HEAPF64[($14_1 + 8 | 0) >> 3] = +HEAPF64[($14_1 + 64 | 0) >> 3];
       HEAPF64[($14_1 + 64 | 0) >> 3] = +HEAPF64[($14_1 + 8 | 0) >> 3] - +HEAPF64[($14_1 + 48 | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 24 | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[($14_1 + 16 | 0) >> 3] * +HEAPF64[($14_1 + 8 | 0) >> 3];
       label$12 : {
        if (!(+HEAPF64[($14_1 + 40 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
         break label$12
        }
        HEAP32[(HEAP32[($14_1 + 96 | 0) >> 2] | 0) >> 2] = (HEAP32[(HEAP32[($14_1 + 96 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($14_1 + 156 | 0) >> 2] = HEAP32[($14_1 + 92 | 0) >> 2] | 0;
        break label$3;
       }
       break label$7;
      }
      HEAP32[($14_1 + 84 | 0) >> 2] = (HEAP32[($14_1 + 84 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 152 | 0) >> 2] | 0) - (HEAP32[($14_1 + 88 | 0) >> 2] | 0) | 0) - 1 | 0) | 0;
     }
     HEAP32[($14_1 + 88 | 0) >> 2] = (HEAP32[($14_1 + 88 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   HEAPF64[(HEAP32[($14_1 + 104 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 104 | 0) >> 2] | 0) >> 3] + +HEAPF64[($14_1 + 56 | 0) >> 3] * +HEAPF64[($14_1 + 64 | 0) >> 3] * +HEAPF64[($14_1 + 64 | 0) >> 3];
   HEAPF64[(HEAP32[($14_1 + 100 | 0) >> 2] | 0) >> 3] = +HEAPF64[($14_1 + 64 | 0) >> 3] * Math_sqrt(+HEAPF64[($14_1 + 56 | 0) >> 3]);
   HEAP32[($14_1 + 156 | 0) >> 2] = HEAP32[($14_1 + 92 | 0) >> 2] | 0;
  }
  $163_1 = HEAP32[($14_1 + 156 | 0) >> 2] | 0;
  global$0 = $14_1 + 160 | 0;
  return $163_1 | 0;
 }
 
 function $56($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 64 | 0;
  HEAP32[($7_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 56 | 0) >> 2] | 0) - 1 | 0;
  HEAP32[($7_1 + 32 | 0) >> 2] = (HEAP32[($7_1 + 60 | 0) >> 2] | 0) - 1 | 0;
  HEAP32[($7_1 + 36 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($7_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$3 : {
     if (!((HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) != ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($7_1 + 28 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) - 1 | 0;
     HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 60 | 0) >> 2] | 0) - 1 | 0;
     HEAP32[($7_1 + 20 | 0) >> 2] = 0;
     label$4 : {
      label$5 : while (1) {
       if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) <= (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$4
       }
       HEAPF64[($7_1 + 8 | 0) >> 3] = +HEAPF64[($7_1 + 8 | 0) >> 3] - +HEAPF64[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
       continue label$5;
      };
     }
    }
    HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 8 | 0) >> 3];
    HEAP32[($7_1 + 32 | 0) >> 2] = (HEAP32[($7_1 + 32 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $57($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = +$13_1;
  $14_1 = $14_1 | 0;
  $15_1 = $15_1 | 0;
  var $18_1 = 0, $164_1 = 0, $222_1 = 0, $256_1 = 0, $274_1 = 0, $328_1 = 0, $329_1 = 0, $435_1 = 0, $511_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $18_1 = global$0 - 192 | 0;
  global$0 = $18_1;
  HEAP32[($18_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($18_1 + 184 | 0) >> 2] = $1_1;
  HEAP32[($18_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($18_1 + 176 | 0) >> 2] = $3_1;
  HEAP32[($18_1 + 172 | 0) >> 2] = $4_1;
  HEAP32[($18_1 + 168 | 0) >> 2] = $5_1;
  HEAP32[($18_1 + 164 | 0) >> 2] = $6_1;
  HEAP32[($18_1 + 160 | 0) >> 2] = $7_1;
  HEAP32[($18_1 + 156 | 0) >> 2] = $8_1;
  HEAP32[($18_1 + 152 | 0) >> 2] = $9_1;
  HEAP32[($18_1 + 148 | 0) >> 2] = $10_1;
  HEAP32[($18_1 + 144 | 0) >> 2] = $11_1;
  HEAP32[($18_1 + 140 | 0) >> 2] = $12_1;
  HEAPF64[($18_1 + 128 | 0) >> 3] = $13_1;
  HEAP32[($18_1 + 124 | 0) >> 2] = $14_1;
  HEAP32[($18_1 + 120 | 0) >> 2] = $15_1;
  HEAP32[($18_1 + 116 | 0) >> 2] = (HEAP32[($18_1 + 184 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($18_1 + 92 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($18_1 + 124 | 0) >> 2] | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 188 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($18_1 + 116 | 0) >> 2] = HEAP32[($18_1 + 188 | 0) >> 2] | 0;
  }
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $862((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($18_1 + 112 | 0) >> 2] = (Math_imul(HEAP32[($18_1 + 116 | 0) >> 2] | 0, (HEAP32[($18_1 + 116 | 0) >> 2] | 0) + 1 | 0) | 0) / (2 | 0) | 0;
  HEAP32[($18_1 + 100 | 0) >> 2] = (HEAP32[($18_1 + 116 | 0) >> 2] | 0) - 1 | 0;
  HEAP32[($18_1 + 108 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($18_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[((HEAP32[($18_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($18_1 + 108 | 0) >> 2] = (HEAP32[($18_1 + 108 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  HEAP32[($18_1 + 96 | 0) >> 2] = 0;
  label$4 : {
   label$5 : {
    if (HEAP32[(HEAP32[($18_1 + 120 | 0) >> 2] | 0) >> 2] | 0) {
     break label$5
    }
    HEAP32[($18_1 + 108 | 0) >> 2] = 0;
    label$6 : {
     label$7 : while (1) {
      if (!((HEAP32[($18_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAPF64[($18_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$8 : {
       label$9 : {
        if ((HEAP32[($18_1 + 140 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0) {
         break label$9
        }
        if (!((HEAP32[($18_1 + 108 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
         break label$8
        }
       }
       HEAPF64[($18_1 + 56 | 0) >> 3] = +(0 | 0);
       label$10 : {
        if (!((HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
         break label$10
        }
        HEAPF64[($18_1 + 56 | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       }
       HEAPF64[($18_1 + 48 | 0) >> 3] = +HEAPF64[(HEAP32[($18_1 + 172 | 0) >> 2] | 0) >> 3];
       label$11 : {
        if (!((HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
         break label$11
        }
        HEAP32[($18_1 + 104 | 0) >> 2] = 0;
        label$12 : {
         label$13 : while (1) {
          if (!((HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$12
          }
          HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + (((HEAP32[($18_1 + 104 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
          HEAP32[($18_1 + 104 | 0) >> 2] = (HEAP32[($18_1 + 104 | 0) >> 2] | 0) + 1 | 0;
          continue label$13;
         };
        }
       }
       HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + (((HEAP32[($18_1 + 116 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
       label$14 : {
        if (!(HEAP32[($18_1 + 188 | 0) >> 2] | 0)) {
         break label$14
        }
        HEAP32[($18_1 + 104 | 0) >> 2] = 0;
        label$15 : {
         label$16 : while (1) {
          if (!((HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 188 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$15
          }
          $164_1 = (HEAP32[($18_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0;
          HEAPF64[$164_1 >> 3] = +HEAPF64[$164_1 >> 3] + +HEAPF64[((HEAP32[($18_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($18_1 + 48 | 0) >> 3];
          HEAP32[($18_1 + 104 | 0) >> 2] = (HEAP32[($18_1 + 104 | 0) >> 2] | 0) + 1 | 0;
          continue label$16;
         };
        }
       }
       HEAP32[($18_1 + 88 | 0) >> 2] = -1;
       HEAP32[($18_1 + 84 | 0) >> 2] = (HEAP32[($18_1 + 116 | 0) >> 2] | 0) - 1 | 0;
       HEAP32[($18_1 + 80 | 0) >> 2] = 0;
       label$17 : {
        label$18 : while (1) {
         if (!((HEAP32[($18_1 + 80 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$17
         }
         HEAP32[($18_1 + 104 | 0) >> 2] = HEAP32[($18_1 + 80 | 0) >> 2] | 0;
         label$19 : {
          label$20 : while (1) {
           if (!((HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$19
           }
           HEAP32[($18_1 + 88 | 0) >> 2] = (HEAP32[($18_1 + 88 | 0) >> 2] | 0) + 1 | 0;
           HEAPF64[((HEAP32[($18_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 164 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           label$21 : {
            if (!((HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0) != ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
             break label$21
            }
            HEAP32[($18_1 + 84 | 0) >> 2] = (HEAP32[($18_1 + 84 | 0) >> 2] | 0) + 1 | 0;
            $222_1 = (HEAP32[($18_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0;
            HEAPF64[$222_1 >> 3] = +HEAPF64[$222_1 >> 3] + +HEAPF64[((HEAP32[($18_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           }
           HEAP32[($18_1 + 104 | 0) >> 2] = (HEAP32[($18_1 + 104 | 0) >> 2] | 0) + 1 | 0;
           continue label$20;
          };
         }
         HEAP32[($18_1 + 80 | 0) >> 2] = (HEAP32[($18_1 + 80 | 0) >> 2] | 0) + 1 | 0;
         continue label$18;
        };
       }
      }
      HEAPF64[($18_1 + 40 | 0) >> 3] = Math_abs(+HEAPF64[(HEAP32[($18_1 + 168 | 0) >> 2] | 0) >> 3]);
      HEAPF64[($18_1 + 32 | 0) >> 3] = +HEAPF64[($18_1 + 64 | 0) >> 3] - +HEAPF64[(HEAP32[($18_1 + 172 | 0) >> 2] | 0) >> 3];
      label$22 : {
       if (!((HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
        break label$22
       }
       HEAP32[($18_1 + 88 | 0) >> 2] = HEAP32[($18_1 + 116 | 0) >> 2] | 0;
       HEAP32[($18_1 + 104 | 0) >> 2] = 1;
       label$23 : {
        label$24 : while (1) {
         if (!((HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$23
         }
         HEAPF64[($18_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[($18_1 + 40 | 0) >> 3];
         $256_1 = (HEAP32[($18_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0;
         HEAPF64[$256_1 >> 3] = +HEAPF64[$256_1 >> 3] + +HEAPF64[($18_1 + 24 | 0) >> 3] * +HEAPF64[($18_1 + 32 | 0) >> 3];
         HEAP32[($18_1 + 80 | 0) >> 2] = HEAP32[($18_1 + 104 | 0) >> 2] | 0;
         label$25 : {
          label$26 : while (1) {
           if (!((HEAP32[($18_1 + 80 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$25
           }
           $274_1 = (HEAP32[($18_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0;
           HEAPF64[$274_1 >> 3] = +HEAPF64[$274_1 >> 3] - +HEAPF64[($18_1 + 24 | 0) >> 3] * +HEAPF64[((HEAP32[($18_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($18_1 + 88 | 0) >> 2] = (HEAP32[($18_1 + 88 | 0) >> 2] | 0) + 1 | 0;
           HEAP32[($18_1 + 80 | 0) >> 2] = (HEAP32[($18_1 + 80 | 0) >> 2] | 0) + 1 | 0;
           continue label$26;
          };
         }
         HEAP32[($18_1 + 104 | 0) >> 2] = (HEAP32[($18_1 + 104 | 0) >> 2] | 0) + 1 | 0;
         continue label$24;
        };
       }
      }
      HEAPF64[(HEAP32[($18_1 + 172 | 0) >> 2] | 0) >> 3] = +HEAPF64[($18_1 + 64 | 0) >> 3];
      HEAP32[($18_1 + 80 | 0) >> 2] = 0;
      label$27 : {
       label$28 : while (1) {
        if (!((HEAP32[($18_1 + 80 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$27
        }
        HEAPF64[((HEAP32[($18_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
        HEAP32[($18_1 + 80 | 0) >> 2] = (HEAP32[($18_1 + 80 | 0) >> 2] | 0) + 1 | 0;
        continue label$28;
       };
      }
      HEAPF64[((HEAP32[($18_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($18_1 + 32 | 0) >> 3] / Math_sqrt(+HEAPF64[($18_1 + 40 | 0) >> 3]);
      HEAPF64[((HEAP32[($18_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($18_1 + 96 | 0) >> 2] = (HEAP32[($18_1 + 96 | 0) >> 2] | 0) + 1 | 0;
      label$29 : {
       if (!((HEAP32[($18_1 + 96 | 0) >> 2] | 0 | 0) >= (HEAP32[($18_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$29
       }
       HEAP32[($18_1 + 96 | 0) >> 2] = 0;
      }
      $328_1 = HEAP32[($18_1 + 144 | 0) >> 2] | 0;
      HEAPF64[$328_1 >> 3] = +HEAPF64[$328_1 >> 3] + +HEAPF64[($18_1 + 32 | 0) >> 3] * +HEAPF64[($18_1 + 32 | 0) >> 3] / +HEAPF64[($18_1 + 40 | 0) >> 3];
      $511_1 = +$729(+(+HEAPF64[($18_1 + 40 | 0) >> 3]));
      $329_1 = HEAP32[($18_1 + 148 | 0) >> 2] | 0;
      HEAPF64[$329_1 >> 3] = +HEAPF64[$329_1 >> 3] + $511_1;
      HEAP32[(HEAP32[($18_1 + 124 | 0) >> 2] | 0) >> 2] = (HEAP32[(HEAP32[($18_1 + 124 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($18_1 + 108 | 0) >> 2] = (HEAP32[($18_1 + 108 | 0) >> 2] | 0) + 1 | 0;
      continue label$7;
     };
    }
    label$30 : {
     if (HEAP32[($18_1 + 92 | 0) >> 2] | 0) {
      break label$30
     }
     HEAP32[(HEAP32[($18_1 + 120 | 0) >> 2] | 0) >> 2] = HEAP32[($18_1 + 160 | 0) >> 2] | 0;
    }
    break label$4;
   }
   HEAP32[($18_1 + 108 | 0) >> 2] = 0;
   HEAP32[(HEAP32[($18_1 + 120 | 0) >> 2] | 0) >> 2] = HEAP32[($18_1 + 108 | 0) >> 2] | 0;
   HEAP32[($18_1 + 76 | 0) >> 2] = HEAP32[($18_1 + 108 | 0) >> 2] | 0;
   label$31 : {
    label$32 : while (1) {
     if (!((HEAP32[($18_1 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$31
     }
     HEAPF64[($18_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($18_1 + 72 | 0) >> 2] = HEAP32[($18_1 + 76 | 0) >> 2] | 0;
     label$33 : {
      if (!(HEAP32[($18_1 + 188 | 0) >> 2] | 0)) {
       break label$33
      }
      HEAP32[($18_1 + 104 | 0) >> 2] = 0;
      label$34 : {
       label$35 : while (1) {
        if (!((HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 188 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$34
        }
        HEAP32[($18_1 + 72 | 0) >> 2] = (HEAP32[($18_1 + 72 | 0) >> 2] | 0) + -1 | 0;
        label$36 : {
         if (!((HEAP32[($18_1 + 72 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
          break label$36
         }
         HEAPF64[($18_1 + 16 | 0) >> 3] = +HEAPF64[($18_1 + 16 | 0) >> 3] - +HEAPF64[((HEAP32[($18_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($18_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 72 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        }
        HEAP32[($18_1 + 104 | 0) >> 2] = (HEAP32[($18_1 + 104 | 0) >> 2] | 0) + 1 | 0;
        continue label$35;
       };
      }
     }
     label$37 : {
      if (!(HEAP32[($18_1 + 184 | 0) >> 2] | 0)) {
       break label$37
      }
      HEAP32[($18_1 + 104 | 0) >> 2] = 0;
      label$38 : {
       label$39 : while (1) {
        if (!((HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$38
        }
        HEAP32[($18_1 + 96 | 0) >> 2] = (HEAP32[($18_1 + 96 | 0) >> 2] | 0) + -1 | 0;
        label$40 : {
         if (!((HEAP32[($18_1 + 96 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
          break label$40
         }
         HEAP32[($18_1 + 96 | 0) >> 2] = (HEAP32[($18_1 + 184 | 0) >> 2] | 0) - 1 | 0;
        }
        HEAPF64[($18_1 + 16 | 0) >> 3] = +HEAPF64[($18_1 + 16 | 0) >> 3] - +HEAPF64[((HEAP32[($18_1 + 176 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($18_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($18_1 + 108 | 0) >> 2] = (HEAP32[($18_1 + 108 | 0) >> 2] | 0) + 1 | 0;
        continue label$39;
       };
      }
     }
     HEAPF64[((HEAP32[($18_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($18_1 + 16 | 0) >> 3];
     HEAPF64[((HEAP32[($18_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($18_1 + 16 | 0) >> 3];
     $435_1 = HEAP32[($18_1 + 144 | 0) >> 2] | 0;
     HEAPF64[$435_1 >> 3] = +HEAPF64[$435_1 >> 3] + +HEAPF64[($18_1 + 16 | 0) >> 3] * +HEAPF64[($18_1 + 16 | 0) >> 3];
     HEAP32[(HEAP32[($18_1 + 124 | 0) >> 2] | 0) >> 2] = (HEAP32[(HEAP32[($18_1 + 124 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($18_1 + 96 | 0) >> 2] = (HEAP32[($18_1 + 96 | 0) >> 2] | 0) + 1 | 0;
     label$41 : {
      if (!((HEAP32[($18_1 + 96 | 0) >> 2] | 0 | 0) >= (HEAP32[($18_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$41
      }
      HEAP32[($18_1 + 96 | 0) >> 2] = 0;
     }
     HEAP32[($18_1 + 76 | 0) >> 2] = (HEAP32[($18_1 + 76 | 0) >> 2] | 0) + 1 | 0;
     continue label$32;
    };
   }
  }
  label$42 : {
   if (HEAP32[(HEAP32[($18_1 + 124 | 0) >> 2] | 0) >> 2] | 0) {
    break label$42
   }
   HEAP32[(HEAP32[($18_1 + 124 | 0) >> 2] | 0) >> 2] = 1;
  }
  $863(HEAP32[($18_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $18_1 + 192 | 0;
  return;
 }
 
 function $58($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $14_1 = 0, $1558 = 0.0, $585_1 = 0, $725_1 = 0, $888_1 = 0, $1003 = 0, $1065 = 0, $1192 = 0, $1303 = 0, $1332 = 0, $1379 = 0, $1528 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $14_1 = global$0 - 384 | 0;
  global$0 = $14_1;
  HEAP32[($14_1 + 376 | 0) >> 2] = $0_1;
  HEAP32[($14_1 + 372 | 0) >> 2] = $1_1;
  HEAP32[($14_1 + 368 | 0) >> 2] = $2_1;
  HEAP32[($14_1 + 364 | 0) >> 2] = $3_1;
  HEAP32[($14_1 + 360 | 0) >> 2] = $4_1;
  HEAP32[($14_1 + 356 | 0) >> 2] = $5_1;
  HEAP32[($14_1 + 352 | 0) >> 2] = $6_1;
  HEAP32[($14_1 + 348 | 0) >> 2] = $7_1;
  HEAP32[($14_1 + 344 | 0) >> 2] = $8_1;
  HEAP32[($14_1 + 340 | 0) >> 2] = $9_1;
  HEAP32[($14_1 + 336 | 0) >> 2] = $10_1;
  HEAP32[($14_1 + 332 | 0) >> 2] = $11_1;
  HEAP32[($14_1 + 324 | 0) >> 2] = (HEAP32[($14_1 + 372 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   if (!((HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 376 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($14_1 + 324 | 0) >> 2] = HEAP32[($14_1 + 376 | 0) >> 2] | 0;
  }
  HEAP32[($14_1 + 320 | 0) >> 2] = (Math_imul(HEAP32[($14_1 + 324 | 0) >> 2] | 0, (HEAP32[($14_1 + 324 | 0) >> 2] | 0) + 1 | 0) | 0) / (2 | 0) | 0;
  HEAP32[($14_1 + 312 | 0) >> 2] = (Math_imul(HEAP32[($14_1 + 320 | 0) >> 2] | 0, (HEAP32[($14_1 + 320 | 0) >> 2] | 0) - 1 | 0) | 0) / (2 | 0) | 0;
  HEAP32[($14_1 + 308 | 0) >> 2] = (HEAP32[($14_1 + 324 | 0) >> 2] | 0) + (HEAP32[($14_1 + 368 | 0) >> 2] | 0) | 0;
  HEAP32[($14_1 + 304 | 0) >> 2] = (Math_imul(HEAP32[($14_1 + 308 | 0) >> 2] | 0, (HEAP32[($14_1 + 308 | 0) >> 2] | 0) + 1 | 0) | 0) / (2 | 0) | 0;
  HEAPF64[($14_1 + 272 | 0) >> 3] = +(0 | 0);
  HEAPF64[($14_1 + 264 | 0) >> 3] = 1.0;
  HEAPF64[($14_1 + 256 | 0) >> 3] = 2.0;
  HEAP32[($14_1 + 328 | 0) >> 2] = 0;
  label$2 : {
   if (!((HEAP32[($14_1 + 376 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($14_1 + 328 | 0) >> 2] = 1;
  }
  label$3 : {
   if (!((HEAP32[($14_1 + 372 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($14_1 + 328 | 0) >> 2] = (HEAP32[($14_1 + 328 | 0) >> 2] | 0) + 2 | 0;
  }
  label$4 : {
   if (Math_imul(HEAP32[($14_1 + 376 | 0) >> 2] | 0, HEAP32[($14_1 + 376 | 0) >> 2] | 0) + Math_imul(HEAP32[($14_1 + 372 | 0) >> 2] | 0, HEAP32[($14_1 + 372 | 0) >> 2] | 0) | 0) {
    break label$4
   }
   HEAP32[($14_1 + 328 | 0) >> 2] = 4;
  }
  label$5 : {
   if (!((HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[($14_1 + 328 | 0) >> 2] = 8;
  }
  label$6 : {
   if (!((HEAP32[($14_1 + 340 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[($14_1 + 328 | 0) >> 2] = 11;
  }
  label$7 : {
   label$8 : {
    if (!(HEAP32[($14_1 + 328 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($14_1 + 380 | 0) >> 2] = HEAP32[($14_1 + 328 | 0) >> 2] | 0;
    break label$7;
   }
   (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862((HEAP32[($14_1 + 308 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 300 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862((HEAP32[($14_1 + 304 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 296 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862((HEAP32[($14_1 + 320 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 292 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862((HEAP32[($14_1 + 308 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 288 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862((HEAP32[($14_1 + 320 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 284 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($14_1 + 164 | 0) >> 2] = 0;
   label$9 : {
    label$10 : while (1) {
     if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 308 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$9
     }
     HEAPF64[((HEAP32[($14_1 + 300 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 272 | 0) >> 3];
     HEAPF64[((HEAP32[($14_1 + 288 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 272 | 0) >> 3];
     HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
     continue label$10;
    };
   }
   HEAP32[($14_1 + 164 | 0) >> 2] = 0;
   label$11 : {
    label$12 : while (1) {
     if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 304 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$11
     }
     HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 272 | 0) >> 3];
     HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
     continue label$12;
    };
   }
   HEAP32[($14_1 + 164 | 0) >> 2] = 0;
   label$13 : {
    label$14 : while (1) {
     if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 320 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$13
     }
     HEAPF64[((HEAP32[($14_1 + 292 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 272 | 0) >> 3];
     HEAPF64[((HEAP32[($14_1 + 284 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 272 | 0) >> 3];
     HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
     continue label$14;
    };
   }
   HEAPF64[(HEAP32[($14_1 + 300 | 0) >> 2] | 0) >> 3] = +HEAPF64[($14_1 + 272 | 0) >> 3];
   HEAPF64[(HEAP32[($14_1 + 292 | 0) >> 2] | 0) >> 3] = +HEAPF64[($14_1 + 264 | 0) >> 3];
   label$15 : {
    label$16 : {
     if (!((HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$16
     }
     HEAPF64[(HEAP32[($14_1 + 296 | 0) >> 2] | 0) >> 3] = 1.0 / (1.0 - +HEAPF64[(HEAP32[($14_1 + 364 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($14_1 + 364 | 0) >> 2] | 0) >> 3]);
     break label$15;
    }
    $54(HEAP32[($14_1 + 376 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 372 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 364 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 360 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 300 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 296 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 292 | 0) >> 2] | 0 | 0) | 0;
   }
   HEAP32[($14_1 + 152 | 0) >> 2] = (HEAP32[($14_1 + 352 | 0) >> 2] | 0) - (HEAP32[($14_1 + 368 | 0) >> 2] | 0) | 0;
   label$17 : {
    if (!(HEAP32[($14_1 + 368 | 0) >> 2] | 0)) {
     break label$17
    }
    HEAP32[($14_1 + 160 | 0) >> 2] = 1;
    label$18 : {
     label$19 : while (1) {
      if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$18
      }
      HEAP32[($14_1 + 148 | 0) >> 2] = (HEAP32[($14_1 + 352 | 0) >> 2] | 0) - (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0;
      HEAPF64[((HEAP32[($14_1 + 288 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 348 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 148 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
      continue label$19;
     };
    }
    HEAP32[($14_1 + 164 | 0) >> 2] = 1;
    label$20 : {
     label$21 : while (1) {
      if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$20
      }
      HEAPF64[($14_1 + 248 | 0) >> 3] = +HEAPF64[($14_1 + 272 | 0) >> 3];
      HEAP32[($14_1 + 316 | 0) >> 2] = 1;
      label$22 : {
       label$23 : while (1) {
        if (!((HEAP32[($14_1 + 316 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$22
        }
        HEAP32[($14_1 + 144 | 0) >> 2] = ((HEAP32[($14_1 + 368 | 0) >> 2] | 0) + (HEAP32[($14_1 + 164 | 0) >> 2] | 0) | 0) - (HEAP32[($14_1 + 316 | 0) >> 2] | 0) | 0;
        HEAPF64[($14_1 + 248 | 0) >> 3] = +HEAPF64[($14_1 + 248 | 0) >> 3] - +HEAPF64[((HEAP32[($14_1 + 356 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 348 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 144 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($14_1 + 316 | 0) >> 2] = (HEAP32[($14_1 + 316 | 0) >> 2] | 0) + 1 | 0;
        continue label$23;
       };
      }
      HEAP32[($14_1 + 140 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + (HEAP32[($14_1 + 368 | 0) >> 2] | 0) | 0;
      HEAPF64[((HEAP32[($14_1 + 348 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 164 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 348 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 140 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[($14_1 + 248 | 0) >> 3];
      HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
      continue label$21;
     };
    }
   }
   $1558 = +HEAPF64[($14_1 + 272 | 0) >> 3];
   HEAPF64[($14_1 + 224 | 0) >> 3] = $1558;
   HEAPF64[($14_1 + 232 | 0) >> 3] = $1558;
   HEAPF64[($14_1 + 240 | 0) >> 3] = -1.0;
   HEAP32[($14_1 + 136 | 0) >> 2] = 1;
   HEAP32[($14_1 + 132 | 0) >> 2] = 0;
   HEAP32[($14_1 + 128 | 0) >> 2] = 0;
   $57(HEAP32[($14_1 + 376 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 372 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 364 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 360 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 300 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 296 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 292 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 348 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 344 | 0) >> 2] | 0 | 0, $14_1 + 232 | 0 | 0, $14_1 + 224 | 0 | 0, HEAP32[($14_1 + 136 | 0) >> 2] | 0 | 0, +(+HEAPF64[($14_1 + 240 | 0) >> 3]), $14_1 + 128 | 0 | 0, $14_1 + 132 | 0 | 0);
   HEAPF64[($14_1 + 216 | 0) >> 3] = +HEAPF64[($14_1 + 272 | 0) >> 3];
   HEAP32[($14_1 + 160 | 0) >> 2] = 0;
   label$24 : {
    label$25 : while (1) {
     if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$24
     }
     HEAPF64[($14_1 + 216 | 0) >> 3] = +HEAPF64[($14_1 + 216 | 0) >> 3] + +HEAPF64[((HEAP32[($14_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 160 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 160 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
     continue label$25;
    };
   }
   HEAPF64[($14_1 + 216 | 0) >> 3] = +HEAPF64[($14_1 + 216 | 0) >> 3] / +(HEAP32[($14_1 + 152 | 0) >> 2] | 0 | 0);
   label$26 : {
    if (!(HEAP32[($14_1 + 368 | 0) >> 2] | 0)) {
     break label$26
    }
    HEAP32[($14_1 + 164 | 0) >> 2] = 1;
    label$27 : {
     label$28 : while (1) {
      if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 320 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$27
      }
      HEAPF64[((HEAP32[($14_1 + 284 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 164 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 164 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
      continue label$28;
     };
    }
    HEAP32[($14_1 + 164 | 0) >> 2] = 1;
    label$29 : {
     label$30 : while (1) {
      if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 304 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$29
      }
      HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 164 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 272 | 0) >> 3];
      HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
      continue label$30;
     };
    }
    HEAP32[($14_1 + 124 | 0) >> 2] = 0;
    HEAP32[($14_1 + 160 | 0) >> 2] = 1;
    label$31 : {
     label$32 : while (1) {
      if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$31
      }
      HEAP32[($14_1 + 316 | 0) >> 2] = Math_imul((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0, ((HEAP32[($14_1 + 368 | 0) >> 2] | 0) + (HEAP32[($14_1 + 324 | 0) >> 2] | 0) | 0) + 1 | 0) - ((Math_imul((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0, HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0) / (2 | 0) | 0) | 0;
      HEAP32[($14_1 + 164 | 0) >> 2] = HEAP32[($14_1 + 160 | 0) >> 2] | 0;
      label$33 : {
       label$34 : while (1) {
        if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$33
        }
        HEAP32[($14_1 + 124 | 0) >> 2] = (HEAP32[($14_1 + 124 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($14_1 + 316 | 0) >> 2] = (HEAP32[($14_1 + 316 | 0) >> 2] | 0) + 1 | 0;
        HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 284 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 124 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
        continue label$34;
       };
      }
      HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
      continue label$32;
     };
    }
    HEAP32[($14_1 + 160 | 0) >> 2] = 1;
    label$35 : {
     label$36 : while (1) {
      if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$35
      }
      HEAP32[($14_1 + 120 | 0) >> 2] = (HEAP32[($14_1 + 324 | 0) >> 2] | 0) + (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0;
      HEAPF64[((HEAP32[($14_1 + 300 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 120 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 288 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
      continue label$36;
     };
    }
   }
   HEAP32[($14_1 + 116 | 0) >> 2] = (HEAP32[($14_1 + 324 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($14_1 + 112 | 0) >> 2] = (HEAP32[($14_1 + 324 | 0) >> 2] | 0) - 1 | 0;
   HEAP32[($14_1 + 100 | 0) >> 2] = (HEAP32[($14_1 + 368 | 0) >> 2] | 0) - 1 | 0;
   HEAP32[($14_1 + 108 | 0) >> 2] = (HEAP32[($14_1 + 308 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($14_1 + 104 | 0) >> 2] = (HEAP32[($14_1 + 108 | 0) >> 2] | 0) - 1 | 0;
   HEAP32[($14_1 + 96 | 0) >> 2] = ((HEAP32[($14_1 + 368 | 0) >> 2] | 0) << 1 | 0) + 1 | 0;
   HEAP32[($14_1 + 92 | 0) >> 2] = (HEAP32[($14_1 + 96 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($14_1 + 88 | 0) >> 2] = (HEAP32[($14_1 + 108 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($14_1 + 84 | 0) >> 2] = (HEAP32[($14_1 + 308 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($14_1 + 80 | 0) >> 2] = ((HEAP32[($14_1 + 368 | 0) >> 2] | 0) << 1 | 0) + (HEAP32[($14_1 + 324 | 0) >> 2] | 0) | 0;
   HEAP32[($14_1 + 76 | 0) >> 2] = (Math_imul(HEAP32[($14_1 + 324 | 0) >> 2] | 0, (HEAP32[($14_1 + 80 | 0) >> 2] | 0) + 1 | 0) | 0) / (2 | 0) | 0;
   HEAP32[($14_1 + 72 | 0) >> 2] = (HEAP32[($14_1 + 76 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($14_1 + 68 | 0) >> 2] = (HEAP32[($14_1 + 108 | 0) >> 2] | 0) + 2 | 0;
   HEAP32[($14_1 + 64 | 0) >> 2] = (Math_imul(HEAP32[($14_1 + 324 | 0) >> 2] | 0, (HEAP32[($14_1 + 88 | 0) >> 2] | 0) - (HEAP32[($14_1 + 324 | 0) >> 2] | 0) | 0) | 0) / (2 | 0) | 0;
   HEAP32[($14_1 + 60 | 0) >> 2] = 1;
   label$37 : {
    label$38 : while (1) {
     if (!((HEAP32[($14_1 + 60 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 340 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$37
     }
     HEAPF64[($14_1 + 208 | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 300 | 0) >> 2] | 0) >> 3];
     label$39 : {
      if (!((HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$39
      }
      HEAP32[($14_1 + 164 | 0) >> 2] = 1;
      label$40 : {
       label$41 : while (1) {
        if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$40
        }
        HEAPF64[((HEAP32[($14_1 + 300 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 164 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 300 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
        continue label$41;
       };
      }
     }
     HEAPF64[((HEAP32[($14_1 + 300 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 324 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 272 | 0) >> 3];
     label$42 : {
      if (!(HEAP32[($14_1 + 376 | 0) >> 2] | 0)) {
       break label$42
      }
      HEAP32[($14_1 + 160 | 0) >> 2] = 1;
      label$43 : {
       label$44 : while (1) {
        if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 376 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$43
        }
        $585_1 = (HEAP32[($14_1 + 300 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
        HEAPF64[$585_1 >> 3] = +HEAPF64[$585_1 >> 3] + +HEAPF64[((HEAP32[($14_1 + 364 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($14_1 + 208 | 0) >> 3];
        HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
        continue label$44;
       };
      }
     }
     label$45 : {
      if (!(HEAP32[($14_1 + 368 | 0) >> 2] | 0)) {
       break label$45
      }
      HEAP32[($14_1 + 160 | 0) >> 2] = 1;
      label$46 : {
       label$47 : while (1) {
        if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$46
        }
        HEAP32[($14_1 + 120 | 0) >> 2] = (HEAP32[($14_1 + 324 | 0) >> 2] | 0) + (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0;
        HEAPF64[($14_1 + 208 | 0) >> 3] = +HEAPF64[($14_1 + 208 | 0) >> 3] + +HEAPF64[((HEAP32[($14_1 + 356 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 300 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 120 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
        continue label$47;
       };
      }
      label$48 : {
       if (!((HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
        break label$48
       }
       HEAP32[($14_1 + 164 | 0) >> 2] = 1;
       label$49 : {
        label$50 : while (1) {
         if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$49
         }
         HEAP32[($14_1 + 56 | 0) >> 2] = (HEAP32[($14_1 + 308 | 0) >> 2] | 0) - (HEAP32[($14_1 + 164 | 0) >> 2] | 0) | 0;
         HEAPF64[((HEAP32[($14_1 + 300 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 300 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 56 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
         continue label$50;
        };
       }
      }
      HEAPF64[((HEAP32[($14_1 + 300 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 116 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 208 | 0) >> 3];
     }
     label$51 : {
      if (!(HEAP32[($14_1 + 368 | 0) >> 2] | 0)) {
       break label$51
      }
      HEAP32[($14_1 + 164 | 0) >> 2] = 1;
      label$52 : {
       label$53 : while (1) {
        if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$52
        }
        HEAPF64[((HEAP32[($14_1 + 288 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 164 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 272 | 0) >> 3];
        HEAP32[($14_1 + 160 | 0) >> 2] = 1;
        label$54 : {
         label$55 : while (1) {
          if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$54
          }
          (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $91(HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 156 | 0) >> 2] = wasm2js_i32$1;
          (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $92(HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 316 | 0) >> 2] = wasm2js_i32$1;
          HEAP32[($14_1 + 52 | 0) >> 2] = (((HEAP32[($14_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 156 | 0) >> 2] | 0) - (HEAP32[($14_1 + 316 | 0) >> 2] | 0) | 0) | 0) + 1 | 0) + ((Math_imul((HEAP32[($14_1 + 316 | 0) >> 2] | 0) - 1 | 0, (HEAP32[($14_1 + 92 | 0) >> 2] | 0) - (HEAP32[($14_1 + 316 | 0) >> 2] | 0) | 0) | 0) / (2 | 0) | 0) | 0;
          $725_1 = (HEAP32[($14_1 + 288 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 164 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
          HEAPF64[$725_1 >> 3] = +HEAPF64[$725_1 >> 3] + +HEAPF64[((HEAP32[($14_1 + 356 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 52 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
          HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
          continue label$55;
         };
        }
        HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
        continue label$53;
       };
      }
      label$56 : {
       if (!((HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
        break label$56
       }
       HEAP32[($14_1 + 160 | 0) >> 2] = 1;
       label$57 : {
        label$58 : while (1) {
         if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$57
         }
         HEAP32[($14_1 + 52 | 0) >> 2] = (HEAP32[($14_1 + 368 | 0) >> 2] | 0) - (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0;
         HEAP32[($14_1 + 48 | 0) >> 2] = ((Math_imul((HEAP32[($14_1 + 52 | 0) >> 2] | 0) - 1 | 0, (HEAP32[($14_1 + 92 | 0) >> 2] | 0) - (HEAP32[($14_1 + 52 | 0) >> 2] | 0) | 0) | 0) / (2 | 0) | 0) + (HEAP32[($14_1 + 76 | 0) >> 2] | 0) | 0;
         HEAP32[($14_1 + 44 | 0) >> 2] = ((Math_imul(HEAP32[($14_1 + 52 | 0) >> 2] | 0, (HEAP32[($14_1 + 96 | 0) >> 2] | 0) - (HEAP32[($14_1 + 52 | 0) >> 2] | 0) | 0) | 0) / (2 | 0) | 0) + (HEAP32[($14_1 + 76 | 0) >> 2] | 0) | 0;
         HEAP32[($14_1 + 164 | 0) >> 2] = 1;
         label$59 : {
          label$60 : while (1) {
           if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$59
           }
           HEAP32[($14_1 + 48 | 0) >> 2] = (HEAP32[($14_1 + 48 | 0) >> 2] | 0) + 1 | 0;
           HEAP32[($14_1 + 44 | 0) >> 2] = (HEAP32[($14_1 + 44 | 0) >> 2] | 0) + 1 | 0;
           HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 44 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 48 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
           continue label$60;
          };
         }
         HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
         continue label$58;
        };
       }
       HEAP32[($14_1 + 160 | 0) >> 2] = 1;
       label$61 : {
        label$62 : while (1) {
         if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$61
         }
         HEAP32[($14_1 + 40 | 0) >> 2] = (HEAP32[($14_1 + 72 | 0) >> 2] | 0) + (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0;
         HEAP32[($14_1 + 120 | 0) >> 2] = (HEAP32[($14_1 + 324 | 0) >> 2] | 0) + (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0;
         HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 40 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 288 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 120 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
         continue label$62;
        };
       }
      }
      HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 72 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 296 | 0) >> 2] | 0) >> 3];
      HEAP32[($14_1 + 164 | 0) >> 2] = 1;
      label$63 : {
       label$64 : while (1) {
        if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$63
        }
        HEAP32[($14_1 + 36 | 0) >> 2] = (HEAP32[($14_1 + 324 | 0) >> 2] | 0) + (HEAP32[($14_1 + 164 | 0) >> 2] | 0) | 0;
        $888_1 = (HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 72 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
        HEAPF64[$888_1 >> 3] = +HEAPF64[$888_1 >> 3] + +HEAPF64[((HEAP32[($14_1 + 356 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 164 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * (+HEAPF64[((HEAP32[($14_1 + 288 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 164 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[($14_1 + 256 | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 36 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3]);
        HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
        continue label$64;
       };
      }
      HEAP32[($14_1 + 164 | 0) >> 2] = 1;
      label$65 : {
       label$66 : while (1) {
        if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$65
        }
        HEAP32[($14_1 + 36 | 0) >> 2] = (HEAP32[($14_1 + 324 | 0) >> 2] | 0) + (HEAP32[($14_1 + 164 | 0) >> 2] | 0) | 0;
        HEAPF64[((HEAP32[($14_1 + 288 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 164 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 36 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
        continue label$66;
       };
      }
      HEAP32[($14_1 + 160 | 0) >> 2] = 1;
      label$67 : {
       label$68 : while (1) {
        if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$67
        }
        HEAP32[($14_1 + 32 | 0) >> 2] = ((Math_imul(HEAP32[($14_1 + 160 | 0) >> 2] | 0, (HEAP32[($14_1 + 104 | 0) >> 2] | 0) - (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0) | 0) / (2 | 0) | 0) + (HEAP32[($14_1 + 324 | 0) >> 2] | 0) | 0;
        HEAP32[($14_1 + 28 | 0) >> 2] = ((Math_imul((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0, (HEAP32[($14_1 + 108 | 0) >> 2] | 0) - (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0) | 0) / (2 | 0) | 0) + (HEAP32[($14_1 + 324 | 0) >> 2] | 0) | 0;
        HEAP32[($14_1 + 164 | 0) >> 2] = 1;
        label$69 : {
         label$70 : while (1) {
          if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$69
          }
          HEAP32[($14_1 + 24 | 0) >> 2] = (HEAP32[($14_1 + 32 | 0) >> 2] | 0) + (HEAP32[($14_1 + 164 | 0) >> 2] | 0) | 0;
          HEAP32[($14_1 + 316 | 0) >> 2] = (HEAP32[($14_1 + 28 | 0) >> 2] | 0) + (HEAP32[($14_1 + 164 | 0) >> 2] | 0) | 0;
          HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 364 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 288 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 164 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
          label$71 : {
           if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) != (HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$71
           }
           $1003 = (HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
           HEAPF64[$1003 >> 3] = +HEAPF64[$1003 >> 3] + +HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 24 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
          }
          HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
          continue label$70;
         };
        }
        HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
        continue label$68;
       };
      }
      HEAP32[($14_1 + 160 | 0) >> 2] = 1;
      label$72 : {
       label$73 : while (1) {
        if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$72
        }
        HEAPF64[((HEAP32[($14_1 + 288 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 272 | 0) >> 3];
        HEAP32[($14_1 + 20 | 0) >> 2] = ((Math_imul(HEAP32[($14_1 + 160 | 0) >> 2] | 0, (HEAP32[($14_1 + 88 | 0) >> 2] | 0) - (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0) | 0) / (2 | 0) | 0) - (HEAP32[($14_1 + 368 | 0) >> 2] | 0) | 0;
        HEAP32[($14_1 + 164 | 0) >> 2] = 1;
        label$74 : {
         label$75 : while (1) {
          if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$74
          }
          HEAP32[($14_1 + 20 | 0) >> 2] = (HEAP32[($14_1 + 20 | 0) >> 2] | 0) + 1 | 0;
          $1065 = (HEAP32[($14_1 + 288 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
          HEAPF64[$1065 >> 3] = +HEAPF64[$1065 >> 3] + +HEAPF64[((HEAP32[($14_1 + 356 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 164 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 20 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
          HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
          continue label$75;
         };
        }
        HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
        continue label$73;
       };
      }
      label$76 : {
       if (!((HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
        break label$76
       }
       HEAP32[($14_1 + 160 | 0) >> 2] = 1;
       label$77 : {
        label$78 : while (1) {
         if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$77
         }
         HEAP32[($14_1 + 316 | 0) >> 2] = (Math_imul(HEAP32[($14_1 + 160 | 0) >> 2] | 0, HEAP32[($14_1 + 84 | 0) >> 2] | 0) - ((Math_imul(HEAP32[($14_1 + 160 | 0) >> 2] | 0, (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0) | 0) / (2 | 0) | 0) | 0) + 1 | 0;
         HEAP32[($14_1 + 164 | 0) >> 2] = 1;
         label$79 : {
          label$80 : while (1) {
           if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$79
           }
           HEAP32[($14_1 + 316 | 0) >> 2] = (HEAP32[($14_1 + 316 | 0) >> 2] | 0) + -1 | 0;
           HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 316 | 0) >> 2] | 0) - 2 | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
           continue label$80;
          };
         }
         HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
         continue label$78;
        };
       }
      }
      HEAP32[($14_1 + 160 | 0) >> 2] = 1;
      label$81 : {
       label$82 : while (1) {
        if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$81
        }
        HEAP32[($14_1 + 316 | 0) >> 2] = (((Math_imul((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0, (HEAP32[($14_1 + 108 | 0) >> 2] | 0) - (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0) | 0) / (2 | 0) | 0) + (HEAP32[($14_1 + 324 | 0) >> 2] | 0) | 0) + 1 | 0;
        HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 288 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($14_1 + 364 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[(HEAP32[($14_1 + 296 | 0) >> 2] | 0) >> 3];
        label$83 : {
         if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$83
         }
         $1192 = (HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 316 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
         HEAPF64[$1192 >> 3] = +HEAPF64[$1192 >> 3] + +HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 160 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        }
        HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
        continue label$82;
       };
      }
     }
     HEAP32[($14_1 + 164 | 0) >> 2] = 0;
     label$84 : {
      label$85 : while (1) {
       if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$84
       }
       HEAPF64[((HEAP32[($14_1 + 288 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
       continue label$85;
      };
     }
     HEAP32[($14_1 + 124 | 0) >> 2] = 0;
     HEAPF64[($14_1 + 200 | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 296 | 0) >> 2] | 0) >> 3];
     HEAP32[($14_1 + 160 | 0) >> 2] = 1;
     label$86 : {
      label$87 : while (1) {
       if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$86
       }
       HEAPF64[($14_1 + 192 | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 364 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[($14_1 + 184 | 0) >> 3] = +HEAPF64[($14_1 + 192 | 0) >> 3] * +HEAPF64[($14_1 + 200 | 0) >> 3];
       HEAP32[($14_1 + 12 | 0) >> 2] = (Math_imul((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0, (HEAP32[($14_1 + 68 | 0) >> 2] | 0) - (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0) | 0) / (2 | 0) | 0;
       HEAP32[($14_1 + 16 | 0) >> 2] = (Math_imul(HEAP32[($14_1 + 160 | 0) >> 2] | 0, (HEAP32[($14_1 + 88 | 0) >> 2] | 0) - (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0) | 0) / (2 | 0) | 0;
       HEAP32[($14_1 + 164 | 0) >> 2] = HEAP32[($14_1 + 160 | 0) >> 2] | 0;
       label$88 : {
        label$89 : while (1) {
         if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$88
         }
         HEAP32[($14_1 + 124 | 0) >> 2] = (HEAP32[($14_1 + 124 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[($14_1 + 12 | 0) >> 2] = (HEAP32[($14_1 + 12 | 0) >> 2] | 0) + 1 | 0;
         HEAPF64[($14_1 + 176 | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 364 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 164 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 12 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 292 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 124 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[($14_1 + 176 | 0) >> 3] * +HEAPF64[($14_1 + 184 | 0) >> 3];
         label$90 : {
          if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$90
          }
          $1303 = (HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 12 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
          HEAPF64[$1303 >> 3] = +HEAPF64[$1303 >> 3] + +HEAPF64[((HEAP32[($14_1 + 288 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 160 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($14_1 + 176 | 0) >> 3];
         }
         label$91 : {
          if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) != (HEAP32[($14_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$91
          }
          HEAP32[($14_1 + 16 | 0) >> 2] = (HEAP32[($14_1 + 16 | 0) >> 2] | 0) + 1 | 0;
          $1332 = (HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 12 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
          HEAPF64[$1332 >> 3] = +HEAPF64[$1332 >> 3] + (+HEAPF64[((HEAP32[($14_1 + 288 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($14_1 + 192 | 0) >> 3] + +HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 16 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3]);
         }
         HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
         continue label$89;
        };
       }
       HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
       continue label$87;
      };
     }
     HEAPF64[((HEAP32[($14_1 + 336 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 60 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 300 | 0) >> 2] | 0) >> 3];
     label$92 : {
      if (!(HEAP32[($14_1 + 368 | 0) >> 2] | 0)) {
       break label$92
      }
      HEAP32[($14_1 + 160 | 0) >> 2] = 1;
      label$93 : {
       label$94 : while (1) {
        if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$93
        }
        HEAP32[($14_1 + 120 | 0) >> 2] = (HEAP32[($14_1 + 324 | 0) >> 2] | 0) + (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0;
        $1379 = (HEAP32[($14_1 + 336 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 60 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
        HEAPF64[$1379 >> 3] = +HEAPF64[$1379 >> 3] + +HEAPF64[((HEAP32[($14_1 + 300 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 120 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 356 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
        continue label$94;
       };
      }
     }
     HEAPF64[($14_1 + 168 | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 296 | 0) >> 2] | 0) >> 3];
     label$95 : {
      if (!(HEAP32[($14_1 + 368 | 0) >> 2] | 0)) {
       break label$95
      }
      HEAP32[($14_1 + 160 | 0) >> 2] = 1;
      label$96 : {
       label$97 : while (1) {
        if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$96
        }
        HEAP32[($14_1 + 8 | 0) >> 2] = (HEAP32[($14_1 + 64 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0, (HEAP32[($14_1 + 92 | 0) >> 2] | 0) - (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0) | 0) / (2 | 0) | 0) | 0;
        HEAP32[($14_1 + 120 | 0) >> 2] = (HEAP32[($14_1 + 324 | 0) >> 2] | 0) + (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0;
        HEAPF64[($14_1 + 168 | 0) >> 3] = +HEAPF64[($14_1 + 168 | 0) >> 3] + (+HEAPF64[($14_1 + 256 | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 356 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 120 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 356 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 356 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3]);
        HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
        continue label$97;
       };
      }
      label$98 : {
       if (!((HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
        break label$98
       }
       HEAP32[($14_1 + 160 | 0) >> 2] = 1;
       label$99 : {
        label$100 : while (1) {
         if (!((HEAP32[($14_1 + 160 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$99
         }
         HEAP32[($14_1 + 4 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[$14_1 >> 2] = ((HEAP32[($14_1 + 64 | 0) >> 2] | 0) + 1 | 0) + ((Math_imul((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0, (HEAP32[($14_1 + 92 | 0) >> 2] | 0) - (HEAP32[($14_1 + 160 | 0) >> 2] | 0) | 0) | 0) / (2 | 0) | 0) | 0;
         HEAP32[($14_1 + 164 | 0) >> 2] = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
         label$101 : {
          label$102 : while (1) {
           if (!((HEAP32[($14_1 + 164 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 368 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$101
           }
           HEAP32[$14_1 >> 2] = (HEAP32[$14_1 >> 2] | 0) + 1 | 0;
           HEAPF64[($14_1 + 168 | 0) >> 3] = +HEAPF64[($14_1 + 168 | 0) >> 3] + +HEAPF64[($14_1 + 256 | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 356 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 164 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 356 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 160 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 296 | 0) >> 2] | 0) + (((HEAP32[$14_1 >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($14_1 + 164 | 0) >> 2] = (HEAP32[($14_1 + 164 | 0) >> 2] | 0) + 1 | 0;
           continue label$102;
          };
         }
         HEAP32[($14_1 + 160 | 0) >> 2] = (HEAP32[($14_1 + 160 | 0) >> 2] | 0) + 1 | 0;
         continue label$100;
        };
       }
      }
     }
     HEAPF64[((HEAP32[($14_1 + 332 | 0) >> 2] | 0) + (((HEAP32[($14_1 + 60 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 168 | 0) >> 3] * +HEAPF64[($14_1 + 216 | 0) >> 3];
     HEAP32[($14_1 + 60 | 0) >> 2] = (HEAP32[($14_1 + 60 | 0) >> 2] | 0) + 1 | 0;
     continue label$38;
    };
   }
   $863(HEAP32[($14_1 + 300 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($14_1 + 296 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($14_1 + 292 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($14_1 + 288 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($14_1 + 284 | 0) >> 2] | 0 | 0);
   HEAP32[($14_1 + 380 | 0) >> 2] = HEAP32[($14_1 + 328 | 0) >> 2] | 0;
  }
  $1528 = HEAP32[($14_1 + 380 | 0) >> 2] | 0;
  global$0 = $14_1 + 384 | 0;
  return $1528 | 0;
 }
 
 function $59($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1, $16_1, $17_1, $18_1, $19_1, $20_1, $21_1, $22_1, $23_1, $24_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  $15_1 = $15_1 | 0;
  $16_1 = $16_1 | 0;
  $17_1 = $17_1 | 0;
  $18_1 = $18_1 | 0;
  $19_1 = $19_1 | 0;
  $20_1 = $20_1 | 0;
  $21_1 = $21_1 | 0;
  $22_1 = $22_1 | 0;
  $23_1 = $23_1 | 0;
  $24_1 = $24_1 | 0;
  var $27_1 = 0, $37_1 = 0, $1249 = 0.0, $1224 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $27_1 = global$0 - 240 | 0;
  global$0 = $27_1;
  HEAP32[($27_1 + 232 | 0) >> 2] = $0_1;
  HEAP32[($27_1 + 228 | 0) >> 2] = $1_1;
  HEAP32[($27_1 + 224 | 0) >> 2] = $2_1;
  HEAP32[($27_1 + 220 | 0) >> 2] = $3_1;
  HEAP32[($27_1 + 216 | 0) >> 2] = $4_1;
  HEAP32[($27_1 + 212 | 0) >> 2] = $5_1;
  HEAP32[($27_1 + 208 | 0) >> 2] = $6_1;
  HEAP32[($27_1 + 204 | 0) >> 2] = $7_1;
  HEAP32[($27_1 + 200 | 0) >> 2] = $8_1;
  HEAP32[($27_1 + 196 | 0) >> 2] = $9_1;
  HEAP32[($27_1 + 192 | 0) >> 2] = $10_1;
  HEAP32[($27_1 + 188 | 0) >> 2] = $11_1;
  HEAP32[($27_1 + 184 | 0) >> 2] = $12_1;
  HEAP32[($27_1 + 180 | 0) >> 2] = $13_1;
  HEAP32[($27_1 + 176 | 0) >> 2] = $14_1;
  HEAP32[($27_1 + 172 | 0) >> 2] = $15_1;
  HEAP32[($27_1 + 168 | 0) >> 2] = $16_1;
  HEAP32[($27_1 + 164 | 0) >> 2] = $17_1;
  HEAP32[($27_1 + 160 | 0) >> 2] = $18_1;
  HEAP32[($27_1 + 156 | 0) >> 2] = $19_1;
  HEAP32[($27_1 + 152 | 0) >> 2] = $20_1;
  HEAP32[($27_1 + 148 | 0) >> 2] = $21_1;
  HEAP32[($27_1 + 144 | 0) >> 2] = $22_1;
  HEAP32[($27_1 + 140 | 0) >> 2] = $23_1;
  HEAP32[($27_1 + 136 | 0) >> 2] = $24_1;
  HEAP32[($27_1 + 120 | 0) >> 2] = HEAP32[($27_1 + 228 | 0) >> 2] | 0;
  HEAPF64[($27_1 + 16 | 0) >> 3] = 1.0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($27_1 + 224 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    $37_1 = 0;
    break label$1;
   }
   $37_1 = HEAP32[($27_1 + 168 | 0) >> 2] | 0;
  }
  HEAP32[($27_1 + 112 | 0) >> 2] = $37_1;
  HEAP32[($27_1 + 108 | 0) >> 2] = (HEAP32[($27_1 + 212 | 0) >> 2] | 0) + (HEAP32[($27_1 + 196 | 0) >> 2] | 0) | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if (!((HEAP32[($27_1 + 144 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$5
     }
     (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $60(HEAP32[($27_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 192 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 136 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
     label$6 : {
      if (!((HEAP32[($27_1 + 88 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($27_1 + 236 | 0) >> 2] = HEAP32[($27_1 + 88 | 0) >> 2] | 0;
      break label$3;
     }
     (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $61(HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, $27_1 + 216 | 0 | 0, HEAP32[($27_1 + 184 | 0) >> 2] | 0 | 0, $27_1 + 208 | 0 | 0, HEAP32[($27_1 + 180 | 0) >> 2] | 0 | 0, $27_1 + 200 | 0 | 0, HEAP32[($27_1 + 176 | 0) >> 2] | 0 | 0, $27_1 + 192 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
     label$7 : {
      label$8 : {
       if ((HEAP32[($27_1 + 88 | 0) >> 2] | 0 | 0) == (10 | 0) & 1 | 0) {
        break label$8
       }
       if (!((HEAP32[($27_1 + 88 | 0) >> 2] | 0 | 0) == (12 | 0) & 1 | 0)) {
        break label$7
       }
      }
      HEAP32[($27_1 + 236 | 0) >> 2] = HEAP32[($27_1 + 88 | 0) >> 2] | 0;
      break label$3;
     }
     break label$4;
    }
    label$9 : {
     if (HEAP32[($27_1 + 140 | 0) >> 2] | 0) {
      break label$9
     }
     HEAP32[($27_1 + 132 | 0) >> 2] = 0;
     label$10 : {
      label$11 : while (1) {
       if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 216 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$10
       }
       HEAPF64[((HEAP32[($27_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
       HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
       continue label$11;
      };
     }
     HEAP32[($27_1 + 132 | 0) >> 2] = 0;
     label$12 : {
      label$13 : while (1) {
       if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$12
       }
       HEAPF64[((HEAP32[($27_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
       HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
       continue label$13;
      };
     }
     HEAP32[($27_1 + 132 | 0) >> 2] = 0;
     label$14 : {
      label$15 : while (1) {
       if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 200 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$14
       }
       HEAPF64[((HEAP32[($27_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
       HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
       continue label$15;
      };
     }
     HEAP32[($27_1 + 132 | 0) >> 2] = 0;
     label$16 : {
      label$17 : while (1) {
       if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 192 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$16
       }
       HEAPF64[((HEAP32[($27_1 + 176 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
       HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
       continue label$17;
      };
     }
    }
   }
   (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $862(((HEAP32[($27_1 + 228 | 0) >> 2] | 0) - Math_imul(HEAP32[($27_1 + 204 | 0) >> 2] | 0, HEAP32[($27_1 + 196 | 0) >> 2] | 0) | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
   label$18 : {
    label$19 : {
     if (!((HEAP32[($27_1 + 196 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$19
     }
     (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $223(HEAP32[($27_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 48 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 228 | 0) >> 2] = wasm2js_i32$1;
     break label$18;
    }
    HEAP32[($27_1 + 132 | 0) >> 2] = 0;
    label$20 : {
     label$21 : while (1) {
      if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 228 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$20
      }
      HEAPF64[((HEAP32[($27_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 232 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
      continue label$21;
     };
    }
   }
   (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $862(((HEAP32[($27_1 + 228 | 0) >> 2] | 0) - (HEAP32[($27_1 + 212 | 0) >> 2] | 0) | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 76 | 0) >> 2] = wasm2js_i32$1;
   label$22 : {
    label$23 : {
     if (!((HEAP32[($27_1 + 212 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$23
     }
     (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $222(HEAP32[($27_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 228 | 0) >> 2] = wasm2js_i32$1;
     break label$22;
    }
    HEAP32[($27_1 + 132 | 0) >> 2] = 0;
    label$24 : {
     label$25 : while (1) {
      if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 228 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$24
      }
      HEAPF64[((HEAP32[($27_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
      continue label$25;
     };
    }
   }
   (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($27_1 + 120 | 0) >> 2] | 0) << 3 | 0, (HEAP32[($27_1 + 168 | 0) >> 2] | 0) + 1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 52 | 0) >> 2] = wasm2js_i32$1;
   label$26 : {
    label$27 : {
     if (HEAP32[($27_1 + 108 | 0) >> 2] | 0) {
      break label$27
     }
     if (!((HEAP32[($27_1 + 136 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$27
     }
     HEAP32[($27_1 + 132 | 0) >> 2] = 0;
     label$28 : {
      label$29 : while (1) {
       if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$28
       }
       HEAPF64[((HEAP32[($27_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
       HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
       continue label$29;
      };
     }
     label$30 : {
      if (!((HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$30
      }
      $868((HEAP32[($27_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($27_1 + 224 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[($27_1 + 168 | 0) >> 2] | 0) << 3 | 0, HEAP32[($27_1 + 120 | 0) >> 2] | 0) | 0) | 0;
     }
     HEAP32[($27_1 + 112 | 0) >> 2] = (HEAP32[($27_1 + 112 | 0) >> 2] | 0) + 1 | 0;
     break label$26;
    }
    label$31 : {
     if (!((HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$31
     }
     $868(HEAP32[($27_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 224 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[($27_1 + 112 | 0) >> 2] | 0) << 3 | 0, HEAP32[($27_1 + 120 | 0) >> 2] | 0) | 0) | 0;
    }
   }
   (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($27_1 + 228 | 0) >> 2] | 0) << 3 | 0, (HEAP32[($27_1 + 168 | 0) >> 2] | 0) + 1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
   label$32 : {
    if (!((HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$32
    }
    HEAP32[($27_1 + 100 | 0) >> 2] = HEAP32[($27_1 + 120 | 0) >> 2] | 0;
    label$33 : {
     if (!((HEAP32[($27_1 + 196 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$33
     }
     HEAP32[($27_1 + 100 | 0) >> 2] = (HEAP32[($27_1 + 120 | 0) >> 2] | 0) - Math_imul(HEAP32[($27_1 + 204 | 0) >> 2] | 0, HEAP32[($27_1 + 196 | 0) >> 2] | 0) | 0;
     HEAP32[($27_1 + 132 | 0) >> 2] = 0;
     label$34 : {
      label$35 : while (1) {
       if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$34
       }
       $223((HEAP32[($27_1 + 52 | 0) >> 2] | 0) + (Math_imul(HEAP32[($27_1 + 120 | 0) >> 2] | 0, HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($27_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 204 | 0) >> 2] | 0 | 0, (HEAP32[($27_1 + 64 | 0) >> 2] | 0) + (Math_imul(HEAP32[($27_1 + 100 | 0) >> 2] | 0, HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
       $868((HEAP32[($27_1 + 52 | 0) >> 2] | 0) + (Math_imul(HEAP32[($27_1 + 100 | 0) >> 2] | 0, HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($27_1 + 64 | 0) >> 2] | 0) + (Math_imul(HEAP32[($27_1 + 100 | 0) >> 2] | 0, HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($27_1 + 100 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
       HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
       continue label$35;
      };
     }
    }
    label$36 : {
     if (!((HEAP32[($27_1 + 212 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$36
     }
     HEAP32[($27_1 + 132 | 0) >> 2] = 0;
     label$37 : {
      label$38 : while (1) {
       if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$37
       }
       $222((HEAP32[($27_1 + 52 | 0) >> 2] | 0) + (Math_imul(HEAP32[($27_1 + 100 | 0) >> 2] | 0, HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($27_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 212 | 0) >> 2] | 0 | 0, (HEAP32[($27_1 + 64 | 0) >> 2] | 0) + (Math_imul(HEAP32[($27_1 + 228 | 0) >> 2] | 0, HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
       HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
       continue label$38;
      };
     }
    }
    label$39 : {
     if (HEAP32[($27_1 + 108 | 0) >> 2] | 0) {
      break label$39
     }
     $868(HEAP32[($27_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 52 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[($27_1 + 228 | 0) >> 2] | 0) << 3 | 0, HEAP32[($27_1 + 112 | 0) >> 2] | 0) | 0) | 0;
    }
    (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $135(HEAP32[($27_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 96 | 0) >> 2] = wasm2js_i32$1;
    label$40 : {
     if (!((HEAP32[($27_1 + 96 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$40
     }
     HEAP32[($27_1 + 88 | 0) >> 2] = 7;
     $875(global$3 + 6353 | 0 | 0, 0 | 0) | 0;
     $863(HEAP32[($27_1 + 48 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($27_1 + 52 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($27_1 + 64 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0);
     HEAP32[($27_1 + 236 | 0) >> 2] = HEAP32[($27_1 + 88 | 0) >> 2] | 0;
     break label$3;
    }
   }
   HEAP32[($27_1 + 92 | 0) >> 2] = 0;
   label$41 : {
    if (!((HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$41
    }
    label$42 : {
     if (!((HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$42
     }
     HEAP32[($27_1 + 92 | 0) >> 2] = 1;
    }
    (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $179(HEAP32[($27_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($27_1 + 112 | 0) >> 2] | 0) << 3 | 0, HEAP32[($27_1 + 112 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $862((HEAP32[($27_1 + 228 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $862((HEAP32[($27_1 + 112 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $862((HEAP32[($27_1 + 112 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
    $181(HEAP32[($27_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0);
    $182(HEAP32[($27_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 60 | 0) >> 2] | 0 | 0, +(.95));
    HEAP32[($27_1 + 132 | 0) >> 2] = 0;
    label$43 : {
     label$44 : while (1) {
      if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$43
      }
      HEAPF64[((HEAP32[($27_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(((HEAP32[($27_1 + 8 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 5 | 0) | 0) >> 3];
      HEAPF64[((HEAP32[($27_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 10.0 * +HEAPF64[((((HEAP32[($27_1 + 8 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 5 | 0) | 0) + 24 | 0) >> 3];
      HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
      continue label$44;
     };
    }
    $863(HEAP32[($27_1 + 60 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($27_1 + 56 | 0) >> 2] | 0 | 0);
    $184(HEAP32[($27_1 + 8 | 0) >> 2] | 0 | 0);
   }
   (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $53(HEAP32[($27_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 192 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 228 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($27_1 + 104 | 0) >> 2] = HEAP32[((HEAP32[($27_1 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($27_1 + 12 | 0) >> 2] | 0) + 40 | 0) >> 2] = HEAP32[($27_1 + 228 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($27_1 + 12 | 0) >> 2] | 0) + 44 | 0) >> 2] = HEAP32[($27_1 + 112 | 0) >> 2] | 0;
   HEAPF64[((HEAP32[($27_1 + 12 | 0) >> 2] | 0) + 56 | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 164 | 0) >> 2] | 0) >> 3];
   HEAP32[($27_1 + 128 | 0) >> 2] = HEAP32[((HEAP32[($27_1 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $862((HEAP32[($27_1 + 128 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $862((HEAP32[($27_1 + 128 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 80 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($27_1 + 128 | 0) >> 2] | 0) << 3 | 0, HEAP32[($27_1 + 128 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $862((HEAP32[($27_1 + 128 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $862((HEAP32[($27_1 + 128 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($27_1 + 132 | 0) >> 2] = 0;
   label$45 : {
    label$46 : while (1) {
     if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 216 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$45
     }
     HEAPF64[((HEAP32[($27_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
     continue label$46;
    };
   }
   HEAP32[($27_1 + 132 | 0) >> 2] = 0;
   label$47 : {
    label$48 : while (1) {
     if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$47
     }
     HEAPF64[((HEAP32[($27_1 + 84 | 0) >> 2] | 0) + (((HEAP32[($27_1 + 216 | 0) >> 2] | 0) + (HEAP32[($27_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[($27_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
     continue label$48;
    };
   }
   HEAP32[($27_1 + 132 | 0) >> 2] = 0;
   label$49 : {
    label$50 : while (1) {
     if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 200 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$49
     }
     HEAPF64[((HEAP32[($27_1 + 84 | 0) >> 2] | 0) + ((((HEAP32[($27_1 + 216 | 0) >> 2] | 0) + (HEAP32[($27_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
     continue label$50;
    };
   }
   HEAP32[($27_1 + 132 | 0) >> 2] = 0;
   label$51 : {
    label$52 : while (1) {
     if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 192 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$51
     }
     HEAPF64[((HEAP32[($27_1 + 84 | 0) >> 2] | 0) + (((((HEAP32[($27_1 + 216 | 0) >> 2] | 0) + (HEAP32[($27_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 200 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[($27_1 + 176 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
     continue label$52;
    };
   }
   label$53 : {
    if (!((HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$53
    }
    HEAP32[($27_1 + 132 | 0) >> 2] = 0;
    label$54 : {
     label$55 : while (1) {
      if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$54
      }
      HEAPF64[((HEAP32[($27_1 + 84 | 0) >> 2] | 0) + ((((((HEAP32[($27_1 + 216 | 0) >> 2] | 0) + (HEAP32[($27_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 200 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 192 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
      continue label$55;
     };
    }
   }
   HEAPF64[((HEAP32[($27_1 + 12 | 0) >> 2] | 0) + 56 | 0) >> 3] = +(0 | 0);
   HEAP32[($27_1 + 132 | 0) >> 2] = 0;
   label$56 : {
    label$57 : while (1) {
     if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 228 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$56
     }
     $1249 = +HEAPF64[((HEAP32[($27_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[(((HEAP32[($27_1 + 12 | 0) >> 2] | 0) + 88 | 0) + ((((HEAP32[($27_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 228 | 0) >> 2] | 0) << 1 | 0) | 0) + (HEAP32[($27_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = $1249;
     HEAPF64[(((HEAP32[($27_1 + 12 | 0) >> 2] | 0) + 88 | 0) + (((HEAP32[($27_1 + 104 | 0) >> 2] | 0) + (HEAP32[($27_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = $1249;
     HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
     continue label$57;
    };
   }
   HEAP32[($27_1 + 132 | 0) >> 2] = HEAP32[($27_1 + 228 | 0) >> 2] | 0;
   label$58 : {
    label$59 : while (1) {
     if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < ((HEAP32[($27_1 + 228 | 0) >> 2] | 0) << 1 | 0 | 0) & 1 | 0)) {
      break label$58
     }
     HEAPF64[(((HEAP32[($27_1 + 12 | 0) >> 2] | 0) + 88 | 0) + (((HEAP32[($27_1 + 104 | 0) >> 2] | 0) + (HEAP32[($27_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
     continue label$59;
    };
   }
   label$60 : {
    if (!((HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$60
    }
    HEAP32[($27_1 + 132 | 0) >> 2] = Math_imul(HEAP32[($27_1 + 228 | 0) >> 2] | 0, 3);
    label$61 : {
     label$62 : while (1) {
      if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (Math_imul((HEAP32[($27_1 + 112 | 0) >> 2] | 0) + 3 | 0, HEAP32[($27_1 + 228 | 0) >> 2] | 0) | 0) & 1 | 0)) {
       break label$61
      }
      HEAPF64[(((HEAP32[($27_1 + 12 | 0) >> 2] | 0) + 88 | 0) + (((HEAP32[($27_1 + 104 | 0) >> 2] | 0) + (HEAP32[($27_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 64 | 0) >> 2] | 0) + (((HEAP32[($27_1 + 132 | 0) >> 2] | 0) - Math_imul(HEAP32[($27_1 + 228 | 0) >> 2] | 0, 3) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
      continue label$62;
     };
    }
   }
   HEAP32[$27_1 >> 2] = global$4 + 1 | 0;
   HEAP32[($27_1 + 4 | 0) >> 2] = HEAP32[($27_1 + 12 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $27_1, wasm2js_i32$1 = $154($27_1 | 0, 0 | 0, HEAP32[($27_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 84 | 0) >> 2] | 0 | 0, +(+HEAPF64[($27_1 + 16 | 0) >> 3]), HEAP32[($27_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 80 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 124 | 0) >> 2] = wasm2js_i32$1;
   label$63 : {
    label$64 : {
     if (HEAP32[($27_1 + 124 | 0) >> 2] | 0) {
      break label$64
     }
     HEAP32[($27_1 + 116 | 0) >> 2] = 0;
     break label$63;
    }
    label$65 : {
     label$66 : {
      if (!((HEAP32[($27_1 + 124 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
       break label$66
      }
      HEAP32[($27_1 + 116 | 0) >> 2] = 15;
      break label$65;
     }
     label$67 : {
      label$68 : {
       if (!((HEAP32[($27_1 + 124 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
        break label$68
       }
       HEAP32[($27_1 + 116 | 0) >> 2] = 4;
       break label$67;
      }
      HEAP32[($27_1 + 116 | 0) >> 2] = 1;
     }
    }
   }
   label$69 : {
    if (!((HEAP32[($27_1 + 208 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$69
    }
    $225(HEAP32[($27_1 + 208 | 0) >> 2] | 0 | 0, (HEAP32[($27_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 216 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
   }
   label$70 : {
    if (!((HEAP32[($27_1 + 192 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$70
    }
    $225(HEAP32[($27_1 + 192 | 0) >> 2] | 0 | 0, (((HEAP32[($27_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 216 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($27_1 + 208 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($27_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
   }
   HEAP32[($27_1 + 132 | 0) >> 2] = 0;
   label$71 : {
    label$72 : while (1) {
     if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < ((HEAP32[($27_1 + 128 | 0) >> 2] | 0) - (HEAP32[($27_1 + 112 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
      break label$71
     }
     HEAPF64[((HEAP32[($27_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
     HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
     continue label$72;
    };
   }
   HEAP32[($27_1 + 132 | 0) >> 2] = 0;
   label$73 : {
    label$74 : while (1) {
     if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$73
     }
     HEAPF64[((HEAP32[($27_1 + 72 | 0) >> 2] | 0) + ((((HEAP32[($27_1 + 128 | 0) >> 2] | 0) - (HEAP32[($27_1 + 112 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
     continue label$74;
    };
   }
   $141($27_1 | 0, HEAP32[($27_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 72 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[($27_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 3]), HEAP32[($27_1 + 148 | 0) >> 2] | 0 | 0) | 0;
   $106(HEAP32[($27_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 68 | 0) >> 2] | 0 | 0);
   HEAP32[($27_1 + 132 | 0) >> 2] = 0;
   label$75 : {
    label$76 : while (1) {
     if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($27_1 + 128 | 0) >> 2] | 0, HEAP32[($27_1 + 128 | 0) >> 2] | 0) | 0) & 1 | 0)) {
      break label$75
     }
     HEAPF64[((HEAP32[($27_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(((HEAP32[($27_1 + 120 | 0) >> 2] | 0) - (HEAP32[($27_1 + 212 | 0) >> 2] | 0) | 0) - Math_imul(HEAP32[($27_1 + 204 | 0) >> 2] | 0, HEAP32[($27_1 + 196 | 0) >> 2] | 0) | 0 | 0) * .5 * (+HEAPF64[((HEAP32[($27_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($27_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
     HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
     continue label$76;
    };
   }
   $120(HEAP32[($27_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 24 | 0) >> 2] | 0 | 0);
   $123(HEAP32[($27_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 148 | 0) >> 2] | 0 | 0);
   HEAP32[($27_1 + 132 | 0) >> 2] = 0;
   label$77 : {
    label$78 : while (1) {
     if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 216 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$77
     }
     HEAPF64[((HEAP32[($27_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
     continue label$78;
    };
   }
   HEAP32[($27_1 + 132 | 0) >> 2] = 0;
   label$79 : {
    label$80 : while (1) {
     if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$79
     }
     HEAPF64[((HEAP32[($27_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[($27_1 + 80 | 0) >> 2] | 0) + (((HEAP32[($27_1 + 216 | 0) >> 2] | 0) + (HEAP32[($27_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
     continue label$80;
    };
   }
   HEAP32[($27_1 + 132 | 0) >> 2] = 0;
   label$81 : {
    label$82 : while (1) {
     if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 200 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$81
     }
     HEAPF64[((HEAP32[($27_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 80 | 0) >> 2] | 0) + ((((HEAP32[($27_1 + 216 | 0) >> 2] | 0) + (HEAP32[($27_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
     continue label$82;
    };
   }
   HEAP32[($27_1 + 132 | 0) >> 2] = 0;
   label$83 : {
    label$84 : while (1) {
     if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 192 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$83
     }
     HEAPF64[((HEAP32[($27_1 + 176 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[($27_1 + 80 | 0) >> 2] | 0) + (((((HEAP32[($27_1 + 216 | 0) >> 2] | 0) + (HEAP32[($27_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 200 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
     continue label$84;
    };
   }
   label$85 : {
    label$86 : {
     if (HEAP32[($27_1 + 108 | 0) >> 2] | 0) {
      break label$86
     }
     if (!((HEAP32[($27_1 + 136 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$86
     }
     HEAPF64[(HEAP32[($27_1 + 164 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 80 | 0) >> 2] | 0) + (((((HEAP32[($27_1 + 216 | 0) >> 2] | 0) + (HEAP32[($27_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 192 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     label$87 : {
      if (!((HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
       break label$87
      }
      HEAP32[($27_1 + 132 | 0) >> 2] = 1;
      label$88 : {
       label$89 : while (1) {
        if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$88
        }
        HEAPF64[((HEAP32[($27_1 + 172 | 0) >> 2] | 0) + (((HEAP32[($27_1 + 132 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 80 | 0) >> 2] | 0) + ((((((HEAP32[($27_1 + 216 | 0) >> 2] | 0) + (HEAP32[($27_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 192 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 200 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
        continue label$89;
       };
      }
     }
     break label$85;
    }
    HEAPF64[(HEAP32[($27_1 + 164 | 0) >> 2] | 0) >> 3] = +(0 | 0);
    HEAP32[($27_1 + 132 | 0) >> 2] = 0;
    label$90 : {
     label$91 : while (1) {
      if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$90
      }
      HEAPF64[((HEAP32[($27_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 80 | 0) >> 2] | 0) + ((((((HEAP32[($27_1 + 216 | 0) >> 2] | 0) + (HEAP32[($27_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 192 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 200 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
      continue label$91;
     };
    }
   }
   HEAPF64[(HEAP32[($27_1 + 160 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 12 | 0) >> 2] | 0) + 64 | 0) >> 3] / +(HEAP32[($27_1 + 228 | 0) >> 2] | 0 | 0);
   HEAP32[($27_1 + 132 | 0) >> 2] = 0;
   label$92 : {
    label$93 : while (1) {
     if (!((HEAP32[($27_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 228 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$92
     }
     HEAPF64[((HEAP32[($27_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(((HEAP32[($27_1 + 12 | 0) >> 2] | 0) + 88 | 0) + ((((HEAP32[($27_1 + 104 | 0) >> 2] | 0) + (HEAP32[($27_1 + 228 | 0) >> 2] | 0) | 0) + (HEAP32[($27_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($27_1 + 132 | 0) >> 2] = (HEAP32[($27_1 + 132 | 0) >> 2] | 0) + 1 | 0;
     continue label$93;
    };
   }
   HEAPF64[(HEAP32[($27_1 + 152 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 12 | 0) >> 2] | 0) + 72 | 0) >> 3];
   $863(HEAP32[($27_1 + 84 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($27_1 + 80 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($27_1 + 68 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($27_1 + 24 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($27_1 + 72 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($27_1 + 48 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($27_1 + 52 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($27_1 + 64 | 0) >> 2] | 0 | 0);
   label$94 : {
    if (!((HEAP32[($27_1 + 112 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$94
    }
    $863(HEAP32[($27_1 + 32 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($27_1 + 28 | 0) >> 2] | 0 | 0);
   }
   $63(HEAP32[($27_1 + 12 | 0) >> 2] | 0 | 0);
   HEAP32[($27_1 + 236 | 0) >> 2] = HEAP32[($27_1 + 116 | 0) >> 2] | 0;
  }
  $1224 = HEAP32[($27_1 + 236 | 0) >> 2] | 0;
  global$0 = $27_1 + 240 | 0;
  return $1224 | 0;
 }
 
 function $60($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1, $16_1, $17_1, $18_1, $19_1, $20_1, $21_1, $22_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  $15_1 = $15_1 | 0;
  $16_1 = $16_1 | 0;
  $17_1 = $17_1 | 0;
  $18_1 = $18_1 | 0;
  $19_1 = $19_1 | 0;
  $20_1 = $20_1 | 0;
  $21_1 = $21_1 | 0;
  $22_1 = $22_1 | 0;
  var $25_1 = 0, $46_1 = 0, $1127 = 0.0, $1103 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $25_1 = global$0 - 240 | 0;
  global$0 = $25_1;
  HEAP32[($25_1 + 232 | 0) >> 2] = $0_1;
  HEAP32[($25_1 + 228 | 0) >> 2] = $1_1;
  HEAP32[($25_1 + 224 | 0) >> 2] = $2_1;
  HEAP32[($25_1 + 220 | 0) >> 2] = $3_1;
  HEAP32[($25_1 + 216 | 0) >> 2] = $4_1;
  HEAP32[($25_1 + 212 | 0) >> 2] = $5_1;
  HEAP32[($25_1 + 208 | 0) >> 2] = $6_1;
  HEAP32[($25_1 + 204 | 0) >> 2] = $7_1;
  HEAP32[($25_1 + 200 | 0) >> 2] = $8_1;
  HEAP32[($25_1 + 196 | 0) >> 2] = $9_1;
  HEAP32[($25_1 + 192 | 0) >> 2] = $10_1;
  HEAP32[($25_1 + 188 | 0) >> 2] = $11_1;
  HEAP32[($25_1 + 184 | 0) >> 2] = $12_1;
  HEAP32[($25_1 + 180 | 0) >> 2] = $13_1;
  HEAP32[($25_1 + 176 | 0) >> 2] = $14_1;
  HEAP32[($25_1 + 172 | 0) >> 2] = $15_1;
  HEAP32[($25_1 + 168 | 0) >> 2] = $16_1;
  HEAP32[($25_1 + 164 | 0) >> 2] = $17_1;
  HEAP32[($25_1 + 160 | 0) >> 2] = $18_1;
  HEAP32[($25_1 + 156 | 0) >> 2] = $19_1;
  HEAP32[($25_1 + 152 | 0) >> 2] = $20_1;
  HEAP32[($25_1 + 148 | 0) >> 2] = $21_1;
  HEAP32[($25_1 + 144 | 0) >> 2] = $22_1;
  (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $862(((HEAP32[($25_1 + 228 | 0) >> 2] | 0) - Math_imul(HEAP32[($25_1 + 204 | 0) >> 2] | 0, HEAP32[($25_1 + 196 | 0) >> 2] | 0) | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 80 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($25_1 + 128 | 0) >> 2] = HEAP32[($25_1 + 228 | 0) >> 2] | 0;
  HEAP32[($25_1 + 116 | 0) >> 2] = (HEAP32[($25_1 + 212 | 0) >> 2] | 0) + (HEAP32[($25_1 + 196 | 0) >> 2] | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($25_1 + 224 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    $46_1 = 0;
    break label$1;
   }
   $46_1 = HEAP32[($25_1 + 168 | 0) >> 2] | 0;
  }
  HEAP32[($25_1 + 112 | 0) >> 2] = $46_1;
  HEAPF64[($25_1 + 24 | 0) >> 3] = 1.0;
  label$3 : {
   if (HEAP32[($25_1 + 148 | 0) >> 2] | 0) {
    break label$3
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 216 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAPF64[((HEAP32[($25_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAPF64[((HEAP32[($25_1 + 184 | 0) >> 2] | 0) + (((HEAP32[($25_1 + 216 | 0) >> 2] | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 200 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAPF64[((HEAP32[($25_1 + 180 | 0) >> 2] | 0) + ((((HEAP32[($25_1 + 216 | 0) >> 2] | 0) + (HEAP32[($25_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$9;
    };
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$10 : {
    label$11 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 192 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$10
     }
     HEAPF64[((HEAP32[($25_1 + 176 | 0) >> 2] | 0) + (((((HEAP32[($25_1 + 216 | 0) >> 2] | 0) + (HEAP32[($25_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 200 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$11;
    };
   }
  }
  label$12 : {
   label$13 : {
    if (!((HEAP32[($25_1 + 196 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$13
    }
    (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $223(HEAP32[($25_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 80 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 228 | 0) >> 2] = wasm2js_i32$1;
    break label$12;
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$14 : {
    label$15 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 228 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$14
     }
     HEAPF64[((HEAP32[($25_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($25_1 + 232 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$15;
    };
   }
  }
  (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $862(((HEAP32[($25_1 + 228 | 0) >> 2] | 0) - (HEAP32[($25_1 + 212 | 0) >> 2] | 0) | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
  label$16 : {
   label$17 : {
    if (!((HEAP32[($25_1 + 212 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$17
    }
    (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $222(HEAP32[($25_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 84 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 228 | 0) >> 2] = wasm2js_i32$1;
    break label$16;
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$18 : {
    label$19 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 228 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$18
     }
     HEAPF64[((HEAP32[($25_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($25_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$19;
    };
   }
  }
  (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($25_1 + 128 | 0) >> 2] | 0) << 3 | 0, (HEAP32[($25_1 + 168 | 0) >> 2] | 0) + 1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
  label$20 : {
   label$21 : {
    if (HEAP32[($25_1 + 116 | 0) >> 2] | 0) {
     break label$21
    }
    if (!((HEAP32[($25_1 + 144 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$21
    }
    HEAP32[($25_1 + 140 | 0) >> 2] = 0;
    label$22 : {
     label$23 : while (1) {
      if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 128 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$22
      }
      HEAPF64[((HEAP32[($25_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
      HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
      continue label$23;
     };
    }
    label$24 : {
     if (!((HEAP32[($25_1 + 168 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$24
     }
     $868((HEAP32[($25_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($25_1 + 224 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[($25_1 + 168 | 0) >> 2] | 0) << 3 | 0, HEAP32[($25_1 + 128 | 0) >> 2] | 0) | 0) | 0;
    }
    HEAP32[($25_1 + 112 | 0) >> 2] = (HEAP32[($25_1 + 112 | 0) >> 2] | 0) + 1 | 0;
    break label$20;
   }
   label$25 : {
    if (!((HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$25
    }
    $868(HEAP32[($25_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 224 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[($25_1 + 112 | 0) >> 2] | 0) << 3 | 0, HEAP32[($25_1 + 128 | 0) >> 2] | 0) | 0) | 0;
   }
  }
  (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($25_1 + 228 | 0) >> 2] | 0) << 3 | 0, (HEAP32[($25_1 + 168 | 0) >> 2] | 0) + 1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
  label$26 : {
   label$27 : {
    if (!((HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$27
    }
    HEAP32[($25_1 + 108 | 0) >> 2] = HEAP32[($25_1 + 128 | 0) >> 2] | 0;
    label$28 : {
     if (!((HEAP32[($25_1 + 196 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$28
     }
     HEAP32[($25_1 + 108 | 0) >> 2] = (HEAP32[($25_1 + 128 | 0) >> 2] | 0) - Math_imul(HEAP32[($25_1 + 204 | 0) >> 2] | 0, HEAP32[($25_1 + 196 | 0) >> 2] | 0) | 0;
     HEAP32[($25_1 + 140 | 0) >> 2] = 0;
     label$29 : {
      label$30 : while (1) {
       if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$29
       }
       $223((HEAP32[($25_1 + 68 | 0) >> 2] | 0) + (Math_imul(HEAP32[($25_1 + 128 | 0) >> 2] | 0, HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($25_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 204 | 0) >> 2] | 0 | 0, (HEAP32[($25_1 + 64 | 0) >> 2] | 0) + (Math_imul(HEAP32[($25_1 + 108 | 0) >> 2] | 0, HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
       $868((HEAP32[($25_1 + 68 | 0) >> 2] | 0) + (Math_imul(HEAP32[($25_1 + 108 | 0) >> 2] | 0, HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($25_1 + 64 | 0) >> 2] | 0) + (Math_imul(HEAP32[($25_1 + 108 | 0) >> 2] | 0, HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($25_1 + 108 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
       HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
       continue label$30;
      };
     }
    }
    label$31 : {
     if (!((HEAP32[($25_1 + 212 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$31
     }
     HEAP32[($25_1 + 140 | 0) >> 2] = 0;
     label$32 : {
      label$33 : while (1) {
       if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$32
       }
       $222((HEAP32[($25_1 + 68 | 0) >> 2] | 0) + (Math_imul(HEAP32[($25_1 + 108 | 0) >> 2] | 0, HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($25_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 212 | 0) >> 2] | 0 | 0, (HEAP32[($25_1 + 64 | 0) >> 2] | 0) + (Math_imul(HEAP32[($25_1 + 228 | 0) >> 2] | 0, HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
       HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
       continue label$33;
      };
     }
    }
    label$34 : {
     if (HEAP32[($25_1 + 116 | 0) >> 2] | 0) {
      break label$34
     }
     $868(HEAP32[($25_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 68 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[($25_1 + 228 | 0) >> 2] | 0) << 3 | 0, HEAP32[($25_1 + 112 | 0) >> 2] | 0) | 0) | 0;
    }
    (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $135(HEAP32[($25_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 104 | 0) >> 2] = wasm2js_i32$1;
    label$35 : {
     if (!((HEAP32[($25_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$35
     }
     HEAP32[($25_1 + 96 | 0) >> 2] = 7;
     $875(global$3 + 6353 | 0 | 0, 0 | 0) | 0;
     $863(HEAP32[($25_1 + 80 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($25_1 + 68 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($25_1 + 64 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($25_1 + 84 | 0) >> 2] | 0 | 0);
     HEAP32[($25_1 + 236 | 0) >> 2] = HEAP32[($25_1 + 96 | 0) >> 2] | 0;
     break label$26;
    }
   }
   HEAP32[($25_1 + 100 | 0) >> 2] = 0;
   label$36 : {
    if (!((HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$36
    }
    label$37 : {
     if (!((HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$37
     }
     HEAP32[($25_1 + 100 | 0) >> 2] = 1;
    }
    (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $179(HEAP32[($25_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($25_1 + 112 | 0) >> 2] | 0) << 3 | 0, HEAP32[($25_1 + 112 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $862((HEAP32[($25_1 + 228 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $862((HEAP32[($25_1 + 112 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $862((HEAP32[($25_1 + 112 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
    $181(HEAP32[($25_1 + 16 | 0) >> 2] | 0 | 0, 0 | 0);
    $182(HEAP32[($25_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 40 | 0) >> 2] | 0 | 0, +(.95));
    HEAP32[($25_1 + 140 | 0) >> 2] = 0;
    label$38 : {
     label$39 : while (1) {
      if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$38
      }
      HEAPF64[((HEAP32[($25_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(((HEAP32[($25_1 + 16 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 5 | 0) | 0) >> 3];
      HEAPF64[((HEAP32[($25_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 10.0 * +HEAPF64[((((HEAP32[($25_1 + 16 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 5 | 0) | 0) + 24 | 0) >> 3];
      HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
      continue label$39;
     };
    }
    $863(HEAP32[($25_1 + 40 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($25_1 + 36 | 0) >> 2] | 0 | 0);
    $184(HEAP32[($25_1 + 16 | 0) >> 2] | 0 | 0);
   }
   (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $52(HEAP32[($25_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 192 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 228 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($25_1 + 136 | 0) >> 2] = HEAP32[((HEAP32[($25_1 + 20 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $862((HEAP32[($25_1 + 136 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 92 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $862((HEAP32[($25_1 + 136 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($25_1 + 136 | 0) >> 2] | 0) << 3 | 0, HEAP32[($25_1 + 136 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $862((HEAP32[($25_1 + 136 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 76 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $862((HEAP32[($25_1 + 136 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[((HEAP32[($25_1 + 20 | 0) >> 2] | 0) + 40 | 0) >> 2] = HEAP32[($25_1 + 228 | 0) >> 2] | 0;
   HEAP32[($25_1 + 124 | 0) >> 2] = HEAP32[((HEAP32[($25_1 + 20 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0;
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$40 : {
    label$41 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 216 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$40
     }
     HEAPF64[((HEAP32[($25_1 + 92 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($25_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$41;
    };
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$42 : {
    label$43 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$42
     }
     HEAPF64[((HEAP32[($25_1 + 92 | 0) >> 2] | 0) + (((HEAP32[($25_1 + 216 | 0) >> 2] | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[($25_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$43;
    };
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$44 : {
    label$45 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 200 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$44
     }
     HEAPF64[((HEAP32[($25_1 + 92 | 0) >> 2] | 0) + ((((HEAP32[($25_1 + 216 | 0) >> 2] | 0) + (HEAP32[($25_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($25_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$45;
    };
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$46 : {
    label$47 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 192 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$46
     }
     HEAPF64[((HEAP32[($25_1 + 92 | 0) >> 2] | 0) + (((((HEAP32[($25_1 + 216 | 0) >> 2] | 0) + (HEAP32[($25_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 200 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[($25_1 + 176 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$47;
    };
   }
   label$48 : {
    label$49 : {
     if (!((HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$49
     }
     HEAP32[($25_1 + 140 | 0) >> 2] = 0;
     label$50 : {
      label$51 : while (1) {
       if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$50
       }
       HEAPF64[((HEAP32[($25_1 + 92 | 0) >> 2] | 0) + ((((((HEAP32[($25_1 + 216 | 0) >> 2] | 0) + (HEAP32[($25_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 200 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 192 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($25_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
       continue label$51;
      };
     }
     break label$48;
    }
    HEAPF64[((HEAP32[($25_1 + 20 | 0) >> 2] | 0) + 64 | 0) >> 3] = +(0 | 0);
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$52 : {
    label$53 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 228 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$52
     }
     $1127 = +HEAPF64[((HEAP32[($25_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[(((HEAP32[($25_1 + 20 | 0) >> 2] | 0) + 96 | 0) + ((((HEAP32[($25_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 228 | 0) >> 2] | 0) << 1 | 0) | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = $1127;
     HEAPF64[(((HEAP32[($25_1 + 20 | 0) >> 2] | 0) + 96 | 0) + (((HEAP32[($25_1 + 124 | 0) >> 2] | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = $1127;
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$53;
    };
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = HEAP32[($25_1 + 228 | 0) >> 2] | 0;
   label$54 : {
    label$55 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < ((HEAP32[($25_1 + 228 | 0) >> 2] | 0) << 1 | 0 | 0) & 1 | 0)) {
      break label$54
     }
     HEAPF64[(((HEAP32[($25_1 + 20 | 0) >> 2] | 0) + 96 | 0) + (((HEAP32[($25_1 + 124 | 0) >> 2] | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$55;
    };
   }
   label$56 : {
    if (!((HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$56
    }
    HEAP32[($25_1 + 140 | 0) >> 2] = Math_imul(HEAP32[($25_1 + 228 | 0) >> 2] | 0, 3);
    label$57 : {
     label$58 : while (1) {
      if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (Math_imul((HEAP32[($25_1 + 112 | 0) >> 2] | 0) + 3 | 0, HEAP32[($25_1 + 228 | 0) >> 2] | 0) | 0) & 1 | 0)) {
       break label$57
      }
      HEAPF64[(((HEAP32[($25_1 + 20 | 0) >> 2] | 0) + 96 | 0) + (((HEAP32[($25_1 + 124 | 0) >> 2] | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($25_1 + 64 | 0) >> 2] | 0) + (((HEAP32[($25_1 + 140 | 0) >> 2] | 0) - Math_imul(HEAP32[($25_1 + 228 | 0) >> 2] | 0, 3) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
      continue label$58;
     };
    }
   }
   HEAP32[($25_1 + 8 | 0) >> 2] = global$4 + 2 | 0;
   HEAP32[($25_1 + 12 | 0) >> 2] = HEAP32[($25_1 + 20 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $25_1, wasm2js_i32$1 = $154($25_1 + 8 | 0 | 0, 0 | 0, HEAP32[($25_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 92 | 0) >> 2] | 0 | 0, +(+HEAPF64[($25_1 + 24 | 0) >> 3]), HEAP32[($25_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 88 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 132 | 0) >> 2] = wasm2js_i32$1;
   label$59 : {
    label$60 : {
     if (HEAP32[($25_1 + 132 | 0) >> 2] | 0) {
      break label$60
     }
     HEAP32[($25_1 + 120 | 0) >> 2] = 0;
     break label$59;
    }
    label$61 : {
     label$62 : {
      if (!((HEAP32[($25_1 + 132 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
       break label$62
      }
      HEAP32[($25_1 + 120 | 0) >> 2] = 15;
      break label$61;
     }
     label$63 : {
      label$64 : {
       if (!((HEAP32[($25_1 + 132 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
        break label$64
       }
       HEAP32[($25_1 + 120 | 0) >> 2] = 4;
       break label$63;
      }
      HEAP32[($25_1 + 120 | 0) >> 2] = 1;
     }
    }
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$65 : {
    label$66 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < ((HEAP32[($25_1 + 136 | 0) >> 2] | 0) - (HEAP32[($25_1 + 112 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
      break label$65
     }
     HEAPF64[((HEAP32[($25_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$66;
    };
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$67 : {
    label$68 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$67
     }
     HEAPF64[((HEAP32[($25_1 + 76 | 0) >> 2] | 0) + ((((HEAP32[($25_1 + 136 | 0) >> 2] | 0) - (HEAP32[($25_1 + 112 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($25_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$68;
    };
   }
   $141($25_1 + 8 | 0 | 0, HEAP32[($25_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[($25_1 + 20 | 0) >> 2] | 0) + 56 | 0) >> 3]), HEAP32[($25_1 + 152 | 0) >> 2] | 0 | 0) | 0;
   $106(HEAP32[($25_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 72 | 0) >> 2] | 0 | 0);
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$69 : {
    label$70 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($25_1 + 136 | 0) >> 2] | 0, HEAP32[($25_1 + 136 | 0) >> 2] | 0) | 0) & 1 | 0)) {
      break label$69
     }
     HEAPF64[((HEAP32[($25_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(((HEAP32[($25_1 + 228 | 0) >> 2] | 0) - (HEAP32[($25_1 + 212 | 0) >> 2] | 0) | 0) - Math_imul(HEAP32[($25_1 + 204 | 0) >> 2] | 0, HEAP32[($25_1 + 196 | 0) >> 2] | 0) | 0 | 0) * .5 * (+HEAPF64[((HEAP32[($25_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($25_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$70;
    };
   }
   $120(HEAP32[($25_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 32 | 0) >> 2] | 0 | 0);
   $123(HEAP32[($25_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($25_1 + 152 | 0) >> 2] | 0 | 0);
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$71 : {
    label$72 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 216 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$71
     }
     HEAPF64[((HEAP32[($25_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($25_1 + 88 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$72;
    };
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$73 : {
    label$74 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$73
     }
     HEAPF64[((HEAP32[($25_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[($25_1 + 88 | 0) >> 2] | 0) + (((HEAP32[($25_1 + 216 | 0) >> 2] | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$74;
    };
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$75 : {
    label$76 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 200 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$75
     }
     HEAPF64[((HEAP32[($25_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($25_1 + 88 | 0) >> 2] | 0) + ((((HEAP32[($25_1 + 216 | 0) >> 2] | 0) + (HEAP32[($25_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$76;
    };
   }
   HEAP32[($25_1 + 140 | 0) >> 2] = 0;
   label$77 : {
    label$78 : while (1) {
     if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 192 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$77
     }
     HEAPF64[((HEAP32[($25_1 + 176 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[($25_1 + 88 | 0) >> 2] | 0) + (((((HEAP32[($25_1 + 216 | 0) >> 2] | 0) + (HEAP32[($25_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 200 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     continue label$78;
    };
   }
   label$79 : {
    label$80 : {
     if (HEAP32[($25_1 + 116 | 0) >> 2] | 0) {
      break label$80
     }
     if (!((HEAP32[($25_1 + 144 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$80
     }
     HEAPF64[(HEAP32[($25_1 + 164 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($25_1 + 88 | 0) >> 2] | 0) + (((((HEAP32[($25_1 + 216 | 0) >> 2] | 0) + (HEAP32[($25_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 192 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     label$81 : {
      if (!((HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
       break label$81
      }
      HEAP32[($25_1 + 140 | 0) >> 2] = 1;
      label$82 : {
       label$83 : while (1) {
        if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$82
        }
        HEAPF64[((HEAP32[($25_1 + 172 | 0) >> 2] | 0) + (((HEAP32[($25_1 + 140 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($25_1 + 88 | 0) >> 2] | 0) + ((((((HEAP32[($25_1 + 216 | 0) >> 2] | 0) + (HEAP32[($25_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 192 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 200 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
        continue label$83;
       };
      }
     }
     break label$79;
    }
    HEAPF64[(HEAP32[($25_1 + 164 | 0) >> 2] | 0) >> 3] = +(0 | 0);
    HEAP32[($25_1 + 140 | 0) >> 2] = 0;
    label$84 : {
     label$85 : while (1) {
      if (!((HEAP32[($25_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$84
      }
      HEAPF64[((HEAP32[($25_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($25_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($25_1 + 88 | 0) >> 2] | 0) + ((((((HEAP32[($25_1 + 216 | 0) >> 2] | 0) + (HEAP32[($25_1 + 208 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 192 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 200 | 0) >> 2] | 0) | 0) + (HEAP32[($25_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($25_1 + 140 | 0) >> 2] = (HEAP32[($25_1 + 140 | 0) >> 2] | 0) + 1 | 0;
      continue label$85;
     };
    }
   }
   HEAPF64[(HEAP32[($25_1 + 160 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($25_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 3] / +(HEAP32[((HEAP32[($25_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0);
   HEAPF64[(HEAP32[($25_1 + 156 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($25_1 + 20 | 0) >> 2] | 0) + 80 | 0) >> 3];
   $863(HEAP32[($25_1 + 92 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($25_1 + 88 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($25_1 + 80 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($25_1 + 68 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($25_1 + 64 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($25_1 + 84 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($25_1 + 72 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($25_1 + 76 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($25_1 + 32 | 0) >> 2] | 0 | 0);
   label$86 : {
    if (!((HEAP32[($25_1 + 112 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$86
    }
    $863(HEAP32[($25_1 + 48 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($25_1 + 44 | 0) >> 2] | 0 | 0);
   }
   $65(HEAP32[($25_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[($25_1 + 236 | 0) >> 2] = HEAP32[($25_1 + 120 | 0) >> 2] | 0;
  }
  $1103 = HEAP32[($25_1 + 236 | 0) >> 2] | 0;
  global$0 = $25_1 + 240 | 0;
  return $1103 | 0;
 }
 
 function $61($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $91_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10_1 = global$0 - 48 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($10_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($10_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 24 | 0) >> 2] = $4_1;
  HEAP32[($10_1 + 20 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 16 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 12 | 0) >> 2] = $7_1;
  HEAP32[($10_1 + 4 | 0) >> 2] = 1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(HEAP32[($10_1 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$2
    }
    (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $224(HEAP32[(HEAP32[($10_1 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 40 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
    label$3 : {
     if (HEAP32[($10_1 + 8 | 0) >> 2] | 0) {
      break label$3
     }
     HEAP32[($10_1 + 4 | 0) >> 2] = 10;
     $875(global$3 + 4264 | 0 | 0, 0 | 0) | 0;
     HEAP32[($10_1 + 44 | 0) >> 2] = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
     break label$1;
    }
   }
   label$4 : {
    if (!((HEAP32[(HEAP32[($10_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$4
    }
    $225(HEAP32[(HEAP32[($10_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 32 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    if (!((HEAP32[(HEAP32[($10_1 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($10_1 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    label$6 : {
     if (!((HEAP32[(HEAP32[($10_1 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$6
     }
     (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $224(HEAP32[(HEAP32[($10_1 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
     label$7 : {
      if (HEAP32[($10_1 + 8 | 0) >> 2] | 0) {
       break label$7
      }
      HEAP32[($10_1 + 4 | 0) >> 2] = 12;
      $875(global$3 + 4289 | 0 | 0, 0 | 0) | 0;
      HEAP32[($10_1 + 44 | 0) >> 2] = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      break label$1;
     }
    }
   }
   label$8 : {
    if (!((HEAP32[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    label$9 : {
     if (!((HEAP32[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$9
     }
     $225(HEAP32[(HEAP32[($10_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    }
   }
   HEAP32[($10_1 + 44 | 0) >> 2] = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
  }
  $91_1 = HEAP32[($10_1 + 44 | 0) >> 2] | 0;
  global$0 = $10_1 + 48 | 0;
  return $91_1 | 0;
 }
 
 function $62($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $183_1 = 0, $216_1 = 0, $252_1 = 0, $289_1 = 0, $494_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 160 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 156 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 152 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 148 | 0) >> 2] = $2_1;
  HEAPF64[($5_1 + 120 | 0) >> 3] = +(0 | 0);
  HEAPF64[($5_1 + 128 | 0) >> 3] = +(0 | 0);
  HEAPF64[($5_1 + 136 | 0) >> 3] = +(0 | 0);
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 148 | 0) >> 2] | 0;
  HEAP32[($5_1 + 68 | 0) >> 2] = (HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[$5_1 >> 2] | 0) + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[$5_1 >> 2] | 0) + 16 | 0) >> 2] | 0) | 0;
  HEAP32[($5_1 + 64 | 0) >> 2] = (HEAP32[((HEAP32[$5_1 >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[$5_1 >> 2] | 0) + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[$5_1 >> 2] | 0) + 24 | 0) >> 2] | 0) | 0;
  HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 40 | 0) >> 2] | 0;
  HEAP32[($5_1 + 100 | 0) >> 2] = HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0;
  HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP32[($5_1 + 96 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 88 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 44 | 0) >> 2] | 0;
  HEAP32[($5_1 + 84 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 80 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 80 | 0) >> 2] | 0;
  HEAP32[($5_1 + 48 | 0) >> 2] = (Math_imul(HEAP32[($5_1 + 60 | 0) >> 2] | 0, (HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 1 | 0) | 0) / (2 | 0) | 0;
  HEAP32[($5_1 + 76 | 0) >> 2] = (((HEAP32[($5_1 + 100 | 0) >> 2] | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 92 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = ((HEAP32[$5_1 >> 2] | 0) + 88 | 0) + (((HEAP32[($5_1 + 80 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 40 | 0) >> 2] | 0, 3) | 0) << 3 | 0) | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862((HEAP32[($5_1 + 48 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862((HEAP32[($5_1 + 48 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($5_1 + 56 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAPF64[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($5_1 + 56 | 0) >> 2] = (HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($5_1 + 56 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($5_1 + 56 | 0) >> 2] = (HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($5_1 + 56 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF64[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($5_1 + 56 | 0) >> 2] = (HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[($5_1 + 52 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    $183_1 = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 1 | 0, HEAP32[($5_1 + 84 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
    HEAPF64[$183_1 >> 3] = +HEAPF64[$183_1 >> 3] + +HEAPF64[((HEAP32[($5_1 + 156 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 100 | 0) >> 2] | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 52 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($5_1 + 56 | 0) >> 2] = 0;
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      $216_1 = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 1 | 0, HEAP32[($5_1 + 84 | 0) >> 2] | 0) + (HEAP32[($5_1 + 56 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
      HEAPF64[$216_1 >> 3] = +HEAPF64[$216_1 >> 3] - +HEAPF64[((HEAP32[($5_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 156 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 100 | 0) >> 2] | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 52 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($5_1 + 56 | 0) >> 2] = (HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 1 | 0;
      continue label$10;
     };
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  HEAP32[($5_1 + 52 | 0) >> 2] = 0;
  label$11 : {
   label$12 : while (1) {
    if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$11
    }
    $252_1 = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 1 | 0, HEAP32[($5_1 + 84 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
    HEAPF64[$252_1 >> 3] = +HEAPF64[$252_1 >> 3] + +HEAPF64[((HEAP32[($5_1 + 156 | 0) >> 2] | 0) + (((((HEAP32[($5_1 + 100 | 0) >> 2] | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 92 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 52 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($5_1 + 56 | 0) >> 2] = 0;
    label$13 : {
     label$14 : while (1) {
      if (!((HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$13
      }
      $289_1 = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 1 | 0, HEAP32[($5_1 + 84 | 0) >> 2] | 0) + (HEAP32[($5_1 + 56 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
      HEAPF64[$289_1 >> 3] = +HEAPF64[$289_1 >> 3] + +HEAPF64[((HEAP32[($5_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + (HEAP32[($5_1 + 100 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 156 | 0) >> 2] | 0) + (((((HEAP32[($5_1 + 100 | 0) >> 2] | 0) + (HEAP32[($5_1 + 96 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 92 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 52 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($5_1 + 56 | 0) >> 2] = (HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 1 | 0;
      continue label$14;
     };
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    continue label$12;
   };
  }
  label$15 : {
   if (!((HEAP32[((HEAP32[$5_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$15
   }
   HEAP32[($5_1 + 56 | 0) >> 2] = 0;
   label$16 : {
    label$17 : while (1) {
     if (!((HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$16
     }
     HEAPF64[($5_1 + 104 | 0) >> 3] = +HEAPF64[(((HEAP32[$5_1 >> 2] | 0) + 88 | 0) + ((((HEAP32[($5_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 1 | 0) | 0) + (HEAP32[($5_1 + 56 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($5_1 + 52 | 0) >> 2] = 0;
     label$18 : {
      label$19 : while (1) {
       if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$18
       }
       HEAPF64[($5_1 + 104 | 0) >> 3] = +HEAPF64[($5_1 + 104 | 0) >> 3] - +HEAPF64[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($5_1 + 52 | 0) >> 2] | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 56 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + (HEAP32[($5_1 + 52 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($5_1 + 52 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 1 | 0;
       continue label$19;
      };
     }
     HEAPF64[(((HEAP32[$5_1 >> 2] | 0) + 88 | 0) + (((HEAP32[($5_1 + 80 | 0) >> 2] | 0) + (HEAP32[($5_1 + 56 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($5_1 + 104 | 0) >> 3];
     HEAP32[($5_1 + 56 | 0) >> 2] = (HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 1 | 0;
     continue label$17;
    };
   }
  }
  HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  label$20 : {
   label$21 : {
    label$22 : {
     label$23 : {
      if (!((HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$23
      }
      if (!(HEAP32[($5_1 + 64 | 0) >> 2] | 0)) {
       break label$22
      }
     }
     if (HEAP32[($5_1 + 68 | 0) >> 2] | 0) {
      break label$21
     }
     if (HEAP32[($5_1 + 64 | 0) >> 2] | 0) {
      break label$21
     }
    }
    HEAPF64[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 3] = 1.0;
    HEAPF64[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 3] = +(0 | 0);
    HEAPF64[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 3] = 1.0 / (1.0 - +HEAPF64[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 3]);
    break label$20;
   }
   HEAP32[($5_1 + 36 | 0) >> 2] = 1;
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $54(HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
  }
  HEAP32[($5_1 + 32 | 0) >> 2] = 0;
  HEAPF64[($5_1 + 112 | 0) >> 3] = .001;
  $57(HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, ((HEAP32[$5_1 >> 2] | 0) + 88 | 0) + ((HEAP32[($5_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (((HEAP32[$5_1 >> 2] | 0) + 88 | 0) + ((HEAP32[($5_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, $5_1 + 120 | 0 | 0, $5_1 + 128 | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5_1 + 112 | 0) >> 3]), $5_1 + 28 | 0 | 0, $5_1 + 32 | 0 | 0);
  HEAPF64[((HEAP32[$5_1 >> 2] | 0) + 64 | 0) >> 3] = +HEAPF64[($5_1 + 128 | 0) >> 3];
  (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = .5 * (+HEAPF64[($5_1 + 120 | 0) >> 3] / +(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) + +$729(+(+HEAPF64[($5_1 + 128 | 0) >> 3] / +(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0))))), HEAPF64[(wasm2js_i32$0 + 136 | 0) >> 3] = wasm2js_f64$0;
  HEAPF64[((HEAP32[$5_1 >> 2] | 0) + 72 | 0) >> 3] = +HEAPF64[($5_1 + 136 | 0) >> 3];
  $863(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  $494_1 = +HEAPF64[($5_1 + 136 | 0) >> 3];
  global$0 = $5_1 + 160 | 0;
  return +$494_1;
 }
 
 function $63($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $863(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $64($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $181_1 = 0, $214_1 = 0, $250_1 = 0, $287_1 = 0, $559_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 116 | 0) >> 2] = $2_1;
  HEAPF64[($5_1 + 96 | 0) >> 3] = +(0 | 0);
  HEAPF64[($5_1 + 104 | 0) >> 3] = +(0 | 0);
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 116 | 0) >> 2] | 0;
  HEAP32[($5_1 + 48 | 0) >> 2] = (HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[$5_1 >> 2] | 0) + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[$5_1 >> 2] | 0) + 16 | 0) >> 2] | 0) | 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[((HEAP32[$5_1 >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[$5_1 >> 2] | 0) + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[$5_1 >> 2] | 0) + 24 | 0) >> 2] | 0) | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 40 | 0) >> 2] | 0;
  HEAP32[($5_1 + 84 | 0) >> 2] = HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0;
  HEAP32[($5_1 + 76 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP32[($5_1 + 80 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 44 | 0) >> 2] | 0;
  HEAP32[($5_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 20 | 0) >> 2] | 0;
  HEAP32[($5_1 + 56 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 88 | 0) >> 2] | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 84 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 68 | 0) >> 2] | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0) | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = (((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + (HEAP32[($5_1 + 80 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 76 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 72 | 0) >> 2] | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = ((HEAP32[$5_1 >> 2] | 0) + 96 | 0) + (((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, 3) | 0) << 3 | 0) | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862((HEAP32[($5_1 + 48 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($5_1 + 40 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($5_1 + 40 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[($5_1 + 84 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($5_1 + 40 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($5_1 + 40 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF64[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 84 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($5_1 + 40 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[($5_1 + 80 | 0) >> 2] | 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAPF64[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($5_1 + 40 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$9
    }
    $181_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 1 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
    HEAPF64[$181_1 >> 3] = +HEAPF64[$181_1 >> 3] + +HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + (HEAP32[($5_1 + 80 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($5_1 + 40 | 0) >> 2] = 0;
    label$11 : {
     label$12 : while (1) {
      if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      $214_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 1 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
      HEAPF64[$214_1 >> 3] = +HEAPF64[$214_1 >> 3] - +HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + (HEAP32[($5_1 + 80 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($5_1 + 40 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 1 | 0;
      continue label$12;
     };
    }
    HEAP32[($5_1 + 36 | 0) >> 2] = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$10;
   };
  }
  HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  label$13 : {
   label$14 : while (1) {
    if (!((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$13
    }
    $250_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 1 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
    HEAPF64[$250_1 >> 3] = +HEAPF64[$250_1 >> 3] + +HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + (((((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + (HEAP32[($5_1 + 80 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 76 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($5_1 + 40 | 0) >> 2] = 0;
    label$15 : {
     label$16 : while (1) {
      if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$15
      }
      $287_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 1 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
      HEAPF64[$287_1 >> 3] = +HEAPF64[$287_1 >> 3] + +HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 84 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + (((((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + (HEAP32[($5_1 + 80 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 76 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($5_1 + 40 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 1 | 0;
      continue label$16;
     };
    }
    HEAP32[($5_1 + 36 | 0) >> 2] = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$14;
   };
  }
  HEAP32[($5_1 + 40 | 0) >> 2] = 0;
  label$17 : {
   label$18 : while (1) {
    if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$17
    }
    HEAPF64[(((HEAP32[$5_1 >> 2] | 0) + 96 | 0) + ((((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($5_1 + 40 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$18;
   };
  }
  label$19 : {
   if (!((HEAP32[((HEAP32[$5_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$19
   }
   HEAP32[($5_1 + 40 | 0) >> 2] = 0;
   label$20 : {
    label$21 : while (1) {
     if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$20
     }
     HEAPF64[($5_1 + 88 | 0) >> 3] = +HEAPF64[(((HEAP32[$5_1 >> 2] | 0) + 96 | 0) + ((((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 1 | 0) | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($5_1 + 36 | 0) >> 2] = 0;
     label$22 : {
      label$23 : while (1) {
       if (!((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$22
       }
       HEAPF64[($5_1 + 88 | 0) >> 3] = +HEAPF64[($5_1 + 88 | 0) >> 3] - +HEAPF64[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($5_1 + 36 | 0) >> 2] | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 124 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($5_1 + 36 | 0) >> 2] = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 1 | 0;
       continue label$23;
      };
     }
     HEAPF64[(((HEAP32[$5_1 >> 2] | 0) + 96 | 0) + (((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($5_1 + 88 | 0) >> 3];
     HEAP32[($5_1 + 40 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 1 | 0;
     continue label$21;
    };
   }
  }
  HEAP32[($5_1 + 28 | 0) >> 2] = 0;
  HEAPF64[($5_1 + 96 | 0) >> 3] = +(0 | 0);
  HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$24 : {
   label$25 : while (1) {
    if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$24
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    HEAPF64[($5_1 + 88 | 0) >> 3] = +HEAPF64[(((HEAP32[$5_1 >> 2] | 0) + 96 | 0) + (((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($5_1 + 36 | 0) >> 2] = 0;
    label$26 : {
     label$27 : while (1) {
      if (!((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$26
      }
      HEAPF64[($5_1 + 88 | 0) >> 3] = +HEAPF64[($5_1 + 88 | 0) >> 3] - +HEAPF64[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[(((HEAP32[$5_1 >> 2] | 0) + 96 | 0) + (((((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) - (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($5_1 + 36 | 0) >> 2] = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$27;
     };
    }
    label$28 : {
     label$29 : {
      if (!(((HEAP32[($5_1 + 40 | 0) >> 2] | 0) - (HEAP32[($5_1 + 24 | 0) >> 2] | 0) | 0 | 0) < (HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$29
      }
      HEAP32[($5_1 + 52 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) - (HEAP32[($5_1 + 24 | 0) >> 2] | 0) | 0;
      break label$28;
     }
     HEAP32[($5_1 + 52 | 0) >> 2] = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    }
    HEAP32[($5_1 + 36 | 0) >> 2] = 0;
    label$30 : {
     label$31 : while (1) {
      if (!((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$30
      }
      HEAPF64[($5_1 + 88 | 0) >> 3] = +HEAPF64[($5_1 + 88 | 0) >> 3] - +HEAPF64[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[(((HEAP32[$5_1 >> 2] | 0) + 96 | 0) + ((((((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) - (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($5_1 + 36 | 0) >> 2] = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$31;
     };
    }
    HEAPF64[(((HEAP32[$5_1 >> 2] | 0) + 96 | 0) + ((((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($5_1 + 88 | 0) >> 3];
    HEAPF64[($5_1 + 96 | 0) >> 3] = +HEAPF64[($5_1 + 96 | 0) >> 3] + +HEAPF64[($5_1 + 88 | 0) >> 3] * +HEAPF64[($5_1 + 88 | 0) >> 3];
    HEAP32[($5_1 + 40 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$25;
   };
  }
  HEAPF64[((HEAP32[$5_1 >> 2] | 0) + 72 | 0) >> 3] = +HEAPF64[($5_1 + 96 | 0) >> 3];
  HEAP32[((HEAP32[$5_1 >> 2] | 0) + 48 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = .5 * +$729(+(+HEAPF64[($5_1 + 96 | 0) >> 3] / +(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0)))), HEAPF64[(wasm2js_i32$0 + 104 | 0) >> 3] = wasm2js_f64$0;
  HEAPF64[((HEAP32[$5_1 >> 2] | 0) + 80 | 0) >> 3] = +HEAPF64[($5_1 + 104 | 0) >> 3];
  $863(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  $559_1 = +HEAPF64[($5_1 + 104 | 0) >> 3];
  global$0 = $5_1 + 128 | 0;
  return +$559_1;
 }
 
 function $65($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $863(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $66($0_1) {
  $0_1 = +$0_1;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $29_1 = 0, $56_1 = 0, $32_1 = 0, $59_1 = 0, $335_1 = 0, $355_1 = 0, $6_1 = 0, $83_1 = 0, $94_1 = 0, $17_1 = 0, $97_1 = 0, $20_1 = 0, $21_1 = 0, $24_1 = 0, $33_1 = 0, $36_1 = 0, $39_1 = 0, $42_1 = 0, $45_1 = 0, $48_1 = 0, $51_1 = 0, $60_1 = 0, $63_1 = 0, $66_1 = 0, $69_1 = 0, $72_1 = 0, $75_1 = 0, $78_1 = 0, $98_1 = 0, $101_1 = 0, $104_1 = 0, $416_1 = 0, $426_1 = 0, $436_1 = 0, $448_1 = 0, $458_1 = 0, $468_1 = 0, $478_1 = 0, $488_1 = 0, $498_1 = 0, $508_1 = 0, $518_1 = 0, $530_1 = 0, $540_1 = 0, $550_1 = 0, $560_1 = 0, $570_1 = 0, $580_1 = 0, $590_1 = 0, $600_1 = 0, $648_1 = 0, $658_1 = 0, $668_1 = 0, $678_1 = 0, $334_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $3_1 = global$0 - 352 | 0;
  global$0 = $3_1;
  HEAPF64[($3_1 + 336 | 0) >> 3] = $0_1;
  HEAPF64[($3_1 + 328 | 0) >> 3] = .564189583547756;
  $6_1 = $3_1 + 288 | 0;
  i64toi32_i32$0 = 0;
  $335_1 = 0;
  i64toi32_i32$1 = $6_1;
  HEAP32[i64toi32_i32$1 >> 2] = $335_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $335_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $6_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $335_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $6_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $335_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $6_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $335_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF64[($3_1 + 288 | 0) >> 3] = .000077105849500132;
  HEAPF64[($3_1 + 296 | 0) >> 3] = -.00133733772997339;
  HEAPF64[($3_1 + 304 | 0) >> 3] = .0323076579225834;
  HEAPF64[($3_1 + 312 | 0) >> 3] = .0479137145607681;
  HEAPF64[($3_1 + 320 | 0) >> 3] = .128379167095513;
  $17_1 = $3_1 + 256 | 0;
  $20_1 = global$3 + 8160 | 0;
  i64toi32_i32$2 = $20_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $416_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $17_1;
  HEAP32[i64toi32_i32$0 >> 2] = $416_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $21_1 = 16;
  i64toi32_i32$2 = i64toi32_i32$2 + $21_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $426_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $17_1 + $21_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $426_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $24_1 = 8;
  i64toi32_i32$2 = $20_1 + $24_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $436_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $17_1 + $24_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $436_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $29_1 = $3_1 + 192 | 0;
  $32_1 = global$3 + 8192 | 0;
  i64toi32_i32$2 = $32_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $448_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $29_1;
  HEAP32[i64toi32_i32$1 >> 2] = $448_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $33_1 = 56;
  i64toi32_i32$2 = i64toi32_i32$2 + $33_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $458_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $29_1 + $33_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $458_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $36_1 = 48;
  i64toi32_i32$2 = $32_1 + $36_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $468_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $29_1 + $36_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $468_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $39_1 = 40;
  i64toi32_i32$2 = $32_1 + $39_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $478_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $29_1 + $39_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $478_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $42_1 = 32;
  i64toi32_i32$2 = $32_1 + $42_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $488_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $29_1 + $42_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $488_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $45_1 = 24;
  i64toi32_i32$2 = $32_1 + $45_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $498_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $29_1 + $45_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $498_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $48_1 = 16;
  i64toi32_i32$2 = $32_1 + $48_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $508_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $29_1 + $48_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $508_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $51_1 = 8;
  i64toi32_i32$2 = $32_1 + $51_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $518_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $29_1 + $51_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $518_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $56_1 = $3_1 + 128 | 0;
  $59_1 = global$3 + 8256 | 0;
  i64toi32_i32$2 = $59_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $530_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $56_1;
  HEAP32[i64toi32_i32$1 >> 2] = $530_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $60_1 = 56;
  i64toi32_i32$2 = i64toi32_i32$2 + $60_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $540_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $56_1 + $60_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $540_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $63_1 = 48;
  i64toi32_i32$2 = $59_1 + $63_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $550_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $56_1 + $63_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $550_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $66_1 = 40;
  i64toi32_i32$2 = $59_1 + $66_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $560_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $56_1 + $66_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $560_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $69_1 = 32;
  i64toi32_i32$2 = $59_1 + $69_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $570_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $56_1 + $69_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $570_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $72_1 = 24;
  i64toi32_i32$2 = $59_1 + $72_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $580_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $56_1 + $72_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $580_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $75_1 = 16;
  i64toi32_i32$2 = $59_1 + $75_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $590_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $56_1 + $75_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $590_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $78_1 = 8;
  i64toi32_i32$2 = $59_1 + $78_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $600_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $56_1 + $78_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $600_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $83_1 = $3_1 + 80 | 0;
  i64toi32_i32$1 = 0;
  $355_1 = 0;
  i64toi32_i32$0 = $83_1;
  HEAP32[i64toi32_i32$0 >> 2] = $355_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = i64toi32_i32$0 + 32 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $355_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $83_1 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $355_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $83_1 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $355_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $83_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $355_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAPF64[($3_1 + 80 | 0) >> 3] = 2.10144126479064;
  HEAPF64[($3_1 + 88 | 0) >> 3] = 26.2370141675169;
  HEAPF64[($3_1 + 96 | 0) >> 3] = 21.3688200555087;
  HEAPF64[($3_1 + 104 | 0) >> 3] = 4.6580782871847;
  HEAPF64[($3_1 + 112 | 0) >> 3] = .282094791773523;
  $94_1 = $3_1 + 48 | 0;
  $97_1 = global$3 + 8320 | 0;
  i64toi32_i32$2 = $97_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $648_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $94_1;
  HEAP32[i64toi32_i32$1 >> 2] = $648_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $98_1 = 24;
  i64toi32_i32$2 = i64toi32_i32$2 + $98_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $658_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $94_1 + $98_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $658_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $101_1 = 16;
  i64toi32_i32$2 = $97_1 + $101_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $668_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $94_1 + $101_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $668_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $104_1 = 8;
  i64toi32_i32$2 = $97_1 + $104_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $678_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $94_1 + $104_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $678_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAPF64[($3_1 + 16 | 0) >> 3] = Math_abs(+HEAPF64[($3_1 + 336 | 0) >> 3]);
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($3_1 + 16 | 0) >> 3] <= .5 & 1 | 0)) {
     break label$2
    }
    HEAPF64[($3_1 + 32 | 0) >> 3] = +HEAPF64[($3_1 + 336 | 0) >> 3] * +HEAPF64[($3_1 + 336 | 0) >> 3];
    HEAPF64[$3_1 >> 3] = (((+HEAPF64[($3_1 + 288 | 0) >> 3] * +HEAPF64[($3_1 + 32 | 0) >> 3] + +HEAPF64[($3_1 + 296 | 0) >> 3]) * +HEAPF64[($3_1 + 32 | 0) >> 3] + +HEAPF64[($3_1 + 304 | 0) >> 3]) * +HEAPF64[($3_1 + 32 | 0) >> 3] + +HEAPF64[($3_1 + 312 | 0) >> 3]) * +HEAPF64[($3_1 + 32 | 0) >> 3] + +HEAPF64[($3_1 + 320 | 0) >> 3] + 1.0;
    HEAPF64[($3_1 + 8 | 0) >> 3] = ((+HEAPF64[($3_1 + 256 | 0) >> 3] * +HEAPF64[($3_1 + 32 | 0) >> 3] + +HEAPF64[($3_1 + 264 | 0) >> 3]) * +HEAPF64[($3_1 + 32 | 0) >> 3] + +HEAPF64[($3_1 + 272 | 0) >> 3]) * +HEAPF64[($3_1 + 32 | 0) >> 3] + 1.0;
    HEAPF64[($3_1 + 344 | 0) >> 3] = +HEAPF64[($3_1 + 336 | 0) >> 3] * (+HEAPF64[$3_1 >> 3] / +HEAPF64[($3_1 + 8 | 0) >> 3]);
    break label$1;
   }
   label$3 : {
    if (!(+HEAPF64[($3_1 + 16 | 0) >> 3] <= 4.0 & 1 | 0)) {
     break label$3
    }
    HEAPF64[$3_1 >> 3] = ((((((+HEAPF64[($3_1 + 192 | 0) >> 3] * +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 200 | 0) >> 3]) * +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 208 | 0) >> 3]) * +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 216 | 0) >> 3]) * +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 224 | 0) >> 3]) * +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 232 | 0) >> 3]) * +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 240 | 0) >> 3]) * +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 248 | 0) >> 3];
    HEAPF64[($3_1 + 8 | 0) >> 3] = ((((((+HEAPF64[($3_1 + 128 | 0) >> 3] * +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 136 | 0) >> 3]) * +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 144 | 0) >> 3]) * +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 152 | 0) >> 3]) * +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 160 | 0) >> 3]) * +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 168 | 0) >> 3]) * +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 176 | 0) >> 3]) * +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 184 | 0) >> 3];
    (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = .5 - +$730(+(-+HEAPF64[($3_1 + 336 | 0) >> 3] * +HEAPF64[($3_1 + 336 | 0) >> 3])) * +HEAPF64[$3_1 >> 3] / +HEAPF64[($3_1 + 8 | 0) >> 3] + .5), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
    label$4 : {
     if (!(+HEAPF64[($3_1 + 336 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAPF64[($3_1 + 40 | 0) >> 3] = -+HEAPF64[($3_1 + 40 | 0) >> 3];
    }
    HEAPF64[($3_1 + 344 | 0) >> 3] = +HEAPF64[($3_1 + 40 | 0) >> 3];
    break label$1;
   }
   label$5 : {
    if (!(+HEAPF64[($3_1 + 16 | 0) >> 3] >= 5.8 & 1 | 0)) {
     break label$5
    }
    HEAPF64[($3_1 + 344 | 0) >> 3] = +((+HEAPF64[($3_1 + 336 | 0) >> 3] > +(0 | 0) & 1 | 0 ? 1 : -1) | 0);
    break label$1;
   }
   HEAPF64[($3_1 + 24 | 0) >> 3] = +HEAPF64[($3_1 + 336 | 0) >> 3] * +HEAPF64[($3_1 + 336 | 0) >> 3];
   HEAPF64[($3_1 + 32 | 0) >> 3] = 1.0 / +HEAPF64[($3_1 + 24 | 0) >> 3];
   HEAPF64[$3_1 >> 3] = (((+HEAPF64[($3_1 + 80 | 0) >> 3] * +HEAPF64[($3_1 + 32 | 0) >> 3] + +HEAPF64[($3_1 + 88 | 0) >> 3]) * +HEAPF64[($3_1 + 32 | 0) >> 3] + +HEAPF64[($3_1 + 96 | 0) >> 3]) * +HEAPF64[($3_1 + 32 | 0) >> 3] + +HEAPF64[($3_1 + 104 | 0) >> 3]) * +HEAPF64[($3_1 + 32 | 0) >> 3] + +HEAPF64[($3_1 + 112 | 0) >> 3];
   HEAPF64[($3_1 + 8 | 0) >> 3] = (((+HEAPF64[($3_1 + 48 | 0) >> 3] * +HEAPF64[($3_1 + 32 | 0) >> 3] + +HEAPF64[($3_1 + 56 | 0) >> 3]) * +HEAPF64[($3_1 + 32 | 0) >> 3] + +HEAPF64[($3_1 + 64 | 0) >> 3]) * +HEAPF64[($3_1 + 32 | 0) >> 3] + +HEAPF64[($3_1 + 72 | 0) >> 3]) * +HEAPF64[($3_1 + 32 | 0) >> 3] + 1.0;
   HEAPF64[($3_1 + 32 | 0) >> 3] = (+HEAPF64[($3_1 + 328 | 0) >> 3] - +HEAPF64[$3_1 >> 3] / (+HEAPF64[($3_1 + 24 | 0) >> 3] * +HEAPF64[($3_1 + 8 | 0) >> 3])) / +HEAPF64[($3_1 + 16 | 0) >> 3];
   (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = .5 - +$730(+-+HEAPF64[($3_1 + 24 | 0) >> 3]) * +HEAPF64[($3_1 + 32 | 0) >> 3] + .5), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
   label$6 : {
    if (!(+HEAPF64[($3_1 + 336 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAPF64[($3_1 + 40 | 0) >> 3] = -+HEAPF64[($3_1 + 40 | 0) >> 3];
   }
   HEAPF64[($3_1 + 344 | 0) >> 3] = +HEAPF64[($3_1 + 40 | 0) >> 3];
  }
  $334_1 = +HEAPF64[($3_1 + 344 | 0) >> 3];
  global$0 = $3_1 + 352 | 0;
  return +$334_1;
 }
 
 function $67($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $30_1 = 0, $57_1 = 0, $33_1 = 0, $60_1 = 0, $367_1 = 0, $387_1 = 0, $7_1 = 0, $84_1 = 0, $95_1 = 0, $18_1 = 0, $98_1 = 0, $21_1 = 0, $22_1 = 0, $25_1 = 0, $34_1 = 0, $37_1 = 0, $40_1 = 0, $43_1 = 0, $46_1 = 0, $49_1 = 0, $52_1 = 0, $61_1 = 0, $64_1 = 0, $67_1 = 0, $70_1 = 0, $73_1 = 0, $76_1 = 0, $79_1 = 0, $99_1 = 0, $102_1 = 0, $105_1 = 0, $450_1 = 0, $460_1 = 0, $470_1 = 0, $482_1 = 0, $492_1 = 0, $502_1 = 0, $512_1 = 0, $522_1 = 0, $532_1 = 0, $542_1 = 0, $552_1 = 0, $564_1 = 0, $574_1 = 0, $584_1 = 0, $594_1 = 0, $604_1 = 0, $614_1 = 0, $624_1 = 0, $634_1 = 0, $682_1 = 0, $692_1 = 0, $702_1 = 0, $712_1 = 0, $366_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $4_1 = global$0 - 400 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 388 | 0) >> 2] = $0_1;
  HEAPF64[($4_1 + 376 | 0) >> 3] = $1_1;
  HEAPF64[($4_1 + 368 | 0) >> 3] = .564189583547756;
  $7_1 = $4_1 + 320 | 0;
  i64toi32_i32$0 = 0;
  $367_1 = 0;
  i64toi32_i32$1 = $7_1;
  HEAP32[i64toi32_i32$1 >> 2] = $367_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $367_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $7_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $367_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $7_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $367_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $7_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $367_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF64[($4_1 + 320 | 0) >> 3] = .000077105849500132;
  HEAPF64[($4_1 + 328 | 0) >> 3] = -.00133733772997339;
  HEAPF64[($4_1 + 336 | 0) >> 3] = .0323076579225834;
  HEAPF64[($4_1 + 344 | 0) >> 3] = .0479137145607681;
  HEAPF64[($4_1 + 352 | 0) >> 3] = .128379167095513;
  $18_1 = $4_1 + 288 | 0;
  $21_1 = global$3 + 8352 | 0;
  i64toi32_i32$2 = $21_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $450_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $18_1;
  HEAP32[i64toi32_i32$0 >> 2] = $450_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $22_1 = 16;
  i64toi32_i32$2 = i64toi32_i32$2 + $22_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $460_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $18_1 + $22_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $460_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $25_1 = 8;
  i64toi32_i32$2 = $21_1 + $25_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $470_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $18_1 + $25_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $470_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $30_1 = $4_1 + 224 | 0;
  $33_1 = global$3 + 8384 | 0;
  i64toi32_i32$2 = $33_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $482_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $30_1;
  HEAP32[i64toi32_i32$1 >> 2] = $482_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $34_1 = 56;
  i64toi32_i32$2 = i64toi32_i32$2 + $34_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $492_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $30_1 + $34_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $492_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $37_1 = 48;
  i64toi32_i32$2 = $33_1 + $37_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $502_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $30_1 + $37_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $502_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $40_1 = 40;
  i64toi32_i32$2 = $33_1 + $40_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $512_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $30_1 + $40_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $512_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $43_1 = 32;
  i64toi32_i32$2 = $33_1 + $43_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $522_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $30_1 + $43_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $522_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $46_1 = 24;
  i64toi32_i32$2 = $33_1 + $46_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $532_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $30_1 + $46_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $532_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $49_1 = 16;
  i64toi32_i32$2 = $33_1 + $49_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $542_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $30_1 + $49_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $542_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $52_1 = 8;
  i64toi32_i32$2 = $33_1 + $52_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $552_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $30_1 + $52_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $552_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $57_1 = $4_1 + 160 | 0;
  $60_1 = global$3 + 8448 | 0;
  i64toi32_i32$2 = $60_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $564_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $57_1;
  HEAP32[i64toi32_i32$1 >> 2] = $564_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $61_1 = 56;
  i64toi32_i32$2 = i64toi32_i32$2 + $61_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $574_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $57_1 + $61_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $574_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $64_1 = 48;
  i64toi32_i32$2 = $60_1 + $64_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $584_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $57_1 + $64_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $584_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $67_1 = 40;
  i64toi32_i32$2 = $60_1 + $67_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $594_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $57_1 + $67_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $594_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $70_1 = 32;
  i64toi32_i32$2 = $60_1 + $70_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $604_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $57_1 + $70_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $604_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $73_1 = 24;
  i64toi32_i32$2 = $60_1 + $73_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $614_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $57_1 + $73_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $614_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $76_1 = 16;
  i64toi32_i32$2 = $60_1 + $76_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $624_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $57_1 + $76_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $624_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $79_1 = 8;
  i64toi32_i32$2 = $60_1 + $79_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $634_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $57_1 + $79_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $634_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $84_1 = $4_1 + 112 | 0;
  i64toi32_i32$1 = 0;
  $387_1 = 0;
  i64toi32_i32$0 = $84_1;
  HEAP32[i64toi32_i32$0 >> 2] = $387_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = i64toi32_i32$0 + 32 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $387_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $84_1 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $387_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $84_1 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $387_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $84_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $387_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAPF64[($4_1 + 112 | 0) >> 3] = 2.10144126479064;
  HEAPF64[($4_1 + 120 | 0) >> 3] = 26.2370141675169;
  HEAPF64[($4_1 + 128 | 0) >> 3] = 21.3688200555087;
  HEAPF64[($4_1 + 136 | 0) >> 3] = 4.6580782871847;
  HEAPF64[($4_1 + 144 | 0) >> 3] = .282094791773523;
  $95_1 = $4_1 + 80 | 0;
  $98_1 = global$3 + 8512 | 0;
  i64toi32_i32$2 = $98_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $682_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $95_1;
  HEAP32[i64toi32_i32$1 >> 2] = $682_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $99_1 = 24;
  i64toi32_i32$2 = i64toi32_i32$2 + $99_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $692_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $95_1 + $99_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $692_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $102_1 = 16;
  i64toi32_i32$2 = $98_1 + $102_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $702_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $95_1 + $102_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $702_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $105_1 = 8;
  i64toi32_i32$2 = $98_1 + $105_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $712_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $95_1 + $105_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $712_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAPF64[($4_1 + 24 | 0) >> 3] = Math_abs(+HEAPF64[($4_1 + 376 | 0) >> 3]);
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($4_1 + 24 | 0) >> 3] <= .5 & 1 | 0)) {
     break label$2
    }
    HEAPF64[($4_1 + 16 | 0) >> 3] = +HEAPF64[($4_1 + 376 | 0) >> 3] * +HEAPF64[($4_1 + 376 | 0) >> 3];
    HEAPF64[($4_1 + 8 | 0) >> 3] = (((+HEAPF64[($4_1 + 320 | 0) >> 3] * +HEAPF64[($4_1 + 16 | 0) >> 3] + +HEAPF64[($4_1 + 328 | 0) >> 3]) * +HEAPF64[($4_1 + 16 | 0) >> 3] + +HEAPF64[($4_1 + 336 | 0) >> 3]) * +HEAPF64[($4_1 + 16 | 0) >> 3] + +HEAPF64[($4_1 + 344 | 0) >> 3]) * +HEAPF64[($4_1 + 16 | 0) >> 3] + +HEAPF64[($4_1 + 352 | 0) >> 3] + 1.0;
    HEAPF64[$4_1 >> 3] = ((+HEAPF64[($4_1 + 288 | 0) >> 3] * +HEAPF64[($4_1 + 16 | 0) >> 3] + +HEAPF64[($4_1 + 296 | 0) >> 3]) * +HEAPF64[($4_1 + 16 | 0) >> 3] + +HEAPF64[($4_1 + 304 | 0) >> 3]) * +HEAPF64[($4_1 + 16 | 0) >> 3] + 1.0;
    HEAPF64[($4_1 + 72 | 0) >> 3] = .5 - +HEAPF64[($4_1 + 376 | 0) >> 3] * (+HEAPF64[($4_1 + 8 | 0) >> 3] / +HEAPF64[$4_1 >> 3]) + .5;
    label$3 : {
     if (!(HEAP32[($4_1 + 388 | 0) >> 2] | 0)) {
      break label$3
     }
     (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +$730(+(+HEAPF64[($4_1 + 16 | 0) >> 3])) * +HEAPF64[($4_1 + 72 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 72 | 0) >> 3] = wasm2js_f64$0;
    }
    HEAPF64[($4_1 + 392 | 0) >> 3] = +HEAPF64[($4_1 + 72 | 0) >> 3];
    break label$1;
   }
   label$4 : {
    label$5 : {
     if (!(+HEAPF64[($4_1 + 24 | 0) >> 3] <= 4.0 & 1 | 0)) {
      break label$5
     }
     HEAPF64[($4_1 + 32 | 0) >> 3] = ((((((+HEAPF64[($4_1 + 224 | 0) >> 3] * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 232 | 0) >> 3]) * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 240 | 0) >> 3]) * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 248 | 0) >> 3]) * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 256 | 0) >> 3]) * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 264 | 0) >> 3]) * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 272 | 0) >> 3]) * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 280 | 0) >> 3];
     HEAPF64[($4_1 + 40 | 0) >> 3] = ((((((+HEAPF64[($4_1 + 160 | 0) >> 3] * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 168 | 0) >> 3]) * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 176 | 0) >> 3]) * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 184 | 0) >> 3]) * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 192 | 0) >> 3]) * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 200 | 0) >> 3]) * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 208 | 0) >> 3]) * +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 216 | 0) >> 3];
     HEAPF64[($4_1 + 72 | 0) >> 3] = +HEAPF64[($4_1 + 32 | 0) >> 3] / +HEAPF64[($4_1 + 40 | 0) >> 3];
     break label$4;
    }
    label$6 : {
     if (!(+HEAPF64[($4_1 + 376 | 0) >> 3] <= -5.6 & 1 | 0)) {
      break label$6
     }
     HEAPF64[($4_1 + 72 | 0) >> 3] = 2.0;
     label$7 : {
      if (!(HEAP32[($4_1 + 388 | 0) >> 2] | 0)) {
       break label$7
      }
      (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +$730(+(+HEAPF64[($4_1 + 376 | 0) >> 3] * +HEAPF64[($4_1 + 376 | 0) >> 3])) * 2.0), HEAPF64[(wasm2js_i32$0 + 72 | 0) >> 3] = wasm2js_f64$0;
     }
     HEAPF64[($4_1 + 392 | 0) >> 3] = +HEAPF64[($4_1 + 72 | 0) >> 3];
     break label$1;
    }
    label$8 : {
     if (HEAP32[($4_1 + 388 | 0) >> 2] | 0) {
      break label$8
     }
     label$9 : {
      if (+HEAPF64[($4_1 + 376 | 0) >> 3] > 100.0 & 1 | 0) {
       break label$9
      }
      if (!(+HEAPF64[($4_1 + 376 | 0) >> 3] * +HEAPF64[($4_1 + 376 | 0) >> 3] > -+$68(1 | 0) & 1 | 0)) {
       break label$8
      }
     }
     HEAPF64[($4_1 + 392 | 0) >> 3] = +(0 | 0);
     break label$1;
    }
    HEAPF64[($4_1 + 56 | 0) >> 3] = 1.0 / (+HEAPF64[($4_1 + 376 | 0) >> 3] * +HEAPF64[($4_1 + 376 | 0) >> 3]);
    HEAPF64[($4_1 + 32 | 0) >> 3] = (((+HEAPF64[($4_1 + 112 | 0) >> 3] * +HEAPF64[($4_1 + 56 | 0) >> 3] + +HEAPF64[($4_1 + 120 | 0) >> 3]) * +HEAPF64[($4_1 + 56 | 0) >> 3] + +HEAPF64[($4_1 + 128 | 0) >> 3]) * +HEAPF64[($4_1 + 56 | 0) >> 3] + +HEAPF64[($4_1 + 136 | 0) >> 3]) * +HEAPF64[($4_1 + 56 | 0) >> 3] + +HEAPF64[($4_1 + 144 | 0) >> 3];
    HEAPF64[($4_1 + 40 | 0) >> 3] = (((+HEAPF64[($4_1 + 80 | 0) >> 3] * +HEAPF64[($4_1 + 56 | 0) >> 3] + +HEAPF64[($4_1 + 88 | 0) >> 3]) * +HEAPF64[($4_1 + 56 | 0) >> 3] + +HEAPF64[($4_1 + 96 | 0) >> 3]) * +HEAPF64[($4_1 + 56 | 0) >> 3] + +HEAPF64[($4_1 + 104 | 0) >> 3]) * +HEAPF64[($4_1 + 56 | 0) >> 3] + 1.0;
    HEAPF64[($4_1 + 72 | 0) >> 3] = (+HEAPF64[($4_1 + 368 | 0) >> 3] - +HEAPF64[($4_1 + 56 | 0) >> 3] * +HEAPF64[($4_1 + 32 | 0) >> 3] / +HEAPF64[($4_1 + 40 | 0) >> 3]) / +HEAPF64[($4_1 + 24 | 0) >> 3];
   }
   label$10 : {
    label$11 : {
     if (!(HEAP32[($4_1 + 388 | 0) >> 2] | 0)) {
      break label$11
     }
     label$12 : {
      if (!(+HEAPF64[($4_1 + 376 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
       break label$12
      }
      (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +$730(+(+HEAPF64[($4_1 + 376 | 0) >> 3] * +HEAPF64[($4_1 + 376 | 0) >> 3])) * 2.0 - +HEAPF64[($4_1 + 72 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 72 | 0) >> 3] = wasm2js_f64$0;
     }
     break label$10;
    }
    HEAPF64[($4_1 + 48 | 0) >> 3] = +HEAPF64[($4_1 + 376 | 0) >> 3] * +HEAPF64[($4_1 + 376 | 0) >> 3];
    HEAPF64[($4_1 + 56 | 0) >> 3] = +HEAPF64[($4_1 + 48 | 0) >> 3];
    HEAPF64[($4_1 + 64 | 0) >> 3] = +HEAPF64[($4_1 + 48 | 0) >> 3] - +HEAPF64[($4_1 + 56 | 0) >> 3];
    (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = (.5 - +HEAPF64[($4_1 + 64 | 0) >> 3] + .5) * +$730(+-+HEAPF64[($4_1 + 56 | 0) >> 3]) * +HEAPF64[($4_1 + 72 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 72 | 0) >> 3] = wasm2js_f64$0;
    label$13 : {
     if (!(+HEAPF64[($4_1 + 376 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
      break label$13
     }
     HEAPF64[($4_1 + 72 | 0) >> 3] = 2.0 - +HEAPF64[($4_1 + 72 | 0) >> 3];
    }
   }
   HEAPF64[($4_1 + 392 | 0) >> 3] = +HEAPF64[($4_1 + 72 | 0) >> 3];
  }
  $366_1 = +HEAPF64[($4_1 + 392 | 0) >> 3];
  global$0 = $4_1 + 400 | 0;
  return +$366_1;
 }
 
 function $68($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAPF64[($3_1 + 16 | 0) >> 3] = .69314718055995;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0 ? -1022 : 1024;
  return +(+(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) * +HEAPF64[($3_1 + 16 | 0) >> 3] * .99999);
 }
 
 function $69($0_1) {
  $0_1 = +$0_1;
  var $3_1 = 0, $7_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF64[($3_1 + 8 | 0) >> 3] = $0_1;
  $7_1 = +$66(+(+HEAPF64[($3_1 + 8 | 0) >> 3]));
  global$0 = $3_1 + 16 | 0;
  return +$7_1;
 }
 
 function $70($0_1) {
  $0_1 = +$0_1;
  var $3_1 = 0, $8_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAPF64[($3_1 + 8 | 0) >> 3] = $0_1;
  $8_1 = +$67(0 | 0, +(+HEAPF64[($3_1 + 8 | 0) >> 3]));
  global$0 = $3_1 + 16 | 0;
  return +$8_1;
 }
 
 function $71($0_1) {
  $0_1 = +$0_1;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $324_1 = 0, $325_1 = 0, $326_1 = 0, $322_1 = 0, $323_1 = 0, $49_1 = 0, $62_1 = 0, $81_1 = 0, $21_1 = 0, $32_1 = 0, $95_1 = 0, $96_1 = 0, $99_1 = 0, $888_1 = 0, $898 = 0, $908 = 0, $321_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $3_1 = global$0 - 352 | 0;
  global$0 = $3_1;
  HEAPF64[($3_1 + 344 | 0) >> 3] = $0_1;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($3_1 + 344 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[($3_1 + 288 | 0) >> 3] = 1.0;
    break label$1;
   }
   HEAPF64[($3_1 + 288 | 0) >> 3] = -1.0;
  }
  HEAPF64[($3_1 + 336 | 0) >> 3] = Math_abs(+HEAPF64[($3_1 + 344 | 0) >> 3]);
  HEAPF64[($3_1 + 296 | 0) >> 3] = 1.79e+308;
  HEAPF64[($3_1 + 272 | 0) >> 3] = 3.141592653589793;
  label$3 : {
   if (!(+HEAPF64[($3_1 + 336 | 0) >> 3] > 1.0 & 1 | 0)) {
    break label$3
   }
   $875(global$3 + 3631 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$4 : {
   label$5 : {
    if (!(+HEAPF64[($3_1 + 336 | 0) >> 3] <= .75 & 1 | 0)) {
     break label$5
    }
    $21_1 = $3_1 + 224 | 0;
    i64toi32_i32$0 = 0;
    $322_1 = 0;
    i64toi32_i32$1 = $21_1;
    HEAP32[i64toi32_i32$1 >> 2] = $322_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 32 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $322_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $21_1 + 24 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $322_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $21_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $322_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $21_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $322_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAPF64[($3_1 + 224 | 0) >> 3] = 4.62680202125696;
    HEAPF64[($3_1 + 232 | 0) >> 3] = -16.6805947126248;
    HEAPF64[($3_1 + 240 | 0) >> 3] = 17.6230176190819;
    HEAPF64[($3_1 + 248 | 0) >> 3] = -5.4309342907266;
    HEAPF64[($3_1 + 256 | 0) >> 3] = .236997019142;
    $32_1 = $3_1 + 176 | 0;
    i64toi32_i32$0 = 0;
    $323_1 = 0;
    i64toi32_i32$1 = $32_1;
    HEAP32[i64toi32_i32$1 >> 2] = $323_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 32 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $323_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $32_1 + 24 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $323_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $32_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $323_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $32_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $323_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAPF64[($3_1 + 176 | 0) >> 3] = 4.26606447606664;
    HEAPF64[($3_1 + 184 | 0) >> 3] = -17.5930726990431;
    HEAPF64[($3_1 + 192 | 0) >> 3] = 22.7331464544494;
    HEAPF64[($3_1 + 200 | 0) >> 3] = -9.9016863476727;
    HEAPF64[($3_1 + 208 | 0) >> 3] = 1.0;
    HEAPF64[($3_1 + 328 | 0) >> 3] = +HEAPF64[($3_1 + 344 | 0) >> 3] * +HEAPF64[($3_1 + 344 | 0) >> 3] - .5625;
    HEAPF64[($3_1 + 312 | 0) >> 3] = +HEAPF64[($3_1 + 224 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 232 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 240 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 248 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * +HEAPF64[($3_1 + 256 | 0) >> 3])));
    HEAPF64[($3_1 + 304 | 0) >> 3] = +HEAPF64[($3_1 + 176 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 184 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 192 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 200 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * +HEAPF64[($3_1 + 208 | 0) >> 3])));
    HEAPF64[($3_1 + 320 | 0) >> 3] = +HEAPF64[($3_1 + 344 | 0) >> 3] * +HEAPF64[($3_1 + 312 | 0) >> 3] / +HEAPF64[($3_1 + 304 | 0) >> 3];
    break label$4;
   }
   label$6 : {
    label$7 : {
     if (!(.75 < +HEAPF64[($3_1 + 336 | 0) >> 3] & 1 | 0)) {
      break label$7
     }
     if (!(+HEAPF64[($3_1 + 336 | 0) >> 3] <= .9375 & 1 | 0)) {
      break label$7
     }
     $49_1 = $3_1 + 128 | 0;
     i64toi32_i32$0 = 0;
     $324_1 = 0;
     i64toi32_i32$1 = $49_1;
     HEAP32[i64toi32_i32$1 >> 2] = $324_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$1 + 40 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $324_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $49_1 + 32 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $324_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $49_1 + 24 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $324_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $49_1 + 16 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $324_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $49_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $324_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAPF64[($3_1 + 128 | 0) >> 3] = -.041199817067782;
     HEAPF64[($3_1 + 136 | 0) >> 3] = .643729854003468;
     HEAPF64[($3_1 + 144 | 0) >> 3] = -3.28902674093993;
     HEAPF64[($3_1 + 152 | 0) >> 3] = 6.24518431579026;
     HEAPF64[($3_1 + 160 | 0) >> 3] = -3.65953596495117;
     HEAPF64[($3_1 + 168 | 0) >> 3] = .302601149432;
     $62_1 = $3_1 + 80 | 0;
     i64toi32_i32$0 = 0;
     $325_1 = 0;
     i64toi32_i32$1 = $62_1;
     HEAP32[i64toi32_i32$1 >> 2] = $325_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$1 + 40 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $325_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $62_1 + 32 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $325_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $62_1 + 24 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $325_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $62_1 + 16 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $325_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $62_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $325_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAPF64[($3_1 + 80 | 0) >> 3] = -.029324540620124;
     HEAPF64[($3_1 + 88 | 0) >> 3] = .501148500527886;
     HEAPF64[($3_1 + 96 | 0) >> 3] = -2.90144687299145;
     HEAPF64[($3_1 + 104 | 0) >> 3] = 6.65393051963183;
     HEAPF64[($3_1 + 112 | 0) >> 3] = -5.40640580412825;
     HEAPF64[($3_1 + 120 | 0) >> 3] = 1.0;
     HEAPF64[($3_1 + 328 | 0) >> 3] = +HEAPF64[($3_1 + 344 | 0) >> 3] * +HEAPF64[($3_1 + 344 | 0) >> 3] - .87890625;
     HEAPF64[($3_1 + 312 | 0) >> 3] = +HEAPF64[($3_1 + 128 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 136 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 144 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 152 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 160 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * +HEAPF64[($3_1 + 168 | 0) >> 3]))));
     HEAPF64[($3_1 + 304 | 0) >> 3] = +HEAPF64[($3_1 + 80 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 88 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 96 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 104 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 112 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * +HEAPF64[($3_1 + 120 | 0) >> 3]))));
     HEAPF64[($3_1 + 320 | 0) >> 3] = +HEAPF64[($3_1 + 344 | 0) >> 3] * +HEAPF64[($3_1 + 312 | 0) >> 3] / +HEAPF64[($3_1 + 304 | 0) >> 3];
     break label$6;
    }
    label$8 : {
     label$9 : {
      if (!(.9375 < +HEAPF64[($3_1 + 336 | 0) >> 3] & 1 | 0)) {
       break label$9
      }
      if (!(+HEAPF64[($3_1 + 336 | 0) >> 3] < 1.0 & 1 | 0)) {
       break label$9
      }
      $81_1 = $3_1 + 32 | 0;
      i64toi32_i32$0 = 0;
      $326_1 = 0;
      i64toi32_i32$1 = $81_1;
      HEAP32[i64toi32_i32$1 >> 2] = $326_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$1 + 40 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $326_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $81_1 + 32 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $326_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $81_1 + 24 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $326_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $81_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $326_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $81_1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $326_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAPF64[($3_1 + 32 | 0) >> 3] = .1550470003116;
      HEAPF64[($3_1 + 40 | 0) >> 3] = 1.382719649631;
      HEAPF64[($3_1 + 48 | 0) >> 3] = .690969348887;
      HEAPF64[($3_1 + 56 | 0) >> 3] = -1.128081391617;
      HEAPF64[($3_1 + 64 | 0) >> 3] = .680544246825;
      HEAPF64[($3_1 + 72 | 0) >> 3] = -.16444156791;
      $95_1 = global$3 + 8544 | 0;
      i64toi32_i32$2 = $95_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $888_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1;
      HEAP32[$3_1 >> 2] = $888_1;
      HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      $96_1 = 16;
      i64toi32_i32$2 = i64toi32_i32$2 + $96_1 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $898 = i64toi32_i32$1;
      i64toi32_i32$1 = $3_1 + $96_1 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $898;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $99_1 = 8;
      i64toi32_i32$2 = $95_1 + $99_1 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $908 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1 + $99_1 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $908;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = 1.0 / Math_sqrt(-+$729(+(1.0 - +HEAPF64[($3_1 + 336 | 0) >> 3])))), HEAPF64[(wasm2js_i32$0 + 328 | 0) >> 3] = wasm2js_f64$0;
      HEAPF64[($3_1 + 320 | 0) >> 3] = +HEAPF64[($3_1 + 288 | 0) >> 3] * (+HEAPF64[($3_1 + 32 | 0) >> 3] / +HEAPF64[($3_1 + 328 | 0) >> 3] + +HEAPF64[($3_1 + 40 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 48 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 56 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 64 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * +HEAPF64[($3_1 + 72 | 0) >> 3])))) / (+HEAPF64[$3_1 >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * (+HEAPF64[($3_1 + 8 | 0) >> 3] + +HEAPF64[($3_1 + 328 | 0) >> 3] * +HEAPF64[($3_1 + 16 | 0) >> 3]));
      break label$8;
     }
     HEAPF64[($3_1 + 320 | 0) >> 3] = +HEAPF64[($3_1 + 288 | 0) >> 3] * +HEAPF64[($3_1 + 296 | 0) >> 3];
    }
   }
  }
  label$10 : {
   if (!(+HEAPF64[($3_1 + 336 | 0) >> 3] < 1.0 & 1 | 0)) {
    break label$10
   }
   (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = (+$69(+(+HEAPF64[($3_1 + 320 | 0) >> 3])) - +HEAPF64[($3_1 + 344 | 0) >> 3]) / (2.0 / Math_sqrt(+HEAPF64[($3_1 + 272 | 0) >> 3]) * +$730(+-+$734(+(+HEAPF64[($3_1 + 320 | 0) >> 3]), +(2.0))))), HEAPF64[(wasm2js_i32$0 + 280 | 0) >> 3] = wasm2js_f64$0;
   HEAPF64[($3_1 + 320 | 0) >> 3] = +HEAPF64[($3_1 + 320 | 0) >> 3] - +HEAPF64[($3_1 + 280 | 0) >> 3] / (1.0 + +HEAPF64[($3_1 + 280 | 0) >> 3] * +HEAPF64[($3_1 + 320 | 0) >> 3]);
  }
  $321_1 = +HEAPF64[($3_1 + 320 | 0) >> 3];
  global$0 = $3_1 + 352 | 0;
  return +$321_1;
 }
 
 function $72($0_1) {
  $0_1 = +$0_1;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $196_1 = 0, $30_1 = 0, $62_1 = 0, $43_1 = 0, $65_1 = 0, $46_1 = 0, $47_1 = 0, $50_1 = 0, $66_1 = 0, $69_1 = 0, $72_1 = 0, $78_1 = 0, $79_1 = 0, $82_1 = 0, $350_1 = 0, $360_1 = 0, $370_1 = 0, $496_1 = 0, $506_1 = 0, $516_1 = 0, $526_1 = 0, $535_1 = 0, $545_1 = 0, $555_1 = 0, $195_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $3_1 = global$0 - 192 | 0;
  global$0 = $3_1;
  HEAPF64[($3_1 + 184 | 0) >> 3] = $0_1;
  HEAPF64[($3_1 + 168 | 0) >> 3] = 1.79e+308;
  HEAPF64[($3_1 + 160 | 0) >> 3] = 3.141592653589793;
  label$1 : {
   label$2 : {
    if (+HEAPF64[($3_1 + 184 | 0) >> 3] > 2.0 & 1 | 0) {
     break label$2
    }
    if (!(+HEAPF64[($3_1 + 184 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $875(global$3 + 3716 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$3 : {
   label$4 : {
    if (!(+HEAPF64[($3_1 + 184 | 0) >> 3] >= .0625 & 1 | 0)) {
     break label$4
    }
    if (!(+HEAPF64[($3_1 + 184 | 0) >> 3] < 2.0 & 1 | 0)) {
     break label$4
    }
    (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = +$71(+(1.0 - +HEAPF64[($3_1 + 184 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 176 | 0) >> 3] = wasm2js_f64$0;
    break label$3;
   }
   label$5 : {
    label$6 : {
     if (!(+HEAPF64[($3_1 + 184 | 0) >> 3] < .0625 & 1 | 0)) {
      break label$6
     }
     if (!(+HEAPF64[($3_1 + 184 | 0) >> 3] >= 1.0e-100 & 1 | 0)) {
      break label$6
     }
     $30_1 = $3_1 + 96 | 0;
     i64toi32_i32$0 = 0;
     $196_1 = 0;
     i64toi32_i32$1 = $30_1;
     HEAP32[i64toi32_i32$1 >> 2] = $196_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$1 + 40 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $196_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $30_1 + 32 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $196_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $30_1 + 24 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $196_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $30_1 + 16 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $196_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $30_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $196_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAPF64[($3_1 + 96 | 0) >> 3] = .1550470003116;
     HEAPF64[($3_1 + 104 | 0) >> 3] = 1.382719649631;
     HEAPF64[($3_1 + 112 | 0) >> 3] = .690969348887;
     HEAPF64[($3_1 + 120 | 0) >> 3] = -1.128081391617;
     HEAPF64[($3_1 + 128 | 0) >> 3] = .680544246825;
     HEAPF64[($3_1 + 136 | 0) >> 3] = -.16444156791;
     $43_1 = $3_1 + 64 | 0;
     $46_1 = global$3 + 8576 | 0;
     i64toi32_i32$2 = $46_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $350_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $43_1;
     HEAP32[i64toi32_i32$0 >> 2] = $350_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $47_1 = 16;
     i64toi32_i32$2 = i64toi32_i32$2 + $47_1 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $360_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $43_1 + $47_1 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $360_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $50_1 = 8;
     i64toi32_i32$2 = $46_1 + $50_1 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $370_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $43_1 + $50_1 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $370_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = 1.0 / Math_sqrt(-+$729(+(+HEAPF64[($3_1 + 184 | 0) >> 3])))), HEAPF64[(wasm2js_i32$0 + 152 | 0) >> 3] = wasm2js_f64$0;
     HEAPF64[($3_1 + 176 | 0) >> 3] = (+HEAPF64[($3_1 + 96 | 0) >> 3] / +HEAPF64[($3_1 + 152 | 0) >> 3] + +HEAPF64[($3_1 + 104 | 0) >> 3] + +HEAPF64[($3_1 + 152 | 0) >> 3] * (+HEAPF64[($3_1 + 112 | 0) >> 3] + +HEAPF64[($3_1 + 152 | 0) >> 3] * (+HEAPF64[($3_1 + 120 | 0) >> 3] + +HEAPF64[($3_1 + 152 | 0) >> 3] * (+HEAPF64[($3_1 + 128 | 0) >> 3] + +HEAPF64[($3_1 + 152 | 0) >> 3] * +HEAPF64[($3_1 + 136 | 0) >> 3])))) / (+HEAPF64[($3_1 + 64 | 0) >> 3] + +HEAPF64[($3_1 + 152 | 0) >> 3] * (+HEAPF64[($3_1 + 72 | 0) >> 3] + +HEAPF64[($3_1 + 152 | 0) >> 3] * +HEAPF64[($3_1 + 80 | 0) >> 3]));
     break label$5;
    }
    label$7 : {
     label$8 : {
      if (!(+HEAPF64[($3_1 + 184 | 0) >> 3] < 1.0e-100 & 1 | 0)) {
       break label$8
      }
      if (!(+HEAPF64[($3_1 + 184 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$8
      }
      $62_1 = $3_1 + 32 | 0;
      $65_1 = global$3 + 8608 | 0;
      i64toi32_i32$2 = $65_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $496_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $62_1;
      HEAP32[i64toi32_i32$1 >> 2] = $496_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $66_1 = 24;
      i64toi32_i32$2 = i64toi32_i32$2 + $66_1 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $506_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $62_1 + $66_1 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $506_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $69_1 = 16;
      i64toi32_i32$2 = $65_1 + $69_1 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $516_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $62_1 + $69_1 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $516_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $72_1 = 8;
      i64toi32_i32$2 = $65_1 + $72_1 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $526_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $62_1 + $72_1 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $526_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $78_1 = global$3 + 8640 | 0;
      i64toi32_i32$2 = $78_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $535_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $3_1;
      HEAP32[$3_1 >> 2] = $535_1;
      HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $79_1 = 16;
      i64toi32_i32$2 = i64toi32_i32$2 + $79_1 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $545_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1 + $79_1 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $545_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $82_1 = 8;
      i64toi32_i32$2 = $78_1 + $82_1 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $555_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $3_1 + $82_1 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $555_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = 1.0 / Math_sqrt(-+$729(+(+HEAPF64[($3_1 + 184 | 0) >> 3])))), HEAPF64[(wasm2js_i32$0 + 152 | 0) >> 3] = wasm2js_f64$0;
      HEAPF64[($3_1 + 176 | 0) >> 3] = (+HEAPF64[($3_1 + 32 | 0) >> 3] / +HEAPF64[($3_1 + 152 | 0) >> 3] + +HEAPF64[($3_1 + 40 | 0) >> 3] + +HEAPF64[($3_1 + 152 | 0) >> 3] * (+HEAPF64[($3_1 + 48 | 0) >> 3] + +HEAPF64[($3_1 + 152 | 0) >> 3] * +HEAPF64[($3_1 + 56 | 0) >> 3])) / (+HEAPF64[$3_1 >> 3] + +HEAPF64[($3_1 + 152 | 0) >> 3] * (+HEAPF64[($3_1 + 8 | 0) >> 3] + +HEAPF64[($3_1 + 152 | 0) >> 3] * +HEAPF64[($3_1 + 16 | 0) >> 3]));
      break label$7;
     }
     label$9 : {
      label$10 : {
       if (!(+HEAPF64[($3_1 + 184 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
        break label$10
       }
       HEAPF64[($3_1 + 176 | 0) >> 3] = +HEAPF64[($3_1 + 168 | 0) >> 3];
       break label$9;
      }
      label$11 : {
       if (!(+HEAPF64[($3_1 + 184 | 0) >> 3] == 2.0 & 1 | 0)) {
        break label$11
       }
       HEAPF64[($3_1 + 176 | 0) >> 3] = -+HEAPF64[($3_1 + 168 | 0) >> 3];
      }
     }
    }
   }
  }
  $195_1 = +HEAPF64[($3_1 + 176 | 0) >> 3];
  global$0 = $3_1 + 192 | 0;
  return +$195_1;
 }
 
 function $73($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) >= (HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $13(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $13(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0);
  }
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $74($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $215_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 68 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 64 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = $4_1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 64 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 52 | 0) >> 2] = 0;
  $106(HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0);
  $119(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, 1 | 0);
  $119(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0);
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $132(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($7_1 + 76 | 0) >> 2] = -1;
    break label$1;
   }
   $106(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0);
   HEAPF64[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 3] / +HEAPF64[(HEAP32[($7_1 + 4 | 0) >> 2] | 0) >> 3];
   HEAP32[($7_1 + 44 | 0) >> 2] = 1;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAPF64[($7_1 + 24 | 0) >> 3] = +(0 | 0);
     HEAP32[($7_1 + 36 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 44 | 0) >> 2] | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0);
     HEAP32[($7_1 + 40 | 0) >> 2] = 0;
     label$5 : {
      label$6 : while (1) {
       if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$5
       }
       HEAPF64[($7_1 + 24 | 0) >> 3] = +HEAPF64[($7_1 + 24 | 0) >> 3] + +HEAPF64[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0;
       continue label$6;
      };
     }
     HEAPF64[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($7_1 + 24 | 0) >> 3]) / +HEAPF64[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 44 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAPF64[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 60 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 60 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 60 | 0) >> 2] | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
   HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 60 | 0) >> 2] | 0) - 2 | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
      break label$7
     }
     HEAPF64[($7_1 + 24 | 0) >> 3] = +(0 | 0);
     HEAP32[($7_1 + 36 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 44 | 0) >> 2] | 0, (HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 1 | 0);
     HEAP32[($7_1 + 32 | 0) >> 2] = 0;
     HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0;
     label$9 : {
      label$10 : while (1) {
       if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       HEAP32[($7_1 + 32 | 0) >> 2] = (HEAP32[($7_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       HEAPF64[($7_1 + 24 | 0) >> 3] = +HEAPF64[($7_1 + 24 | 0) >> 3] + +HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0;
       continue label$10;
      };
     }
     HEAPF64[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($7_1 + 24 | 0) >> 3]) / +HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + -1 | 0;
     continue label$8;
    };
   }
   $863(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
   HEAP32[($7_1 + 76 | 0) >> 2] = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
  }
  $215_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
  global$0 = $7_1 + 80 | 0;
  return $215_1 | 0;
 }
 
 function $75($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $27_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) >= (HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $76(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
    break label$1;
   }
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $77(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  }
  $27_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
  global$0 = $7_1 + 32 | 0;
  return $27_1 | 0;
 }
 
 function $76($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $260_1 = 0, $418_1 = 0, $571_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $7_1 = global$0 - 112 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 100 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 96 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 92 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 68 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   $875(global$3 + 2898 | 0 | 0, 0 | 0) | 0;
   fimport$0(-1 | 0);
   abort();
  }
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 100 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 100 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 96 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 100 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 52 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 100 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 100 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 96 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 96 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 88 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 88 | 0) >> 2] = (HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  HEAP32[($7_1 + 88 | 0) >> 2] = 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($7_1 + 100 | 0) >> 2] | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0) | 0) & 1 | 0)) {
     break label$4
    }
    HEAPF64[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 88 | 0) >> 2] = (HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  HEAP32[($7_1 + 88 | 0) >> 2] = 0;
  label$6 : {
   label$7 : while (1) {
    if (!((HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($7_1 + 84 | 0) >> 2] = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
    label$8 : {
     label$9 : while (1) {
      if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$8
      }
      HEAPF64[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 84 | 0) >> 2] | 0) - (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 84 | 0) >> 2] | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0) + (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 84 | 0) >> 2] = (HEAP32[($7_1 + 84 | 0) >> 2] | 0) + 1 | 0;
      continue label$9;
     };
    }
    (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$124(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 100 | 0) >> 2] | 0) - (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0 | 0, HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
    HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 16 | 0) >> 3];
    HEAP32[($7_1 + 84 | 0) >> 2] = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
    label$10 : {
     label$11 : while (1) {
      if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      HEAP32[($7_1 + 72 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 84 | 0) >> 2] | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0);
      HEAP32[($7_1 + 76 | 0) >> 2] = 0;
      HEAP32[($7_1 + 80 | 0) >> 2] = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
      label$12 : {
       label$13 : while (1) {
        if (!((HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$12
        }
        HEAPF64[((HEAP32[($7_1 + 48 | 0) >> 2] | 0) + ((((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + (HEAP32[($7_1 + 84 | 0) >> 2] | 0) | 0) - (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 80 | 0) >> 2] | 0) + (HEAP32[($7_1 + 72 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($7_1 + 76 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 100 | 0) >> 2] | 0) - (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0) | 0;
        HEAP32[($7_1 + 80 | 0) >> 2] = (HEAP32[($7_1 + 80 | 0) >> 2] | 0) + 1 | 0;
        continue label$13;
       };
      }
      HEAP32[($7_1 + 84 | 0) >> 2] = (HEAP32[($7_1 + 84 | 0) >> 2] | 0) + 1 | 0;
      continue label$11;
     };
    }
    $119(HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 96 | 0) >> 2] | 0) - (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0 | 0, (HEAP32[($7_1 + 100 | 0) >> 2] | 0) - (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
    $110(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 96 | 0) >> 2] | 0) - (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0 | 0, 1 | 0, +(+HEAPF64[($7_1 + 16 | 0) >> 3]));
    $119(HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 100 | 0) >> 2] | 0) - (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0 | 0, 1 | 0, (HEAP32[($7_1 + 96 | 0) >> 2] | 0) - (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0 | 0);
    HEAP32[($7_1 + 84 | 0) >> 2] = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
    label$14 : {
     label$15 : while (1) {
      if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$14
      }
      HEAP32[($7_1 + 72 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 84 | 0) >> 2] | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0);
      HEAP32[($7_1 + 80 | 0) >> 2] = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
      label$16 : {
       label$17 : while (1) {
        if (!((HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$16
        }
        $260_1 = (HEAP32[($7_1 + 32 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + (HEAP32[($7_1 + 80 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
        HEAPF64[$260_1 >> 3] = +HEAPF64[$260_1 >> 3] - +HEAPF64[((HEAP32[($7_1 + 48 | 0) >> 2] | 0) + (((Math_imul((HEAP32[($7_1 + 84 | 0) >> 2] | 0) - (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0, (HEAP32[($7_1 + 96 | 0) >> 2] | 0) - (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 80 | 0) >> 2] | 0) | 0) - (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($7_1 + 80 | 0) >> 2] = (HEAP32[($7_1 + 80 | 0) >> 2] | 0) + 1 | 0;
        continue label$17;
       };
      }
      HEAP32[($7_1 + 84 | 0) >> 2] = (HEAP32[($7_1 + 84 | 0) >> 2] | 0) + 1 | 0;
      continue label$15;
     };
    }
    label$18 : {
     if (!((HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$18
     }
     HEAP32[($7_1 + 84 | 0) >> 2] = (HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 1 | 0;
     label$19 : {
      label$20 : while (1) {
       if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$19
       }
       HEAPF64[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 84 | 0) >> 2] | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0) + (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 84 | 0) >> 2] | 0) - (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($7_1 + 84 | 0) >> 2] = (HEAP32[($7_1 + 84 | 0) >> 2] | 0) + 1 | 0;
       continue label$20;
      };
     }
    }
    HEAP32[($7_1 + 88 | 0) >> 2] = (HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 1 | 0;
    continue label$7;
   };
  }
  HEAP32[($7_1 + 84 | 0) >> 2] = 0;
  label$21 : {
   label$22 : while (1) {
    if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$21
    }
    HEAP32[($7_1 + 72 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 84 | 0) >> 2] | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0);
    HEAP32[($7_1 + 88 | 0) >> 2] = 0;
    label$23 : {
     label$24 : while (1) {
      if (!((HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$23
      }
      label$25 : {
       label$26 : {
        if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) > (HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$26
        }
        HEAPF64[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
        break label$25;
       }
       HEAPF64[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      }
      HEAP32[($7_1 + 88 | 0) >> 2] = (HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 1 | 0;
      continue label$24;
     };
    }
    HEAP32[($7_1 + 84 | 0) >> 2] = (HEAP32[($7_1 + 84 | 0) >> 2] | 0) + 1 | 0;
    continue label$22;
   };
  }
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $135(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 88 | 0) >> 2] = 0;
  label$27 : {
   label$28 : while (1) {
    if (!((HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$27
    }
    HEAPF64[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
    HEAP32[($7_1 + 84 | 0) >> 2] = (HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 1 | 0;
    label$29 : {
     label$30 : while (1) {
      if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$29
      }
      HEAPF64[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 84 | 0) >> 2] | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0) + (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 84 | 0) >> 2] = (HEAP32[($7_1 + 84 | 0) >> 2] | 0) + 1 | 0;
      continue label$30;
     };
    }
    $418_1 = 1;
    $119((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, $418_1 | 0, (HEAP32[($7_1 + 100 | 0) >> 2] | 0) - (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0 | 0, $418_1 | 0);
    HEAPF64[(HEAP32[($7_1 + 44 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($7_1 + 44 | 0) >> 2] | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 84 | 0) >> 2] = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
    label$31 : {
     label$32 : while (1) {
      if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$31
      }
      HEAPF64[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(HEAP32[($7_1 + 44 | 0) >> 2] | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 84 | 0) >> 2] = (HEAP32[($7_1 + 84 | 0) >> 2] | 0) + 1 | 0;
      continue label$32;
     };
    }
    HEAP32[($7_1 + 84 | 0) >> 2] = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
    label$33 : {
     label$34 : while (1) {
      if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$33
      }
      HEAPF64[((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 84 | 0) >> 2] = (HEAP32[($7_1 + 84 | 0) >> 2] | 0) + 1 | 0;
      continue label$34;
     };
    }
    HEAP32[($7_1 + 88 | 0) >> 2] = (HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 1 | 0;
    continue label$28;
   };
  }
  HEAPF64[((HEAP32[($7_1 + 92 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 96 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 96 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 96 | 0) >> 2] | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
  HEAP32[($7_1 + 84 | 0) >> 2] = (HEAP32[($7_1 + 96 | 0) >> 2] | 0) - 2 | 0;
  label$35 : {
   label$36 : while (1) {
    if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$35
    }
    HEAPF64[($7_1 + 8 | 0) >> 3] = +(0 | 0);
    HEAP32[($7_1 + 64 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 84 | 0) >> 2] | 0, (HEAP32[($7_1 + 96 | 0) >> 2] | 0) + 1 | 0);
    HEAP32[($7_1 + 60 | 0) >> 2] = 0;
    HEAP32[($7_1 + 88 | 0) >> 2] = (HEAP32[($7_1 + 84 | 0) >> 2] | 0) + 1 | 0;
    label$37 : {
     label$38 : while (1) {
      if (!((HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$37
      }
      HEAP32[($7_1 + 60 | 0) >> 2] = (HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[($7_1 + 8 | 0) >> 3] = +HEAPF64[($7_1 + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 60 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 92 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 88 | 0) >> 2] = (HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 1 | 0;
      continue label$38;
     };
    }
    HEAPF64[((HEAP32[($7_1 + 92 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($7_1 + 8 | 0) >> 3]) / +HEAPF64[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 84 | 0) >> 2] = (HEAP32[($7_1 + 84 | 0) >> 2] | 0) + -1 | 0;
    continue label$36;
   };
  }
  $863(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0);
  $571_1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
  global$0 = $7_1 + 112 | 0;
  return $571_1 | 0;
 }
 
 function $77($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $154_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 64 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 64 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 40 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $106(HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0);
  $126(HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0);
  $127(HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0);
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $135(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
  $107(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0);
  HEAPF64[(HEAP32[($7_1 + 20 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($7_1 + 16 | 0) >> 2] | 0) >> 3] / +HEAPF64[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 3];
  HEAP32[($7_1 + 52 | 0) >> 2] = 1;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[($7_1 + 8 | 0) >> 3] = +(0 | 0);
    HEAP32[($7_1 + 48 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 52 | 0) >> 2] | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0);
    HEAP32[($7_1 + 44 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 52 | 0) >> 2] | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0) + (HEAP32[($7_1 + 52 | 0) >> 2] | 0) | 0;
    HEAP32[($7_1 + 40 | 0) >> 2] = 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAPF64[($7_1 + 8 | 0) >> 3] = +HEAPF64[($7_1 + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 48 | 0) >> 2] | 0) + (HEAP32[($7_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    HEAPF64[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($7_1 + 8 | 0) >> 3]) / +HEAPF64[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $119(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, 1 | 0);
  $863(HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0);
  $154_1 = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
  global$0 = $7_1 + 80 | 0;
  return $154_1 | 0;
 }
 
 function $78($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $923 = 0.0, $143_1 = 0, $966 = 0.0, $289_1 = 0, $426_1 = 0, $594_1 = 0, $1048 = 0.0, $1138 = 0.0, $1183 = 0.0, $898 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $7_1 = global$0 - 176 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 168 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 164 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 160 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 156 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 152 | 0) >> 2] = $4_1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 160 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 124 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$88()), HEAPF64[(wasm2js_i32$0 + 96 | 0) >> 3] = wasm2js_f64$0;
  HEAPF64[($7_1 + 40 | 0) >> 3] = +HEAPF64[($7_1 + 96 | 0) >> 3] * +HEAPF64[($7_1 + 96 | 0) >> 3];
  HEAPF64[($7_1 + 80 | 0) >> 3] = +(0 | 0);
  HEAPF64[($7_1 + 88 | 0) >> 3] = +(0 | 0);
  HEAP32[($7_1 + 108 | 0) >> 2] = (HEAP32[($7_1 + 160 | 0) >> 2] | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0;
  HEAP32[($7_1 + 148 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($7_1 + 136 | 0) >> 2] = (HEAP32[($7_1 + 148 | 0) >> 2] | 0) + 1 | 0;
    HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 88 | 0) >> 3];
    HEAPF64[($7_1 + 72 | 0) >> 3] = +(0 | 0);
    HEAP32[($7_1 + 140 | 0) >> 2] = HEAP32[($7_1 + 148 | 0) >> 2] | 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAP32[($7_1 + 132 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 140 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0);
      HEAPF64[($7_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[($7_1 + 72 | 0) >> 3] = +HEAPF64[($7_1 + 72 | 0) >> 3] + +HEAPF64[($7_1 + 64 | 0) >> 3] * +HEAPF64[($7_1 + 64 | 0) >> 3];
      HEAP32[($7_1 + 140 | 0) >> 2] = (HEAP32[($7_1 + 140 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    label$5 : {
     label$6 : {
      if (!(+HEAPF64[($7_1 + 72 | 0) >> 3] < +HEAPF64[($7_1 + 40 | 0) >> 3] & 1 | 0)) {
       break label$6
      }
      HEAPF64[($7_1 + 88 | 0) >> 3] = +(0 | 0);
      break label$5;
     }
     HEAPF64[($7_1 + 56 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 148 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     label$7 : {
      label$8 : {
       if (!(+HEAPF64[($7_1 + 56 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
        break label$8
       }
       $923 = Math_sqrt(+HEAPF64[($7_1 + 72 | 0) >> 3]);
       break label$7;
      }
      $923 = -Math_sqrt(+HEAPF64[($7_1 + 72 | 0) >> 3]);
     }
     HEAPF64[($7_1 + 88 | 0) >> 3] = $923;
     HEAPF64[($7_1 + 48 | 0) >> 3] = +HEAPF64[($7_1 + 56 | 0) >> 3] * +HEAPF64[($7_1 + 88 | 0) >> 3] - +HEAPF64[($7_1 + 72 | 0) >> 3];
     HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 148 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 56 | 0) >> 3] - +HEAPF64[($7_1 + 88 | 0) >> 3];
     HEAP32[($7_1 + 144 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
     label$9 : {
      label$10 : while (1) {
       if (!((HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       HEAPF64[($7_1 + 72 | 0) >> 3] = +(0 | 0);
       HEAP32[($7_1 + 140 | 0) >> 2] = HEAP32[($7_1 + 148 | 0) >> 2] | 0;
       label$11 : {
        label$12 : while (1) {
         if (!((HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$11
         }
         HEAP32[($7_1 + 132 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 140 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0);
         HEAPF64[($7_1 + 72 | 0) >> 3] = +HEAPF64[($7_1 + 72 | 0) >> 3] + +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($7_1 + 140 | 0) >> 2] = (HEAP32[($7_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         continue label$12;
        };
       }
       HEAPF64[($7_1 + 56 | 0) >> 3] = +HEAPF64[($7_1 + 72 | 0) >> 3] / +HEAPF64[($7_1 + 48 | 0) >> 3];
       HEAP32[($7_1 + 140 | 0) >> 2] = HEAP32[($7_1 + 148 | 0) >> 2] | 0;
       label$13 : {
        label$14 : while (1) {
         if (!((HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$13
         }
         HEAP32[($7_1 + 132 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 140 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0);
         $143_1 = (HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
         HEAPF64[$143_1 >> 3] = +HEAPF64[$143_1 >> 3] + +HEAPF64[($7_1 + 56 | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($7_1 + 140 | 0) >> 2] = (HEAP32[($7_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         continue label$14;
        };
       }
       HEAP32[($7_1 + 144 | 0) >> 2] = (HEAP32[($7_1 + 144 | 0) >> 2] | 0) + 1 | 0;
       continue label$10;
      };
     }
    }
    HEAPF64[((HEAP32[($7_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 88 | 0) >> 3];
    HEAPF64[($7_1 + 72 | 0) >> 3] = +(0 | 0);
    HEAP32[($7_1 + 132 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 148 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0);
    label$15 : {
     if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$15
     }
     HEAP32[($7_1 + 140 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
     label$16 : {
      label$17 : while (1) {
       if (!((HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$16
       }
       HEAPF64[($7_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[($7_1 + 72 | 0) >> 3] = +HEAPF64[($7_1 + 72 | 0) >> 3] + +HEAPF64[($7_1 + 64 | 0) >> 3] * +HEAPF64[($7_1 + 64 | 0) >> 3];
       HEAP32[($7_1 + 140 | 0) >> 2] = (HEAP32[($7_1 + 140 | 0) >> 2] | 0) + 1 | 0;
       continue label$17;
      };
     }
    }
    label$18 : {
     label$19 : {
      if (!(+HEAPF64[($7_1 + 72 | 0) >> 3] < +HEAPF64[($7_1 + 40 | 0) >> 3] & 1 | 0)) {
       break label$19
      }
      HEAPF64[($7_1 + 88 | 0) >> 3] = +(0 | 0);
      break label$18;
     }
     HEAPF64[($7_1 + 56 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
     label$20 : {
      label$21 : {
       if (!(+HEAPF64[($7_1 + 56 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
        break label$21
       }
       $966 = Math_sqrt(+HEAPF64[($7_1 + 72 | 0) >> 3]);
       break label$20;
      }
      $966 = -Math_sqrt(+HEAPF64[($7_1 + 72 | 0) >> 3]);
     }
     HEAPF64[($7_1 + 88 | 0) >> 3] = $966;
     HEAPF64[($7_1 + 48 | 0) >> 3] = +HEAPF64[($7_1 + 56 | 0) >> 3] * +HEAPF64[($7_1 + 88 | 0) >> 3] - +HEAPF64[($7_1 + 72 | 0) >> 3];
     HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) + 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 56 | 0) >> 3] - +HEAPF64[($7_1 + 88 | 0) >> 3];
     HEAP32[($7_1 + 140 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
     label$22 : {
      label$23 : while (1) {
       if (!((HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$22
       }
       HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[($7_1 + 48 | 0) >> 3];
       HEAP32[($7_1 + 140 | 0) >> 2] = (HEAP32[($7_1 + 140 | 0) >> 2] | 0) + 1 | 0;
       continue label$23;
      };
     }
     HEAP32[($7_1 + 144 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
     label$24 : {
      label$25 : while (1) {
       if (!((HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$24
       }
       HEAPF64[($7_1 + 72 | 0) >> 3] = +(0 | 0);
       HEAP32[($7_1 + 128 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 144 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0);
       HEAP32[($7_1 + 140 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
       label$26 : {
        label$27 : while (1) {
         if (!((HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$26
         }
         HEAPF64[($7_1 + 72 | 0) >> 3] = +HEAPF64[($7_1 + 72 | 0) >> 3] + +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 128 | 0) >> 2] | 0) + (HEAP32[($7_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($7_1 + 140 | 0) >> 2] = (HEAP32[($7_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         continue label$27;
        };
       }
       HEAP32[($7_1 + 140 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
       label$28 : {
        label$29 : while (1) {
         if (!((HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$28
         }
         $289_1 = (HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 128 | 0) >> 2] | 0) + (HEAP32[($7_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
         HEAPF64[$289_1 >> 3] = +HEAPF64[$289_1 >> 3] + +HEAPF64[($7_1 + 72 | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($7_1 + 140 | 0) >> 2] = (HEAP32[($7_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         continue label$29;
        };
       }
       HEAP32[($7_1 + 144 | 0) >> 2] = (HEAP32[($7_1 + 144 | 0) >> 2] | 0) + 1 | 0;
       continue label$25;
      };
     }
    }
    HEAPF64[($7_1 + 64 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($7_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) + Math_abs(+HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
    label$30 : {
     if (!(+HEAPF64[($7_1 + 80 | 0) >> 3] < +HEAPF64[($7_1 + 64 | 0) >> 3] & 1 | 0)) {
      break label$30
     }
     HEAPF64[($7_1 + 80 | 0) >> 3] = +HEAPF64[($7_1 + 64 | 0) >> 3];
    }
    HEAP32[($7_1 + 148 | 0) >> 2] = (HEAP32[($7_1 + 148 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($7_1 + 148 | 0) >> 2] = (HEAP32[($7_1 + 160 | 0) >> 2] | 0) - 1 | 0;
  label$31 : {
   label$32 : while (1) {
    if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$31
    }
    HEAP32[($7_1 + 132 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 148 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0);
    label$33 : {
     if (!(+HEAPF64[($7_1 + 88 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
      break label$33
     }
     HEAPF64[($7_1 + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) + 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($7_1 + 88 | 0) >> 3];
     HEAP32[($7_1 + 144 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
     label$34 : {
      label$35 : while (1) {
       if (!((HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$34
       }
       HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 144 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[($7_1 + 48 | 0) >> 3];
       HEAP32[($7_1 + 144 | 0) >> 2] = (HEAP32[($7_1 + 144 | 0) >> 2] | 0) + 1 | 0;
       continue label$35;
      };
     }
     HEAP32[($7_1 + 144 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
     label$36 : {
      label$37 : while (1) {
       if (!((HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$36
       }
       HEAPF64[($7_1 + 72 | 0) >> 3] = +(0 | 0);
       HEAP32[($7_1 + 140 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
       label$38 : {
        label$39 : while (1) {
         if (!((HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$38
         }
         HEAPF64[($7_1 + 72 | 0) >> 3] = +HEAPF64[($7_1 + 72 | 0) >> 3] + +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 140 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($7_1 + 140 | 0) >> 2] = (HEAP32[($7_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         continue label$39;
        };
       }
       HEAP32[($7_1 + 140 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
       label$40 : {
        label$41 : while (1) {
         if (!((HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$40
         }
         $426_1 = (HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 140 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
         HEAPF64[$426_1 >> 3] = +HEAPF64[$426_1 >> 3] + +HEAPF64[($7_1 + 72 | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 140 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($7_1 + 140 | 0) >> 2] = (HEAP32[($7_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         continue label$41;
        };
       }
       HEAP32[($7_1 + 144 | 0) >> 2] = (HEAP32[($7_1 + 144 | 0) >> 2] | 0) + 1 | 0;
       continue label$37;
      };
     }
    }
    HEAP32[($7_1 + 144 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
    label$42 : {
     label$43 : while (1) {
      if (!((HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$42
      }
      HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 144 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      HEAP32[($7_1 + 144 | 0) >> 2] = (HEAP32[($7_1 + 144 | 0) >> 2] | 0) + 1 | 0;
      continue label$43;
     };
    }
    HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = 1.0;
    HEAPF64[($7_1 + 88 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 136 | 0) >> 2] = HEAP32[($7_1 + 148 | 0) >> 2] | 0;
    HEAP32[($7_1 + 148 | 0) >> 2] = (HEAP32[($7_1 + 148 | 0) >> 2] | 0) + -1 | 0;
    continue label$32;
   };
  }
  HEAPF64[($7_1 + 96 | 0) >> 3] = +HEAPF64[($7_1 + 96 | 0) >> 3] * +HEAPF64[($7_1 + 80 | 0) >> 3];
  HEAP32[($7_1 + 104 | 0) >> 2] = (HEAP32[($7_1 + 160 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($7_1 + 148 | 0) >> 2] = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
  label$44 : {
   label$45 : while (1) {
    if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$44
    }
    HEAP32[($7_1 + 144 | 0) >> 2] = (HEAP32[($7_1 + 104 | 0) >> 2] | 0) - 1 | 0;
    label$46 : {
     label$47 : while (1) {
      if (!((HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$46
      }
      HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 148 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      HEAP32[($7_1 + 144 | 0) >> 2] = (HEAP32[($7_1 + 144 | 0) >> 2] | 0) + 1 | 0;
      continue label$47;
     };
    }
    HEAP32[($7_1 + 148 | 0) >> 2] = (HEAP32[($7_1 + 148 | 0) >> 2] | 0) + 1 | 0;
    continue label$45;
   };
  }
  HEAP32[($7_1 + 140 | 0) >> 2] = (HEAP32[($7_1 + 160 | 0) >> 2] | 0) - 1 | 0;
  label$48 : {
   label$49 : {
    label$50 : while (1) {
     if (!((HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
      break label$49
     }
     HEAP32[($7_1 + 116 | 0) >> 2] = 0;
     label$51 : while (1) {
      HEAP32[($7_1 + 116 | 0) >> 2] = (HEAP32[($7_1 + 116 | 0) >> 2] | 0) + 1 | 0;
      label$52 : {
       if (!((HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0) > (50 | 0) & 1 | 0)) {
        break label$52
       }
       $875(global$3 + 5383 | 0 | 0, 0 | 0) | 0;
       HEAP32[($7_1 + 172 | 0) >> 2] = 15;
       break label$48;
      }
      HEAP32[($7_1 + 120 | 0) >> 2] = 1;
      HEAP32[($7_1 + 136 | 0) >> 2] = HEAP32[($7_1 + 140 | 0) >> 2] | 0;
      label$53 : {
       label$54 : while (1) {
        if (!((HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
         break label$53
        }
        label$55 : {
         if (!(Math_abs(+HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) <= +HEAPF64[($7_1 + 96 | 0) >> 3] & 1 | 0)) {
          break label$55
         }
         HEAP32[($7_1 + 120 | 0) >> 2] = 0;
         break label$53;
        }
        label$56 : {
         if (!(Math_abs(+HEAPF64[((HEAP32[($7_1 + 152 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 136 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3]) <= +HEAPF64[($7_1 + 96 | 0) >> 3] & 1 | 0)) {
          break label$56
         }
         break label$53;
        }
        HEAP32[($7_1 + 136 | 0) >> 2] = (HEAP32[($7_1 + 136 | 0) >> 2] | 0) + -1 | 0;
        continue label$54;
       };
      }
      label$57 : {
       if (!(HEAP32[($7_1 + 120 | 0) >> 2] | 0)) {
        break label$57
       }
       HEAPF64[($7_1 + 32 | 0) >> 3] = +(0 | 0);
       HEAPF64[($7_1 + 72 | 0) >> 3] = 1.0;
       HEAP32[($7_1 + 112 | 0) >> 2] = (HEAP32[($7_1 + 136 | 0) >> 2] | 0) - 1 | 0;
       HEAP32[($7_1 + 148 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
       label$58 : {
        label$59 : while (1) {
         if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) <= (HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$58
         }
         HEAPF64[($7_1 + 56 | 0) >> 3] = +HEAPF64[($7_1 + 72 | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         $594_1 = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0;
         HEAPF64[$594_1 >> 3] = +HEAPF64[$594_1 >> 3] * +HEAPF64[($7_1 + 32 | 0) >> 3];
         label$60 : {
          if (!(Math_abs(+HEAPF64[($7_1 + 56 | 0) >> 3]) <= +HEAPF64[($7_1 + 96 | 0) >> 3] & 1 | 0)) {
           break label$60
          }
          break label$58;
         }
         HEAPF64[($7_1 + 88 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         $1048 = +$735(+(+HEAPF64[($7_1 + 56 | 0) >> 3]), +(+HEAPF64[($7_1 + 88 | 0) >> 3]));
         HEAPF64[((HEAP32[($7_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $1048;
         HEAPF64[($7_1 + 48 | 0) >> 3] = $1048;
         HEAPF64[($7_1 + 32 | 0) >> 3] = +HEAPF64[($7_1 + 88 | 0) >> 3] / +HEAPF64[($7_1 + 48 | 0) >> 3];
         HEAPF64[($7_1 + 72 | 0) >> 3] = -+HEAPF64[($7_1 + 56 | 0) >> 3] / +HEAPF64[($7_1 + 48 | 0) >> 3];
         HEAP32[($7_1 + 144 | 0) >> 2] = (HEAP32[($7_1 + 104 | 0) >> 2] | 0) - 1 | 0;
         label$61 : {
          label$62 : while (1) {
           if (!((HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$61
           }
           HEAPF64[($7_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 112 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
           HEAPF64[($7_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 148 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
           HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 112 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 24 | 0) >> 3] * +HEAPF64[($7_1 + 32 | 0) >> 3] + +HEAPF64[($7_1 + 16 | 0) >> 3] * +HEAPF64[($7_1 + 72 | 0) >> 3];
           HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 148 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 16 | 0) >> 3] * +HEAPF64[($7_1 + 32 | 0) >> 3] - +HEAPF64[($7_1 + 24 | 0) >> 3] * +HEAPF64[($7_1 + 72 | 0) >> 3];
           HEAP32[($7_1 + 144 | 0) >> 2] = (HEAP32[($7_1 + 144 | 0) >> 2] | 0) + 1 | 0;
           continue label$62;
          };
         }
         HEAP32[($7_1 + 148 | 0) >> 2] = (HEAP32[($7_1 + 148 | 0) >> 2] | 0) + 1 | 0;
         continue label$59;
        };
       }
      }
      HEAPF64[($7_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$63 : {
       label$64 : {
        label$65 : {
         if (!((HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) != (HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$65
         }
         HEAPF64[($7_1 + 80 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[($7_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 152 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 140 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[($7_1 + 88 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 140 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[($7_1 + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[($7_1 + 56 | 0) >> 3] = .5 * ((+HEAPF64[($7_1 + 88 | 0) >> 3] + +HEAPF64[($7_1 + 16 | 0) >> 3]) / +HEAPF64[($7_1 + 48 | 0) >> 3] * ((+HEAPF64[($7_1 + 88 | 0) >> 3] - +HEAPF64[($7_1 + 16 | 0) >> 3]) / +HEAPF64[($7_1 + 24 | 0) >> 3]) + +HEAPF64[($7_1 + 24 | 0) >> 3] / +HEAPF64[($7_1 + 48 | 0) >> 3] - +HEAPF64[($7_1 + 48 | 0) >> 3] / +HEAPF64[($7_1 + 24 | 0) >> 3]);
         (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$735(+(+HEAPF64[($7_1 + 56 | 0) >> 3]), +(1.0))), HEAPF64[(wasm2js_i32$0 + 88 | 0) >> 3] = wasm2js_f64$0;
         label$66 : {
          label$67 : {
           if (!(+HEAPF64[($7_1 + 56 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
            break label$67
           }
           HEAPF64[($7_1 + 64 | 0) >> 3] = +HEAPF64[($7_1 + 56 | 0) >> 3] - +HEAPF64[($7_1 + 88 | 0) >> 3];
           break label$66;
          }
          HEAPF64[($7_1 + 64 | 0) >> 3] = +HEAPF64[($7_1 + 56 | 0) >> 3] + +HEAPF64[($7_1 + 88 | 0) >> 3];
         }
         HEAPF64[($7_1 + 56 | 0) >> 3] = +HEAPF64[($7_1 + 80 | 0) >> 3] - +HEAPF64[($7_1 + 16 | 0) >> 3] / +HEAPF64[($7_1 + 80 | 0) >> 3] * +HEAPF64[($7_1 + 16 | 0) >> 3] + +HEAPF64[($7_1 + 48 | 0) >> 3] / +HEAPF64[($7_1 + 80 | 0) >> 3] * (+HEAPF64[($7_1 + 24 | 0) >> 3] / +HEAPF64[($7_1 + 64 | 0) >> 3] - +HEAPF64[($7_1 + 48 | 0) >> 3]);
         HEAPF64[($7_1 + 72 | 0) >> 3] = 1.0;
         HEAPF64[($7_1 + 32 | 0) >> 3] = 1.0;
         HEAP32[($7_1 + 148 | 0) >> 2] = (HEAP32[($7_1 + 136 | 0) >> 2] | 0) + 1 | 0;
         label$68 : {
          label$69 : while (1) {
           if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) <= (HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$68
           }
           HEAPF64[($7_1 + 88 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAPF64[($7_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAPF64[($7_1 + 48 | 0) >> 3] = +HEAPF64[($7_1 + 72 | 0) >> 3] * +HEAPF64[($7_1 + 88 | 0) >> 3];
           HEAPF64[($7_1 + 88 | 0) >> 3] = +HEAPF64[($7_1 + 32 | 0) >> 3] * +HEAPF64[($7_1 + 88 | 0) >> 3];
           $1138 = +$735(+(+HEAPF64[($7_1 + 56 | 0) >> 3]), +(+HEAPF64[($7_1 + 48 | 0) >> 3]));
           HEAPF64[($7_1 + 16 | 0) >> 3] = $1138;
           HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = $1138;
           HEAPF64[($7_1 + 32 | 0) >> 3] = +HEAPF64[($7_1 + 56 | 0) >> 3] / +HEAPF64[($7_1 + 16 | 0) >> 3];
           HEAPF64[($7_1 + 72 | 0) >> 3] = +HEAPF64[($7_1 + 48 | 0) >> 3] / +HEAPF64[($7_1 + 16 | 0) >> 3];
           HEAPF64[($7_1 + 56 | 0) >> 3] = +HEAPF64[($7_1 + 80 | 0) >> 3] * +HEAPF64[($7_1 + 32 | 0) >> 3] + +HEAPF64[($7_1 + 88 | 0) >> 3] * +HEAPF64[($7_1 + 72 | 0) >> 3];
           HEAPF64[($7_1 + 88 | 0) >> 3] = +HEAPF64[($7_1 + 88 | 0) >> 3] * +HEAPF64[($7_1 + 32 | 0) >> 3] - +HEAPF64[($7_1 + 80 | 0) >> 3] * +HEAPF64[($7_1 + 72 | 0) >> 3];
           HEAPF64[($7_1 + 48 | 0) >> 3] = +HEAPF64[($7_1 + 24 | 0) >> 3] * +HEAPF64[($7_1 + 72 | 0) >> 3];
           HEAPF64[($7_1 + 24 | 0) >> 3] = +HEAPF64[($7_1 + 24 | 0) >> 3] * +HEAPF64[($7_1 + 32 | 0) >> 3];
           HEAP32[($7_1 + 144 | 0) >> 2] = 0;
           label$70 : {
            label$71 : while (1) {
             if (!((HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$70
             }
             HEAP32[($7_1 + 132 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 144 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0);
             HEAPF64[($7_1 + 80 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
             HEAPF64[($7_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
             HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 80 | 0) >> 3] * +HEAPF64[($7_1 + 32 | 0) >> 3] + +HEAPF64[($7_1 + 16 | 0) >> 3] * +HEAPF64[($7_1 + 72 | 0) >> 3];
             HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 16 | 0) >> 3] * +HEAPF64[($7_1 + 32 | 0) >> 3] - +HEAPF64[($7_1 + 80 | 0) >> 3] * +HEAPF64[($7_1 + 72 | 0) >> 3];
             HEAP32[($7_1 + 144 | 0) >> 2] = (HEAP32[($7_1 + 144 | 0) >> 2] | 0) + 1 | 0;
             continue label$71;
            };
           }
           $1183 = +$735(+(+HEAPF64[($7_1 + 56 | 0) >> 3]), +(+HEAPF64[($7_1 + 48 | 0) >> 3]));
           HEAPF64[($7_1 + 16 | 0) >> 3] = $1183;
           HEAPF64[((HEAP32[($7_1 + 152 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = $1183;
           label$72 : {
            if (!(+HEAPF64[($7_1 + 16 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
             break label$72
            }
            HEAPF64[($7_1 + 32 | 0) >> 3] = +HEAPF64[($7_1 + 56 | 0) >> 3] / +HEAPF64[($7_1 + 16 | 0) >> 3];
            HEAPF64[($7_1 + 72 | 0) >> 3] = +HEAPF64[($7_1 + 48 | 0) >> 3] / +HEAPF64[($7_1 + 16 | 0) >> 3];
           }
           HEAPF64[($7_1 + 56 | 0) >> 3] = +HEAPF64[($7_1 + 32 | 0) >> 3] * +HEAPF64[($7_1 + 88 | 0) >> 3] + +HEAPF64[($7_1 + 72 | 0) >> 3] * +HEAPF64[($7_1 + 24 | 0) >> 3];
           HEAPF64[($7_1 + 80 | 0) >> 3] = +HEAPF64[($7_1 + 32 | 0) >> 3] * +HEAPF64[($7_1 + 24 | 0) >> 3] - +HEAPF64[($7_1 + 72 | 0) >> 3] * +HEAPF64[($7_1 + 88 | 0) >> 3];
           HEAP32[($7_1 + 144 | 0) >> 2] = (HEAP32[($7_1 + 104 | 0) >> 2] | 0) - 1 | 0;
           label$73 : {
            label$74 : while (1) {
             if (!((HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$73
             }
             HEAPF64[($7_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - 1 | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
             HEAPF64[($7_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 148 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
             HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - 1 | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 24 | 0) >> 3] * +HEAPF64[($7_1 + 32 | 0) >> 3] + +HEAPF64[($7_1 + 16 | 0) >> 3] * +HEAPF64[($7_1 + 72 | 0) >> 3];
             HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 148 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (HEAP32[($7_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 16 | 0) >> 3] * +HEAPF64[($7_1 + 32 | 0) >> 3] - +HEAPF64[($7_1 + 24 | 0) >> 3] * +HEAPF64[($7_1 + 72 | 0) >> 3];
             HEAP32[($7_1 + 144 | 0) >> 2] = (HEAP32[($7_1 + 144 | 0) >> 2] | 0) + 1 | 0;
             continue label$74;
            };
           }
           HEAP32[($7_1 + 148 | 0) >> 2] = (HEAP32[($7_1 + 148 | 0) >> 2] | 0) + 1 | 0;
           continue label$69;
          };
         }
         HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
         HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 56 | 0) >> 3];
         HEAPF64[((HEAP32[($7_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 80 | 0) >> 3];
         break label$64;
        }
        label$75 : {
         if (!(+HEAPF64[($7_1 + 16 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
          break label$75
         }
         HEAPF64[((HEAP32[($7_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[($7_1 + 16 | 0) >> 3];
         HEAP32[($7_1 + 144 | 0) >> 2] = 0;
         label$76 : {
          label$77 : while (1) {
           if (!((HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$76
           }
           HEAP32[($7_1 + 132 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 144 | 0) >> 2] | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0);
           HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($7_1 + 144 | 0) >> 2] = (HEAP32[($7_1 + 144 | 0) >> 2] | 0) + 1 | 0;
           continue label$77;
          };
         }
        }
        break label$63;
       }
       continue label$51;
      }
      break label$51;
     };
     HEAP32[($7_1 + 140 | 0) >> 2] = (HEAP32[($7_1 + 140 | 0) >> 2] | 0) + -1 | 0;
     continue label$50;
    };
   }
   $863(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0);
   HEAP32[($7_1 + 172 | 0) >> 2] = HEAP32[($7_1 + 124 | 0) >> 2] | 0;
  }
  $898 = HEAP32[($7_1 + 172 | 0) >> 2] | 0;
  global$0 = $7_1 + 176 | 0;
  return $898 | 0;
 }
 
 function $79($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $195_1 = 0, $246_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) > (HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($7_1 + 48 | 0) >> 2] = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($7_1 + 48 | 0) >> 2] = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
  }
  HEAP32[($7_1 + 56 | 0) >> 2] = 0;
  HEAP32[($7_1 + 52 | 0) >> 2] = 1;
  HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 52 | 0) >> 2] | 0) | 0;
  (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$88()), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 48 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 44 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 64 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 64 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 64 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 40 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($7_1 + 32 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 40 | 0) >> 2] | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0);
    HEAP32[($7_1 + 28 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 40 | 0) >> 2] | 0, HEAP32[($7_1 + 44 | 0) >> 2] | 0);
    HEAP32[($7_1 + 36 | 0) >> 2] = 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAPF64[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + (HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($7_1 + 40 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 40 | 0) >> 2] | 0, HEAP32[($7_1 + 44 | 0) >> 2] | 0);
    HEAPF64[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (HEAP32[($7_1 + 64 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  $78(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($7_1 + 40 | 0) >> 2] = 0;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$9
    }
    HEAP32[($7_1 + 32 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 40 | 0) >> 2] | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0);
    HEAP32[($7_1 + 28 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 40 | 0) >> 2] | 0, HEAP32[($7_1 + 44 | 0) >> 2] | 0);
    HEAP32[($7_1 + 36 | 0) >> 2] = 0;
    label$11 : {
     label$12 : while (1) {
      if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      HEAPF64[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + (HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$12;
     };
    }
    HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$10;
   };
  }
  HEAP32[($7_1 + 40 | 0) >> 2] = 0;
  label$13 : {
   label$14 : while (1) {
    if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$13
    }
    HEAP32[($7_1 + 32 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 40 | 0) >> 2] | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0);
    HEAP32[($7_1 + 36 | 0) >> 2] = 0;
    label$15 : {
     label$16 : while (1) {
      if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$15
      }
      label$17 : {
       label$18 : {
        if (!(Math_abs(+HEAPF64[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) > +HEAPF64[$7_1 >> 3] & 1 | 0)) {
         break label$18
        }
        $195_1 = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + (HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
        HEAPF64[$195_1 >> 3] = +HEAPF64[$195_1 >> 3] / +HEAPF64[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        break label$17;
       }
       HEAPF64[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + (HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      }
      HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$16;
     };
    }
    HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$14;
   };
  }
  HEAP32[($7_1 + 40 | 0) >> 2] = 0;
  label$19 : {
   label$20 : while (1) {
    if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$19
    }
    HEAP32[($7_1 + 28 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 40 | 0) >> 2] | 0, HEAP32[($7_1 + 44 | 0) >> 2] | 0);
    HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (HEAP32[($7_1 + 64 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$20;
   };
  }
  $119(HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, 1 | 0);
  $863(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0);
  $246_1 = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
  global$0 = $7_1 + 80 | 0;
  return $246_1 | 0;
 }
 
 function $80($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $31_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $9_1 = global$0 - 48 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 28 | 0) >> 2] = $4_1;
  HEAPF64[($9_1 + 16 | 0) >> 3] = $5_1;
  HEAP32[($9_1 + 12 | 0) >> 2] = $6_1;
  HEAP32[($9_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($9_1 + 40 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $81(HEAP32[($9_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($9_1 + 16 | 0) >> 3]), HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[(HEAP32[($9_1 + 40 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($9_1 + 36 | 0) >> 2] | 0, HEAP32[($9_1 + 32 | 0) >> 2] | 0, HEAP32[($9_1 + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[($9_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0);
  }
  $31_1 = HEAP32[($9_1 + 8 | 0) >> 2] | 0;
  global$0 = $9_1 + 48 | 0;
  return $31_1 | 0;
 }
 
 function $81($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $75_1 = 0, $166_1 = 0.0, $139_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $8_1 = global$0 - 80 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 68 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 64 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $3_1;
  HEAPF64[($8_1 + 48 | 0) >> 3] = $4_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $5_1;
  HEAPF64[($8_1 + 16 | 0) >> 3] = +HEAPF64[($8_1 + 48 | 0) >> 3];
  HEAP32[($8_1 + 32 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862((HEAP32[($8_1 + 64 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($8_1 + 40 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       if (!(Math_abs(+HEAPF64[((HEAP32[($8_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) >= 1.0 / Math_abs(+HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
        break label$5
       }
       HEAPF64[($8_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       break label$4;
      }
      (wasm2js_i32$0 = $8_1, wasm2js_f64$0 = +$93(+(+HEAPF64[((HEAP32[($8_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])) * 1.0 / Math_abs(+HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
     }
     HEAPF64[($8_1 + 24 | 0) >> 3] = +HEAPF64[($8_1 + 16 | 0) >> 3] * +HEAPF64[($8_1 + 8 | 0) >> 3];
     HEAP32[($8_1 + 36 | 0) >> 2] = 0;
     label$6 : {
      label$7 : while (1) {
       if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$6
       }
       HEAPF64[((HEAP32[($8_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 1 | 0;
       continue label$7;
      };
     }
     $75_1 = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAPF64[$75_1 >> 3] = +HEAPF64[$75_1 >> 3] + +HEAPF64[($8_1 + 24 | 0) >> 3];
     $166_1 = +FUNCTION_TABLE[HEAP32[(HEAP32[($8_1 + 72 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($8_1 + 4 | 0) >> 2] | 0, HEAP32[($8_1 + 64 | 0) >> 2] | 0, HEAP32[((HEAP32[($8_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - +FUNCTION_TABLE[HEAP32[(HEAP32[($8_1 + 72 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($8_1 + 68 | 0) >> 2] | 0, HEAP32[($8_1 + 64 | 0) >> 2] | 0, HEAP32[((HEAP32[($8_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0);
     HEAPF64[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $166_1 / +HEAPF64[($8_1 + 24 | 0) >> 3];
     label$8 : {
      label$9 : {
       if (+HEAPF64[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
        break label$9
       }
       if (!(+HEAPF64[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
        break label$8
       }
      }
      $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
      $863(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0);
      HEAP32[($8_1 + 76 | 0) >> 2] = 15;
      break label$1;
     }
     label$10 : {
      if (!(+HEAPF64[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] != +HEAPF64[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$10
      }
      $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
      $863(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0);
      HEAP32[($8_1 + 76 | 0) >> 2] = 15;
      break label$1;
     }
     HEAP32[($8_1 + 40 | 0) >> 2] = (HEAP32[($8_1 + 40 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   $863(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0);
   HEAP32[($8_1 + 76 | 0) >> 2] = HEAP32[($8_1 + 32 | 0) >> 2] | 0;
  }
  $139_1 = HEAP32[($8_1 + 76 | 0) >> 2] | 0;
  global$0 = $8_1 + 80 | 0;
  return $139_1 | 0;
 }
 
 function $82($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $31_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $9_1 = global$0 - 48 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 28 | 0) >> 2] = $4_1;
  HEAPF64[($9_1 + 16 | 0) >> 3] = $5_1;
  HEAP32[($9_1 + 12 | 0) >> 2] = $6_1;
  HEAP32[($9_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($9_1 + 40 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $83(HEAP32[($9_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($9_1 + 16 | 0) >> 3]), HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[(HEAP32[($9_1 + 40 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($9_1 + 36 | 0) >> 2] | 0, HEAP32[($9_1 + 32 | 0) >> 2] | 0, HEAP32[($9_1 + 12 | 0) >> 2] | 0, HEAP32[((HEAP32[($9_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0);
  }
  $31_1 = HEAP32[($9_1 + 8 | 0) >> 2] | 0;
  global$0 = $9_1 + 48 | 0;
  return $31_1 | 0;
 }
 
 function $83($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $55_1 = 0, $130_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $8_1 = global$0 - 96 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 88 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 84 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 80 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 76 | 0) >> 2] = $3_1;
  HEAPF64[($8_1 + 64 | 0) >> 3] = $4_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = 0;
  HEAP32[($8_1 + 56 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       if (!(Math_abs(+HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) >= 1.0 / Math_abs(+HEAPF64[((HEAP32[($8_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
        break label$5
       }
       HEAPF64[($8_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       break label$4;
      }
      (wasm2js_i32$0 = $8_1, wasm2js_f64$0 = +$93(+(+HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])) * 1.0 / Math_abs(+HEAPF64[((HEAP32[($8_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])), HEAPF64[(wasm2js_i32$0 + 32 | 0) >> 3] = wasm2js_f64$0;
     }
     HEAPF64[($8_1 + 40 | 0) >> 3] = +HEAPF64[($8_1 + 32 | 0) >> 3] * +HEAPF64[($8_1 + 64 | 0) >> 3];
     HEAPF64[($8_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     $55_1 = (HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAPF64[$55_1 >> 3] = +HEAPF64[$55_1 >> 3] + +HEAPF64[($8_1 + 40 | 0) >> 3];
     HEAPF64[($8_1 + 40 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($8_1 + 24 | 0) >> 3];
     (wasm2js_i32$0 = $8_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($8_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($8_1 + 84 | 0) >> 2] | 0, HEAP32[($8_1 + 80 | 0) >> 2] | 0, HEAP32[((HEAP32[($8_1 + 88 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
     label$6 : {
      label$7 : {
       if (+HEAPF64[($8_1 + 16 | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
        break label$7
       }
       if (!(+HEAPF64[($8_1 + 16 | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
        break label$6
       }
      }
      $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
      HEAP32[($8_1 + 92 | 0) >> 2] = 15;
      break label$1;
     }
     label$8 : {
      if (!(+HEAPF64[($8_1 + 16 | 0) >> 3] != +HEAPF64[($8_1 + 16 | 0) >> 3] & 1 | 0)) {
       break label$8
      }
      $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
      HEAP32[($8_1 + 92 | 0) >> 2] = 15;
      break label$1;
     }
     HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($8_1 + 24 | 0) >> 3] - +HEAPF64[($8_1 + 40 | 0) >> 3];
     (wasm2js_i32$0 = $8_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($8_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($8_1 + 84 | 0) >> 2] | 0, HEAP32[($8_1 + 80 | 0) >> 2] | 0, HEAP32[((HEAP32[($8_1 + 88 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
     label$9 : {
      label$10 : {
       if (+HEAPF64[($8_1 + 8 | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
        break label$10
       }
       if (!(+HEAPF64[($8_1 + 8 | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
        break label$9
       }
      }
      $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
      HEAP32[($8_1 + 92 | 0) >> 2] = 15;
      break label$1;
     }
     label$11 : {
      if (!(+HEAPF64[($8_1 + 8 | 0) >> 3] != +HEAPF64[($8_1 + 8 | 0) >> 3] & 1 | 0)) {
       break label$11
      }
      $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
      HEAP32[($8_1 + 92 | 0) >> 2] = 15;
      break label$1;
     }
     HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[($8_1 + 16 | 0) >> 3] - +HEAPF64[($8_1 + 8 | 0) >> 3]) / (2.0 * +HEAPF64[($8_1 + 40 | 0) >> 3]);
     HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($8_1 + 24 | 0) >> 3];
     HEAP32[($8_1 + 56 | 0) >> 2] = (HEAP32[($8_1 + 56 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP32[($8_1 + 92 | 0) >> 2] = HEAP32[($8_1 + 52 | 0) >> 2] | 0;
  }
  $130_1 = HEAP32[($8_1 + 92 | 0) >> 2] | 0;
  global$0 = $8_1 + 96 | 0;
  return $130_1 | 0;
 }
 
 function $84($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  $6_1 = +$6_1;
  $7_1 = +$7_1;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, $46_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $11_1 = global$0 - 96 | 0;
  global$0 = $11_1;
  HEAPF64[($11_1 + 80 | 0) >> 3] = $0_1;
  HEAP32[($11_1 + 76 | 0) >> 2] = $1_1;
  HEAPF64[($11_1 + 64 | 0) >> 3] = $2_1;
  HEAP32[($11_1 + 60 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 56 | 0) >> 2] = $4_1;
  HEAPF64[($11_1 + 48 | 0) >> 3] = $5_1;
  HEAPF64[($11_1 + 40 | 0) >> 3] = $6_1;
  HEAPF64[($11_1 + 32 | 0) >> 3] = $7_1;
  HEAP32[($11_1 + 28 | 0) >> 2] = $8_1;
  HEAP32[($11_1 + 24 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($11_1 + 24 | 0) >> 2] = 4;
    HEAP32[($11_1 + 92 | 0) >> 2] = HEAP32[($11_1 + 24 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($11_1 + 24 | 0) >> 2] = 15;
    HEAP32[($11_1 + 92 | 0) >> 2] = HEAP32[($11_1 + 24 | 0) >> 2] | 0;
    break label$1;
   }
   (wasm2js_i32$0 = $11_1, wasm2js_f64$0 = +$95(HEAP32[($11_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 76 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
   HEAPF64[($11_1 + 8 | 0) >> 3] = +HEAPF64[($11_1 + 16 | 0) >> 3] / +(HEAP32[($11_1 + 76 | 0) >> 2] | 0 | 0);
   label$4 : {
    label$5 : {
     if (!(Math_abs(+HEAPF64[($11_1 + 64 | 0) >> 3]) < +HEAPF64[($11_1 + 48 | 0) >> 3] & 1 | 0)) {
      break label$5
     }
     HEAPF64[$11_1 >> 3] = Math_abs(+HEAPF64[($11_1 + 80 | 0) >> 3] - +HEAPF64[($11_1 + 64 | 0) >> 3]);
     break label$4;
    }
    HEAPF64[$11_1 >> 3] = Math_abs((+HEAPF64[($11_1 + 80 | 0) >> 3] - +HEAPF64[($11_1 + 64 | 0) >> 3]) / +HEAPF64[($11_1 + 64 | 0) >> 3]);
   }
   label$6 : {
    if (!(+HEAPF64[($11_1 + 8 | 0) >> 3] < +HEAPF64[($11_1 + 40 | 0) >> 3] & 1 | 0)) {
     break label$6
    }
    HEAP32[($11_1 + 92 | 0) >> 2] = 1;
    break label$1;
   }
   label$7 : {
    if (!(+HEAPF64[$11_1 >> 3] < +HEAPF64[($11_1 + 32 | 0) >> 3] & 1 | 0)) {
     break label$7
    }
    HEAP32[($11_1 + 92 | 0) >> 2] = 6;
    break label$1;
   }
   HEAP32[($11_1 + 92 | 0) >> 2] = HEAP32[($11_1 + 24 | 0) >> 2] | 0;
  }
  $46_1 = HEAP32[($11_1 + 92 | 0) >> 2] | 0;
  global$0 = $11_1 + 96 | 0;
  return $46_1 | 0;
 }
 
 function $85($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = +$10_1;
  $11_1 = +$11_1;
  var $14_1 = 0, $725_1 = 0.0, $734_1 = 0.0, $295_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $14_1 = global$0 - 160 | 0;
  global$0 = $14_1;
  HEAP32[($14_1 + 152 | 0) >> 2] = $0_1;
  HEAP32[($14_1 + 148 | 0) >> 2] = $1_1;
  HEAP32[($14_1 + 144 | 0) >> 2] = $2_1;
  HEAP32[($14_1 + 140 | 0) >> 2] = $3_1;
  HEAP32[($14_1 + 136 | 0) >> 2] = $4_1;
  HEAP32[($14_1 + 132 | 0) >> 2] = $5_1;
  HEAP32[($14_1 + 128 | 0) >> 2] = $6_1;
  HEAP32[($14_1 + 124 | 0) >> 2] = $7_1;
  HEAP32[($14_1 + 120 | 0) >> 2] = $8_1;
  HEAP32[($14_1 + 116 | 0) >> 2] = $9_1;
  HEAPF64[($14_1 + 104 | 0) >> 3] = $10_1;
  HEAPF64[($14_1 + 96 | 0) >> 3] = $11_1;
  HEAP32[($14_1 + 92 | 0) >> 2] = 0;
  HEAPF64[($14_1 + 64 | 0) >> 3] = .66;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!((HEAP32[(HEAP32[($14_1 + 116 | 0) >> 2] | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$4
      }
      if (+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] <= +$90(+(+HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3]), +(+HEAPF64[(HEAP32[($14_1 + 140 | 0) >> 2] | 0) >> 3])) & 1 | 0) {
       break label$3
      }
      if (+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] >= +$89(+(+HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3]), +(+HEAPF64[(HEAP32[($14_1 + 140 | 0) >> 2] | 0) >> 3])) & 1 | 0) {
       break label$3
      }
     }
     if (+HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3] * (+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3]) >= +(0 | 0) & 1 | 0) {
      break label$3
     }
     if (!(+HEAPF64[($14_1 + 96 | 0) >> 3] < +HEAPF64[($14_1 + 104 | 0) >> 3] & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[($14_1 + 156 | 0) >> 2] = HEAP32[($14_1 + 92 | 0) >> 2] | 0;
    break label$1;
   }
   HEAPF64[($14_1 + 32 | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3] * (+HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3] / Math_abs(+HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3]));
   label$5 : {
    label$6 : {
     if (!(+HEAPF64[(HEAP32[($14_1 + 124 | 0) >> 2] | 0) >> 3] > +HEAPF64[(HEAP32[($14_1 + 148 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
      break label$6
     }
     HEAP32[($14_1 + 92 | 0) >> 2] = 1;
     HEAP32[($14_1 + 88 | 0) >> 2] = 1;
     HEAPF64[$14_1 >> 3] = 3.0 * (+HEAPF64[(HEAP32[($14_1 + 148 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 124 | 0) >> 2] | 0) >> 3]) / (+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3]) + +HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3];
     (wasm2js_i32$0 = $14_1, wasm2js_f64$0 = +$89(+Math_abs(+HEAPF64[$14_1 >> 3]), +Math_abs(+HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
     (wasm2js_i32$0 = $14_1, wasm2js_f64$0 = +$89(+(+HEAPF64[($14_1 + 40 | 0) >> 3]), +Math_abs(+HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
     HEAPF64[($14_1 + 80 | 0) >> 3] = +HEAPF64[($14_1 + 40 | 0) >> 3] * Math_sqrt(+HEAPF64[$14_1 >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3] * (+HEAPF64[$14_1 >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3]) - +HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3] * (+HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3]));
     label$7 : {
      if (!(+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] < +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
       break label$7
      }
      HEAPF64[($14_1 + 80 | 0) >> 3] = -+HEAPF64[($14_1 + 80 | 0) >> 3];
     }
     HEAPF64[($14_1 + 72 | 0) >> 3] = +HEAPF64[($14_1 + 80 | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3] + +HEAPF64[$14_1 >> 3];
     HEAPF64[($14_1 + 56 | 0) >> 3] = +HEAPF64[($14_1 + 80 | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3] + +HEAPF64[($14_1 + 80 | 0) >> 3] + +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3];
     HEAPF64[($14_1 + 48 | 0) >> 3] = +HEAPF64[($14_1 + 72 | 0) >> 3] / +HEAPF64[($14_1 + 56 | 0) >> 3];
     HEAPF64[($14_1 + 24 | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3] + +HEAPF64[($14_1 + 48 | 0) >> 3] * (+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3]);
     HEAPF64[($14_1 + 8 | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3] / ((+HEAPF64[(HEAP32[($14_1 + 148 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 124 | 0) >> 2] | 0) >> 3]) / (+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3]) + +HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3]) / 2.0 * (+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3]);
     label$8 : {
      label$9 : {
       if (!(Math_abs(+HEAPF64[($14_1 + 24 | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3]) < Math_abs(+HEAPF64[($14_1 + 8 | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3]) & 1 | 0)) {
        break label$9
       }
       HEAPF64[($14_1 + 16 | 0) >> 3] = +HEAPF64[($14_1 + 24 | 0) >> 3];
       break label$8;
      }
      HEAPF64[($14_1 + 16 | 0) >> 3] = +HEAPF64[($14_1 + 24 | 0) >> 3] + (+HEAPF64[($14_1 + 8 | 0) >> 3] - +HEAPF64[($14_1 + 24 | 0) >> 3]) / 2.0;
     }
     HEAP32[(HEAP32[($14_1 + 116 | 0) >> 2] | 0) >> 2] = 1;
     break label$5;
    }
    label$10 : {
     label$11 : {
      if (!(+HEAPF64[($14_1 + 32 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[($14_1 + 92 | 0) >> 2] = 2;
      HEAP32[($14_1 + 88 | 0) >> 2] = 0;
      HEAPF64[$14_1 >> 3] = 3.0 * (+HEAPF64[(HEAP32[($14_1 + 148 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 124 | 0) >> 2] | 0) >> 3]) / (+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3]) + +HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3];
      (wasm2js_i32$0 = $14_1, wasm2js_f64$0 = +$89(+Math_abs(+HEAPF64[$14_1 >> 3]), +Math_abs(+HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
      (wasm2js_i32$0 = $14_1, wasm2js_f64$0 = +$89(+(+HEAPF64[($14_1 + 40 | 0) >> 3]), +Math_abs(+HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
      HEAPF64[($14_1 + 80 | 0) >> 3] = +HEAPF64[($14_1 + 40 | 0) >> 3] * Math_sqrt(+HEAPF64[$14_1 >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3] * (+HEAPF64[$14_1 >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3]) - +HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3] * (+HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3]));
      label$12 : {
       if (!(+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] > +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
        break label$12
       }
       HEAPF64[($14_1 + 80 | 0) >> 3] = -+HEAPF64[($14_1 + 80 | 0) >> 3];
      }
      HEAPF64[($14_1 + 72 | 0) >> 3] = +HEAPF64[($14_1 + 80 | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3] + +HEAPF64[$14_1 >> 3];
      HEAPF64[($14_1 + 56 | 0) >> 3] = +HEAPF64[($14_1 + 80 | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3] + +HEAPF64[($14_1 + 80 | 0) >> 3] + +HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3];
      HEAPF64[($14_1 + 48 | 0) >> 3] = +HEAPF64[($14_1 + 72 | 0) >> 3] / +HEAPF64[($14_1 + 56 | 0) >> 3];
      HEAPF64[($14_1 + 24 | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] + +HEAPF64[($14_1 + 48 | 0) >> 3] * (+HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3]);
      HEAPF64[($14_1 + 8 | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3] / (+HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3]) * (+HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3]);
      label$13 : {
       label$14 : {
        if (!(Math_abs(+HEAPF64[($14_1 + 24 | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3]) > Math_abs(+HEAPF64[($14_1 + 8 | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3]) & 1 | 0)) {
         break label$14
        }
        HEAPF64[($14_1 + 16 | 0) >> 3] = +HEAPF64[($14_1 + 24 | 0) >> 3];
        break label$13;
       }
       HEAPF64[($14_1 + 16 | 0) >> 3] = +HEAPF64[($14_1 + 8 | 0) >> 3];
      }
      HEAP32[(HEAP32[($14_1 + 116 | 0) >> 2] | 0) >> 2] = 1;
      break label$10;
     }
     label$15 : {
      label$16 : {
       if (!(Math_abs(+HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3]) < Math_abs(+HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3]) & 1 | 0)) {
        break label$16
       }
       HEAP32[($14_1 + 92 | 0) >> 2] = 3;
       HEAP32[($14_1 + 88 | 0) >> 2] = 1;
       HEAPF64[$14_1 >> 3] = 3.0 * (+HEAPF64[(HEAP32[($14_1 + 148 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 124 | 0) >> 2] | 0) >> 3]) / (+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3]) + +HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3];
       (wasm2js_i32$0 = $14_1, wasm2js_f64$0 = +$89(+Math_abs(+HEAPF64[$14_1 >> 3]), +Math_abs(+HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
       (wasm2js_i32$0 = $14_1, wasm2js_f64$0 = +$89(+(+HEAPF64[($14_1 + 40 | 0) >> 3]), +Math_abs(+HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
       (wasm2js_i32$0 = $14_1, wasm2js_f64$0 = +HEAPF64[($14_1 + 40 | 0) >> 3] * Math_sqrt(+$89(+(+(0 | 0)), +(+HEAPF64[$14_1 >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3] * (+HEAPF64[$14_1 >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3]) - +HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3] * (+HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3]))))), HEAPF64[(wasm2js_i32$0 + 80 | 0) >> 3] = wasm2js_f64$0;
       label$17 : {
        if (!(+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] > +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
         break label$17
        }
        HEAPF64[($14_1 + 80 | 0) >> 3] = -+HEAPF64[($14_1 + 80 | 0) >> 3];
       }
       HEAPF64[($14_1 + 72 | 0) >> 3] = +HEAPF64[($14_1 + 80 | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3] + +HEAPF64[$14_1 >> 3];
       HEAPF64[($14_1 + 56 | 0) >> 3] = +HEAPF64[($14_1 + 80 | 0) >> 3] + (+HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3]) + +HEAPF64[($14_1 + 80 | 0) >> 3];
       HEAPF64[($14_1 + 48 | 0) >> 3] = +HEAPF64[($14_1 + 72 | 0) >> 3] / +HEAPF64[($14_1 + 56 | 0) >> 3];
       label$18 : {
        label$19 : {
         if (!(+HEAPF64[($14_1 + 48 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
          break label$19
         }
         if (!(+HEAPF64[($14_1 + 80 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
          break label$19
         }
         HEAPF64[($14_1 + 24 | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] + +HEAPF64[($14_1 + 48 | 0) >> 3] * (+HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3]);
         break label$18;
        }
        label$20 : {
         label$21 : {
          if (!(+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] > +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
           break label$21
          }
          HEAPF64[($14_1 + 24 | 0) >> 3] = +HEAPF64[($14_1 + 96 | 0) >> 3];
          break label$20;
         }
         HEAPF64[($14_1 + 24 | 0) >> 3] = +HEAPF64[($14_1 + 104 | 0) >> 3];
        }
       }
       HEAPF64[($14_1 + 8 | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3] / (+HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3]) * (+HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3]);
       label$22 : {
        label$23 : {
         if (!((HEAP32[(HEAP32[($14_1 + 116 | 0) >> 2] | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
          break label$23
         }
         label$24 : {
          label$25 : {
           if (!(Math_abs(+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] - +HEAPF64[($14_1 + 24 | 0) >> 3]) < Math_abs(+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] - +HEAPF64[($14_1 + 8 | 0) >> 3]) & 1 | 0)) {
            break label$25
           }
           HEAPF64[($14_1 + 16 | 0) >> 3] = +HEAPF64[($14_1 + 24 | 0) >> 3];
           break label$24;
          }
          HEAPF64[($14_1 + 16 | 0) >> 3] = +HEAPF64[($14_1 + 8 | 0) >> 3];
         }
         break label$22;
        }
        label$26 : {
         label$27 : {
          if (!(Math_abs(+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] - +HEAPF64[($14_1 + 24 | 0) >> 3]) > Math_abs(+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] - +HEAPF64[($14_1 + 8 | 0) >> 3]) & 1 | 0)) {
           break label$27
          }
          HEAPF64[($14_1 + 16 | 0) >> 3] = +HEAPF64[($14_1 + 24 | 0) >> 3];
          break label$26;
         }
         HEAPF64[($14_1 + 16 | 0) >> 3] = +HEAPF64[($14_1 + 8 | 0) >> 3];
        }
       }
       break label$15;
      }
      HEAP32[($14_1 + 92 | 0) >> 2] = 4;
      HEAP32[($14_1 + 88 | 0) >> 2] = 0;
      label$28 : {
       label$29 : {
        if (!((HEAP32[(HEAP32[($14_1 + 116 | 0) >> 2] | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$29
        }
        HEAPF64[$14_1 >> 3] = 3.0 * (+HEAPF64[(HEAP32[($14_1 + 124 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 136 | 0) >> 2] | 0) >> 3]) / (+HEAPF64[(HEAP32[($14_1 + 140 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3]) + +HEAPF64[(HEAP32[($14_1 + 132 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3];
        (wasm2js_i32$0 = $14_1, wasm2js_f64$0 = +$89(+Math_abs(+HEAPF64[$14_1 >> 3]), +Math_abs(+HEAPF64[(HEAP32[($14_1 + 132 | 0) >> 2] | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
        (wasm2js_i32$0 = $14_1, wasm2js_f64$0 = +$89(+(+HEAPF64[($14_1 + 40 | 0) >> 3]), +Math_abs(+HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
        HEAPF64[($14_1 + 80 | 0) >> 3] = +HEAPF64[($14_1 + 40 | 0) >> 3] * Math_sqrt(+HEAPF64[$14_1 >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3] * (+HEAPF64[$14_1 >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3]) - +HEAPF64[(HEAP32[($14_1 + 132 | 0) >> 2] | 0) >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3] * (+HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3]));
        label$30 : {
         if (!(+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] > +HEAPF64[(HEAP32[($14_1 + 140 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
          break label$30
         }
         HEAPF64[($14_1 + 80 | 0) >> 3] = -+HEAPF64[($14_1 + 80 | 0) >> 3];
        }
        HEAPF64[($14_1 + 72 | 0) >> 3] = +HEAPF64[($14_1 + 80 | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3] + +HEAPF64[$14_1 >> 3];
        HEAPF64[($14_1 + 56 | 0) >> 3] = +HEAPF64[($14_1 + 80 | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3] + +HEAPF64[($14_1 + 80 | 0) >> 3] + +HEAPF64[(HEAP32[($14_1 + 132 | 0) >> 2] | 0) >> 3];
        HEAPF64[($14_1 + 48 | 0) >> 3] = +HEAPF64[($14_1 + 72 | 0) >> 3] / +HEAPF64[($14_1 + 56 | 0) >> 3];
        HEAPF64[($14_1 + 24 | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] + +HEAPF64[($14_1 + 48 | 0) >> 3] * (+HEAPF64[(HEAP32[($14_1 + 140 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3]);
        HEAPF64[($14_1 + 16 | 0) >> 3] = +HEAPF64[($14_1 + 24 | 0) >> 3];
        break label$28;
       }
       label$31 : {
        label$32 : {
         if (!(+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] > +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
          break label$32
         }
         HEAPF64[($14_1 + 16 | 0) >> 3] = +HEAPF64[($14_1 + 96 | 0) >> 3];
         break label$31;
        }
        HEAPF64[($14_1 + 16 | 0) >> 3] = +HEAPF64[($14_1 + 104 | 0) >> 3];
       }
      }
     }
    }
   }
   label$33 : {
    label$34 : {
     if (!(+HEAPF64[(HEAP32[($14_1 + 124 | 0) >> 2] | 0) >> 3] > +HEAPF64[(HEAP32[($14_1 + 148 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
      break label$34
     }
     HEAPF64[(HEAP32[($14_1 + 140 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3];
     HEAPF64[(HEAP32[($14_1 + 136 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 124 | 0) >> 2] | 0) >> 3];
     HEAPF64[(HEAP32[($14_1 + 132 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3];
     break label$33;
    }
    label$35 : {
     if (!(+HEAPF64[($14_1 + 32 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
      break label$35
     }
     HEAPF64[(HEAP32[($14_1 + 140 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3];
     HEAPF64[(HEAP32[($14_1 + 136 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 148 | 0) >> 2] | 0) >> 3];
     HEAPF64[(HEAP32[($14_1 + 132 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3];
    }
    HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3];
    HEAPF64[(HEAP32[($14_1 + 148 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 124 | 0) >> 2] | 0) >> 3];
    HEAPF64[(HEAP32[($14_1 + 144 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3];
   }
   (wasm2js_i32$0 = $14_1, wasm2js_f64$0 = +$90(+(+HEAPF64[($14_1 + 96 | 0) >> 3]), +(+HEAPF64[($14_1 + 16 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
   (wasm2js_i32$0 = $14_1, wasm2js_f64$0 = +$89(+(+HEAPF64[($14_1 + 104 | 0) >> 3]), +(+HEAPF64[($14_1 + 16 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
   HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] = +HEAPF64[($14_1 + 16 | 0) >> 3];
   label$36 : {
    if (!((HEAP32[(HEAP32[($14_1 + 116 | 0) >> 2] | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$36
    }
    if (!((HEAP32[($14_1 + 88 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$36
    }
    label$37 : {
     label$38 : {
      if (!(+HEAPF64[(HEAP32[($14_1 + 140 | 0) >> 2] | 0) >> 3] > +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
       break label$38
      }
      $725_1 = +$90(+(+HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3] + +HEAPF64[($14_1 + 64 | 0) >> 3] * (+HEAPF64[(HEAP32[($14_1 + 140 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3])), +(+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3]));
      HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] = $725_1;
      break label$37;
     }
     $734_1 = +$89(+(+HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3] + +HEAPF64[($14_1 + 64 | 0) >> 3] * (+HEAPF64[(HEAP32[($14_1 + 140 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($14_1 + 152 | 0) >> 2] | 0) >> 3])), +(+HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3]));
     HEAPF64[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 3] = $734_1;
    }
   }
   HEAP32[($14_1 + 156 | 0) >> 2] = HEAP32[($14_1 + 92 | 0) >> 2] | 0;
  }
  $295_1 = HEAP32[($14_1 + 156 | 0) >> 2] | 0;
  global$0 = $14_1 + 160 | 0;
  return $295_1 | 0;
 }
 
 function $86($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = +$9_1;
  $10_1 = $10_1 | 0;
  $11_1 = +$11_1;
  $12_1 = +$12_1;
  $13_1 = +$13_1;
  $14_1 = +$14_1;
  var $17_1 = 0, $585_1 = 0.0, $588_1 = 0.0, $605_1 = 0.0, $499_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $17_1 = global$0 - 352 | 0;
  global$0 = $17_1;
  HEAP32[($17_1 + 344 | 0) >> 2] = $0_1;
  HEAP32[($17_1 + 340 | 0) >> 2] = $1_1;
  HEAP32[($17_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($17_1 + 332 | 0) >> 2] = $3_1;
  HEAP32[($17_1 + 328 | 0) >> 2] = $4_1;
  HEAP32[($17_1 + 324 | 0) >> 2] = $5_1;
  HEAP32[($17_1 + 320 | 0) >> 2] = $6_1;
  HEAP32[($17_1 + 316 | 0) >> 2] = $7_1;
  HEAP32[($17_1 + 312 | 0) >> 2] = $8_1;
  HEAPF64[($17_1 + 304 | 0) >> 3] = $9_1;
  HEAP32[($17_1 + 300 | 0) >> 2] = $10_1;
  HEAPF64[($17_1 + 288 | 0) >> 3] = $11_1;
  HEAPF64[($17_1 + 280 | 0) >> 3] = $12_1;
  HEAPF64[($17_1 + 272 | 0) >> 3] = $13_1;
  HEAPF64[($17_1 + 264 | 0) >> 3] = $14_1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862((HEAP32[($17_1 + 316 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862((HEAP32[($17_1 + 316 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAPF64[($17_1 + 32 | 0) >> 3] = +(0 | 0);
  HEAPF64[($17_1 + 104 | 0) >> 3] = .5;
  HEAPF64[($17_1 + 96 | 0) >> 3] = .66;
  HEAPF64[($17_1 + 40 | 0) >> 3] = 4.0;
  HEAP32[($17_1 + 260 | 0) >> 2] = 0;
  HEAP32[($17_1 + 244 | 0) >> 2] = 1;
  HEAP32[($17_1 + 252 | 0) >> 2] = HEAP32[($17_1 + 300 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($17_1 + 316 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0) {
      break label$3
     }
     if (+HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] <= +(0 | 0) & 1 | 0) {
      break label$3
     }
     if (+HEAPF64[($17_1 + 280 | 0) >> 3] < +(0 | 0) & 1 | 0) {
      break label$3
     }
     if (+HEAPF64[($17_1 + 272 | 0) >> 3] < +(0 | 0) & 1 | 0) {
      break label$3
     }
     if (!(+HEAPF64[($17_1 + 264 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[($17_1 + 348 | 0) >> 2] = HEAP32[($17_1 + 260 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($17_1 + 256 | 0) >> 2] = 0;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($17_1 + 256 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAPF64[($17_1 + 32 | 0) >> 3] = +HEAPF64[($17_1 + 32 | 0) >> 3] + +HEAPF64[((HEAP32[($17_1 + 312 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($17_1 + 320 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($17_1 + 312 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($17_1 + 320 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($17_1 + 256 | 0) >> 2] = (HEAP32[($17_1 + 256 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
   HEAPF64[($17_1 + 32 | 0) >> 3] = Math_sqrt(+HEAPF64[($17_1 + 32 | 0) >> 3]);
   HEAP32[($17_1 + 256 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($17_1 + 256 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     label$8 : {
      label$9 : {
       if (!(Math_abs(+HEAPF64[((HEAP32[($17_1 + 336 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) > 1.0 / Math_abs(+HEAPF64[((HEAP32[($17_1 + 312 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
        break label$9
       }
       HEAPF64[($17_1 + 24 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($17_1 + 336 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
       break label$8;
      }
      HEAPF64[($17_1 + 24 | 0) >> 3] = 1.0 / Math_abs(+HEAPF64[((HEAP32[($17_1 + 312 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
     }
     HEAPF64[((HEAP32[($17_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 320 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[($17_1 + 24 | 0) >> 3];
     HEAP32[($17_1 + 256 | 0) >> 2] = (HEAP32[($17_1 + 256 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   (wasm2js_i32$0 = $17_1, wasm2js_f64$0 = +$100(HEAP32[($17_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 316 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
   HEAPF64[($17_1 + 8 | 0) >> 3] = +HEAPF64[($17_1 + 280 | 0) >> 3] / +HEAPF64[($17_1 + 16 | 0) >> 3];
   HEAPF64[($17_1 + 208 | 0) >> 3] = +(0 | 0);
   HEAP32[($17_1 + 240 | 0) >> 2] = 0;
   label$10 : {
    label$11 : while (1) {
     if (!((HEAP32[($17_1 + 240 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$10
     }
     HEAPF64[($17_1 + 208 | 0) >> 3] = +HEAPF64[($17_1 + 208 | 0) >> 3] + +HEAPF64[((HEAP32[($17_1 + 328 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 240 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($17_1 + 320 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 240 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($17_1 + 240 | 0) >> 2] = (HEAP32[($17_1 + 240 | 0) >> 2] | 0) + 1 | 0;
     continue label$11;
    };
   }
   label$12 : {
    if (!(+HEAPF64[($17_1 + 208 | 0) >> 3] >= +(0 | 0) & 1 | 0)) {
     break label$12
    }
    HEAP32[($17_1 + 348 | 0) >> 2] = HEAP32[($17_1 + 260 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($17_1 + 236 | 0) >> 2] = 0;
   HEAP32[($17_1 + 232 | 0) >> 2] = 1;
   HEAPF64[($17_1 + 160 | 0) >> 3] = +HEAPF64[(HEAP32[($17_1 + 332 | 0) >> 2] | 0) >> 3];
   HEAP32[($17_1 + 248 | 0) >> 2] = 0;
   HEAPF64[($17_1 + 200 | 0) >> 3] = +HEAPF64[($17_1 + 280 | 0) >> 3] * +HEAPF64[($17_1 + 208 | 0) >> 3];
   HEAPF64[($17_1 + 56 | 0) >> 3] = +HEAPF64[($17_1 + 304 | 0) >> 3] - +HEAPF64[($17_1 + 8 | 0) >> 3];
   HEAPF64[($17_1 + 48 | 0) >> 3] = +HEAPF64[($17_1 + 56 | 0) >> 3] / .5;
   HEAP32[($17_1 + 240 | 0) >> 2] = 0;
   label$13 : {
    label$14 : while (1) {
     if (!((HEAP32[($17_1 + 240 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$13
     }
     HEAPF64[((HEAP32[$17_1 >> 2] | 0) + ((HEAP32[($17_1 + 240 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 336 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 240 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($17_1 + 240 | 0) >> 2] = (HEAP32[($17_1 + 240 | 0) >> 2] | 0) + 1 | 0;
     continue label$14;
    };
   }
   HEAPF64[($17_1 + 88 | 0) >> 3] = +(0 | 0);
   HEAPF64[($17_1 + 136 | 0) >> 3] = +HEAPF64[($17_1 + 160 | 0) >> 3];
   HEAPF64[($17_1 + 192 | 0) >> 3] = +HEAPF64[($17_1 + 208 | 0) >> 3];
   HEAPF64[($17_1 + 80 | 0) >> 3] = +(0 | 0);
   HEAPF64[($17_1 + 120 | 0) >> 3] = +HEAPF64[($17_1 + 160 | 0) >> 3];
   HEAPF64[($17_1 + 176 | 0) >> 3] = +HEAPF64[($17_1 + 208 | 0) >> 3];
   label$15 : {
    label$16 : while (1) {
     if (HEAP32[($17_1 + 260 | 0) >> 2] | 0) {
      break label$15
     }
     label$17 : {
      label$18 : {
       if (!((HEAP32[($17_1 + 236 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$18
       }
       (wasm2js_i32$0 = $17_1, wasm2js_f64$0 = +$90(+(+HEAPF64[($17_1 + 88 | 0) >> 3]), +(+HEAPF64[($17_1 + 80 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 72 | 0) >> 3] = wasm2js_f64$0;
       (wasm2js_i32$0 = $17_1, wasm2js_f64$0 = +$89(+(+HEAPF64[($17_1 + 88 | 0) >> 3]), +(+HEAPF64[($17_1 + 80 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 64 | 0) >> 3] = wasm2js_f64$0;
       break label$17;
      }
      HEAPF64[($17_1 + 72 | 0) >> 3] = +HEAPF64[($17_1 + 88 | 0) >> 3];
      HEAPF64[($17_1 + 64 | 0) >> 3] = +HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] + +HEAPF64[($17_1 + 40 | 0) >> 3] * (+HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] - +HEAPF64[($17_1 + 88 | 0) >> 3]);
     }
     $585_1 = +$89(+(+HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3]), +(+HEAPF64[($17_1 + 8 | 0) >> 3]));
     HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] = $585_1;
     $588_1 = +$90(+(+HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3]), +(+HEAPF64[($17_1 + 304 | 0) >> 3]));
     HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] = $588_1;
     label$19 : {
      label$20 : {
       label$21 : {
        if (!((HEAP32[($17_1 + 236 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$21
        }
        if (+HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] <= +HEAPF64[($17_1 + 72 | 0) >> 3] & 1 | 0) {
         break label$20
        }
        if (+HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] >= +HEAPF64[($17_1 + 64 | 0) >> 3] & 1 | 0) {
         break label$20
        }
       }
       if ((HEAP32[($17_1 + 248 | 0) >> 2] | 0 | 0) >= ((HEAP32[($17_1 + 252 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0) {
        break label$20
       }
       if (!(HEAP32[($17_1 + 244 | 0) >> 2] | 0)) {
        break label$20
       }
       if (!((HEAP32[($17_1 + 236 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$19
       }
       if (!(+HEAPF64[($17_1 + 64 | 0) >> 3] - +HEAPF64[($17_1 + 72 | 0) >> 3] <= +HEAPF64[($17_1 + 264 | 0) >> 3] * +HEAPF64[($17_1 + 64 | 0) >> 3] & 1 | 0)) {
        break label$19
       }
      }
      HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] = +HEAPF64[($17_1 + 88 | 0) >> 3];
     }
     HEAP32[($17_1 + 240 | 0) >> 2] = 0;
     label$22 : {
      label$23 : while (1) {
       if (!((HEAP32[($17_1 + 240 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$22
       }
       HEAPF64[((HEAP32[($17_1 + 336 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 240 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[$17_1 >> 2] | 0) + ((HEAP32[($17_1 + 240 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] * +HEAPF64[((HEAP32[($17_1 + 320 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 240 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($17_1 + 240 | 0) >> 2] = (HEAP32[($17_1 + 240 | 0) >> 2] | 0) + 1 | 0;
       continue label$23;
      };
     }
     $605_1 = +FUNCTION_TABLE[HEAP32[(HEAP32[($17_1 + 344 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($17_1 + 336 | 0) >> 2] | 0, HEAP32[($17_1 + 316 | 0) >> 2] | 0, HEAP32[((HEAP32[($17_1 + 344 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0);
     HEAPF64[(HEAP32[($17_1 + 332 | 0) >> 2] | 0) >> 3] = $605_1;
     label$24 : {
      label$25 : {
       if (+HEAPF64[(HEAP32[($17_1 + 332 | 0) >> 2] | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
        break label$25
       }
       if (!(+HEAPF64[(HEAP32[($17_1 + 332 | 0) >> 2] | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
        break label$24
       }
      }
      $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
      $863(HEAP32[($17_1 + 4 | 0) >> 2] | 0 | 0);
      $863(HEAP32[$17_1 >> 2] | 0 | 0);
      HEAP32[($17_1 + 348 | 0) >> 2] = 15;
      break label$1;
     }
     label$26 : {
      if (!(+HEAPF64[(HEAP32[($17_1 + 332 | 0) >> 2] | 0) >> 3] != +HEAPF64[(HEAP32[($17_1 + 332 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
       break label$26
      }
      $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
      $863(HEAP32[($17_1 + 4 | 0) >> 2] | 0 | 0);
      $863(HEAP32[$17_1 >> 2] | 0 | 0);
      HEAP32[($17_1 + 348 | 0) >> 2] = 15;
      break label$1;
     }
     $82(HEAP32[($17_1 + 344 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 340 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 336 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 316 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 312 | 0) >> 2] | 0 | 0, +(+HEAPF64[($17_1 + 288 | 0) >> 3]), HEAP32[($17_1 + 328 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($17_1 + 248 | 0) >> 2] = (HEAP32[($17_1 + 248 | 0) >> 2] | 0) + 1 | 0;
     HEAPF64[($17_1 + 224 | 0) >> 3] = +(0 | 0);
     HEAP32[($17_1 + 240 | 0) >> 2] = 0;
     label$27 : {
      label$28 : while (1) {
       if (!((HEAP32[($17_1 + 240 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$27
       }
       HEAPF64[($17_1 + 224 | 0) >> 3] = +HEAPF64[($17_1 + 224 | 0) >> 3] + +HEAPF64[((HEAP32[($17_1 + 328 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 240 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($17_1 + 320 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 240 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($17_1 + 240 | 0) >> 2] = (HEAP32[($17_1 + 240 | 0) >> 2] | 0) + 1 | 0;
       continue label$28;
      };
     }
     HEAPF64[($17_1 + 152 | 0) >> 3] = +HEAPF64[($17_1 + 160 | 0) >> 3] + +HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] * +HEAPF64[($17_1 + 200 | 0) >> 3];
     label$29 : {
      label$30 : {
       label$31 : {
        if (!((HEAP32[($17_1 + 236 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$31
        }
        if (+HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] <= +HEAPF64[($17_1 + 72 | 0) >> 3] & 1 | 0) {
         break label$30
        }
        if (+HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] >= +HEAPF64[($17_1 + 64 | 0) >> 3] & 1 | 0) {
         break label$30
        }
       }
       if (HEAP32[($17_1 + 244 | 0) >> 2] | 0) {
        break label$29
       }
      }
      HEAP32[($17_1 + 260 | 0) >> 2] = 6;
     }
     label$32 : {
      if (!(+HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] == +HEAPF64[($17_1 + 304 | 0) >> 3] & 1 | 0)) {
       break label$32
      }
      if (!(+HEAPF64[(HEAP32[($17_1 + 332 | 0) >> 2] | 0) >> 3] <= +HEAPF64[($17_1 + 152 | 0) >> 3] & 1 | 0)) {
       break label$32
      }
      if (!(+HEAPF64[($17_1 + 224 | 0) >> 3] <= +HEAPF64[($17_1 + 200 | 0) >> 3] & 1 | 0)) {
       break label$32
      }
      HEAP32[($17_1 + 260 | 0) >> 2] = 5;
     }
     label$33 : {
      if (!(+HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] == +HEAPF64[($17_1 + 8 | 0) >> 3] & 1 | 0)) {
       break label$33
      }
      label$34 : {
       if (+HEAPF64[(HEAP32[($17_1 + 332 | 0) >> 2] | 0) >> 3] > +HEAPF64[($17_1 + 152 | 0) >> 3] & 1 | 0) {
        break label$34
       }
       if (!(+HEAPF64[($17_1 + 224 | 0) >> 3] >= +HEAPF64[($17_1 + 200 | 0) >> 3] & 1 | 0)) {
        break label$33
       }
      }
      HEAP32[($17_1 + 260 | 0) >> 2] = 4;
     }
     label$35 : {
      if (!((HEAP32[($17_1 + 248 | 0) >> 2] | 0 | 0) >= (HEAP32[($17_1 + 252 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$35
      }
      HEAP32[($17_1 + 260 | 0) >> 2] = 3;
     }
     label$36 : {
      if (!((HEAP32[($17_1 + 236 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$36
      }
      if (!(+HEAPF64[($17_1 + 64 | 0) >> 3] - +HEAPF64[($17_1 + 72 | 0) >> 3] <= +HEAPF64[($17_1 + 264 | 0) >> 3] * +HEAPF64[($17_1 + 64 | 0) >> 3] & 1 | 0)) {
       break label$36
      }
      HEAP32[($17_1 + 260 | 0) >> 2] = 2;
     }
     label$37 : {
      if (!(+HEAPF64[(HEAP32[($17_1 + 332 | 0) >> 2] | 0) >> 3] <= +HEAPF64[($17_1 + 152 | 0) >> 3] & 1 | 0)) {
       break label$37
      }
      if (!(Math_abs(+HEAPF64[($17_1 + 224 | 0) >> 3]) <= +HEAPF64[($17_1 + 272 | 0) >> 3] * -+HEAPF64[($17_1 + 208 | 0) >> 3] & 1 | 0)) {
       break label$37
      }
      HEAP32[($17_1 + 260 | 0) >> 2] = 1;
     }
     label$38 : {
      if (!((HEAP32[($17_1 + 232 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$38
      }
      if (!(+HEAPF64[(HEAP32[($17_1 + 332 | 0) >> 2] | 0) >> 3] <= +HEAPF64[($17_1 + 152 | 0) >> 3] & 1 | 0)) {
       break label$38
      }
      if (!(+HEAPF64[($17_1 + 224 | 0) >> 3] >= +$90(+(+HEAPF64[($17_1 + 280 | 0) >> 3]), +(+HEAPF64[($17_1 + 272 | 0) >> 3])) * +HEAPF64[($17_1 + 208 | 0) >> 3] & 1 | 0)) {
       break label$38
      }
      HEAP32[($17_1 + 232 | 0) >> 2] = 0;
     }
     label$39 : {
      label$40 : {
       if (!((HEAP32[($17_1 + 232 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$40
       }
       if (!(+HEAPF64[(HEAP32[($17_1 + 332 | 0) >> 2] | 0) >> 3] <= +HEAPF64[($17_1 + 136 | 0) >> 3] & 1 | 0)) {
        break label$40
       }
       if (!(+HEAPF64[(HEAP32[($17_1 + 332 | 0) >> 2] | 0) >> 3] > +HEAPF64[($17_1 + 152 | 0) >> 3] & 1 | 0)) {
        break label$40
       }
       HEAPF64[($17_1 + 144 | 0) >> 3] = +HEAPF64[(HEAP32[($17_1 + 332 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] * +HEAPF64[($17_1 + 200 | 0) >> 3];
       HEAPF64[($17_1 + 128 | 0) >> 3] = +HEAPF64[($17_1 + 136 | 0) >> 3] - +HEAPF64[($17_1 + 88 | 0) >> 3] * +HEAPF64[($17_1 + 200 | 0) >> 3];
       HEAPF64[($17_1 + 112 | 0) >> 3] = +HEAPF64[($17_1 + 120 | 0) >> 3] - +HEAPF64[($17_1 + 80 | 0) >> 3] * +HEAPF64[($17_1 + 200 | 0) >> 3];
       HEAPF64[($17_1 + 216 | 0) >> 3] = +HEAPF64[($17_1 + 224 | 0) >> 3] - +HEAPF64[($17_1 + 200 | 0) >> 3];
       HEAPF64[($17_1 + 184 | 0) >> 3] = +HEAPF64[($17_1 + 192 | 0) >> 3] - +HEAPF64[($17_1 + 200 | 0) >> 3];
       HEAPF64[($17_1 + 168 | 0) >> 3] = +HEAPF64[($17_1 + 176 | 0) >> 3] - +HEAPF64[($17_1 + 200 | 0) >> 3];
       (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $85($17_1 + 88 | 0 | 0, $17_1 + 128 | 0 | 0, $17_1 + 184 | 0 | 0, $17_1 + 80 | 0 | 0, $17_1 + 112 | 0 | 0, $17_1 + 168 | 0 | 0, HEAP32[($17_1 + 324 | 0) >> 2] | 0 | 0, $17_1 + 144 | 0 | 0, $17_1 + 216 | 0 | 0, $17_1 + 236 | 0 | 0, +(+HEAPF64[($17_1 + 72 | 0) >> 3]), +(+HEAPF64[($17_1 + 64 | 0) >> 3])) | 0), HEAP32[(wasm2js_i32$0 + 244 | 0) >> 2] = wasm2js_i32$1;
       HEAPF64[($17_1 + 136 | 0) >> 3] = +HEAPF64[($17_1 + 128 | 0) >> 3] + +HEAPF64[($17_1 + 88 | 0) >> 3] * +HEAPF64[($17_1 + 200 | 0) >> 3];
       HEAPF64[($17_1 + 120 | 0) >> 3] = +HEAPF64[($17_1 + 112 | 0) >> 3] + +HEAPF64[($17_1 + 80 | 0) >> 3] * +HEAPF64[($17_1 + 200 | 0) >> 3];
       HEAPF64[($17_1 + 192 | 0) >> 3] = +HEAPF64[($17_1 + 184 | 0) >> 3] + +HEAPF64[($17_1 + 200 | 0) >> 3];
       HEAPF64[($17_1 + 176 | 0) >> 3] = +HEAPF64[($17_1 + 168 | 0) >> 3] + +HEAPF64[($17_1 + 200 | 0) >> 3];
       break label$39;
      }
      (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $85($17_1 + 88 | 0 | 0, $17_1 + 136 | 0 | 0, $17_1 + 192 | 0 | 0, $17_1 + 80 | 0 | 0, $17_1 + 120 | 0 | 0, $17_1 + 176 | 0 | 0, HEAP32[($17_1 + 324 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 332 | 0) >> 2] | 0 | 0, $17_1 + 224 | 0 | 0, $17_1 + 236 | 0 | 0, +(+HEAPF64[($17_1 + 72 | 0) >> 3]), +(+HEAPF64[($17_1 + 64 | 0) >> 3])) | 0), HEAP32[(wasm2js_i32$0 + 244 | 0) >> 2] = wasm2js_i32$1;
     }
     label$41 : {
      if (!((HEAP32[($17_1 + 236 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$41
      }
      label$42 : {
       if (!(Math_abs(+HEAPF64[($17_1 + 80 | 0) >> 3] - +HEAPF64[($17_1 + 88 | 0) >> 3]) >= +HEAPF64[($17_1 + 96 | 0) >> 3] * +HEAPF64[($17_1 + 48 | 0) >> 3] & 1 | 0)) {
        break label$42
       }
       HEAPF64[(HEAP32[($17_1 + 324 | 0) >> 2] | 0) >> 3] = +HEAPF64[($17_1 + 88 | 0) >> 3] + +HEAPF64[($17_1 + 104 | 0) >> 3] * (+HEAPF64[($17_1 + 80 | 0) >> 3] - +HEAPF64[($17_1 + 88 | 0) >> 3]);
      }
      HEAPF64[($17_1 + 48 | 0) >> 3] = +HEAPF64[($17_1 + 56 | 0) >> 3];
      HEAPF64[($17_1 + 56 | 0) >> 3] = Math_abs(+HEAPF64[($17_1 + 80 | 0) >> 3] - +HEAPF64[($17_1 + 88 | 0) >> 3]);
     }
     continue label$16;
    };
   }
   $863(HEAP32[($17_1 + 4 | 0) >> 2] | 0 | 0);
   $863(HEAP32[$17_1 >> 2] | 0 | 0);
   HEAP32[($17_1 + 348 | 0) >> 2] = HEAP32[($17_1 + 260 | 0) >> 2] | 0;
  }
  $499_1 = HEAP32[($17_1 + 348 | 0) >> 2] | 0;
  global$0 = $17_1 + 352 | 0;
  return $499_1 | 0;
 }
 
 function $87($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = +$9_1;
  $10_1 = $10_1 | 0;
  $11_1 = +$11_1;
  $12_1 = +$12_1;
  $13_1 = +$13_1;
  $14_1 = +$14_1;
  $15_1 = $15_1 | 0;
  var $18_1 = 0, $52_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $18_1 = global$0 - 112 | 0;
  global$0 = $18_1;
  HEAP32[($18_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($18_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($18_1 + 100 | 0) >> 2] = $2_1;
  HEAP32[($18_1 + 96 | 0) >> 2] = $3_1;
  HEAP32[($18_1 + 92 | 0) >> 2] = $4_1;
  HEAP32[($18_1 + 88 | 0) >> 2] = $5_1;
  HEAP32[($18_1 + 84 | 0) >> 2] = $6_1;
  HEAP32[($18_1 + 80 | 0) >> 2] = $7_1;
  HEAP32[($18_1 + 76 | 0) >> 2] = $8_1;
  HEAPF64[($18_1 + 64 | 0) >> 3] = $9_1;
  HEAP32[($18_1 + 60 | 0) >> 2] = $10_1;
  HEAPF64[($18_1 + 48 | 0) >> 3] = $11_1;
  HEAPF64[($18_1 + 40 | 0) >> 3] = $12_1;
  HEAPF64[($18_1 + 32 | 0) >> 3] = $13_1;
  HEAPF64[($18_1 + 24 | 0) >> 3] = $14_1;
  HEAP32[($18_1 + 20 | 0) >> 2] = $15_1;
  HEAP32[($18_1 + 16 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($18_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($18_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($18_1 + 16 | 0) >> 2] = (HEAP32[($18_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $86(HEAP32[($18_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 76 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18_1 + 64 | 0) >> 3]), HEAP32[($18_1 + 60 | 0) >> 2] | 0 | 0, +(+HEAPF64[($18_1 + 48 | 0) >> 3]), +(+HEAPF64[($18_1 + 40 | 0) >> 3]), +(+HEAPF64[($18_1 + 32 | 0) >> 3]), +(+HEAPF64[($18_1 + 24 | 0) >> 3])) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($18_1 + 12 | 0) >> 2] = HEAP32[($18_1 + 8 | 0) >> 2] | 0;
  $52_1 = HEAP32[($18_1 + 12 | 0) >> 2] | 0;
  global$0 = $18_1 + 112 | 0;
  return $52_1 | 0;
 }
 
 function $88() {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAPF64[($2_1 + 8 | 0) >> 3] = 1.0;
  label$1 : {
   label$2 : while (1) {
    if (!(+HEAPF64[($2_1 + 8 | 0) >> 3] + 1.0 > 1.0 & 1 | 0)) {
     break label$1
    }
    HEAPF64[($2_1 + 8 | 0) >> 3] = +HEAPF64[($2_1 + 8 | 0) >> 3] / 2.0;
    continue label$2;
   };
  }
  HEAPF64[($2_1 + 8 | 0) >> 3] = +HEAPF64[($2_1 + 8 | 0) >> 3] * 2.0;
  return +(+HEAPF64[($2_1 + 8 | 0) >> 3]);
 }
 
 function $89($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $0_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = $1_1;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($4_1 + 16 | 0) >> 3] > +HEAPF64[($4_1 + 8 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3];
    break label$1;
   }
   HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[($4_1 + 8 | 0) >> 3];
  }
  return +(+HEAPF64[($4_1 + 24 | 0) >> 3]);
 }
 
 function $90($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $0_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = $1_1;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($4_1 + 16 | 0) >> 3] < +HEAPF64[($4_1 + 8 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3];
    break label$1;
   }
   HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[($4_1 + 8 | 0) >> 3];
  }
  return +(+HEAPF64[($4_1 + 24 | 0) >> 3]);
 }
 
 function $91($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) > (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $92($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $93($0_1) {
  $0_1 = +$0_1;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF64[($3_1 + 8 | 0) >> 3] = $0_1;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($3_1 + 8 | 0) >> 3] >= +(0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[$3_1 >> 3] = 1.0;
    break label$1;
   }
   HEAPF64[$3_1 >> 3] = -1.0;
  }
  return +(+HEAPF64[$3_1 >> 3]);
 }
 
 function $94($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, -1);
    break label$1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  }
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $95($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = +(0 | 0);
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[($4_1 + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[($4_1 + 16 | 0) >> 3] = Math_sqrt(+HEAPF64[($4_1 + 8 | 0) >> 3]);
  return +(+HEAPF64[($4_1 + 16 | 0) >> 3]);
 }
 
 function $96($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[(HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >> 3] > +HEAPF64[(HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = -1;
    break label$1;
   }
   label$3 : {
    if (!(+HEAPF64[(HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >> 3] < +HEAPF64[(HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0) >> 3] & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 1;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $97($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[(HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >> 3] > +HEAPF64[(HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 1;
    break label$1;
   }
   label$3 : {
    if (!(+HEAPF64[(HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >> 3] < +HEAPF64[(HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0) >> 3] & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = -1;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $98($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAP32[(((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   $744(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, 8 | 0, global$4 + 3 | 0 | 0);
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   $863(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0);
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $99($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAP32[(((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   $744(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, 8 | 0, global$4 + 4 | 0 | 0);
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) + 4 | 0) >> 2] | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   $863(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0);
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $100($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = +(0 | 0);
  HEAP32[($4_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     if (!(Math_abs(+HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) > +HEAPF64[($4_1 + 8 | 0) >> 3] & 1 | 0)) {
      break label$3
     }
     HEAPF64[($4_1 + 8 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
    }
    HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return +(+HEAPF64[($4_1 + 8 | 0) >> 3]);
 }
 
 function $101($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 3];
  HEAP32[($4_1 + 20 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     if (!(+HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[($4_1 + 8 | 0) >> 3] & 1 | 0)) {
      break label$3
     }
     HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    }
    HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return +(+HEAPF64[($4_1 + 8 | 0) >> 3]);
 }
 
 function $102($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 3];
  HEAP32[($4_1 + 20 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     if (!(+HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +HEAPF64[($4_1 + 8 | 0) >> 3] & 1 | 0)) {
      break label$3
     }
     HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    }
    HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return +(+HEAPF64[($4_1 + 8 | 0) >> 3]);
 }
 
 function $103($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = Math_imul(HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0);
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    HEAP32[$6_1 >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[$6_1 >> 2] | 0 | 0) < (HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + (HEAP32[($6_1 + 4 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + (((HEAP32[$6_1 >> 2] | 0) + (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0;
      HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $104($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $150_1 = 0.0, $76_1 = 0, $156_1 = 0.0, $115_1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 4 | 0) >> 2] = 64;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) <= (HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) <= (HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($8_1 + 36 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAP32[($8_1 + 32 | 0) >> 2] = 0;
      label$5 : {
       label$6 : while (1) {
        if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$5
        }
        HEAPF64[((HEAP32[($8_1 + 48 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($8_1 + 32 | 0) >> 2] | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 32 | 0) >> 2] | 0) + Math_imul(HEAP32[($8_1 + 36 | 0) >> 2] | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 32 | 0) >> 2] | 0) + 1 | 0;
        continue label$6;
       };
      }
      HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    break label$1;
   }
   label$7 : {
    label$8 : {
     if (!((HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) >= (HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[($8_1 + 28 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
     $150_1 = Math_ceil(+(HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) / 2.0);
     label$9 : {
      label$10 : {
       if (!(Math_abs($150_1) < 2147483648.0)) {
        break label$10
       }
       $76_1 = ~~$150_1;
       break label$9;
      }
      $76_1 = -2147483648;
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $76_1;
     HEAP32[($8_1 + 8 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - (HEAP32[($8_1 + 16 | 0) >> 2] | 0) | 0;
     $104(HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0);
     $104((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 48 | 0) >> 2] | 0) + (Math_imul(HEAP32[($8_1 + 16 | 0) >> 2] | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0);
     break label$7;
    }
    label$11 : {
     if (!((HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) > (HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$11
     }
     $156_1 = Math_ceil(+(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) / 2.0);
     label$12 : {
      label$13 : {
       if (!(Math_abs($156_1) < 2147483648.0)) {
        break label$13
       }
       $115_1 = ~~$156_1;
       break label$12;
      }
      $115_1 = -2147483648;
     }
     HEAP32[($8_1 + 20 | 0) >> 2] = $115_1;
     HEAP32[($8_1 + 12 | 0) >> 2] = (HEAP32[($8_1 + 56 | 0) >> 2] | 0) - (HEAP32[($8_1 + 20 | 0) >> 2] | 0) | 0;
     HEAP32[($8_1 + 24 | 0) >> 2] = HEAP32[($8_1 + 52 | 0) >> 2] | 0;
     $104(HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0);
     $104((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + (Math_imul(HEAP32[($8_1 + 20 | 0) >> 2] | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0);
    }
   }
  }
  global$0 = $8_1 + 64 | 0;
  return;
 }
 
 function $105($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = 64;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) >= (HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0) {
      break label$3
     }
     if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) >= (HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
    }
    $104(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $103(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $106($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = 1024;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) >= (HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) >= (HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $105(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $103(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $107($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 32 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
      label$5 : {
       label$6 : while (1) {
        if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$5
        }
        HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3];
        HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
        continue label$6;
       };
      }
      HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    break label$1;
   }
   label$7 : {
    label$8 : {
     if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) > (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) - (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
     (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 3 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
     $868(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (Math_imul(HEAP32[($5_1 + 36 | 0) >> 2] | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, Math_imul((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 3 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) | 0;
     HEAP32[($5_1 + 32 | 0) >> 2] = 0;
     label$9 : {
      label$10 : while (1) {
       if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       label$11 : {
        label$12 : while (1) {
         if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$11
         }
         HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3];
         HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
         continue label$12;
        };
       }
       HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       continue label$10;
      };
     }
     HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) - 1 | 0;
     label$13 : {
      label$14 : while (1) {
       if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
        break label$13
       }
       $870((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
       HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + -1 | 0;
       continue label$14;
      };
     }
     HEAP32[($5_1 + 32 | 0) >> 2] = 0;
     label$15 : {
      label$16 : while (1) {
       if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0;
       HEAP32[($5_1 + 28 | 0) >> 2] = 0;
       label$17 : {
        label$18 : while (1) {
         if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$17
         }
         HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + (HEAP32[($5_1 + 28 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0) + (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
         continue label$18;
        };
       }
       HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       continue label$16;
      };
     }
     $863(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0);
     break label$7;
    }
    label$19 : {
     if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$19
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) - (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0;
     (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 3 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
     HEAP32[($5_1 + 32 | 0) >> 2] = 0;
     label$20 : {
      label$21 : while (1) {
       if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$20
       }
       HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
       HEAP32[($5_1 + 28 | 0) >> 2] = 0;
       label$22 : {
        label$23 : while (1) {
         if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$22
         }
         HEAPF64[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + (HEAP32[($5_1 + 28 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
         continue label$23;
        };
       }
       HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       continue label$21;
      };
     }
     HEAP32[($5_1 + 32 | 0) >> 2] = 1;
     label$24 : {
      label$25 : while (1) {
       if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$24
       }
       $870((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
       HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       continue label$25;
      };
     }
     HEAP32[($5_1 + 32 | 0) >> 2] = 0;
     label$26 : {
      label$27 : while (1) {
       if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$26
       }
       HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       label$28 : {
        label$29 : while (1) {
         if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$28
         }
         HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 32 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 32 | 0) >> 2] | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3];
         HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
         continue label$29;
        };
       }
       HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       continue label$27;
      };
     }
     $868((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (Math_imul(HEAP32[($5_1 + 40 | 0) >> 2] | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 3 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0) | 0;
     $863(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0);
    }
   }
  }
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $108($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 16 | 0) >> 2] | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0);
  HEAP32[($7_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $109($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 16 | 0) >> 2] | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0);
  HEAP32[($7_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $110($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = +$3_1;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAPF64[($6_1 + 8 | 0) >> 3] = $3_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = Math_imul(HEAP32[($6_1 + 24 | 0) >> 2] | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0);
  HEAP32[$6_1 >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[$6_1 >> 2] | 0 | 0) < (HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[$6_1 >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($6_1 + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[$6_1 >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $111($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $69_1 = 0;
  $8_1 = global$0 - 64 | 0;
  HEAP32[($8_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = HEAP32[($8_1 + 44 | 0) >> 2] | 0;
  HEAP32[($8_1 + 36 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($8_1 + 32 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAP32[($8_1 + 20 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 36 | 0) >> 2] | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0);
      HEAP32[($8_1 + 24 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 36 | 0) >> 2] | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0);
      HEAP32[($8_1 + 16 | 0) >> 2] = (HEAP32[($8_1 + 32 | 0) >> 2] | 0) + (HEAP32[($8_1 + 24 | 0) >> 2] | 0) | 0;
      HEAPF64[((HEAP32[($8_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      HEAP32[($8_1 + 28 | 0) >> 2] = 0;
      label$5 : {
       label$6 : while (1) {
        if (!((HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$5
        }
        $69_1 = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0;
        HEAPF64[$69_1 >> 3] = +HEAPF64[$69_1 >> 3] + +HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (HEAP32[($8_1 + 20 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($8_1 + 56 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 32 | 0) >> 2] | 0) + Math_imul(HEAP32[($8_1 + 28 | 0) >> 2] | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($8_1 + 28 | 0) >> 2] = (HEAP32[($8_1 + 28 | 0) >> 2] | 0) + 1 | 0;
        continue label$6;
       };
      }
      HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 32 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $112($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $84_1 = 0.0, $22_1 = 0, $89_1 = 0.0, $28_1 = 0, $92_1 = 0.0, $35_1 = 0, $97_1 = 0.0, $41_1 = 0, $100_1 = 0.0, $48_1 = 0, $105_1 = 0.0, $54_1 = 0;
  $5_1 = global$0 - 48 | 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  HEAPF64[($5_1 + 24 | 0) >> 3] = +(HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] | 0 | 0);
  HEAPF64[($5_1 + 16 | 0) >> 3] = +(HEAP32[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 2] | 0 | 0);
  HEAPF64[($5_1 + 8 | 0) >> 3] = +(HEAP32[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0);
  HEAP32[($5_1 + 32 | 0) >> 2] = 0;
  HEAPF64[$5_1 >> 3] = 1.0;
  label$1 : {
   label$2 : while (1) {
    if (!(+HEAPF64[($5_1 + 24 | 0) >> 3] + +HEAPF64[($5_1 + 16 | 0) >> 3] + +HEAPF64[($5_1 + 8 | 0) >> 3] > 192.0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    HEAPF64[$5_1 >> 3] = +HEAPF64[$5_1 >> 3] * 2.0;
    HEAPF64[($5_1 + 24 | 0) >> 3] = Math_ceil(+HEAPF64[($5_1 + 24 | 0) >> 3] / 2.0);
    HEAPF64[($5_1 + 16 | 0) >> 3] = Math_ceil(+HEAPF64[($5_1 + 16 | 0) >> 3] / 2.0);
    HEAPF64[($5_1 + 8 | 0) >> 3] = Math_ceil(+HEAPF64[($5_1 + 8 | 0) >> 3] / 2.0);
    continue label$2;
   };
  }
  $84_1 = +HEAPF64[($5_1 + 24 | 0) >> 3];
  label$3 : {
   label$4 : {
    if (!(Math_abs($84_1) < 2147483648.0)) {
     break label$4
    }
    $22_1 = ~~$84_1;
    break label$3;
   }
   $22_1 = -2147483648;
  }
  $89_1 = +($22_1 | 0) * +HEAPF64[$5_1 >> 3];
  label$5 : {
   label$6 : {
    if (!(Math_abs($89_1) < 2147483648.0)) {
     break label$6
    }
    $28_1 = ~~$89_1;
    break label$5;
   }
   $28_1 = -2147483648;
  }
  HEAP32[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 2] = $28_1;
  $92_1 = +HEAPF64[($5_1 + 16 | 0) >> 3];
  label$7 : {
   label$8 : {
    if (!(Math_abs($92_1) < 2147483648.0)) {
     break label$8
    }
    $35_1 = ~~$92_1;
    break label$7;
   }
   $35_1 = -2147483648;
  }
  $97_1 = +($35_1 | 0) * +HEAPF64[$5_1 >> 3];
  label$9 : {
   label$10 : {
    if (!(Math_abs($97_1) < 2147483648.0)) {
     break label$10
    }
    $41_1 = ~~$97_1;
    break label$9;
   }
   $41_1 = -2147483648;
  }
  HEAP32[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 2] = $41_1;
  $100_1 = +HEAPF64[($5_1 + 8 | 0) >> 3];
  label$11 : {
   label$12 : {
    if (!(Math_abs($100_1) < 2147483648.0)) {
     break label$12
    }
    $48_1 = ~~$100_1;
    break label$11;
   }
   $48_1 = -2147483648;
  }
  $105_1 = +($48_1 | 0) * +HEAPF64[$5_1 >> 3];
  label$13 : {
   label$14 : {
    if (!(Math_abs($105_1) < 2147483648.0)) {
     break label$14
    }
    $54_1 = ~~$105_1;
    break label$13;
   }
   $54_1 = -2147483648;
  }
  HEAP32[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 2] = $54_1;
  return HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0;
 }
 
 function $113($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 48 | 0;
  HEAP32[($8_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 20 | 0) >> 2] = (HEAP32[($8_1 + 40 | 0) >> 2] | 0) + (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0;
  HEAP32[($8_1 + 16 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) + (HEAP32[($8_1 + 28 | 0) >> 2] | 0) | 0;
  HEAP32[($8_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($8_1 + 4 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 12 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0);
    HEAP32[$8_1 >> 2] = Math_imul(HEAP32[($8_1 + 12 | 0) >> 2] | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0);
    HEAP32[($8_1 + 8 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 4 | 0) >> 2] | 0) + (HEAP32[($8_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + (((HEAP32[$8_1 >> 2] | 0) + (HEAP32[($8_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($8_1 + 8 | 0) >> 2] = (HEAP32[($8_1 + 8 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[($8_1 + 36 | 0) >> 2] | 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAPF64[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 4 | 0) >> 2] | 0) + (HEAP32[($8_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      HEAP32[($8_1 + 8 | 0) >> 2] = (HEAP32[($8_1 + 8 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    HEAP32[($8_1 + 12 | 0) >> 2] = (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($8_1 + 12 | 0) >> 2] = HEAP32[($8_1 + 40 | 0) >> 2] | 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAP32[($8_1 + 4 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 12 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0);
    HEAP32[($8_1 + 8 | 0) >> 2] = 0;
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAPF64[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 4 | 0) >> 2] | 0) + (HEAP32[($8_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      HEAP32[($8_1 + 8 | 0) >> 2] = (HEAP32[($8_1 + 8 | 0) >> 2] | 0) + 1 | 0;
      continue label$10;
     };
    }
    HEAP32[($8_1 + 12 | 0) >> 2] = (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  return;
 }
 
 function $114($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 48 | 0;
  HEAP32[($8_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 20 | 0) >> 2] = (HEAP32[($8_1 + 40 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0;
  HEAP32[($8_1 + 16 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) - (HEAP32[($8_1 + 28 | 0) >> 2] | 0) | 0;
  HEAP32[($8_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($8_1 + 4 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 12 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0);
    HEAP32[$8_1 >> 2] = Math_imul(HEAP32[($8_1 + 12 | 0) >> 2] | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0);
    HEAP32[($8_1 + 8 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 8 | 0) >> 2] | 0) + (HEAP32[($8_1 + 4 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 8 | 0) >> 2] | 0) + (HEAP32[$8_1 >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($8_1 + 8 | 0) >> 2] = (HEAP32[($8_1 + 8 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($8_1 + 12 | 0) >> 2] = (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $115($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0;
  $10_1 = global$0 - 64 | 0;
  HEAP32[($10_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($10_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($10_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($10_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 32 | 0) >> 2] = $7_1;
  HEAP32[($10_1 + 28 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($10_1 + 20 | 0) >> 2] = Math_imul(HEAP32[($10_1 + 28 | 0) >> 2] | 0, HEAP32[($10_1 + 32 | 0) >> 2] | 0);
    HEAP32[($10_1 + 16 | 0) >> 2] = Math_imul(HEAP32[($10_1 + 28 | 0) >> 2] | 0, HEAP32[($10_1 + 40 | 0) >> 2] | 0);
    HEAP32[($10_1 + 12 | 0) >> 2] = Math_imul(HEAP32[($10_1 + 28 | 0) >> 2] | 0, HEAP32[($10_1 + 36 | 0) >> 2] | 0);
    HEAP32[($10_1 + 24 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($10_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[((HEAP32[($10_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + (HEAP32[($10_1 + 20 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($10_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + (HEAP32[($10_1 + 16 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + (HEAP32[($10_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($10_1 + 24 | 0) >> 2] = (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($10_1 + 28 | 0) >> 2] = (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $116($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0;
  $10_1 = global$0 - 64 | 0;
  HEAP32[($10_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($10_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($10_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($10_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 32 | 0) >> 2] = $7_1;
  HEAP32[($10_1 + 28 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($10_1 + 20 | 0) >> 2] = Math_imul(HEAP32[($10_1 + 28 | 0) >> 2] | 0, HEAP32[($10_1 + 32 | 0) >> 2] | 0);
    HEAP32[($10_1 + 16 | 0) >> 2] = Math_imul(HEAP32[($10_1 + 28 | 0) >> 2] | 0, HEAP32[($10_1 + 40 | 0) >> 2] | 0);
    HEAP32[($10_1 + 12 | 0) >> 2] = Math_imul(HEAP32[($10_1 + 28 | 0) >> 2] | 0, HEAP32[($10_1 + 36 | 0) >> 2] | 0);
    HEAP32[($10_1 + 24 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($10_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[((HEAP32[($10_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + (HEAP32[($10_1 + 20 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($10_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + (HEAP32[($10_1 + 16 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 24 | 0) >> 2] | 0) + (HEAP32[($10_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($10_1 + 24 | 0) >> 2] = (HEAP32[($10_1 + 24 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($10_1 + 28 | 0) >> 2] = (HEAP32[($10_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $117($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 192 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 184 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 176 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 172 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 168 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 164 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 160 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 156 | 0) >> 2] = $8_1;
  label$1 : {
   label$2 : {
    if (!((((HEAP32[($11_1 + 176 | 0) >> 2] | 0) + (HEAP32[($11_1 + 172 | 0) >> 2] | 0) | 0) + (HEAP32[($11_1 + 168 | 0) >> 2] | 0) | 0 | 0) <= (192 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($11_1 + 152 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($11_1 + 152 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAP32[($11_1 + 148 | 0) >> 2] = 0;
      label$5 : {
       label$6 : while (1) {
        if (!((HEAP32[($11_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$5
        }
        HEAP32[($11_1 + 136 | 0) >> 2] = Math_imul(HEAP32[($11_1 + 152 | 0) >> 2] | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0);
        HEAP32[($11_1 + 140 | 0) >> 2] = Math_imul(HEAP32[($11_1 + 152 | 0) >> 2] | 0, HEAP32[($11_1 + 156 | 0) >> 2] | 0);
        HEAP32[($11_1 + 132 | 0) >> 2] = (HEAP32[($11_1 + 148 | 0) >> 2] | 0) + (HEAP32[($11_1 + 140 | 0) >> 2] | 0) | 0;
        HEAPF64[($11_1 + 120 | 0) >> 3] = +(0 | 0);
        HEAP32[($11_1 + 144 | 0) >> 2] = 0;
        label$7 : {
         label$8 : while (1) {
          if (!((HEAP32[($11_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$7
          }
          HEAPF64[($11_1 + 120 | 0) >> 3] = +HEAPF64[($11_1 + 120 | 0) >> 3] + +HEAPF64[((HEAP32[($11_1 + 188 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 144 | 0) >> 2] | 0) + (HEAP32[($11_1 + 136 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 184 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 148 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 144 | 0) >> 2] | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
          HEAP32[($11_1 + 144 | 0) >> 2] = (HEAP32[($11_1 + 144 | 0) >> 2] | 0) + 1 | 0;
          continue label$8;
         };
        }
        HEAPF64[((HEAP32[($11_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 120 | 0) >> 3];
        HEAP32[($11_1 + 148 | 0) >> 2] = (HEAP32[($11_1 + 148 | 0) >> 2] | 0) + 1 | 0;
        continue label$6;
       };
      }
      HEAP32[($11_1 + 152 | 0) >> 2] = (HEAP32[($11_1 + 152 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    break label$1;
   }
   HEAP32[($11_1 + 176 | 0) >> 2] = (HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
   HEAP32[($11_1 + 172 | 0) >> 2] = (HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
   HEAP32[($11_1 + 168 | 0) >> 2] = (HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
   HEAP32[($11_1 + 108 | 0) >> 2] = HEAP32[($11_1 + 188 | 0) >> 2] | 0;
   HEAP32[($11_1 + 104 | 0) >> 2] = (HEAP32[($11_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 172 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[($11_1 + 100 | 0) >> 2] = (HEAP32[($11_1 + 188 | 0) >> 2] | 0) + (Math_imul(HEAP32[($11_1 + 176 | 0) >> 2] | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[($11_1 + 96 | 0) >> 2] = ((HEAP32[($11_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 172 | 0) >> 2] | 0) << 3 | 0) | 0) + (Math_imul(HEAP32[($11_1 + 176 | 0) >> 2] | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[($11_1 + 92 | 0) >> 2] = HEAP32[($11_1 + 184 | 0) >> 2] | 0;
   HEAP32[($11_1 + 88 | 0) >> 2] = (HEAP32[($11_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 168 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[($11_1 + 84 | 0) >> 2] = (HEAP32[($11_1 + 184 | 0) >> 2] | 0) + (Math_imul(HEAP32[($11_1 + 172 | 0) >> 2] | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[($11_1 + 80 | 0) >> 2] = ((HEAP32[($11_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 168 | 0) >> 2] | 0) << 3 | 0) | 0) + (Math_imul(HEAP32[($11_1 + 172 | 0) >> 2] | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[($11_1 + 76 | 0) >> 2] = HEAP32[($11_1 + 180 | 0) >> 2] | 0;
   HEAP32[($11_1 + 72 | 0) >> 2] = (HEAP32[($11_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 168 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[($11_1 + 68 | 0) >> 2] = (HEAP32[($11_1 + 180 | 0) >> 2] | 0) + (Math_imul(HEAP32[($11_1 + 176 | 0) >> 2] | 0, HEAP32[($11_1 + 156 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[($11_1 + 64 | 0) >> 2] = ((HEAP32[($11_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 168 | 0) >> 2] | 0) << 3 | 0) | 0) + (Math_imul(HEAP32[($11_1 + 176 | 0) >> 2] | 0, HEAP32[($11_1 + 156 | 0) >> 2] | 0) << 3 | 0) | 0;
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 176 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($11_1 + 32 | 0) >> 2] = HEAP32[($11_1 + 168 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 176 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 52 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($11_1 + 24 | 0) >> 2] = HEAP32[($11_1 + 168 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 176 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($11_1 + 20 | 0) >> 2] = HEAP32[($11_1 + 168 | 0) >> 2] | 0;
   HEAP32[($11_1 + 56 | 0) >> 2] = HEAP32[($11_1 + 68 | 0) >> 2] | 0;
   HEAP32[($11_1 + 28 | 0) >> 2] = HEAP32[($11_1 + 156 | 0) >> 2] | 0;
   HEAP32[($11_1 + 44 | 0) >> 2] = HEAP32[($11_1 + 72 | 0) >> 2] | 0;
   HEAP32[($11_1 + 16 | 0) >> 2] = HEAP32[($11_1 + 156 | 0) >> 2] | 0;
   HEAP32[($11_1 + 40 | 0) >> 2] = HEAP32[($11_1 + 64 | 0) >> 2] | 0;
   HEAP32[($11_1 + 12 | 0) >> 2] = HEAP32[($11_1 + 156 | 0) >> 2] | 0;
   HEAP32[($11_1 + 36 | 0) >> 2] = HEAP32[($11_1 + 76 | 0) >> 2] | 0;
   HEAP32[($11_1 + 8 | 0) >> 2] = HEAP32[($11_1 + 156 | 0) >> 2] | 0;
   HEAP32[($11_1 + 4 | 0) >> 2] = HEAP32[($11_1 + 172 | 0) >> 2] | 0;
   HEAP32[$11_1 >> 2] = HEAP32[($11_1 + 168 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 176 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 116 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 172 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 112 | 0) >> 2] = wasm2js_i32$1;
   $115(HEAP32[($11_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0);
   $115(HEAP32[($11_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[$11_1 >> 2] | 0 | 0);
   $117(HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$11_1 >> 2] | 0 | 0, HEAP32[($11_1 + 32 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 176 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 116 | 0) >> 2] = wasm2js_i32$1;
   $115(HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0);
   $117(HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 172 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 112 | 0) >> 2] = wasm2js_i32$1;
   $116(HEAP32[($11_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[$11_1 >> 2] | 0 | 0);
   $117(HEAP32[($11_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[$11_1 >> 2] | 0 | 0, HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 172 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 112 | 0) >> 2] = wasm2js_i32$1;
   $116(HEAP32[($11_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[$11_1 >> 2] | 0 | 0);
   $117(HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[$11_1 >> 2] | 0 | 0, HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 176 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 116 | 0) >> 2] = wasm2js_i32$1;
   $115(HEAP32[($11_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0);
   $117(HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 176 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 116 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 172 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 112 | 0) >> 2] = wasm2js_i32$1;
   $116(HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0);
   $115(HEAP32[($11_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[$11_1 >> 2] | 0 | 0);
   $117(HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$11_1 >> 2] | 0 | 0, HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 176 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 116 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 172 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 112 | 0) >> 2] = wasm2js_i32$1;
   $116(HEAP32[($11_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0);
   $115(HEAP32[($11_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[$11_1 >> 2] | 0 | 0);
   $117(HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$11_1 >> 2] | 0 | 0, HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 176 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 116 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($11_1 + 4 | 0) >> 2] = HEAP32[($11_1 + 168 | 0) >> 2] | 0;
   $115(HEAP32[($11_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0);
   $116(HEAP32[($11_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0);
   $115(HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 176 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 116 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($11_1 + 4 | 0) >> 2] = HEAP32[($11_1 + 168 | 0) >> 2] | 0;
   $115(HEAP32[($11_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0);
   $116(HEAP32[($11_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0);
   $115(HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0);
   $115(HEAP32[($11_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0);
   $115(HEAP32[($11_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 60 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 52 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 48 | 0) >> 2] | 0 | 0);
  }
  global$0 = $11_1 + 192 | 0;
  return;
 }
 
 function $118($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 36 | 0) >> 2] = HEAP32[($8_1 + 48 | 0) >> 2] | 0;
  HEAP32[($8_1 + 32 | 0) >> 2] = HEAP32[($8_1 + 44 | 0) >> 2] | 0;
  HEAP32[($8_1 + 28 | 0) >> 2] = HEAP32[($8_1 + 40 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $112($8_1 + 36 | 0 | 0, $8_1 + 32 | 0 | 0, $8_1 + 28 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($8_1 + 32 | 0) >> 2] | 0) << 3 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862(Math_imul(((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) / (2 | 0) | 0) << 3 | 0, (HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) / (2 | 0) | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $113(HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 36 | 0) >> 2] | 0) - (HEAP32[($8_1 + 48 | 0) >> 2] | 0) | 0 | 0, (HEAP32[($8_1 + 32 | 0) >> 2] | 0) - (HEAP32[($8_1 + 44 | 0) >> 2] | 0) | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0);
  $113(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 32 | 0) >> 2] | 0) - (HEAP32[($8_1 + 44 | 0) >> 2] | 0) | 0 | 0, (HEAP32[($8_1 + 28 | 0) >> 2] | 0) - (HEAP32[($8_1 + 40 | 0) >> 2] | 0) | 0 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0);
  $117(HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0);
  $114(HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 36 | 0) >> 2] | 0) - (HEAP32[($8_1 + 48 | 0) >> 2] | 0) | 0 | 0, (HEAP32[($8_1 + 28 | 0) >> 2] | 0) - (HEAP32[($8_1 + 40 | 0) >> 2] | 0) | 0 | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $8_1 + 64 | 0;
  return;
 }
 
 function $119($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  label$1 : {
   label$2 : {
    if (!((((HEAP32[($8_1 + 16 | 0) >> 2] | 0) + (HEAP32[($8_1 + 12 | 0) >> 2] | 0) | 0) + (HEAP32[($8_1 + 8 | 0) >> 2] | 0) | 0 | 0) <= (96 | 0) & 1 | 0)) {
     break label$2
    }
    $111(HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $118(HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $8_1 + 32 | 0;
  return;
 }
 
 function $120($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $121(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $121($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $192_1 = 0, $241_1 = 0.0, $216_1 = 0;
  $5_1 = global$0 - 80 | 0;
  HEAP32[($5_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 64 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5_1 + 64 | 0) >> 2] | 0;
    HEAP32[($5_1 + 64 | 0) >> 2] = (HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($5_1 + 64 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) < ((HEAP32[($5_1 + 72 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[($5_1 + 16 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($5_1 + 64 | 0) >> 2] | 0, HEAP32[($5_1 + 72 | 0) >> 2] | 0) + (HEAP32[($5_1 + 64 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
    HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 64 | 0) >> 2] | 0;
    HEAP32[($5_1 + 60 | 0) >> 2] = (HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 1 | 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      label$7 : {
       if (!(+HEAPF64[($5_1 + 16 | 0) >> 3] < Math_abs(+HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($5_1 + 60 | 0) >> 2] | 0, HEAP32[($5_1 + 72 | 0) >> 2] | 0) + (HEAP32[($5_1 + 64 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
        break label$7
       }
       HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($5_1 + 60 | 0) >> 2] | 0, HEAP32[($5_1 + 72 | 0) >> 2] | 0) + (HEAP32[($5_1 + 64 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
      }
      HEAP32[($5_1 + 60 | 0) >> 2] = (HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    label$8 : {
     if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[($5_1 + 52 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 64 | 0) >> 2] | 0, HEAP32[($5_1 + 72 | 0) >> 2] | 0);
     HEAP32[($5_1 + 48 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 44 | 0) >> 2] | 0, HEAP32[($5_1 + 72 | 0) >> 2] | 0);
     HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     HEAP32[($5_1 + 60 | 0) >> 2] = 0;
     label$9 : {
      label$10 : while (1) {
       if (!((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + (HEAP32[($5_1 + 60 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[(((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[(((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3];
       HEAP32[($5_1 + 60 | 0) >> 2] = (HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 1 | 0;
       continue label$10;
      };
     }
    }
    HEAP32[($5_1 + 48 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 64 | 0) >> 2] | 0, HEAP32[($5_1 + 72 | 0) >> 2] | 0);
    HEAPF64[($5_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + (HEAP32[($5_1 + 64 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    label$11 : {
     if (!(+HEAPF64[($5_1 + 32 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
      break label$11
     }
     HEAP32[($5_1 + 60 | 0) >> 2] = (HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 1 | 0;
     label$12 : {
      label$13 : while (1) {
       if (!((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$12
       }
       HEAP32[($5_1 + 52 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 60 | 0) >> 2] | 0, HEAP32[($5_1 + 72 | 0) >> 2] | 0);
       $192_1 = (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + (HEAP32[($5_1 + 64 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
       $241_1 = +HEAPF64[$192_1 >> 3] / +HEAPF64[($5_1 + 32 | 0) >> 3];
       HEAPF64[$192_1 >> 3] = $241_1;
       HEAPF64[($5_1 + 24 | 0) >> 3] = $241_1;
       HEAP32[($5_1 + 56 | 0) >> 2] = (HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 1 | 0;
       label$14 : {
        label$15 : while (1) {
         if (!((HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$14
         }
         $216_1 = (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + (HEAP32[($5_1 + 56 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
         HEAPF64[$216_1 >> 3] = +HEAPF64[$216_1 >> 3] - +HEAPF64[($5_1 + 24 | 0) >> 3] * +HEAPF64[((HEAP32[($5_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 48 | 0) >> 2] | 0) + (HEAP32[($5_1 + 56 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($5_1 + 56 | 0) >> 2] = (HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 1 | 0;
         continue label$15;
        };
       }
       HEAP32[($5_1 + 60 | 0) >> 2] = (HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 1 | 0;
       continue label$13;
      };
     }
    }
    HEAP32[($5_1 + 64 | 0) >> 2] = (HEAP32[($5_1 + 64 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  return 0 | 0;
 }
 
 function $122($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 24 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAPF64[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    label$3 : {
     if (!(+HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] == +(0 | 0) & 1 | 0)) {
      break label$3
     }
     $875(global$3 + 1887 | 0 | 0, 0 | 0) | 0;
    }
    HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($7_1 + 32 | 0) >> 2] | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
  HEAP32[($7_1 + 24 | 0) >> 2] = 1;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAPF64[$7_1 >> 3] = +(0 | 0);
    HEAP32[($7_1 + 16 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0);
    HEAP32[($7_1 + 20 | 0) >> 2] = 0;
    label$6 : {
     label$7 : while (1) {
      if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAPF64[$7_1 >> 3] = +HEAPF64[$7_1 >> 3] + +HEAPF64[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + (HEAP32[($7_1 + 20 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$7;
     };
    }
    HEAPF64[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[$7_1 >> 3];
    HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  HEAPF64[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 40 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 40 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 40 | 0) >> 2] | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
  HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) - 2 | 0;
  label$8 : {
   label$9 : while (1) {
    if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAPF64[$7_1 >> 3] = +(0 | 0);
    HEAP32[($7_1 + 16 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0);
    HEAP32[($7_1 + 12 | 0) >> 2] = 0;
    HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    label$10 : {
     label$11 : while (1) {
      if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      HEAP32[($7_1 + 12 | 0) >> 2] = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[$7_1 >> 3] = +HEAPF64[$7_1 >> 3] + +HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + (HEAP32[($7_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$11;
     };
    }
    HEAPF64[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[$7_1 >> 3]) / +HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + -1 | 0;
    continue label$9;
   };
  }
  $863(HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $123($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($6_1 + 28 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAPF64[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($6_1 + 28 | 0) >> 2] = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($6_1 + 28 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
    $122(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
    HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAPF64[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + (HEAP32[($6_1 + 40 | 0) >> 2] | 0) | 0;
      HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    HEAPF64[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($6_1 + 28 | 0) >> 2] = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $863(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 48 | 0;
  return;
 }
 
 function $124($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$125(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
  $12_1 = +HEAPF64[($5_1 + 8 | 0) >> 3];
  global$0 = $5_1 + 32 | 0;
  return +$12_1;
 }
 
 function $125($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $25_1 = 0, $102_1 = 0, $154_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862(8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
     break label$2
    }
    $25_1 = 1;
    $119((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $25_1 | 0, (HEAP32[($5_1 + 40 | 0) >> 2] | 0) - 1 | 0 | 0, $25_1 | 0);
    break label$1;
   }
   HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3] = +(0 | 0);
  }
  HEAPF64[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 3] = 1.0;
  HEAP32[$5_1 >> 2] = 1;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[$5_1 >> 2] | 0 | 0) < (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + ((HEAP32[$5_1 >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + ((HEAP32[$5_1 >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  label$5 : {
   label$6 : {
    if (!(+HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3] == +(0 | 0) & 1 | 0)) {
     break label$6
    }
    if (!(+HEAPF64[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 3] >= +(0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAPF64[($5_1 + 24 | 0) >> 3] = +(0 | 0);
    break label$5;
   }
   label$7 : {
    label$8 : {
     if (!(+HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3] == +(0 | 0) & 1 | 0)) {
      break label$8
     }
     if (!(+HEAPF64[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 3] < +(0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAPF64[($5_1 + 24 | 0) >> 3] = -2.0;
     break label$7;
    }
    HEAPF64[($5_1 + 16 | 0) >> 3] = Math_sqrt(+HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 3]);
    label$9 : {
     label$10 : {
      if (!(+HEAPF64[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
       break label$10
      }
      HEAPF64[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 3] - +HEAPF64[($5_1 + 16 | 0) >> 3];
      break label$9;
     }
     HEAPF64[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 3] = -+HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3] / (+HEAPF64[(HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 3] + +HEAPF64[($5_1 + 16 | 0) >> 3]);
    }
    HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 3];
    HEAPF64[($5_1 + 24 | 0) >> 3] = 2.0 * +HEAPF64[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 3] / (+HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 3]);
    HEAP32[$5_1 >> 2] = 0;
    label$11 : {
     label$12 : while (1) {
      if (!((HEAP32[$5_1 >> 2] | 0 | 0) < (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      $102_1 = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + ((HEAP32[$5_1 >> 2] | 0) << 3 | 0) | 0;
      HEAPF64[$102_1 >> 3] = +HEAPF64[$102_1 >> 3] / +HEAPF64[($5_1 + 8 | 0) >> 3];
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 1 | 0;
      continue label$12;
     };
    }
   }
  }
  $863(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  $154_1 = +HEAPF64[($5_1 + 24 | 0) >> 3];
  global$0 = $5_1 + 48 | 0;
  return +$154_1;
 }
 
 function $126($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $196_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $3_1;
  label$1 : {
   if (!((HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   $875(global$3 + 2898 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862((HEAP32[($6_1 + 56 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862((HEAP32[($6_1 + 56 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($6_1 + 56 | 0) >> 2] | 0) << 3 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($6_1 + 56 | 0) >> 2] | 0) << 3 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    label$4 : {
     label$5 : while (1) {
      if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAPF64[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 40 | 0) >> 2] | 0) - (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($6_1 + 40 | 0) >> 2] | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0) + (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($6_1 + 40 | 0) >> 2] = (HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 1 | 0;
      continue label$5;
     };
    }
    (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = +$124(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 56 | 0) >> 2] | 0) - (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
    HEAPF64[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[$6_1 >> 3];
    HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    label$6 : {
     label$7 : while (1) {
      if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($6_1 + 28 | 0) >> 2] = Math_imul(HEAP32[($6_1 + 40 | 0) >> 2] | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0);
      HEAP32[($6_1 + 32 | 0) >> 2] = 0;
      HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      label$8 : {
       label$9 : while (1) {
        if (!((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$8
        }
        HEAPF64[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + ((((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + (HEAP32[($6_1 + 40 | 0) >> 2] | 0) | 0) - (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + (HEAP32[($6_1 + 28 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($6_1 + 32 | 0) >> 2] = (HEAP32[($6_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 56 | 0) >> 2] | 0) - (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0) | 0;
        HEAP32[($6_1 + 36 | 0) >> 2] = (HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 1 | 0;
        continue label$9;
       };
      }
      HEAP32[($6_1 + 40 | 0) >> 2] = (HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 1 | 0;
      continue label$7;
     };
    }
    $119(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 52 | 0) >> 2] | 0) - (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0 | 0, (HEAP32[($6_1 + 56 | 0) >> 2] | 0) - (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
    $110(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 52 | 0) >> 2] | 0) - (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0 | 0, 1 | 0, +(+HEAPF64[$6_1 >> 3]));
    $119(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 56 | 0) >> 2] | 0) - (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0 | 0, 1 | 0, (HEAP32[($6_1 + 52 | 0) >> 2] | 0) - (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0 | 0);
    HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    label$10 : {
     label$11 : while (1) {
      if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      HEAP32[($6_1 + 28 | 0) >> 2] = Math_imul(HEAP32[($6_1 + 40 | 0) >> 2] | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0);
      HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      label$12 : {
       label$13 : while (1) {
        if (!((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$12
        }
        $196_1 = (HEAP32[($6_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + (HEAP32[($6_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
        HEAPF64[$196_1 >> 3] = +HEAPF64[$196_1 >> 3] - +HEAPF64[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + (((Math_imul((HEAP32[($6_1 + 40 | 0) >> 2] | 0) - (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0, (HEAP32[($6_1 + 52 | 0) >> 2] | 0) - (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0) + (HEAP32[($6_1 + 36 | 0) >> 2] | 0) | 0) - (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($6_1 + 36 | 0) >> 2] = (HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 1 | 0;
        continue label$13;
       };
      }
      HEAP32[($6_1 + 40 | 0) >> 2] = (HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 1 | 0;
      continue label$11;
     };
    }
    label$14 : {
     if (!((HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$14
     }
     HEAP32[($6_1 + 40 | 0) >> 2] = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 1 | 0;
     label$15 : {
      label$16 : while (1) {
       if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       HEAPF64[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($6_1 + 40 | 0) >> 2] | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0) + (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 40 | 0) >> 2] | 0) - (HEAP32[($6_1 + 44 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($6_1 + 40 | 0) >> 2] = (HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 1 | 0;
       continue label$16;
      };
     }
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  $863(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 64 | 0;
  return;
 }
 
 function $127($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $287_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $5_1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($8_1 + 36 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 36 | 0) >> 2] | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0);
    HEAP32[($8_1 + 32 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      label$5 : {
       label$6 : {
        if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) > (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$6
        }
        HEAPF64[((HEAP32[($8_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
        break label$5;
       }
       HEAPF64[((HEAP32[($8_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      }
      HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 32 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($8_1 + 36 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 36 | 0) >> 2] | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0);
    HEAP32[($8_1 + 32 | 0) >> 2] = 0;
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      label$11 : {
       label$12 : {
        if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) == (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$12
        }
        HEAPF64[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = 1.0;
        break label$11;
       }
       HEAPF64[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      }
      HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 32 | 0) >> 2] | 0) + 1 | 0;
      continue label$10;
     };
    }
    HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - 1 | 0;
  label$13 : {
   label$14 : while (1) {
    if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$13
    }
    HEAPF64[(HEAP32[($8_1 + 12 | 0) >> 2] | 0) >> 3] = 1.0;
    HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    label$15 : {
     label$16 : while (1) {
      if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$15
      }
      HEAPF64[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 36 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 36 | 0) >> 2] | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0) + (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$16;
     };
    }
    HEAP32[($8_1 + 36 | 0) >> 2] = HEAP32[($8_1 + 32 | 0) >> 2] | 0;
    label$17 : {
     label$18 : while (1) {
      if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$17
      }
      HEAP32[($8_1 + 24 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 36 | 0) >> 2] | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0);
      HEAP32[($8_1 + 20 | 0) >> 2] = 0;
      HEAP32[($8_1 + 28 | 0) >> 2] = HEAP32[($8_1 + 32 | 0) >> 2] | 0;
      label$19 : {
       label$20 : while (1) {
        if (!((HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$19
        }
        HEAPF64[((HEAP32[($8_1 + 8 | 0) >> 2] | 0) + ((((HEAP32[($8_1 + 20 | 0) >> 2] | 0) + (HEAP32[($8_1 + 36 | 0) >> 2] | 0) | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (HEAP32[($8_1 + 24 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($8_1 + 20 | 0) >> 2] = (HEAP32[($8_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0) | 0;
        HEAP32[($8_1 + 28 | 0) >> 2] = (HEAP32[($8_1 + 28 | 0) >> 2] | 0) + 1 | 0;
        continue label$20;
       };
      }
      HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$18;
     };
    }
    $119(HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0 | 0, (HEAP32[($8_1 + 56 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
    $110(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0 | 0, 1 | 0, +(+HEAPF64[((HEAP32[($8_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]));
    $119(HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 56 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0 | 0, 1 | 0, (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0 | 0);
    HEAP32[($8_1 + 36 | 0) >> 2] = HEAP32[($8_1 + 32 | 0) >> 2] | 0;
    label$21 : {
     label$22 : while (1) {
      if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$21
      }
      HEAP32[($8_1 + 24 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 36 | 0) >> 2] | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0);
      HEAP32[($8_1 + 28 | 0) >> 2] = HEAP32[($8_1 + 32 | 0) >> 2] | 0;
      label$23 : {
       label$24 : while (1) {
        if (!((HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$23
        }
        $287_1 = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + (HEAP32[($8_1 + 28 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
        HEAPF64[$287_1 >> 3] = +HEAPF64[$287_1 >> 3] - +HEAPF64[((HEAP32[($8_1 + 8 | 0) >> 2] | 0) + (((Math_imul((HEAP32[($8_1 + 36 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0, (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0) + (HEAP32[($8_1 + 28 | 0) >> 2] | 0) | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($8_1 + 28 | 0) >> 2] = (HEAP32[($8_1 + 28 | 0) >> 2] | 0) + 1 | 0;
        continue label$24;
       };
      }
      HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$22;
     };
    }
    HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 32 | 0) >> 2] | 0) + -1 | 0;
    continue label$14;
   };
  }
  $863(HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $8_1 + 64 | 0;
  return;
 }
 
 function $128($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $51_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($4_1 + 24 | 0) >> 2] | 0) << 3 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $129(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = Math_imul(HEAP32[($4_1 + 16 | 0) >> 2] | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $863(HEAP32[$4_1 >> 2] | 0 | 0);
  $51_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $51_1 | 0;
 }
 
 function $129($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $43_1 = 0, $106_1 = 0, $135_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    label$3 : {
     if (!(+HEAPF64[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 3] > +(0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAPF64[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 3] = Math_sqrt(+HEAPF64[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 3]);
     HEAP32[($6_1 + 44 | 0) >> 2] = 0;
     break label$1;
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = -1;
    break label$1;
   }
   label$4 : {
    if (!(+HEAPF64[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 3] < +(0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = -1;
    break label$1;
   }
   HEAPF64[$6_1 >> 3] = Math_sqrt(+HEAPF64[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 3]);
   HEAPF64[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 3] = +HEAPF64[$6_1 >> 3];
   HEAP32[($6_1 + 20 | 0) >> 2] = 1;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     $43_1 = (HEAP32[($6_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAPF64[$43_1 >> 3] = +HEAPF64[$43_1 >> 3] / +HEAPF64[$6_1 >> 3];
     HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   $119((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 36 | 0) >> 2] | 0) - 1 | 0 | 0, 1 | 0, (HEAP32[($6_1 + 36 | 0) >> 2] | 0) - 1 | 0 | 0);
   HEAP32[($6_1 + 16 | 0) >> 2] = 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 36 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[($6_1 + 12 | 0) >> 2] = ((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + 1 | 0) + Math_imul(HEAP32[($6_1 + 16 | 0) >> 2] | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0) | 0;
     HEAP32[($6_1 + 8 | 0) >> 2] = Math_imul(HEAP32[($6_1 + 16 | 0) >> 2] | 0, (HEAP32[($6_1 + 36 | 0) >> 2] | 0) - 1 | 0);
     HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
     label$9 : {
      label$10 : while (1) {
       if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 36 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
        break label$9
       }
       $106_1 = (HEAP32[($6_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
       HEAPF64[$106_1 >> 3] = +HEAPF64[$106_1 >> 3] - +HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 1 | 0;
       continue label$10;
      };
     }
     HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $129(((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) + 8 | 0 | 0, (HEAP32[($6_1 + 36 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
   label$11 : {
    if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
     break label$11
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = -1;
    break label$1;
   }
   HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  }
  $135_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  global$0 = $6_1 + 48 | 0;
  return $135_1 | 0;
 }
 
 function $130($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $60_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = 64;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($4_1 + 40 | 0) >> 2] | 0) << 3 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 3 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $131(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($4_1 + 32 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = Math_imul(HEAP32[($4_1 + 32 | 0) >> 2] | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0);
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + (HEAP32[($4_1 + 28 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $863(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $60_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  return $60_1 | 0;
 }
 
 function $131($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $296_1 = 0, $328_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 96 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 88 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 84 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 80 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 72 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 68 | 0) >> 2] = 64;
  HEAP32[($7_1 + 64 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 68 | 0) >> 2] | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!((HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) <= (64 | 0) & 1 | 0)) {
      break label$3
     }
     (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $129(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
     label$4 : {
      if (!((HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($7_1 + 92 | 0) >> 2] = -1;
      break label$1;
     }
     break label$2;
    }
    HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 84 | 0) >> 2] | 0) - (HEAP32[($7_1 + 68 | 0) >> 2] | 0) | 0;
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 52 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 52 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
    $129(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($7_1 + 60 | 0) >> 2] = 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($7_1 + 48 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 60 | 0) >> 2] | 0, HEAP32[($7_1 + 80 | 0) >> 2] | 0);
      HEAP32[($7_1 + 40 | 0) >> 2] = 0;
      HEAP32[($7_1 + 56 | 0) >> 2] = 0;
      label$7 : {
       label$8 : while (1) {
        if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$7
        }
        HEAPF64[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (HEAP32[($7_1 + 60 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + (HEAP32[($7_1 + 48 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (HEAP32[($7_1 + 68 | 0) >> 2] | 0) | 0;
        HEAP32[($7_1 + 56 | 0) >> 2] = (HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 1 | 0;
        continue label$8;
       };
      }
      HEAP32[($7_1 + 60 | 0) >> 2] = (HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    HEAP32[($7_1 + 44 | 0) >> 2] = 0;
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[($7_1 + 40 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 44 | 0) >> 2] | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0);
      HEAP32[($7_1 + 60 | 0) >> 2] = 0;
      label$11 : {
       label$12 : while (1) {
        if (!((HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$11
        }
        HEAPF64[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + ((((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 40 | 0) >> 2] | 0) | 0) + (HEAP32[($7_1 + 60 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAPF64[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
        HEAP32[($7_1 + 60 | 0) >> 2] = (HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 1 | 0;
        continue label$12;
       };
      }
      HEAP32[($7_1 + 60 | 0) >> 2] = 0;
      label$13 : {
       label$14 : while (1) {
        if (!((HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$13
        }
        HEAP32[($7_1 + 48 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 60 | 0) >> 2] | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0);
        HEAPF64[$7_1 >> 3] = +(0 | 0);
        HEAP32[($7_1 + 56 | 0) >> 2] = 0;
        label$15 : {
         label$16 : while (1) {
          if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$15
          }
          HEAPF64[$7_1 >> 3] = +HEAPF64[$7_1 >> 3] + +HEAPF64[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 48 | 0) >> 2] | 0) + (HEAP32[($7_1 + 56 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          HEAP32[($7_1 + 56 | 0) >> 2] = (HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 1 | 0;
          continue label$16;
         };
        }
        HEAPF64[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[$7_1 >> 3]) / +HEAPF64[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 48 | 0) >> 2] | 0) + (HEAP32[($7_1 + 60 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($7_1 + 60 | 0) >> 2] = (HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 1 | 0;
        continue label$14;
       };
      }
      HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 68 | 0) >> 2] | 0) + (HEAP32[($7_1 + 44 | 0) >> 2] | 0) | 0;
      HEAP32[($7_1 + 60 | 0) >> 2] = 0;
      label$17 : {
       label$18 : while (1) {
        if (!((HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$17
        }
        HEAPF64[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (HEAP32[($7_1 + 60 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 80 | 0) >> 2] | 0) | 0;
        HEAP32[($7_1 + 60 | 0) >> 2] = (HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 1 | 0;
        continue label$18;
       };
      }
      HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0;
      continue label$10;
     };
    }
    $106(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0);
    $119(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0);
    HEAP32[($7_1 + 60 | 0) >> 2] = 0;
    label$19 : {
     label$20 : while (1) {
      if (!((HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$19
      }
      HEAP32[($7_1 + 40 | 0) >> 2] = (Math_imul(HEAP32[($7_1 + 68 | 0) >> 2] | 0, HEAP32[($7_1 + 80 | 0) >> 2] | 0) + (HEAP32[($7_1 + 68 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($7_1 + 60 | 0) >> 2] | 0, HEAP32[($7_1 + 80 | 0) >> 2] | 0) | 0;
      HEAP32[($7_1 + 32 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 60 | 0) >> 2] | 0, HEAP32[($7_1 + 52 | 0) >> 2] | 0);
      HEAP32[($7_1 + 56 | 0) >> 2] = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
      label$21 : {
       label$22 : while (1) {
        if (!((HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$21
        }
        $296_1 = (HEAP32[($7_1 + 88 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + (HEAP32[($7_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
        HEAPF64[$296_1 >> 3] = +HEAPF64[$296_1 >> 3] - +HEAPF64[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + (HEAP32[($7_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($7_1 + 56 | 0) >> 2] = (HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 1 | 0;
        continue label$22;
       };
      }
      HEAP32[($7_1 + 60 | 0) >> 2] = (HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 1 | 0;
      continue label$20;
     };
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $131(((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + (Math_imul(HEAP32[($7_1 + 68 | 0) >> 2] | 0, HEAP32[($7_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
    label$23 : {
     if (!((HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
      break label$23
     }
     HEAP32[($7_1 + 92 | 0) >> 2] = -1;
     break label$1;
    }
   }
   HEAP32[($7_1 + 92 | 0) >> 2] = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  }
  $328_1 = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
  global$0 = $7_1 + 96 | 0;
  return $328_1 | 0;
 }
 
 function $132($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $18_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) <= (64 | 0) & 1 | 0)) {
     break label$2
    }
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $128(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
    break label$1;
   }
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $130(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  }
  $18_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $18_1 | 0;
 }
 
 function $133($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 24 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($7_1 + 24 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($7_1 + 40 | 0) >> 2] | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($7_1 + 24 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($7_1 + 36 | 0) >> 2] | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  $98(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0);
  HEAP32[($7_1 + 24 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAPF64[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 20 | 0) >> 2] = 0;
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 20 | 0) >> 2] | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 20 | 0) >> 2] | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$10;
     };
    }
    HEAP32[($7_1 + 20 | 0) >> 2] = 0;
    label$11 : {
     label$12 : while (1) {
      if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      HEAPF64[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 20 | 0) >> 2] | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[($7_1 + 24 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 20 | 0) >> 2] | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$12;
     };
    }
    HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  $863(HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $134($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $123_1 = 0, $1248 = 0.0, $226_1 = 0, $250_1 = 0, $317_1 = 0, $1304 = 0.0, $425_1 = 0, $446_1 = 0, $589_1 = 0, $773_1 = 0, $836_1 = 0, $919 = 0, $1415 = 0.0, $1505 = 0.0, $1550 = 0.0, $1214 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $8_1 = global$0 - 176 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 168 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 164 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 160 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 156 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 152 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 148 | 0) >> 2] = $5_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $875(global$3 + 7571 | 0 | 0, 0 | 0) | 0;
    $875(global$3 + 1024 | 0 | 0, 0 | 0) | 0;
    HEAP32[($8_1 + 172 | 0) >> 2] = -1;
    break label$1;
   }
   (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862((HEAP32[($8_1 + 160 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($8_1 + 120 | 0) >> 2] = 0;
   (wasm2js_i32$0 = $8_1, wasm2js_f64$0 = +$88()), HEAPF64[(wasm2js_i32$0 + 96 | 0) >> 3] = wasm2js_f64$0;
   HEAPF64[($8_1 + 80 | 0) >> 3] = +(0 | 0);
   HEAPF64[($8_1 + 16 | 0) >> 3] = +(0 | 0);
   HEAPF64[($8_1 + 88 | 0) >> 3] = +(0 | 0);
   HEAP32[($8_1 + 144 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($8_1 + 144 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($8_1 + 164 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) | 0) & 1 | 0)) {
      break label$3
     }
     HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($8_1 + 144 | 0) >> 2] = (HEAP32[($8_1 + 144 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($8_1 + 144 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($8_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($8_1 + 132 | 0) >> 2] = (HEAP32[($8_1 + 144 | 0) >> 2] | 0) + 1 | 0;
     HEAPF64[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($8_1 + 16 | 0) >> 3] * +HEAPF64[($8_1 + 88 | 0) >> 3];
     HEAPF64[($8_1 + 88 | 0) >> 3] = +(0 | 0);
     HEAPF64[($8_1 + 72 | 0) >> 3] = +(0 | 0);
     HEAPF64[($8_1 + 16 | 0) >> 3] = +(0 | 0);
     label$7 : {
      if (!((HEAP32[($8_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 144 | 0) >> 2] | 0;
      label$8 : {
       label$9 : while (1) {
        if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$8
        }
        HEAPF64[($8_1 + 16 | 0) >> 3] = +HEAPF64[($8_1 + 16 | 0) >> 3] + Math_abs(+HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 136 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
        HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
        continue label$9;
       };
      }
      label$10 : {
       if (!(+HEAPF64[($8_1 + 16 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
        break label$10
       }
       HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 144 | 0) >> 2] | 0;
       label$11 : {
        label$12 : while (1) {
         if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$11
         }
         HEAP32[($8_1 + 128 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 136 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0);
         $123_1 = (HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
         HEAPF64[$123_1 >> 3] = +HEAPF64[$123_1 >> 3] / +HEAPF64[($8_1 + 16 | 0) >> 3];
         HEAPF64[($8_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[($8_1 + 72 | 0) >> 3] = +HEAPF64[($8_1 + 72 | 0) >> 3] + +HEAPF64[($8_1 + 64 | 0) >> 3] * +HEAPF64[($8_1 + 64 | 0) >> 3];
         HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
         continue label$12;
        };
       }
       HEAPF64[($8_1 + 56 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 144 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       label$13 : {
        label$14 : {
         if (!(+HEAPF64[($8_1 + 56 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
          break label$14
         }
         $1248 = Math_sqrt(+HEAPF64[($8_1 + 72 | 0) >> 3]);
         break label$13;
        }
        $1248 = -Math_sqrt(+HEAPF64[($8_1 + 72 | 0) >> 3]);
       }
       HEAPF64[($8_1 + 88 | 0) >> 3] = $1248;
       HEAPF64[($8_1 + 48 | 0) >> 3] = +HEAPF64[($8_1 + 56 | 0) >> 3] * +HEAPF64[($8_1 + 88 | 0) >> 3] - +HEAPF64[($8_1 + 72 | 0) >> 3];
       HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 144 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($8_1 + 56 | 0) >> 3] - +HEAPF64[($8_1 + 88 | 0) >> 3];
       label$15 : {
        if (!((HEAP32[($8_1 + 144 | 0) >> 2] | 0 | 0) < ((HEAP32[($8_1 + 160 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
         break label$15
        }
        HEAP32[($8_1 + 140 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
        label$16 : {
         label$17 : while (1) {
          if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$16
          }
          HEAPF64[($8_1 + 72 | 0) >> 3] = +(0 | 0);
          HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 144 | 0) >> 2] | 0;
          label$18 : {
           label$19 : while (1) {
            if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$18
            }
            HEAP32[($8_1 + 128 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 136 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0);
            HEAPF64[($8_1 + 72 | 0) >> 3] = +HEAPF64[($8_1 + 72 | 0) >> 3] + +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
            HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
            continue label$19;
           };
          }
          HEAPF64[($8_1 + 56 | 0) >> 3] = +HEAPF64[($8_1 + 72 | 0) >> 3] / +HEAPF64[($8_1 + 48 | 0) >> 3];
          HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 144 | 0) >> 2] | 0;
          label$20 : {
           label$21 : while (1) {
            if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$20
            }
            HEAP32[($8_1 + 128 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 136 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0);
            $226_1 = (HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
            HEAPF64[$226_1 >> 3] = +HEAPF64[$226_1 >> 3] + +HEAPF64[($8_1 + 56 | 0) >> 3] * +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
            HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
            continue label$21;
           };
          }
          HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 1 | 0;
          continue label$17;
         };
        }
       }
       HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 144 | 0) >> 2] | 0;
       label$22 : {
        label$23 : while (1) {
         if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$22
         }
         HEAP32[($8_1 + 128 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 136 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0);
         $250_1 = (HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
         HEAPF64[$250_1 >> 3] = +HEAPF64[$250_1 >> 3] * +HEAPF64[($8_1 + 16 | 0) >> 3];
         HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
         continue label$23;
        };
       }
      }
     }
     HEAPF64[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($8_1 + 16 | 0) >> 3] * +HEAPF64[($8_1 + 88 | 0) >> 3];
     HEAPF64[($8_1 + 88 | 0) >> 3] = +(0 | 0);
     HEAPF64[($8_1 + 72 | 0) >> 3] = +(0 | 0);
     HEAPF64[($8_1 + 16 | 0) >> 3] = +(0 | 0);
     label$24 : {
      if (!((HEAP32[($8_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$24
      }
      if (!((HEAP32[($8_1 + 144 | 0) >> 2] | 0 | 0) != ((HEAP32[($8_1 + 160 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
       break label$24
      }
      HEAP32[($8_1 + 128 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 144 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0);
      HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
      label$25 : {
       label$26 : while (1) {
        if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$25
        }
        HEAPF64[($8_1 + 16 | 0) >> 3] = +HEAPF64[($8_1 + 16 | 0) >> 3] + Math_abs(+HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 136 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
        HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
        continue label$26;
       };
      }
      label$27 : {
       if (!(+HEAPF64[($8_1 + 16 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
        break label$27
       }
       HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
       label$28 : {
        label$29 : while (1) {
         if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$28
         }
         $317_1 = (HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 136 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
         HEAPF64[$317_1 >> 3] = +HEAPF64[$317_1 >> 3] / +HEAPF64[($8_1 + 16 | 0) >> 3];
         HEAPF64[($8_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 136 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[($8_1 + 72 | 0) >> 3] = +HEAPF64[($8_1 + 72 | 0) >> 3] + +HEAPF64[($8_1 + 64 | 0) >> 3] * +HEAPF64[($8_1 + 64 | 0) >> 3];
         HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
         continue label$29;
        };
       }
       HEAPF64[($8_1 + 56 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       label$30 : {
        label$31 : {
         if (!(+HEAPF64[($8_1 + 56 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
          break label$31
         }
         $1304 = Math_sqrt(+HEAPF64[($8_1 + 72 | 0) >> 3]);
         break label$30;
        }
        $1304 = -Math_sqrt(+HEAPF64[($8_1 + 72 | 0) >> 3]);
       }
       HEAPF64[($8_1 + 88 | 0) >> 3] = $1304;
       HEAPF64[($8_1 + 48 | 0) >> 3] = +HEAPF64[($8_1 + 56 | 0) >> 3] * +HEAPF64[($8_1 + 88 | 0) >> 3] - +HEAPF64[($8_1 + 72 | 0) >> 3];
       HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($8_1 + 56 | 0) >> 3] - +HEAPF64[($8_1 + 88 | 0) >> 3];
       HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
       label$32 : {
        label$33 : while (1) {
         if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$32
         }
         HEAPF64[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 136 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[($8_1 + 48 | 0) >> 3];
         HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
         continue label$33;
        };
       }
       HEAP32[($8_1 + 140 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
       label$34 : {
        label$35 : while (1) {
         if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$34
         }
         HEAPF64[($8_1 + 72 | 0) >> 3] = +(0 | 0);
         HEAP32[($8_1 + 124 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0);
         HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
         label$36 : {
          label$37 : while (1) {
           if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$36
           }
           HEAPF64[($8_1 + 72 | 0) >> 3] = +HEAPF64[($8_1 + 72 | 0) >> 3] + +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 124 | 0) >> 2] | 0) + (HEAP32[($8_1 + 136 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 136 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
           continue label$37;
          };
         }
         HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
         label$38 : {
          label$39 : while (1) {
           if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$38
           }
           $425_1 = (HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 124 | 0) >> 2] | 0) + (HEAP32[($8_1 + 136 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
           HEAPF64[$425_1 >> 3] = +HEAPF64[$425_1 >> 3] + +HEAPF64[($8_1 + 72 | 0) >> 3] * +HEAPF64[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
           continue label$39;
          };
         }
         HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         continue label$35;
        };
       }
       HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
       label$40 : {
        label$41 : while (1) {
         if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$40
         }
         $446_1 = (HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 136 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
         HEAPF64[$446_1 >> 3] = +HEAPF64[$446_1 >> 3] * +HEAPF64[($8_1 + 16 | 0) >> 3];
         HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
         continue label$41;
        };
       }
      }
     }
     HEAPF64[($8_1 + 64 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) + Math_abs(+HEAPF64[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
     label$42 : {
      if (!(+HEAPF64[($8_1 + 80 | 0) >> 3] < +HEAPF64[($8_1 + 64 | 0) >> 3] & 1 | 0)) {
       break label$42
      }
      HEAPF64[($8_1 + 80 | 0) >> 3] = +HEAPF64[($8_1 + 64 | 0) >> 3];
     }
     HEAP32[($8_1 + 144 | 0) >> 2] = (HEAP32[($8_1 + 144 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   HEAP32[($8_1 + 144 | 0) >> 2] = (HEAP32[($8_1 + 160 | 0) >> 2] | 0) - 1 | 0;
   label$43 : {
    label$44 : while (1) {
     if (!((HEAP32[($8_1 + 144 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
      break label$43
     }
     HEAP32[($8_1 + 128 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 144 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0);
     label$45 : {
      if (!((HEAP32[($8_1 + 144 | 0) >> 2] | 0 | 0) < ((HEAP32[($8_1 + 160 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
       break label$45
      }
      label$46 : {
       if (!(+HEAPF64[($8_1 + 88 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
        break label$46
       }
       HEAPF64[($8_1 + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + ((((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) + 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($8_1 + 88 | 0) >> 3];
       HEAP32[($8_1 + 140 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
       label$47 : {
        label$48 : while (1) {
         if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$47
         }
         HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[($8_1 + 48 | 0) >> 3];
         HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         continue label$48;
        };
       }
       HEAP32[($8_1 + 140 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
       label$49 : {
        label$50 : while (1) {
         if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$49
         }
         HEAPF64[($8_1 + 72 | 0) >> 3] = +(0 | 0);
         HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
         label$51 : {
          label$52 : while (1) {
           if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$51
           }
           HEAPF64[($8_1 + 72 | 0) >> 3] = +HEAPF64[($8_1 + 72 | 0) >> 3] + +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 136 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 136 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) + (HEAP32[($8_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
           continue label$52;
          };
         }
         HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
         label$53 : {
          label$54 : while (1) {
           if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$53
           }
           $589_1 = (HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 136 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) + (HEAP32[($8_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
           HEAPF64[$589_1 >> 3] = +HEAPF64[$589_1 >> 3] + +HEAPF64[($8_1 + 72 | 0) >> 3] * +HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 136 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
           continue label$54;
          };
         }
         HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         continue label$50;
        };
       }
      }
      HEAP32[($8_1 + 140 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
      label$55 : {
       label$56 : while (1) {
        if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$55
        }
        HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
        HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
        HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 1 | 0;
        continue label$56;
       };
      }
     }
     HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = 1.0;
     HEAPF64[($8_1 + 88 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($8_1 + 132 | 0) >> 2] = HEAP32[($8_1 + 144 | 0) >> 2] | 0;
     HEAP32[($8_1 + 144 | 0) >> 2] = (HEAP32[($8_1 + 144 | 0) >> 2] | 0) + -1 | 0;
     continue label$44;
    };
   }
   HEAP32[($8_1 + 144 | 0) >> 2] = (HEAP32[($8_1 + 160 | 0) >> 2] | 0) - 1 | 0;
   label$57 : {
    label$58 : while (1) {
     if (!((HEAP32[($8_1 + 144 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
      break label$57
     }
     HEAP32[($8_1 + 128 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 144 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0);
     HEAP32[($8_1 + 132 | 0) >> 2] = (HEAP32[($8_1 + 144 | 0) >> 2] | 0) + 1 | 0;
     HEAPF64[($8_1 + 88 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$59 : {
      if (!((HEAP32[($8_1 + 144 | 0) >> 2] | 0 | 0) < ((HEAP32[($8_1 + 160 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
       break label$59
      }
      HEAP32[($8_1 + 140 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
      label$60 : {
       label$61 : while (1) {
        if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$60
        }
        HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
        HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 1 | 0;
        continue label$61;
       };
      }
     }
     label$62 : {
      label$63 : {
       if (!(+HEAPF64[($8_1 + 88 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
        break label$63
       }
       label$64 : {
        if (!((HEAP32[($8_1 + 144 | 0) >> 2] | 0 | 0) != ((HEAP32[($8_1 + 160 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
         break label$64
        }
        HEAP32[($8_1 + 140 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
        label$65 : {
         label$66 : while (1) {
          if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$65
          }
          HEAPF64[($8_1 + 72 | 0) >> 3] = +(0 | 0);
          HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
          label$67 : {
           label$68 : while (1) {
            if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$67
            }
            HEAPF64[($8_1 + 72 | 0) >> 3] = +HEAPF64[($8_1 + 72 | 0) >> 3] + +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 136 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 136 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) + (HEAP32[($8_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
            HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
            continue label$68;
           };
          }
          HEAPF64[($8_1 + 56 | 0) >> 3] = +HEAPF64[($8_1 + 72 | 0) >> 3] / +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[($8_1 + 88 | 0) >> 3];
          HEAP32[($8_1 + 136 | 0) >> 2] = HEAP32[($8_1 + 144 | 0) >> 2] | 0;
          label$69 : {
           label$70 : while (1) {
            if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$69
            }
            $773_1 = (HEAP32[($8_1 + 156 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 136 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) + (HEAP32[($8_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
            HEAPF64[$773_1 >> 3] = +HEAPF64[$773_1 >> 3] + +HEAPF64[($8_1 + 56 | 0) >> 3] * +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 136 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
            HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + 1 | 0;
            continue label$70;
           };
          }
          HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 1 | 0;
          continue label$66;
         };
        }
       }
       HEAP32[($8_1 + 140 | 0) >> 2] = HEAP32[($8_1 + 144 | 0) >> 2] | 0;
       label$71 : {
        label$72 : while (1) {
         if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$71
         }
         HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[($8_1 + 88 | 0) >> 3];
         HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         continue label$72;
        };
       }
       break label$62;
      }
      HEAP32[($8_1 + 140 | 0) >> 2] = HEAP32[($8_1 + 144 | 0) >> 2] | 0;
      label$73 : {
       label$74 : while (1) {
        if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$73
        }
        HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
        HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 1 | 0;
        continue label$74;
       };
      }
     }
     $836_1 = (HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
     HEAPF64[$836_1 >> 3] = +HEAPF64[$836_1 >> 3] + 1.0;
     HEAP32[($8_1 + 144 | 0) >> 2] = (HEAP32[($8_1 + 144 | 0) >> 2] | 0) + -1 | 0;
     continue label$58;
    };
   }
   HEAPF64[($8_1 + 96 | 0) >> 3] = +HEAPF64[($8_1 + 96 | 0) >> 3] * +HEAPF64[($8_1 + 80 | 0) >> 3];
   HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 160 | 0) >> 2] | 0) - 1 | 0;
   label$75 : {
    label$76 : while (1) {
     if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
      break label$75
     }
     HEAP32[($8_1 + 112 | 0) >> 2] = 0;
     label$77 : while (1) {
      HEAP32[($8_1 + 112 | 0) >> 2] = (HEAP32[($8_1 + 112 | 0) >> 2] | 0) + 1 | 0;
      label$78 : {
       if (!((HEAP32[($8_1 + 112 | 0) >> 2] | 0 | 0) > (50 | 0) & 1 | 0)) {
        break label$78
       }
       $875(global$3 + 5383 | 0 | 0, 0 | 0) | 0;
       HEAP32[($8_1 + 172 | 0) >> 2] = 15;
       break label$1;
      }
      HEAP32[($8_1 + 116 | 0) >> 2] = 1;
      HEAP32[($8_1 + 132 | 0) >> 2] = HEAP32[($8_1 + 136 | 0) >> 2] | 0;
      label$79 : {
       label$80 : while (1) {
        if (!((HEAP32[($8_1 + 132 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
         break label$79
        }
        label$81 : {
         if (!(Math_abs(+HEAPF64[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) <= +HEAPF64[($8_1 + 96 | 0) >> 3] & 1 | 0)) {
          break label$81
         }
         HEAP32[($8_1 + 116 | 0) >> 2] = 0;
         break label$79;
        }
        label$82 : {
         if (!(Math_abs(+HEAPF64[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 132 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3]) <= +HEAPF64[($8_1 + 96 | 0) >> 3] & 1 | 0)) {
          break label$82
         }
         break label$79;
        }
        HEAP32[($8_1 + 132 | 0) >> 2] = (HEAP32[($8_1 + 132 | 0) >> 2] | 0) + -1 | 0;
        continue label$80;
       };
      }
      label$83 : {
       if (!(HEAP32[($8_1 + 116 | 0) >> 2] | 0)) {
        break label$83
       }
       HEAPF64[($8_1 + 40 | 0) >> 3] = +(0 | 0);
       HEAPF64[($8_1 + 72 | 0) >> 3] = 1.0;
       HEAP32[($8_1 + 108 | 0) >> 2] = (HEAP32[($8_1 + 132 | 0) >> 2] | 0) - 1 | 0;
       HEAP32[($8_1 + 144 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
       label$84 : {
        label$85 : while (1) {
         if (!((HEAP32[($8_1 + 144 | 0) >> 2] | 0 | 0) <= (HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$84
         }
         HEAPF64[($8_1 + 56 | 0) >> 3] = +HEAPF64[($8_1 + 72 | 0) >> 3] * +HEAPF64[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         $919 = (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0;
         HEAPF64[$919 >> 3] = +HEAPF64[$919 >> 3] * +HEAPF64[($8_1 + 40 | 0) >> 3];
         label$86 : {
          if (!(Math_abs(+HEAPF64[($8_1 + 56 | 0) >> 3]) <= +HEAPF64[($8_1 + 96 | 0) >> 3] & 1 | 0)) {
           break label$86
          }
          break label$84;
         }
         HEAPF64[($8_1 + 88 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         $1415 = +$735(+(+HEAPF64[($8_1 + 56 | 0) >> 3]), +(+HEAPF64[($8_1 + 88 | 0) >> 3]));
         HEAPF64[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $1415;
         HEAPF64[($8_1 + 48 | 0) >> 3] = $1415;
         HEAPF64[($8_1 + 40 | 0) >> 3] = +HEAPF64[($8_1 + 88 | 0) >> 3] / +HEAPF64[($8_1 + 48 | 0) >> 3];
         HEAPF64[($8_1 + 72 | 0) >> 3] = -+HEAPF64[($8_1 + 56 | 0) >> 3] / +HEAPF64[($8_1 + 48 | 0) >> 3];
         HEAP32[($8_1 + 140 | 0) >> 2] = 0;
         label$87 : {
          label$88 : while (1) {
           if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$87
           }
           HEAP32[($8_1 + 128 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0);
           HEAPF64[($8_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 108 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
           HEAPF64[($8_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
           HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 108 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($8_1 + 32 | 0) >> 3] * +HEAPF64[($8_1 + 40 | 0) >> 3] + +HEAPF64[($8_1 + 24 | 0) >> 3] * +HEAPF64[($8_1 + 72 | 0) >> 3];
           HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($8_1 + 24 | 0) >> 3] * +HEAPF64[($8_1 + 40 | 0) >> 3] - +HEAPF64[($8_1 + 32 | 0) >> 3] * +HEAPF64[($8_1 + 72 | 0) >> 3];
           HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 1 | 0;
           continue label$88;
          };
         }
         HEAP32[($8_1 + 144 | 0) >> 2] = (HEAP32[($8_1 + 144 | 0) >> 2] | 0) + 1 | 0;
         continue label$85;
        };
       }
      }
      HEAPF64[($8_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$89 : {
       label$90 : {
        label$91 : {
         if (!((HEAP32[($8_1 + 132 | 0) >> 2] | 0 | 0) != (HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$91
         }
         HEAPF64[($8_1 + 80 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[($8_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 136 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[($8_1 + 88 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 136 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[($8_1 + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[($8_1 + 56 | 0) >> 3] = .5 * ((+HEAPF64[($8_1 + 88 | 0) >> 3] + +HEAPF64[($8_1 + 24 | 0) >> 3]) / +HEAPF64[($8_1 + 48 | 0) >> 3] * ((+HEAPF64[($8_1 + 88 | 0) >> 3] - +HEAPF64[($8_1 + 24 | 0) >> 3]) / +HEAPF64[($8_1 + 32 | 0) >> 3]) + +HEAPF64[($8_1 + 32 | 0) >> 3] / +HEAPF64[($8_1 + 48 | 0) >> 3] - +HEAPF64[($8_1 + 48 | 0) >> 3] / +HEAPF64[($8_1 + 32 | 0) >> 3]);
         (wasm2js_i32$0 = $8_1, wasm2js_f64$0 = +$735(+(+HEAPF64[($8_1 + 56 | 0) >> 3]), +(1.0))), HEAPF64[(wasm2js_i32$0 + 88 | 0) >> 3] = wasm2js_f64$0;
         label$92 : {
          label$93 : {
           if (!(+HEAPF64[($8_1 + 56 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
            break label$93
           }
           HEAPF64[($8_1 + 64 | 0) >> 3] = +HEAPF64[($8_1 + 56 | 0) >> 3] - +HEAPF64[($8_1 + 88 | 0) >> 3];
           break label$92;
          }
          HEAPF64[($8_1 + 64 | 0) >> 3] = +HEAPF64[($8_1 + 56 | 0) >> 3] + +HEAPF64[($8_1 + 88 | 0) >> 3];
         }
         HEAPF64[($8_1 + 56 | 0) >> 3] = +HEAPF64[($8_1 + 80 | 0) >> 3] - +HEAPF64[($8_1 + 24 | 0) >> 3] / +HEAPF64[($8_1 + 80 | 0) >> 3] * +HEAPF64[($8_1 + 24 | 0) >> 3] + +HEAPF64[($8_1 + 48 | 0) >> 3] / +HEAPF64[($8_1 + 80 | 0) >> 3] * (+HEAPF64[($8_1 + 32 | 0) >> 3] / +HEAPF64[($8_1 + 64 | 0) >> 3] - +HEAPF64[($8_1 + 48 | 0) >> 3]);
         HEAPF64[($8_1 + 72 | 0) >> 3] = 1.0;
         HEAPF64[($8_1 + 40 | 0) >> 3] = 1.0;
         HEAP32[($8_1 + 144 | 0) >> 2] = (HEAP32[($8_1 + 132 | 0) >> 2] | 0) + 1 | 0;
         label$94 : {
          label$95 : while (1) {
           if (!((HEAP32[($8_1 + 144 | 0) >> 2] | 0 | 0) <= (HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$94
           }
           HEAPF64[($8_1 + 88 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAPF64[($8_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAPF64[($8_1 + 48 | 0) >> 3] = +HEAPF64[($8_1 + 72 | 0) >> 3] * +HEAPF64[($8_1 + 88 | 0) >> 3];
           HEAPF64[($8_1 + 88 | 0) >> 3] = +HEAPF64[($8_1 + 40 | 0) >> 3] * +HEAPF64[($8_1 + 88 | 0) >> 3];
           $1505 = +$735(+(+HEAPF64[($8_1 + 56 | 0) >> 3]), +(+HEAPF64[($8_1 + 48 | 0) >> 3]));
           HEAPF64[($8_1 + 24 | 0) >> 3] = $1505;
           HEAPF64[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 144 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = $1505;
           HEAPF64[($8_1 + 40 | 0) >> 3] = +HEAPF64[($8_1 + 56 | 0) >> 3] / +HEAPF64[($8_1 + 24 | 0) >> 3];
           HEAPF64[($8_1 + 72 | 0) >> 3] = +HEAPF64[($8_1 + 48 | 0) >> 3] / +HEAPF64[($8_1 + 24 | 0) >> 3];
           HEAPF64[($8_1 + 56 | 0) >> 3] = +HEAPF64[($8_1 + 80 | 0) >> 3] * +HEAPF64[($8_1 + 40 | 0) >> 3] + +HEAPF64[($8_1 + 88 | 0) >> 3] * +HEAPF64[($8_1 + 72 | 0) >> 3];
           HEAPF64[($8_1 + 88 | 0) >> 3] = +HEAPF64[($8_1 + 88 | 0) >> 3] * +HEAPF64[($8_1 + 40 | 0) >> 3] - +HEAPF64[($8_1 + 80 | 0) >> 3] * +HEAPF64[($8_1 + 72 | 0) >> 3];
           HEAPF64[($8_1 + 48 | 0) >> 3] = +HEAPF64[($8_1 + 32 | 0) >> 3] * +HEAPF64[($8_1 + 72 | 0) >> 3];
           HEAPF64[($8_1 + 32 | 0) >> 3] = +HEAPF64[($8_1 + 32 | 0) >> 3] * +HEAPF64[($8_1 + 40 | 0) >> 3];
           HEAP32[($8_1 + 140 | 0) >> 2] = 0;
           label$96 : {
            label$97 : while (1) {
             if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$96
             }
             HEAP32[($8_1 + 128 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0);
             HEAPF64[($8_1 + 80 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
             HEAPF64[($8_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
             HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($8_1 + 80 | 0) >> 3] * +HEAPF64[($8_1 + 40 | 0) >> 3] + +HEAPF64[($8_1 + 24 | 0) >> 3] * +HEAPF64[($8_1 + 72 | 0) >> 3];
             HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($8_1 + 24 | 0) >> 3] * +HEAPF64[($8_1 + 40 | 0) >> 3] - +HEAPF64[($8_1 + 80 | 0) >> 3] * +HEAPF64[($8_1 + 72 | 0) >> 3];
             HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 1 | 0;
             continue label$97;
            };
           }
           $1550 = +$735(+(+HEAPF64[($8_1 + 56 | 0) >> 3]), +(+HEAPF64[($8_1 + 48 | 0) >> 3]));
           HEAPF64[($8_1 + 24 | 0) >> 3] = $1550;
           HEAPF64[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 144 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = $1550;
           label$98 : {
            if (!(+HEAPF64[($8_1 + 24 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
             break label$98
            }
            HEAPF64[($8_1 + 40 | 0) >> 3] = +HEAPF64[($8_1 + 56 | 0) >> 3] / +HEAPF64[($8_1 + 24 | 0) >> 3];
            HEAPF64[($8_1 + 72 | 0) >> 3] = +HEAPF64[($8_1 + 48 | 0) >> 3] / +HEAPF64[($8_1 + 24 | 0) >> 3];
           }
           HEAPF64[($8_1 + 56 | 0) >> 3] = +HEAPF64[($8_1 + 40 | 0) >> 3] * +HEAPF64[($8_1 + 88 | 0) >> 3] + +HEAPF64[($8_1 + 72 | 0) >> 3] * +HEAPF64[($8_1 + 32 | 0) >> 3];
           HEAPF64[($8_1 + 80 | 0) >> 3] = +HEAPF64[($8_1 + 40 | 0) >> 3] * +HEAPF64[($8_1 + 32 | 0) >> 3] - +HEAPF64[($8_1 + 72 | 0) >> 3] * +HEAPF64[($8_1 + 88 | 0) >> 3];
           HEAP32[($8_1 + 140 | 0) >> 2] = 0;
           label$99 : {
            label$100 : while (1) {
             if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$99
             }
             HEAP32[($8_1 + 128 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0);
             HEAPF64[($8_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + ((((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
             HEAPF64[($8_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
             HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + ((((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($8_1 + 32 | 0) >> 3] * +HEAPF64[($8_1 + 40 | 0) >> 3] + +HEAPF64[($8_1 + 24 | 0) >> 3] * +HEAPF64[($8_1 + 72 | 0) >> 3];
             HEAPF64[((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($8_1 + 24 | 0) >> 3] * +HEAPF64[($8_1 + 40 | 0) >> 3] - +HEAPF64[($8_1 + 32 | 0) >> 3] * +HEAPF64[($8_1 + 72 | 0) >> 3];
             HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 1 | 0;
             continue label$100;
            };
           }
           HEAP32[($8_1 + 144 | 0) >> 2] = (HEAP32[($8_1 + 144 | 0) >> 2] | 0) + 1 | 0;
           continue label$95;
          };
         }
         HEAPF64[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
         HEAPF64[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($8_1 + 56 | 0) >> 3];
         HEAPF64[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($8_1 + 80 | 0) >> 3];
         break label$90;
        }
        label$101 : {
         if (!(+HEAPF64[($8_1 + 24 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
          break label$101
         }
         HEAPF64[((HEAP32[($8_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[($8_1 + 24 | 0) >> 3];
         HEAP32[($8_1 + 140 | 0) >> 2] = 0;
         label$102 : {
          label$103 : while (1) {
           if (!((HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$102
           }
           HEAP32[($8_1 + 128 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 140 | 0) >> 2] | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0);
           HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 136 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 128 | 0) >> 2] | 0) + (HEAP32[($8_1 + 136 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($8_1 + 140 | 0) >> 2] = (HEAP32[($8_1 + 140 | 0) >> 2] | 0) + 1 | 0;
           continue label$103;
          };
         }
        }
        break label$89;
       }
       continue label$77;
      }
      break label$77;
     };
     HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + -1 | 0;
     continue label$76;
    };
   }
   $133(HEAP32[($8_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 148 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0);
   HEAP32[($8_1 + 172 | 0) >> 2] = HEAP32[($8_1 + 120 | 0) >> 2] | 0;
  }
  $1214 = HEAP32[($8_1 + 172 | 0) >> 2] | 0;
  global$0 = $8_1 + 176 | 0;
  return $1214 | 0;
 }
 
 function $135($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $32_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 3 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $106(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $136(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
    break label$1;
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $136(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  }
  $863(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  $32_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $32_1 | 0;
 }
 
 function $136($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $72_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 68 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 64 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($5_1 + 68 | 0) >> 2] | 0) << 3 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$88()), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
  HEAP32[($5_1 + 56 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[($5_1 + 24 | 0) >> 3] = +(HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   HEAPF64[($5_1 + 24 | 0) >> 3] = +(HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0);
  }
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $134(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 52 | 0) >> 2] = wasm2js_i32$1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3];
  label$3 : {
   label$4 : {
    if (!(HEAP32[($5_1 + 52 | 0) >> 2] | 0)) {
     break label$4
    }
    $875(global$3 + 2971 | 0 | 0, 0 | 0) | 0;
    HEAP32[($5_1 + 76 | 0) >> 2] = -1;
    break label$3;
   }
   HEAPF64[($5_1 + 32 | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 24 | 0) >> 3] * +HEAPF64[($5_1 + 40 | 0) >> 3];
   HEAP32[($5_1 + 60 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     label$7 : {
      if (!(+HEAPF64[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[($5_1 + 32 | 0) >> 3] & 1 | 0)) {
       break label$7
      }
      HEAP32[($5_1 + 56 | 0) >> 2] = (HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 1 | 0;
     }
     HEAP32[($5_1 + 60 | 0) >> 2] = (HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   $863(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
   HEAP32[($5_1 + 76 | 0) >> 2] = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
  }
  $72_1 = HEAP32[($5_1 + 76 | 0) >> 2] | 0;
  global$0 = $5_1 + 80 | 0;
  return $72_1 | 0;
 }
 
 function $137($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = +$7_1;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, $84_1 = 0, $145_1 = 0, $192_1 = 0, $253_1 = 0, $935 = 0, $1150 = 0.0, $1189 = 0.0, $1051 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $11_1 = global$0 - 256 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 252 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 248 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 244 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 240 | 0) >> 2] = $3_1;
  HEAPF64[($11_1 + 232 | 0) >> 3] = $4_1;
  HEAP32[($11_1 + 228 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 224 | 0) >> 2] = $6_1;
  HEAPF64[($11_1 + 216 | 0) >> 3] = $7_1;
  HEAP32[($11_1 + 212 | 0) >> 2] = $8_1;
  HEAP32[($11_1 + 208 | 0) >> 2] = 0;
  HEAPF64[($11_1 + 160 | 0) >> 3] = +HEAPF64[($11_1 + 216 | 0) >> 3];
  HEAPF64[($11_1 + 152 | 0) >> 3] = 1.0;
  HEAPF64[($11_1 + 144 | 0) >> 3] = 2.0;
  HEAPF64[($11_1 + 136 | 0) >> 3] = .5;
  HEAPF64[($11_1 + 120 | 0) >> 3] = 1.0;
  HEAP32[($11_1 + 204 | 0) >> 2] = (HEAP32[($11_1 + 244 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($11_1 + 192 | 0) >> 2] = Math_imul(HEAP32[($11_1 + 244 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0);
  HEAP32[(HEAP32[($11_1 + 224 | 0) >> 2] | 0) >> 2] = 0;
  HEAP32[($11_1 + 172 | 0) >> 2] = HEAP32[($11_1 + 228 | 0) >> 2] | 0;
  HEAPF64[($11_1 + 16 | 0) >> 3] = 1.0;
  HEAP32[($11_1 + 188 | 0) >> 2] = 0;
  HEAPF64[($11_1 + 8 | 0) >> 3] = .001;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($11_1 + 244 | 0) >> 2] | 0) << 3 | 0, HEAP32[($11_1 + 204 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 76 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862((HEAP32[($11_1 + 204 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862((HEAP32[($11_1 + 244 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862((HEAP32[($11_1 + 244 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862((HEAP32[($11_1 + 244 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862((HEAP32[($11_1 + 244 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862((HEAP32[($11_1 + 244 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 52 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862((HEAP32[($11_1 + 244 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862((HEAP32[($11_1 + 244 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($11_1 + 200 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($11_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 248 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$3 : while (1) {
   $84_1 = 0;
   label$4 : {
    if (HEAP32[($11_1 + 188 | 0) >> 2] | 0) {
     break label$4
    }
    $84_1 = (HEAP32[(HEAP32[($11_1 + 224 | 0) >> 2] | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0);
   }
   label$5 : {
    if (!($84_1 & 1 | 0)) {
     break label$5
    }
    HEAP32[($11_1 + 200 | 0) >> 2] = 0;
    label$6 : {
     label$7 : while (1) {
      if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
      continue label$7;
     };
    }
    (wasm2js_i32$0 = $11_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($11_1 + 252 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 48 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0, HEAP32[((HEAP32[($11_1 + 252 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 128 | 0) >> 3] = wasm2js_f64$0;
    HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 244 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 128 | 0) >> 3];
    HEAP32[($11_1 + 200 | 0) >> 2] = 0;
    label$8 : {
     label$9 : while (1) {
      if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$8
      }
      $145_1 = (HEAP32[($11_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAPF64[$145_1 >> 3] = +HEAPF64[$145_1 >> 3] + +HEAPF64[((HEAP32[($11_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($11_1 + 120 | 0) >> 3];
      HEAP32[($11_1 + 192 | 0) >> 2] = Math_imul(HEAP32[($11_1 + 200 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0);
      HEAP32[($11_1 + 196 | 0) >> 2] = 0;
      label$10 : {
       label$11 : while (1) {
        if (!((HEAP32[($11_1 + 196 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$10
        }
        HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 196 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 196 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($11_1 + 196 | 0) >> 2] = (HEAP32[($11_1 + 196 | 0) >> 2] | 0) + 1 | 0;
        continue label$11;
       };
      }
      (wasm2js_i32$0 = $11_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($11_1 + 252 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 48 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0, HEAP32[((HEAP32[($11_1 + 252 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 128 | 0) >> 3] = wasm2js_f64$0;
      HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 128 | 0) >> 3];
      $192_1 = (HEAP32[($11_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAPF64[$192_1 >> 3] = +HEAPF64[$192_1 >> 3] - +HEAPF64[((HEAP32[($11_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($11_1 + 120 | 0) >> 3];
      HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
      continue label$9;
     };
    }
    HEAPF64[($11_1 + 112 | 0) >> 3] = +HEAPF64[(HEAP32[($11_1 + 72 | 0) >> 2] | 0) >> 3];
    HEAP32[($11_1 + 180 | 0) >> 2] = 0;
    HEAP32[($11_1 + 200 | 0) >> 2] = 1;
    label$12 : {
     label$13 : while (1) {
      if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$12
      }
      label$14 : {
       if (!(+HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +HEAPF64[($11_1 + 112 | 0) >> 3] & 1 | 0)) {
        break label$14
       }
       HEAPF64[($11_1 + 112 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($11_1 + 180 | 0) >> 2] = HEAP32[($11_1 + 200 | 0) >> 2] | 0;
      }
      HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
      continue label$13;
     };
    }
    HEAP32[($11_1 + 192 | 0) >> 2] = Math_imul(HEAP32[($11_1 + 180 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0);
    HEAP32[($11_1 + 200 | 0) >> 2] = 0;
    label$15 : {
     label$16 : while (1) {
      if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$15
      }
      HEAPF64[((HEAP32[($11_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
      continue label$16;
     };
    }
    label$17 : while (1) {
     $253_1 = 0;
     label$18 : {
      if (!(Math_abs(+HEAPF64[($11_1 + 16 | 0) >> 3]) > +HEAPF64[($11_1 + 160 | 0) >> 3] & 1 | 0)) {
       break label$18
      }
      $253_1 = (HEAP32[(HEAP32[($11_1 + 224 | 0) >> 2] | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0);
     }
     label$19 : {
      if (!($253_1 & 1 | 0)) {
       break label$19
      }
      HEAP32[(HEAP32[($11_1 + 224 | 0) >> 2] | 0) >> 2] = (HEAP32[(HEAP32[($11_1 + 224 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[($11_1 + 104 | 0) >> 3] = +HEAPF64[(HEAP32[($11_1 + 72 | 0) >> 2] | 0) >> 3];
      HEAP32[($11_1 + 184 | 0) >> 2] = 0;
      HEAP32[($11_1 + 200 | 0) >> 2] = 1;
      label$20 : {
       label$21 : while (1) {
        if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$20
        }
        label$22 : {
         if (!(+HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[($11_1 + 104 | 0) >> 3] & 1 | 0)) {
          break label$22
         }
         HEAPF64[($11_1 + 104 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($11_1 + 184 | 0) >> 2] = HEAP32[($11_1 + 200 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
        continue label$21;
       };
      }
      HEAP32[($11_1 + 192 | 0) >> 2] = HEAP32[($11_1 + 244 | 0) >> 2] | 0;
      HEAP32[($11_1 + 200 | 0) >> 2] = 0;
      label$23 : {
       label$24 : while (1) {
        if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$23
        }
        HEAPF64[($11_1 + 96 | 0) >> 3] = +(0 | 0);
        HEAP32[($11_1 + 196 | 0) >> 2] = 0;
        label$25 : {
         label$26 : while (1) {
          if (!((HEAP32[($11_1 + 196 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$25
          }
          HEAPF64[($11_1 + 96 | 0) >> 3] = +HEAPF64[($11_1 + 96 | 0) >> 3] + +HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($11_1 + 196 | 0) >> 2] | 0, HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
          HEAP32[($11_1 + 196 | 0) >> 2] = (HEAP32[($11_1 + 196 | 0) >> 2] | 0) + 1 | 0;
          continue label$26;
         };
        }
        HEAPF64[($11_1 + 96 | 0) >> 3] = +HEAPF64[($11_1 + 96 | 0) >> 3] - +HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($11_1 + 184 | 0) >> 2] | 0, HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAPF64[((HEAP32[($11_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 96 | 0) >> 3] / +(HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0);
        HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
        continue label$24;
       };
      }
      HEAP32[($11_1 + 192 | 0) >> 2] = Math_imul(HEAP32[($11_1 + 184 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0);
      HEAP32[($11_1 + 200 | 0) >> 2] = 0;
      label$27 : {
       label$28 : while (1) {
        if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$27
        }
        HEAPF64[((HEAP32[($11_1 + 64 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = (1.0 + +HEAPF64[($11_1 + 152 | 0) >> 3]) * +HEAPF64[((HEAP32[($11_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($11_1 + 152 | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
        continue label$28;
       };
      }
      (wasm2js_i32$0 = $11_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($11_1 + 252 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 64 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0, HEAP32[((HEAP32[($11_1 + 252 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 88 | 0) >> 3] = wasm2js_f64$0;
      label$29 : {
       label$30 : {
        if (!(+HEAPF64[($11_1 + 88 | 0) >> 3] < +HEAPF64[($11_1 + 112 | 0) >> 3] & 1 | 0)) {
         break label$30
        }
        HEAP32[($11_1 + 200 | 0) >> 2] = 0;
        label$31 : {
         label$32 : while (1) {
          if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$31
          }
          HEAPF64[((HEAP32[($11_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 144 | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 64 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + (1.0 - +HEAPF64[($11_1 + 144 | 0) >> 3]) * +HEAPF64[((HEAP32[($11_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
          continue label$32;
         };
        }
        (wasm2js_i32$0 = $11_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($11_1 + 252 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 60 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0, HEAP32[((HEAP32[($11_1 + 252 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 80 | 0) >> 3] = wasm2js_f64$0;
        label$33 : {
         label$34 : {
          if (!(+HEAPF64[($11_1 + 80 | 0) >> 3] < +HEAPF64[($11_1 + 88 | 0) >> 3] & 1 | 0)) {
           break label$34
          }
          HEAP32[($11_1 + 200 | 0) >> 2] = 0;
          label$35 : {
           label$36 : while (1) {
            if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$35
            }
            HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
            continue label$36;
           };
          }
          HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 80 | 0) >> 3];
          break label$33;
         }
         HEAP32[($11_1 + 200 | 0) >> 2] = 0;
         label$37 : {
          label$38 : while (1) {
           if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$37
           }
           HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 64 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
           continue label$38;
          };
         }
         HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 88 | 0) >> 3];
        }
        break label$29;
       }
       HEAP32[($11_1 + 176 | 0) >> 2] = 0;
       HEAP32[($11_1 + 200 | 0) >> 2] = 0;
       label$39 : {
        label$40 : while (1) {
         if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$39
         }
         label$41 : {
          if (!(+HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[($11_1 + 88 | 0) >> 3] & 1 | 0)) {
           break label$41
          }
          HEAP32[($11_1 + 176 | 0) >> 2] = (HEAP32[($11_1 + 176 | 0) >> 2] | 0) + 1 | 0;
         }
         HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
         continue label$40;
        };
       }
       label$42 : {
        if (HEAP32[($11_1 + 176 | 0) >> 2] | 0) {
         break label$42
        }
        HEAP32[($11_1 + 200 | 0) >> 2] = 0;
        label$43 : {
         label$44 : while (1) {
          if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$43
          }
          HEAPF64[((HEAP32[($11_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 136 | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] + (1.0 - +HEAPF64[($11_1 + 136 | 0) >> 3]) * +HEAPF64[((HEAP32[($11_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
          continue label$44;
         };
        }
        (wasm2js_i32$0 = $11_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($11_1 + 252 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 60 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0, HEAP32[((HEAP32[($11_1 + 252 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 80 | 0) >> 3] = wasm2js_f64$0;
        label$45 : {
         label$46 : {
          if (!(+HEAPF64[($11_1 + 80 | 0) >> 3] <= +HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
           break label$46
          }
          HEAP32[($11_1 + 200 | 0) >> 2] = 0;
          label$47 : {
           label$48 : while (1) {
            if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$47
            }
            HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
            continue label$48;
           };
          }
          HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 80 | 0) >> 3];
          break label$45;
         }
         HEAP32[($11_1 + 200 | 0) >> 2] = 0;
         label$49 : {
          label$50 : while (1) {
           if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$49
           }
           HEAP32[($11_1 + 192 | 0) >> 2] = Math_imul(HEAP32[($11_1 + 200 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0);
           HEAP32[($11_1 + 196 | 0) >> 2] = 0;
           label$51 : {
            label$52 : while (1) {
             if (!((HEAP32[($11_1 + 196 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$51
             }
             HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 196 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = .5 * (+HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 196 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($11_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 196 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
             HEAPF64[((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 196 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 196 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
             HEAP32[($11_1 + 196 | 0) >> 2] = (HEAP32[($11_1 + 196 | 0) >> 2] | 0) + 1 | 0;
             continue label$52;
            };
           }
           $1150 = +FUNCTION_TABLE[HEAP32[(HEAP32[($11_1 + 252 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 56 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0, HEAP32[((HEAP32[($11_1 + 252 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0);
           HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $1150;
           HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
           continue label$50;
          };
         }
         HEAPF64[($11_1 + 112 | 0) >> 3] = +HEAPF64[(HEAP32[($11_1 + 72 | 0) >> 2] | 0) >> 3];
         HEAP32[($11_1 + 180 | 0) >> 2] = 0;
         HEAP32[($11_1 + 200 | 0) >> 2] = 1;
         label$53 : {
          label$54 : while (1) {
           if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$53
           }
           label$55 : {
            if (!(+HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +HEAPF64[($11_1 + 112 | 0) >> 3] & 1 | 0)) {
             break label$55
            }
            HEAPF64[($11_1 + 112 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            HEAP32[($11_1 + 180 | 0) >> 2] = HEAP32[($11_1 + 200 | 0) >> 2] | 0;
           }
           HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
           continue label$54;
          };
         }
         HEAP32[($11_1 + 192 | 0) >> 2] = Math_imul(HEAP32[($11_1 + 180 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0);
         HEAP32[($11_1 + 200 | 0) >> 2] = 0;
         label$56 : {
          label$57 : while (1) {
           if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$56
           }
           HEAPF64[((HEAP32[($11_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
           continue label$57;
          };
         }
        }
       }
       label$58 : {
        if (!((HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$58
        }
        HEAP32[($11_1 + 200 | 0) >> 2] = 0;
        label$59 : {
         label$60 : while (1) {
          if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$59
          }
          HEAPF64[((HEAP32[($11_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 136 | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] + (1.0 - +HEAPF64[($11_1 + 136 | 0) >> 3]) * +HEAPF64[((HEAP32[($11_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
          continue label$60;
         };
        }
        (wasm2js_i32$0 = $11_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($11_1 + 252 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 60 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0, HEAP32[((HEAP32[($11_1 + 252 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 80 | 0) >> 3] = wasm2js_f64$0;
        label$61 : {
         label$62 : {
          if (!(+HEAPF64[($11_1 + 80 | 0) >> 3] <= +HEAPF64[($11_1 + 88 | 0) >> 3] & 1 | 0)) {
           break label$62
          }
          HEAP32[($11_1 + 192 | 0) >> 2] = Math_imul(HEAP32[($11_1 + 184 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0);
          HEAP32[($11_1 + 200 | 0) >> 2] = 0;
          label$63 : {
           label$64 : while (1) {
            if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$63
            }
            HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
            continue label$64;
           };
          }
          HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 80 | 0) >> 3];
          break label$61;
         }
         HEAP32[($11_1 + 192 | 0) >> 2] = Math_imul(HEAP32[($11_1 + 184 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0);
         HEAP32[($11_1 + 200 | 0) >> 2] = 0;
         label$65 : {
          label$66 : while (1) {
           if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$65
           }
           HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 64 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
           continue label$66;
          };
         }
         HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 88 | 0) >> 3];
        }
       }
       label$67 : {
        if (!((HEAP32[($11_1 + 176 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
         break label$67
        }
        HEAP32[($11_1 + 192 | 0) >> 2] = Math_imul(HEAP32[($11_1 + 184 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0);
        HEAP32[($11_1 + 200 | 0) >> 2] = 0;
        label$68 : {
         label$69 : while (1) {
          if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$68
          }
          HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 64 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
          continue label$69;
         };
        }
        HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 88 | 0) >> 3];
       }
      }
      label$70 : {
       if (!(+HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +HEAPF64[($11_1 + 112 | 0) >> 3] & 1 | 0)) {
        break label$70
       }
       HEAPF64[($11_1 + 112 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 184 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($11_1 + 180 | 0) >> 2] = HEAP32[($11_1 + 184 | 0) >> 2] | 0;
      }
      HEAPF64[($11_1 + 32 | 0) >> 3] = +(0 | 0);
      HEAP32[($11_1 + 196 | 0) >> 2] = 0;
      label$71 : {
       label$72 : while (1) {
        if (!((HEAP32[($11_1 + 196 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$71
        }
        HEAPF64[($11_1 + 32 | 0) >> 3] = +HEAPF64[($11_1 + 32 | 0) >> 3] + +HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 196 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($11_1 + 196 | 0) >> 2] = (HEAP32[($11_1 + 196 | 0) >> 2] | 0) + 1 | 0;
        continue label$72;
       };
      }
      HEAPF64[($11_1 + 24 | 0) >> 3] = +HEAPF64[($11_1 + 32 | 0) >> 3] / +((HEAP32[($11_1 + 244 | 0) >> 2] | 0) + 1 | 0 | 0);
      HEAPF64[($11_1 + 16 | 0) >> 3] = +(0 | 0);
      HEAP32[($11_1 + 196 | 0) >> 2] = 0;
      label$73 : {
       label$74 : while (1) {
        if (!((HEAP32[($11_1 + 196 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$73
        }
        $1189 = +$734(+(+HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 196 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($11_1 + 24 | 0) >> 3]), +(2.0));
        HEAPF64[($11_1 + 16 | 0) >> 3] = +HEAPF64[($11_1 + 16 | 0) >> 3] + $1189;
        HEAP32[($11_1 + 196 | 0) >> 2] = (HEAP32[($11_1 + 196 | 0) >> 2] | 0) + 1 | 0;
        continue label$74;
       };
      }
      HEAPF64[($11_1 + 16 | 0) >> 3] = Math_sqrt(+HEAPF64[($11_1 + 16 | 0) >> 3]);
      label$75 : {
       if (!(Math_abs(+HEAPF64[($11_1 + 16 | 0) >> 3]) < +HEAPF64[($11_1 + 160 | 0) >> 3] & 1 | 0)) {
        break label$75
       }
       HEAP32[($11_1 + 188 | 0) >> 2] = 1;
      }
      continue label$17;
     }
     break label$17;
    };
    HEAP32[($11_1 + 192 | 0) >> 2] = Math_imul(HEAP32[($11_1 + 180 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0);
    HEAP32[($11_1 + 200 | 0) >> 2] = 0;
    label$76 : {
     label$77 : while (1) {
      if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$76
      }
      HEAPF64[((HEAP32[($11_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
      continue label$77;
     };
    }
    HEAPF64[($11_1 + 104 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 180 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($11_1 + 200 | 0) >> 2] = 0;
    label$78 : {
     label$79 : while (1) {
      if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$78
      }
      HEAPF64[($11_1 + 120 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($11_1 + 8 | 0) >> 3];
      $935 = (HEAP32[($11_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAPF64[$935 >> 3] = +HEAPF64[$935 >> 3] + +HEAPF64[($11_1 + 120 | 0) >> 3];
      (wasm2js_i32$0 = $11_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($11_1 + 252 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 44 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0, HEAP32[((HEAP32[($11_1 + 252 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 128 | 0) >> 3] = wasm2js_f64$0;
      label$80 : {
       if (!(+HEAPF64[($11_1 + 128 | 0) >> 3] < +HEAPF64[($11_1 + 104 | 0) >> 3] & 1 | 0)) {
        break label$80
       }
       HEAP32[($11_1 + 188 | 0) >> 2] = 0;
       break label$78;
      }
      HEAP32[($11_1 + 188 | 0) >> 2] = (HEAP32[($11_1 + 188 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[((HEAP32[($11_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - 2.0 * +HEAPF64[($11_1 + 120 | 0) >> 3];
      (wasm2js_i32$0 = $11_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($11_1 + 252 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 44 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0, HEAP32[((HEAP32[($11_1 + 252 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 128 | 0) >> 3] = wasm2js_f64$0;
      label$81 : {
       if (!(+HEAPF64[($11_1 + 128 | 0) >> 3] < +HEAPF64[($11_1 + 104 | 0) >> 3] & 1 | 0)) {
        break label$81
       }
       HEAP32[($11_1 + 188 | 0) >> 2] = 0;
       break label$78;
      }
      HEAP32[($11_1 + 188 | 0) >> 2] = (HEAP32[($11_1 + 188 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
      continue label$79;
     };
    }
    label$82 : {
     if (HEAP32[($11_1 + 188 | 0) >> 2] | 0) {
      break label$82
     }
     HEAP32[($11_1 + 200 | 0) >> 2] = 0;
     label$83 : {
      label$84 : while (1) {
       if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$83
       }
       HEAPF64[((HEAP32[($11_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
       continue label$84;
      };
     }
     HEAPF64[($11_1 + 120 | 0) >> 3] = +HEAPF64[($11_1 + 8 | 0) >> 3];
     HEAPF64[($11_1 + 16 | 0) >> 3] = 1.0;
    }
    continue label$3;
   }
   break label$3;
  };
  HEAP32[($11_1 + 192 | 0) >> 2] = Math_imul(HEAP32[($11_1 + 244 | 0) >> 2] | 0, HEAP32[($11_1 + 244 | 0) >> 2] | 0);
  HEAP32[($11_1 + 200 | 0) >> 2] = 0;
  label$85 : {
   label$86 : while (1) {
    if (!((HEAP32[($11_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 244 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$85
    }
    HEAPF64[((HEAP32[($11_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + (HEAP32[($11_1 + 200 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 1 | 0;
    continue label$86;
   };
  }
  label$87 : {
   label$88 : {
    if (HEAP32[($11_1 + 208 | 0) >> 2] | 0) {
     break label$88
    }
    if (!((HEAP32[(HEAP32[($11_1 + 224 | 0) >> 2] | 0) >> 2] | 0 | 0) >= (HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$88
    }
    HEAP32[($11_1 + 208 | 0) >> 2] = 4;
    break label$87;
   }
   label$89 : {
    if (!((HEAP32[(HEAP32[($11_1 + 224 | 0) >> 2] | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$89
    }
    HEAP32[($11_1 + 208 | 0) >> 2] = 1;
   }
  }
  $863(HEAP32[($11_1 + 72 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($11_1 + 76 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($11_1 + 68 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($11_1 + 64 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($11_1 + 60 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($11_1 + 52 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($11_1 + 48 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0);
  $1051 = HEAP32[($11_1 + 208 | 0) >> 2] | 0;
  global$0 = $11_1 + 256 | 0;
  return $1051 | 0;
 }
 
 function $138($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = +$3_1;
  $4_1 = +$4_1;
  var $7_1 = 0, $269_1 = 0, $352_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $7_1 = global$0 - 112 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 100 | 0) >> 2] = $2_1;
  HEAPF64[($7_1 + 88 | 0) >> 3] = $3_1;
  HEAPF64[($7_1 + 80 | 0) >> 3] = $4_1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 104 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 104 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
  HEAPF64[($7_1 + 16 | 0) >> 3] = Math_sqrt(Math_sqrt(+HEAPF64[($7_1 + 88 | 0) >> 3])) * +HEAPF64[($7_1 + 80 | 0) >> 3];
  HEAPF64[($7_1 + 32 | 0) >> 3] = +(0 | 0);
  HEAP32[($7_1 + 76 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 76 | 0) >> 2] | 0, HEAP32[($7_1 + 104 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 76 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($7_1 + 76 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($7_1 + 104 | 0) >> 2] | 0, HEAP32[($7_1 + 104 | 0) >> 2] | 0) | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($7_1 + 76 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$100(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 24 | 0) >> 3] = wasm2js_f64$0;
  label$5 : {
   if (!(+HEAPF64[($7_1 + 80 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
    break label$5
   }
   HEAPF64[($7_1 + 80 | 0) >> 3] = Math_sqrt(+HEAPF64[($7_1 + 24 | 0) >> 3]);
  }
  HEAPF64[($7_1 + 8 | 0) >> 3] = Math_sqrt(+HEAPF64[($7_1 + 88 | 0) >> 3]) * +HEAPF64[($7_1 + 80 | 0) >> 3];
  HEAP32[($7_1 + 72 | 0) >> 2] = 0;
  label$6 : {
   label$7 : while (1) {
    if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($7_1 + 64 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 72 | 0) >> 2] | 0, HEAP32[($7_1 + 104 | 0) >> 2] | 0);
    HEAPF64[($7_1 + 48 | 0) >> 3] = +(0 | 0);
    HEAP32[($7_1 + 76 | 0) >> 2] = 0;
    label$8 : {
     label$9 : while (1) {
      if (!((HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$8
      }
      HEAPF64[($7_1 + 48 | 0) >> 3] = +HEAPF64[($7_1 + 48 | 0) >> 3] + +HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 76 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 76 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 76 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
      continue label$9;
     };
    }
    HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 72 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 72 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($7_1 + 48 | 0) >> 3];
    HEAPF64[$7_1 >> 3] = +(0 | 0);
    HEAP32[($7_1 + 76 | 0) >> 2] = (HEAP32[($7_1 + 72 | 0) >> 2] | 0) + 1 | 0;
    label$10 : {
     label$11 : while (1) {
      if (!((HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      HEAPF64[($7_1 + 48 | 0) >> 3] = +(0 | 0);
      HEAP32[($7_1 + 60 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 76 | 0) >> 2] | 0, HEAP32[($7_1 + 104 | 0) >> 2] | 0);
      HEAP32[($7_1 + 68 | 0) >> 2] = 0;
      label$12 : {
       label$13 : while (1) {
        if (!((HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$12
        }
        HEAPF64[($7_1 + 48 | 0) >> 3] = +HEAPF64[($7_1 + 48 | 0) >> 3] + +HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 68 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + (HEAP32[($7_1 + 68 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($7_1 + 68 | 0) >> 2] = (HEAP32[($7_1 + 68 | 0) >> 2] | 0) + 1 | 0;
        continue label$13;
       };
      }
      HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + (HEAP32[($7_1 + 72 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 108 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 76 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($7_1 + 48 | 0) >> 3];
      label$14 : {
       if (!(Math_abs(+HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + (HEAP32[($7_1 + 72 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]) > +HEAPF64[$7_1 >> 3] & 1 | 0)) {
        break label$14
       }
       HEAPF64[$7_1 >> 3] = Math_abs(+HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 60 | 0) >> 2] | 0) + (HEAP32[($7_1 + 72 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
      }
      HEAP32[($7_1 + 76 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
      continue label$11;
     };
    }
    label$15 : {
     label$16 : {
      if (!(+HEAPF64[$7_1 >> 3] / +HEAPF64[($7_1 + 80 | 0) >> 3] > +HEAPF64[($7_1 + 16 | 0) >> 3] & 1 | 0)) {
       break label$16
      }
      HEAPF64[$7_1 >> 3] = +HEAPF64[$7_1 >> 3] / +HEAPF64[($7_1 + 80 | 0) >> 3];
      break label$15;
     }
     HEAPF64[$7_1 >> 3] = +HEAPF64[($7_1 + 16 | 0) >> 3];
    }
    label$17 : {
     label$18 : {
      if (!(+HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 72 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[$7_1 >> 3] * +HEAPF64[$7_1 >> 3] & 1 | 0)) {
       break label$18
      }
      HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 72 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 72 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
      break label$17;
     }
     label$19 : {
      if (!(+HEAPF64[$7_1 >> 3] < +HEAPF64[($7_1 + 8 | 0) >> 3] & 1 | 0)) {
       break label$19
      }
      HEAPF64[$7_1 >> 3] = +HEAPF64[($7_1 + 8 | 0) >> 3];
     }
     label$20 : {
      if (!(+HEAPF64[($7_1 + 32 | 0) >> 3] < +HEAPF64[$7_1 >> 3] * +HEAPF64[$7_1 >> 3] - +HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 72 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$20
      }
      HEAPF64[($7_1 + 32 | 0) >> 3] = +HEAPF64[$7_1 >> 3] * +HEAPF64[$7_1 >> 3] - +HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 72 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     }
     HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 72 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[$7_1 >> 3];
    }
    HEAP32[($7_1 + 76 | 0) >> 2] = (HEAP32[($7_1 + 72 | 0) >> 2] | 0) + 1 | 0;
    label$21 : {
     label$22 : while (1) {
      if (!((HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$21
      }
      $269_1 = (HEAP32[($7_1 + 100 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 76 | 0) >> 2] | 0, HEAP32[($7_1 + 104 | 0) >> 2] | 0) + (HEAP32[($7_1 + 72 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
      HEAPF64[$269_1 >> 3] = +HEAPF64[$269_1 >> 3] / +HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (HEAP32[($7_1 + 72 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 76 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
      continue label$22;
     };
    }
    HEAP32[($7_1 + 72 | 0) >> 2] = (HEAP32[($7_1 + 72 | 0) >> 2] | 0) + 1 | 0;
    continue label$7;
   };
  }
  $863(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0);
  $352_1 = +HEAPF64[($7_1 + 32 | 0) >> 3];
  global$0 = $7_1 + 112 | 0;
  return +$352_1;
 }
 
 function $139($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = +$3_1;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $49_1 = 0, $186_1 = 0, $490_1 = 0.0, $314_1 = 0, $357_1 = 0, $396_1 = 0, $542_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $7_1 = global$0 - 144 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 140 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 136 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 132 | 0) >> 2] = $2_1;
  HEAPF64[($7_1 + 120 | 0) >> 3] = $3_1;
  HEAP32[($7_1 + 116 | 0) >> 2] = $4_1;
  HEAPF64[($7_1 + 104 | 0) >> 3] = Math_sqrt(+HEAPF64[($7_1 + 120 | 0) >> 3]);
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 136 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 136 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 112 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($7_1 + 12 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 8 | 0) >> 2] | 0, HEAP32[($7_1 + 136 | 0) >> 2] | 0);
    HEAP32[($7_1 + 4 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      $49_1 = (HEAP32[($7_1 + 140 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (HEAP32[($7_1 + 4 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
      HEAPF64[$49_1 >> 3] = +HEAPF64[$49_1 >> 3] / (+HEAPF64[((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($7_1 + 8 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF64[((HEAP32[($7_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 140 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 8 | 0) >> 2] | 0, HEAP32[($7_1 + 136 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$101(HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 96 | 0) >> 3] = wasm2js_f64$0;
  (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$102(HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 88 | 0) >> 3] = wasm2js_f64$0;
  HEAPF64[($7_1 + 80 | 0) >> 3] = +(0 | 0);
  label$7 : {
   if (!(+HEAPF64[($7_1 + 96 | 0) >> 3] > +HEAPF64[($7_1 + 80 | 0) >> 3] & 1 | 0)) {
    break label$7
   }
   HEAPF64[($7_1 + 80 | 0) >> 3] = +HEAPF64[($7_1 + 96 | 0) >> 3];
  }
  HEAP32[($7_1 + 8 | 0) >> 2] = 0;
  label$8 : {
   label$9 : while (1) {
    if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAPF64[((HEAP32[($7_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$9;
   };
  }
  HEAPF64[($7_1 + 72 | 0) >> 3] = +(0 | 0);
  label$10 : {
   if (!(+HEAPF64[($7_1 + 88 | 0) >> 3] <= +HEAPF64[($7_1 + 104 | 0) >> 3] * +HEAPF64[($7_1 + 80 | 0) >> 3] & 1 | 0)) {
    break label$10
   }
   HEAPF64[($7_1 + 72 | 0) >> 3] = 2.0 * (+HEAPF64[($7_1 + 80 | 0) >> 3] - +HEAPF64[($7_1 + 88 | 0) >> 3]) * +HEAPF64[($7_1 + 104 | 0) >> 3] - +HEAPF64[($7_1 + 88 | 0) >> 3];
   HEAPF64[($7_1 + 96 | 0) >> 3] = +HEAPF64[($7_1 + 96 | 0) >> 3] + +HEAPF64[($7_1 + 72 | 0) >> 3];
  }
  HEAP32[$7_1 >> 2] = 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = 0;
  label$11 : {
   label$12 : while (1) {
    if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$11
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = 0;
    label$13 : {
     label$14 : while (1) {
      if (!((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$13
      }
      label$15 : {
       if (!((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) > (HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       HEAPF64[((HEAP32[($7_1 + 112 | 0) >> 2] | 0) + ((HEAP32[$7_1 >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 140 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 8 | 0) >> 2] | 0, HEAP32[($7_1 + 136 | 0) >> 2] | 0) + (HEAP32[($7_1 + 4 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + 1 | 0;
      }
      HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
      continue label$14;
     };
    }
    HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$12;
   };
  }
  (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$100(HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[$7_1 >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 64 | 0) >> 3] = wasm2js_f64$0;
  label$16 : {
   if (!(+HEAPF64[($7_1 + 64 | 0) >> 3] * (1.0 + 2.0 * +HEAPF64[($7_1 + 104 | 0) >> 3]) > +HEAPF64[($7_1 + 96 | 0) >> 3] & 1 | 0)) {
    break label$16
   }
   HEAPF64[($7_1 + 72 | 0) >> 3] = +HEAPF64[($7_1 + 72 | 0) >> 3] + (+HEAPF64[($7_1 + 64 | 0) >> 3] - +HEAPF64[($7_1 + 96 | 0) >> 3] + 2.0 * +HEAPF64[($7_1 + 104 | 0) >> 3] * +HEAPF64[($7_1 + 64 | 0) >> 3]);
   HEAPF64[($7_1 + 96 | 0) >> 3] = +HEAPF64[($7_1 + 64 | 0) >> 3] * (1.0 + 2.0 * +HEAPF64[($7_1 + 104 | 0) >> 3]);
  }
  label$17 : {
   if (!(+HEAPF64[($7_1 + 96 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
    break label$17
   }
   HEAPF64[($7_1 + 72 | 0) >> 3] = 1.0;
   HEAPF64[($7_1 + 96 | 0) >> 3] = 1.0;
  }
  label$18 : {
   if (!(+HEAPF64[($7_1 + 72 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
    break label$18
   }
   HEAP32[($7_1 + 8 | 0) >> 2] = 0;
   label$19 : {
    label$20 : while (1) {
     if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$19
     }
     $186_1 = (HEAP32[($7_1 + 140 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 8 | 0) >> 2] | 0, HEAP32[($7_1 + 136 | 0) >> 2] | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
     HEAPF64[$186_1 >> 3] = +HEAPF64[$186_1 >> 3] + +HEAPF64[($7_1 + 72 | 0) >> 3];
     HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     continue label$20;
    };
   }
  }
  label$21 : {
   label$22 : {
    if (!(+HEAPF64[($7_1 + 96 | 0) >> 3] > +HEAPF64[($7_1 + 64 | 0) >> 3] / +(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$22
    }
    HEAPF64[($7_1 + 56 | 0) >> 3] = Math_sqrt(+HEAPF64[($7_1 + 96 | 0) >> 3]);
    break label$21;
   }
   HEAPF64[($7_1 + 56 | 0) >> 3] = Math_sqrt(+HEAPF64[($7_1 + 64 | 0) >> 3] / +(HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0));
  }
  (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$138(HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0, +(+HEAPF64[($7_1 + 120 | 0) >> 3]), +(+HEAPF64[($7_1 + 56 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
  label$23 : {
   if (!(+HEAPF64[($7_1 + 48 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
    break label$23
   }
   $490_1 = +HEAPF64[(HEAP32[($7_1 + 140 | 0) >> 2] | 0) >> 3];
   HEAPF64[($7_1 + 32 | 0) >> 3] = $490_1;
   HEAPF64[($7_1 + 40 | 0) >> 3] = $490_1;
   HEAP32[($7_1 + 8 | 0) >> 2] = 0;
   label$24 : {
    label$25 : while (1) {
     if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$24
     }
     HEAPF64[($7_1 + 24 | 0) >> 3] = +(0 | 0);
     HEAP32[($7_1 + 12 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 8 | 0) >> 2] | 0, HEAP32[($7_1 + 136 | 0) >> 2] | 0);
     HEAP32[($7_1 + 4 | 0) >> 2] = 0;
     label$26 : {
      label$27 : while (1) {
       if (!((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$26
       }
       HEAPF64[($7_1 + 24 | 0) >> 3] = +HEAPF64[($7_1 + 24 | 0) >> 3] + Math_abs(+HEAPF64[((HEAP32[($7_1 + 140 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (HEAP32[($7_1 + 4 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
       HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
       continue label$27;
      };
     }
     HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     label$28 : {
      label$29 : while (1) {
       if (!((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$28
       }
       HEAPF64[($7_1 + 24 | 0) >> 3] = +HEAPF64[($7_1 + 24 | 0) >> 3] + Math_abs(+HEAPF64[((HEAP32[($7_1 + 140 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (HEAP32[($7_1 + 4 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]);
       HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
       continue label$29;
      };
     }
     label$30 : {
      if (!(+HEAPF64[($7_1 + 40 | 0) >> 3] < +HEAPF64[((HEAP32[($7_1 + 140 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[($7_1 + 24 | 0) >> 3] & 1 | 0)) {
       break label$30
      }
      HEAPF64[($7_1 + 40 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 140 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[($7_1 + 24 | 0) >> 3];
     }
     label$31 : {
      if (!(+HEAPF64[($7_1 + 32 | 0) >> 3] > +HEAPF64[((HEAP32[($7_1 + 140 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($7_1 + 24 | 0) >> 3] & 1 | 0)) {
       break label$31
      }
      HEAPF64[($7_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 140 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($7_1 + 24 | 0) >> 3];
     }
     HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     continue label$25;
    };
   }
   HEAPF64[($7_1 + 16 | 0) >> 3] = (+HEAPF64[($7_1 + 40 | 0) >> 3] - +HEAPF64[($7_1 + 32 | 0) >> 3]) * +HEAPF64[($7_1 + 104 | 0) >> 3] - +HEAPF64[($7_1 + 32 | 0) >> 3];
   label$32 : {
    if (!(+HEAPF64[($7_1 + 16 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
     break label$32
    }
    HEAPF64[($7_1 + 16 | 0) >> 3] = +(0 | 0);
   }
   label$33 : {
    label$34 : {
     if (!(+HEAPF64[($7_1 + 48 | 0) >> 3] > +HEAPF64[($7_1 + 16 | 0) >> 3] & 1 | 0)) {
      break label$34
     }
     HEAPF64[($7_1 + 72 | 0) >> 3] = +HEAPF64[($7_1 + 16 | 0) >> 3];
     break label$33;
    }
    HEAPF64[($7_1 + 72 | 0) >> 3] = +HEAPF64[($7_1 + 48 | 0) >> 3];
   }
   HEAP32[($7_1 + 8 | 0) >> 2] = 0;
   label$35 : {
    label$36 : while (1) {
     if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$35
     }
     $314_1 = (HEAP32[($7_1 + 140 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 8 | 0) >> 2] | 0, HEAP32[($7_1 + 136 | 0) >> 2] | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
     HEAPF64[$314_1 >> 3] = +HEAPF64[$314_1 >> 3] + +HEAPF64[($7_1 + 72 | 0) >> 3];
     HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     continue label$36;
    };
   }
  }
  (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$138(HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0, +(+HEAPF64[($7_1 + 120 | 0) >> 3]), +(+(0 | 0)))), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
  HEAP32[($7_1 + 8 | 0) >> 2] = 0;
  label$37 : {
   label$38 : while (1) {
    if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$37
    }
    HEAP32[($7_1 + 12 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 8 | 0) >> 2] | 0, HEAP32[($7_1 + 136 | 0) >> 2] | 0);
    HEAP32[($7_1 + 4 | 0) >> 2] = 0;
    label$39 : {
     label$40 : while (1) {
      if (!((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$39
      }
      $357_1 = (HEAP32[($7_1 + 140 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (HEAP32[($7_1 + 4 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
      HEAPF64[$357_1 >> 3] = +HEAPF64[$357_1 >> 3] * (+HEAPF64[((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
      continue label$40;
     };
    }
    HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$38;
   };
  }
  HEAP32[($7_1 + 8 | 0) >> 2] = 0;
  label$41 : {
   label$42 : while (1) {
    if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$41
    }
    HEAP32[($7_1 + 12 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 8 | 0) >> 2] | 0, HEAP32[($7_1 + 136 | 0) >> 2] | 0);
    HEAP32[($7_1 + 4 | 0) >> 2] = 0;
    label$43 : {
     label$44 : while (1) {
      if (!((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) < ((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
       break label$43
      }
      $396_1 = (HEAP32[($7_1 + 116 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + (HEAP32[($7_1 + 4 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
      HEAPF64[$396_1 >> 3] = +HEAPF64[$396_1 >> 3] * +HEAPF64[((HEAP32[($7_1 + 132 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
      continue label$44;
     };
    }
    HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$42;
   };
  }
  $863(HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0);
  $542_1 = +HEAPF64[($7_1 + 48 | 0) >> 3];
  global$0 = $7_1 + 144 | 0;
  return +$542_1;
 }
 
 function $140($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($6_1 + 28 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAPF64[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    label$3 : {
     if (!(+HEAPF64[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($6_1 + 28 | 0) >> 2] | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0) + (HEAP32[($6_1 + 28 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] == +(0 | 0) & 1 | 0)) {
      break label$3
     }
     $875(global$3 + 1897 | 0 | 0, 0 | 0) | 0;
     fimport$0(1 | 0);
     abort();
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($6_1 + 36 | 0) >> 2] | 0) >> 3] / +HEAPF64[(HEAP32[($6_1 + 44 | 0) >> 2] | 0) >> 3];
  HEAP32[($6_1 + 28 | 0) >> 2] = 1;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAPF64[$6_1 >> 3] = +(0 | 0);
    HEAP32[($6_1 + 20 | 0) >> 2] = Math_imul(HEAP32[($6_1 + 28 | 0) >> 2] | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0);
    HEAP32[($6_1 + 24 | 0) >> 2] = 0;
    label$6 : {
     label$7 : while (1) {
      if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAPF64[$6_1 >> 3] = +HEAPF64[$6_1 >> 3] + +HEAPF64[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
      continue label$7;
     };
    }
    HEAPF64[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[$6_1 >> 3]) / +HEAPF64[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + (HEAP32[($6_1 + 28 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($6_1 + 28 | 0) >> 2] = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  $106(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
  HEAPF64[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 40 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 40 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($6_1 + 40 | 0) >> 2] | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
  HEAP32[($6_1 + 28 | 0) >> 2] = (HEAP32[($6_1 + 40 | 0) >> 2] | 0) - 2 | 0;
  label$8 : {
   label$9 : while (1) {
    if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAPF64[$6_1 >> 3] = +(0 | 0);
    HEAP32[($6_1 + 20 | 0) >> 2] = Math_imul(HEAP32[($6_1 + 28 | 0) >> 2] | 0, (HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 1 | 0);
    HEAP32[($6_1 + 16 | 0) >> 2] = 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    label$10 : {
     label$11 : while (1) {
      if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[$6_1 >> 3] = +HEAPF64[$6_1 >> 3] + +HEAPF64[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + (HEAP32[($6_1 + 16 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
      continue label$11;
     };
    }
    HEAPF64[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[$6_1 >> 3]) / +HEAPF64[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($6_1 + 28 | 0) >> 2] = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + -1 | 0;
    continue label$9;
   };
  }
  $863(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 48 | 0;
  return;
 }
 
 function $141($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $103_1 = 0, $108_1 = 0, $149_1 = 0, $154_1 = 0, $253_1 = 0, $258_1 = 0, $330_1 = 0.0, $269_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 96 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 88 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 84 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 80 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 76 | 0) >> 2] = $3_1;
  HEAPF64[($8_1 + 64 | 0) >> 3] = $4_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $8_1, wasm2js_f64$0 = +$734(+(+HEAPF64[($8_1 + 64 | 0) >> 3]), +(.3333333333333333))), HEAPF64[(wasm2js_i32$0 + 24 | 0) >> 3] = wasm2js_f64$0;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862((HEAP32[($8_1 + 80 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862((HEAP32[($8_1 + 80 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862((HEAP32[($8_1 + 80 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($8_1 + 56 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       if (!(Math_abs(+HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) >= 1.0 / Math_abs(+HEAPF64[((HEAP32[($8_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
        break label$5
       }
       HEAPF64[($8_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       break label$4;
      }
      (wasm2js_i32$0 = $8_1, wasm2js_f64$0 = +$93(+(+HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])) * 1.0 / Math_abs(+HEAPF64[((HEAP32[($8_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
     }
     HEAPF64[($8_1 + 40 | 0) >> 3] = +HEAPF64[($8_1 + 24 | 0) >> 3] * +HEAPF64[($8_1 + 16 | 0) >> 3];
     HEAP32[($8_1 + 52 | 0) >> 2] = 0;
     label$6 : {
      label$7 : while (1) {
       if (!((HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$6
       }
       HEAPF64[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[((HEAP32[($8_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[((HEAP32[($8_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($8_1 + 52 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) + 1 | 0;
       continue label$7;
      };
     }
     $103_1 = (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAPF64[$103_1 >> 3] = +HEAPF64[$103_1 >> 3] + +HEAPF64[($8_1 + 40 | 0) >> 3];
     $108_1 = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAPF64[$108_1 >> 3] = +HEAPF64[$108_1 >> 3] + +HEAPF64[($8_1 + 40 | 0) >> 3];
     HEAP32[($8_1 + 52 | 0) >> 2] = 0;
     label$8 : {
      label$9 : while (1) {
       if (!((HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$8
       }
       label$10 : {
        label$11 : {
         if (!(Math_abs(+HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) >= 1.0 / Math_abs(+HEAPF64[((HEAP32[($8_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
          break label$11
         }
         HEAPF64[($8_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         break label$10;
        }
        (wasm2js_i32$0 = $8_1, wasm2js_f64$0 = +$93(+(+HEAPF64[((HEAP32[($8_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])) * 1.0 / Math_abs(+HEAPF64[((HEAP32[($8_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
       }
       HEAPF64[($8_1 + 32 | 0) >> 3] = +HEAPF64[($8_1 + 24 | 0) >> 3] * +HEAPF64[($8_1 + 16 | 0) >> 3];
       $149_1 = (HEAP32[($8_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$149_1 >> 3] = +HEAPF64[$149_1 >> 3] + +HEAPF64[($8_1 + 32 | 0) >> 3];
       $154_1 = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$154_1 >> 3] = +HEAPF64[$154_1 >> 3] + +HEAPF64[($8_1 + 32 | 0) >> 3];
       $330_1 = +FUNCTION_TABLE[HEAP32[(HEAP32[($8_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($8_1 + 4 | 0) >> 2] | 0, HEAP32[($8_1 + 80 | 0) >> 2] | 0, HEAP32[((HEAP32[($8_1 + 88 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - +FUNCTION_TABLE[HEAP32[(HEAP32[($8_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($8_1 + 12 | 0) >> 2] | 0, HEAP32[($8_1 + 80 | 0) >> 2] | 0, HEAP32[((HEAP32[($8_1 + 88 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - (+FUNCTION_TABLE[HEAP32[(HEAP32[($8_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($8_1 + 8 | 0) >> 2] | 0, HEAP32[($8_1 + 80 | 0) >> 2] | 0, HEAP32[((HEAP32[($8_1 + 88 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - +FUNCTION_TABLE[HEAP32[(HEAP32[($8_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($8_1 + 84 | 0) >> 2] | 0, HEAP32[($8_1 + 80 | 0) >> 2] | 0, HEAP32[((HEAP32[($8_1 + 88 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0));
       HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 56 | 0) >> 2] | 0, HEAP32[($8_1 + 80 | 0) >> 2] | 0) + (HEAP32[($8_1 + 52 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = $330_1 / (+HEAPF64[($8_1 + 40 | 0) >> 3] * +HEAPF64[($8_1 + 32 | 0) >> 3]);
       label$12 : {
        label$13 : {
         if (+HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 56 | 0) >> 2] | 0, HEAP32[($8_1 + 80 | 0) >> 2] | 0) + (HEAP32[($8_1 + 52 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
          break label$13
         }
         if (!(+HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 56 | 0) >> 2] | 0, HEAP32[($8_1 + 80 | 0) >> 2] | 0) + (HEAP32[($8_1 + 52 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
          break label$12
         }
        }
        $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
        $863(HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0);
        $863(HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
        $863(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0);
        HEAP32[($8_1 + 92 | 0) >> 2] = 15;
        break label$1;
       }
       label$14 : {
        if (!(+HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 56 | 0) >> 2] | 0, HEAP32[($8_1 + 80 | 0) >> 2] | 0) + (HEAP32[($8_1 + 52 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] != +HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($8_1 + 56 | 0) >> 2] | 0, HEAP32[($8_1 + 80 | 0) >> 2] | 0) + (HEAP32[($8_1 + 52 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
         break label$14
        }
        $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
        $863(HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0);
        $863(HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
        $863(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0);
        HEAP32[($8_1 + 92 | 0) >> 2] = 15;
        break label$1;
       }
       $253_1 = (HEAP32[($8_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$253_1 >> 3] = +HEAPF64[$253_1 >> 3] - +HEAPF64[($8_1 + 32 | 0) >> 3];
       $258_1 = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$258_1 >> 3] = +HEAPF64[$258_1 >> 3] - +HEAPF64[($8_1 + 32 | 0) >> 3];
       HEAP32[($8_1 + 52 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) + 1 | 0;
       continue label$9;
      };
     }
     HEAP32[($8_1 + 56 | 0) >> 2] = (HEAP32[($8_1 + 56 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   $863(HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0);
   HEAP32[($8_1 + 92 | 0) >> 2] = HEAP32[($8_1 + 48 | 0) >> 2] | 0;
  }
  $269_1 = HEAP32[($8_1 + 92 | 0) >> 2] | 0;
  global$0 = $8_1 + 96 | 0;
  return $269_1 | 0;
 }
 
 function $142($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $59_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $9_1 = global$0 - 80 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 60 | 0) >> 2] = $4_1;
  HEAPF64[($9_1 + 48 | 0) >> 3] = $5_1;
  HEAP32[($9_1 + 44 | 0) >> 2] = $6_1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 68 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($9_1 + 36 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (!(Math_abs(+HEAPF64[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) >= 1.0 / Math_abs(+HEAPF64[((HEAP32[($9_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
       break label$4
      }
      HEAPF64[($9_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      break label$3;
     }
     (wasm2js_i32$0 = $9_1, wasm2js_f64$0 = +$93(+(+HEAPF64[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])) * 1.0 / Math_abs(+HEAPF64[((HEAP32[($9_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
    }
    HEAPF64[($9_1 + 24 | 0) >> 3] = +HEAPF64[($9_1 + 48 | 0) >> 3] * +HEAPF64[($9_1 + 8 | 0) >> 3];
    HEAPF64[($9_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    $59_1 = (HEAP32[($9_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$59_1 >> 3] = +HEAPF64[$59_1 >> 3] + +HEAPF64[($9_1 + 24 | 0) >> 3];
    HEAPF64[($9_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($9_1 + 16 | 0) >> 3];
    FUNCTION_TABLE[HEAP32[(HEAP32[($9_1 + 76 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($9_1 + 72 | 0) >> 2] | 0, HEAP32[($9_1 + 68 | 0) >> 2] | 0, HEAP32[($9_1 + 4 | 0) >> 2] | 0, HEAP32[((HEAP32[($9_1 + 76 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0);
    HEAP32[($9_1 + 40 | 0) >> 2] = 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($9_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAPF64[((HEAP32[($9_1 + 44 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($9_1 + 40 | 0) >> 2] | 0, HEAP32[($9_1 + 68 | 0) >> 2] | 0) + (HEAP32[($9_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[((HEAP32[($9_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($9_1 + 64 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) / +HEAPF64[($9_1 + 24 | 0) >> 3];
      HEAP32[($9_1 + 40 | 0) >> 2] = (HEAP32[($9_1 + 40 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    HEAPF64[((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($9_1 + 16 | 0) >> 3];
    HEAP32[($9_1 + 36 | 0) >> 2] = (HEAP32[($9_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $863(HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $9_1 + 80 | 0;
  return;
 }
 
 function $143($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  $6_1 = $6_1 | 0;
  var $9_1 = 0;
  $9_1 = global$0 - 48 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 28 | 0) >> 2] = $4_1;
  HEAPF64[($9_1 + 16 | 0) >> 3] = $5_1;
  HEAP32[($9_1 + 12 | 0) >> 2] = $6_1;
  $142(HEAP32[($9_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 28 | 0) >> 2] | 0 | 0, +(+HEAPF64[($9_1 + 16 | 0) >> 3]), HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0);
  HEAP32[($9_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[$9_1 >> 2] = Math_imul(HEAP32[($9_1 + 8 | 0) >> 2] | 0, HEAP32[($9_1 + 36 | 0) >> 2] | 0);
    HEAP32[($9_1 + 4 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + (((HEAP32[$9_1 >> 2] | 0) + (HEAP32[($9_1 + 4 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + (((HEAP32[$9_1 >> 2] | 0) + (HEAP32[($9_1 + 4 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($9_1 + 4 | 0) >> 2] | 0, HEAP32[($9_1 + 36 | 0) >> 2] | 0) + (HEAP32[($9_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]) / 2.0;
      HEAP32[($9_1 + 4 | 0) >> 2] = (HEAP32[($9_1 + 4 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($9_1 + 8 | 0) >> 2] = (HEAP32[($9_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $9_1 + 48 | 0;
  return;
 }
 
 function $144($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = +$6_1;
  $7_1 = +$7_1;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, $32_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 48 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 24 | 0) >> 2] = $5_1;
  HEAPF64[($11_1 + 16 | 0) >> 3] = $6_1;
  HEAPF64[($11_1 + 8 | 0) >> 3] = $7_1;
  HEAP32[($11_1 + 4 | 0) >> 2] = $8_1;
  HEAP32[$11_1 >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $141(HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($11_1 + 16 | 0) >> 3]), HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    break label$1;
   }
   $143(HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[($11_1 + 8 | 0) >> 3]), HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0);
  }
  $32_1 = HEAP32[$11_1 >> 2] | 0;
  global$0 = $11_1 + 48 | 0;
  return $32_1 | 0;
 }
 
 function $145($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = +$6_1;
  $7_1 = +$7_1;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, $73_1 = 0, $165_1 = 0, $286_1 = 0, $317_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $11_1 = global$0 - 208 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 200 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 196 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 192 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 188 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 184 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 180 | 0) >> 2] = $5_1;
  HEAPF64[($11_1 + 168 | 0) >> 3] = $6_1;
  HEAPF64[($11_1 + 160 | 0) >> 3] = $7_1;
  HEAP32[($11_1 + 156 | 0) >> 2] = $8_1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(32 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(16 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862(16 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862((HEAP32[($11_1 + 184 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $862((HEAP32[($11_1 + 184 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[($11_1 + 152 | 0) >> 2] = 100;
  HEAPF64[($11_1 + 128 | 0) >> 3] = .0001;
  HEAPF64[($11_1 + 120 | 0) >> 3] = 1.0;
  HEAPF64[($11_1 + 24 | 0) >> 3] = +(0 | 0);
  HEAP32[($11_1 + 140 | 0) >> 2] = 1e3;
  HEAPF64[($11_1 + 72 | 0) >> 3] = 1.0;
  HEAPF64[($11_1 + 88 | 0) >> 3] = 1.0;
  HEAP32[($11_1 + 148 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($11_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($11_1 + 24 | 0) >> 3] = +HEAPF64[($11_1 + 24 | 0) >> 3] + +HEAPF64[((HEAP32[($11_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($11_1 + 148 | 0) >> 2] = (HEAP32[($11_1 + 148 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[($11_1 + 24 | 0) >> 3] = Math_sqrt(+HEAPF64[($11_1 + 24 | 0) >> 3]);
  HEAP32[($11_1 + 144 | 0) >> 2] = 0;
  label$3 : {
   if (!(+HEAPF64[($11_1 + 24 | 0) >> 3] > +HEAPF64[($11_1 + 168 | 0) >> 3] & 1 | 0)) {
    break label$3
   }
   $110(HEAP32[($11_1 + 188 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($11_1 + 184 | 0) >> 2] | 0 | 0, +(+HEAPF64[($11_1 + 168 | 0) >> 3] / +HEAPF64[($11_1 + 24 | 0) >> 3]));
   HEAPF64[($11_1 + 24 | 0) >> 3] = +HEAPF64[($11_1 + 168 | 0) >> 3];
  }
  $73_1 = 1;
  $119(HEAP32[($11_1 + 192 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0, $73_1 | 0, HEAP32[($11_1 + 184 | 0) >> 2] | 0 | 0, $73_1 | 0);
  HEAP32[($11_1 + 148 | 0) >> 2] = 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($11_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    label$6 : {
     label$7 : {
      if (!(Math_abs(+HEAPF64[((HEAP32[($11_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) > 1.0 / Math_abs(+HEAPF64[((HEAP32[($11_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
       break label$7
      }
      HEAPF64[($11_1 + 40 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($11_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      break label$6;
     }
     HEAPF64[($11_1 + 40 | 0) >> 3] = 1.0 / Math_abs(+HEAPF64[((HEAP32[($11_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
    }
    HEAPF64[((HEAP32[($11_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[($11_1 + 40 | 0) >> 3];
    HEAP32[($11_1 + 148 | 0) >> 2] = (HEAP32[($11_1 + 148 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  (wasm2js_i32$0 = $11_1, wasm2js_f64$0 = +$100(HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 184 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 32 | 0) >> 3] = wasm2js_f64$0;
  HEAPF64[($11_1 + 112 | 0) >> 3] = +HEAPF64[($11_1 + 160 | 0) >> 3] / +HEAPF64[($11_1 + 32 | 0) >> 3];
  (wasm2js_i32$0 = $11_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($11_1 + 200 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 196 | 0) >> 2] | 0, HEAP32[($11_1 + 184 | 0) >> 2] | 0, HEAP32[((HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 96 | 0) >> 3] = wasm2js_f64$0;
  label$8 : {
   label$9 : {
    label$10 : {
     if (+HEAPF64[($11_1 + 96 | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
      break label$10
     }
     if (!(+HEAPF64[($11_1 + 96 | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
      break label$9
     }
    }
    $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
    $863(HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0);
    $863(HEAP32[$11_1 >> 2] | 0 | 0);
    HEAP32[($11_1 + 204 | 0) >> 2] = 15;
    break label$8;
   }
   label$11 : {
    if (!(+HEAPF64[($11_1 + 96 | 0) >> 3] != +HEAPF64[($11_1 + 96 | 0) >> 3] & 1 | 0)) {
     break label$11
    }
    $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
    $863(HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0);
    $863(HEAP32[$11_1 >> 2] | 0 | 0);
    HEAP32[($11_1 + 204 | 0) >> 2] = 15;
    break label$8;
   }
   label$12 : while (1) {
    $165_1 = 0;
    label$13 : {
     if (!((HEAP32[($11_1 + 152 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
      break label$13
     }
     $165_1 = (HEAP32[($11_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 140 | 0) >> 2] | 0 | 0);
    }
    label$14 : {
     if (!($165_1 & 1 | 0)) {
      break label$14
     }
     HEAP32[($11_1 + 144 | 0) >> 2] = (HEAP32[($11_1 + 144 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($11_1 + 148 | 0) >> 2] = 0;
     label$15 : {
      label$16 : while (1) {
       if (!((HEAP32[($11_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       HEAPF64[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($11_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($11_1 + 120 | 0) >> 3];
       HEAP32[($11_1 + 148 | 0) >> 2] = (HEAP32[($11_1 + 148 | 0) >> 2] | 0) + 1 | 0;
       continue label$16;
      };
     }
     $108(HEAP32[($11_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[$11_1 >> 2] | 0 | 0, HEAP32[($11_1 + 156 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($11_1 + 184 | 0) >> 2] | 0 | 0);
     (wasm2js_i32$0 = $11_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($11_1 + 200 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($11_1 + 156 | 0) >> 2] | 0, HEAP32[($11_1 + 184 | 0) >> 2] | 0, HEAP32[((HEAP32[($11_1 + 200 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 104 | 0) >> 3] = wasm2js_f64$0;
     label$17 : {
      label$18 : {
       if (+HEAPF64[($11_1 + 104 | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
        break label$18
       }
       if (!(+HEAPF64[($11_1 + 104 | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
        break label$17
       }
      }
      $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
      $863(HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0);
      $863(HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0);
      $863(HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0);
      $863(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0);
      $863(HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0);
      $863(HEAP32[$11_1 >> 2] | 0 | 0);
      HEAP32[($11_1 + 204 | 0) >> 2] = 15;
      break label$8;
     }
     label$19 : {
      if (!(+HEAPF64[($11_1 + 104 | 0) >> 3] != +HEAPF64[($11_1 + 104 | 0) >> 3] & 1 | 0)) {
       break label$19
      }
      $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
      $863(HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0);
      $863(HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0);
      $863(HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0);
      $863(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0);
      $863(HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0);
      $863(HEAP32[$11_1 >> 2] | 0 | 0);
      HEAP32[($11_1 + 204 | 0) >> 2] = 15;
      break label$8;
     }
     label$20 : {
      label$21 : {
       if (!(+HEAPF64[($11_1 + 104 | 0) >> 3] <= +HEAPF64[($11_1 + 96 | 0) >> 3] + +HEAPF64[($11_1 + 128 | 0) >> 3] * +HEAPF64[($11_1 + 120 | 0) >> 3] * +HEAPF64[(HEAP32[($11_1 + 20 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
        break label$21
       }
       HEAP32[($11_1 + 152 | 0) >> 2] = 0;
       break label$20;
      }
      label$22 : {
       label$23 : {
        if (!(+HEAPF64[($11_1 + 120 | 0) >> 3] < +HEAPF64[($11_1 + 112 | 0) >> 3] & 1 | 0)) {
         break label$23
        }
        HEAP32[($11_1 + 152 | 0) >> 2] = 1;
        HEAP32[($11_1 + 148 | 0) >> 2] = 0;
        label$24 : {
         label$25 : while (1) {
          if (!((HEAP32[($11_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$24
          }
          HEAPF64[((HEAP32[($11_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          HEAP32[($11_1 + 148 | 0) >> 2] = (HEAP32[($11_1 + 148 | 0) >> 2] | 0) + 1 | 0;
          continue label$25;
         };
        }
        break label$22;
       }
       label$26 : {
        label$27 : {
         if (!(+HEAPF64[($11_1 + 120 | 0) >> 3] == 1.0 & 1 | 0)) {
          break label$27
         }
         HEAPF64[($11_1 + 80 | 0) >> 3] = -+HEAPF64[(HEAP32[($11_1 + 20 | 0) >> 2] | 0) >> 3] / (2.0 * (+HEAPF64[($11_1 + 104 | 0) >> 3] - +HEAPF64[($11_1 + 96 | 0) >> 3] - +HEAPF64[(HEAP32[($11_1 + 20 | 0) >> 2] | 0) >> 3]));
         break label$26;
        }
        HEAPF64[($11_1 + 64 | 0) >> 3] = +HEAPF64[($11_1 + 120 | 0) >> 3] * +HEAPF64[($11_1 + 120 | 0) >> 3];
        HEAPF64[($11_1 + 56 | 0) >> 3] = +HEAPF64[($11_1 + 88 | 0) >> 3] * +HEAPF64[($11_1 + 88 | 0) >> 3];
        HEAPF64[($11_1 + 48 | 0) >> 3] = +HEAPF64[($11_1 + 120 | 0) >> 3] - +HEAPF64[($11_1 + 88 | 0) >> 3];
        HEAPF64[(HEAP32[($11_1 + 16 | 0) >> 2] | 0) >> 3] = 1.0 / +HEAPF64[($11_1 + 64 | 0) >> 3];
        HEAPF64[((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 3] = -1.0 / +HEAPF64[($11_1 + 56 | 0) >> 3];
        HEAPF64[((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + 16 | 0) >> 3] = -+HEAPF64[($11_1 + 88 | 0) >> 3] / +HEAPF64[($11_1 + 64 | 0) >> 3];
        HEAPF64[((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + 24 | 0) >> 3] = +HEAPF64[($11_1 + 120 | 0) >> 3] / +HEAPF64[($11_1 + 56 | 0) >> 3];
        HEAPF64[(HEAP32[($11_1 + 12 | 0) >> 2] | 0) >> 3] = +HEAPF64[($11_1 + 104 | 0) >> 3] - +HEAPF64[($11_1 + 96 | 0) >> 3] - +HEAPF64[($11_1 + 120 | 0) >> 3] * +HEAPF64[(HEAP32[($11_1 + 20 | 0) >> 2] | 0) >> 3];
        HEAPF64[((HEAP32[($11_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($11_1 + 72 | 0) >> 3] - +HEAPF64[($11_1 + 96 | 0) >> 3] - +HEAPF64[($11_1 + 88 | 0) >> 3] * +HEAPF64[(HEAP32[($11_1 + 20 | 0) >> 2] | 0) >> 3];
        $286_1 = 2;
        $119(HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0, $286_1 | 0, $286_1 | 0, 1 | 0);
        $110(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0, 2 | 0, +(1.0 / +HEAPF64[($11_1 + 48 | 0) >> 3]));
        label$28 : {
         label$29 : {
          if (!(+HEAPF64[(HEAP32[($11_1 + 8 | 0) >> 2] | 0) >> 3] == +(0 | 0) & 1 | 0)) {
           break label$29
          }
          HEAPF64[($11_1 + 80 | 0) >> 3] = -+HEAPF64[(HEAP32[($11_1 + 20 | 0) >> 2] | 0) >> 3] / (2.0 * +HEAPF64[((HEAP32[($11_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 3]);
          break label$28;
         }
         HEAPF64[($11_1 + 80 | 0) >> 3] = (-+HEAPF64[((HEAP32[($11_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 3] + Math_sqrt(+HEAPF64[((HEAP32[($11_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 3] - 3.0 * +HEAPF64[(HEAP32[($11_1 + 8 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($11_1 + 20 | 0) >> 2] | 0) >> 3])) / (3.0 * +HEAPF64[(HEAP32[($11_1 + 8 | 0) >> 2] | 0) >> 3]);
        }
        label$30 : {
         if (!(+HEAPF64[($11_1 + 80 | 0) >> 3] > .5 * +HEAPF64[($11_1 + 120 | 0) >> 3] & 1 | 0)) {
          break label$30
         }
         HEAPF64[($11_1 + 80 | 0) >> 3] = .5 * +HEAPF64[($11_1 + 120 | 0) >> 3];
        }
       }
       HEAPF64[($11_1 + 88 | 0) >> 3] = +HEAPF64[($11_1 + 120 | 0) >> 3];
       HEAPF64[($11_1 + 72 | 0) >> 3] = +HEAPF64[($11_1 + 104 | 0) >> 3];
       label$31 : {
        label$32 : {
         if (!(+HEAPF64[($11_1 + 80 | 0) >> 3] <= .1 * +HEAPF64[($11_1 + 120 | 0) >> 3] & 1 | 0)) {
          break label$32
         }
         HEAPF64[($11_1 + 120 | 0) >> 3] = .1 * +HEAPF64[($11_1 + 120 | 0) >> 3];
         break label$31;
        }
        HEAPF64[($11_1 + 120 | 0) >> 3] = +HEAPF64[($11_1 + 80 | 0) >> 3];
       }
      }
     }
     continue label$12;
    }
    break label$12;
   };
   $863(HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0);
   $863(HEAP32[$11_1 >> 2] | 0 | 0);
   HEAP32[($11_1 + 204 | 0) >> 2] = HEAP32[($11_1 + 152 | 0) >> 2] | 0;
  }
  $317_1 = HEAP32[($11_1 + 204 | 0) >> 2] | 0;
  global$0 = $11_1 + 208 | 0;
  return $317_1 | 0;
 }
 
 function $146($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = +$6_1;
  $7_1 = +$7_1;
  $8_1 = +$8_1;
  $9_1 = $9_1 | 0;
  var $12_1 = 0, $155_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $12_1 = global$0 - 112 | 0;
  global$0 = $12_1;
  HEAPF64[($12_1 + 96 | 0) >> 3] = $0_1;
  HEAP32[($12_1 + 92 | 0) >> 2] = $1_1;
  HEAP32[($12_1 + 88 | 0) >> 2] = $2_1;
  HEAP32[($12_1 + 84 | 0) >> 2] = $3_1;
  HEAP32[($12_1 + 80 | 0) >> 2] = $4_1;
  HEAP32[($12_1 + 76 | 0) >> 2] = $5_1;
  HEAPF64[($12_1 + 64 | 0) >> 3] = $6_1;
  HEAPF64[($12_1 + 56 | 0) >> 3] = $7_1;
  HEAPF64[($12_1 + 48 | 0) >> 3] = $8_1;
  HEAP32[($12_1 + 44 | 0) >> 2] = $9_1;
  HEAP32[($12_1 + 40 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($12_1 + 44 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($12_1 + 40 | 0) >> 2] = 3;
    HEAP32[($12_1 + 108 | 0) >> 2] = HEAP32[($12_1 + 40 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($12_1 + 44 | 0) >> 2] | 0 | 0) == (5 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($12_1 + 40 | 0) >> 2] = 5;
    HEAP32[($12_1 + 108 | 0) >> 2] = HEAP32[($12_1 + 40 | 0) >> 2] | 0;
    break label$1;
   }
   label$4 : {
    if (!((HEAP32[($12_1 + 44 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($12_1 + 40 | 0) >> 2] = 15;
    HEAP32[($12_1 + 108 | 0) >> 2] = HEAP32[($12_1 + 40 | 0) >> 2] | 0;
    break label$1;
   }
   (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $862((HEAP32[($12_1 + 92 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
   label$5 : {
    label$6 : {
     if (!(Math_abs(+HEAPF64[($12_1 + 96 | 0) >> 3]) > Math_abs(+HEAPF64[($12_1 + 64 | 0) >> 3]) & 1 | 0)) {
      break label$6
     }
     HEAPF64[($12_1 + 16 | 0) >> 3] = Math_abs(+HEAPF64[($12_1 + 96 | 0) >> 3]);
     break label$5;
    }
    HEAPF64[($12_1 + 16 | 0) >> 3] = Math_abs(+HEAPF64[($12_1 + 64 | 0) >> 3]);
   }
   HEAP32[($12_1 + 36 | 0) >> 2] = 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($12_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$7
     }
     label$9 : {
      label$10 : {
       if (!(Math_abs(+HEAPF64[((HEAP32[($12_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) > 1.0 / Math_abs(+HEAPF64[((HEAP32[($12_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
        break label$10
       }
       HEAPF64[($12_1 + 24 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($12_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
       break label$9;
      }
      HEAPF64[($12_1 + 24 | 0) >> 3] = 1.0 / Math_abs(+HEAPF64[((HEAP32[($12_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
     }
     HEAPF64[((HEAP32[($12_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($12_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) * +HEAPF64[($12_1 + 24 | 0) >> 3] / +HEAPF64[($12_1 + 16 | 0) >> 3];
     HEAP32[($12_1 + 36 | 0) >> 2] = (HEAP32[($12_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
   (wasm2js_i32$0 = $12_1, wasm2js_f64$0 = +$100(HEAP32[($12_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 92 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
   label$11 : {
    label$12 : {
     if (!(+HEAPF64[($12_1 + 8 | 0) >> 3] <= +HEAPF64[($12_1 + 56 | 0) >> 3] & 1 | 0)) {
      break label$12
     }
     HEAP32[($12_1 + 40 | 0) >> 2] = 1;
     break label$11;
    }
    HEAP32[($12_1 + 36 | 0) >> 2] = 0;
    label$13 : {
     label$14 : while (1) {
      if (!((HEAP32[($12_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$13
      }
      label$15 : {
       label$16 : {
        if (!(Math_abs(+HEAPF64[((HEAP32[($12_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) > 1.0 / Math_abs(+HEAPF64[((HEAP32[($12_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
         break label$16
        }
        HEAPF64[($12_1 + 16 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($12_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
        break label$15;
       }
       HEAPF64[($12_1 + 16 | 0) >> 3] = 1.0 / Math_abs(+HEAPF64[((HEAP32[($12_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      }
      HEAPF64[($12_1 + 24 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($12_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($12_1 + 88 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      HEAPF64[((HEAP32[($12_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($12_1 + 24 | 0) >> 3] / +HEAPF64[($12_1 + 16 | 0) >> 3];
      HEAP32[($12_1 + 36 | 0) >> 2] = (HEAP32[($12_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$14;
     };
    }
    (wasm2js_i32$0 = $12_1, wasm2js_f64$0 = +$100(HEAP32[($12_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 92 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
    label$17 : {
     if (!(+HEAPF64[($12_1 + 8 | 0) >> 3] <= +HEAPF64[($12_1 + 48 | 0) >> 3] & 1 | 0)) {
      break label$17
     }
     HEAP32[($12_1 + 40 | 0) >> 2] = 2;
    }
   }
   $863(HEAP32[($12_1 + 4 | 0) >> 2] | 0 | 0);
   HEAP32[($12_1 + 108 | 0) >> 2] = HEAP32[($12_1 + 40 | 0) >> 2] | 0;
  }
  $155_1 = HEAP32[($12_1 + 108 | 0) >> 2] | 0;
  global$0 = $12_1 + 112 | 0;
  return $155_1 | 0;
 }
 
 function $147($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  $6_1 = +$6_1;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = +$9_1;
  $10_1 = +$10_1;
  $11_1 = +$11_1;
  $12_1 = $12_1 | 0;
  var $15_1 = 0, $67_1 = 0, $284_1 = 0, $432_1 = 0, $452_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $15_1 = global$0 - 192 | 0;
  global$0 = $15_1;
  HEAP32[($15_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($15_1 + 184 | 0) >> 2] = $1_1;
  HEAP32[($15_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($15_1 + 176 | 0) >> 2] = $3_1;
  HEAP32[($15_1 + 172 | 0) >> 2] = $4_1;
  HEAPF64[($15_1 + 160 | 0) >> 3] = $5_1;
  HEAPF64[($15_1 + 152 | 0) >> 3] = $6_1;
  HEAP32[($15_1 + 148 | 0) >> 2] = $7_1;
  HEAP32[($15_1 + 144 | 0) >> 2] = $8_1;
  HEAPF64[($15_1 + 136 | 0) >> 3] = $9_1;
  HEAPF64[($15_1 + 128 | 0) >> 3] = $10_1;
  HEAPF64[($15_1 + 120 | 0) >> 3] = $11_1;
  HEAP32[($15_1 + 116 | 0) >> 2] = $12_1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($15_1 + 112 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($15_1 + 144 | 0) >> 2] | 0) >> 2] = 0;
  HEAP32[($15_1 + 96 | 0) >> 2] = HEAP32[($15_1 + 148 | 0) >> 2] | 0;
  HEAPF64[($15_1 + 64 | 0) >> 3] = Math_sqrt(+HEAPF64[($15_1 + 136 | 0) >> 3]);
  HEAP32[($15_1 + 108 | 0) >> 2] = 0;
  HEAP32[($15_1 + 104 | 0) >> 2] = 0;
  HEAP32[($15_1 + 100 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($15_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $67_1 = (HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$67_1 >> 3] = +HEAPF64[$67_1 >> 3] * +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 / +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($15_1 + 100 | 0) >> 2] = (HEAP32[($15_1 + 100 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  (wasm2js_i32$0 = $15_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($15_1 + 188 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($15_1 + 180 | 0) >> 2] | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0, HEAP32[((HEAP32[($15_1 + 188 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 56 | 0) >> 3] = wasm2js_f64$0;
  label$3 : {
   label$4 : {
    if (+HEAPF64[($15_1 + 56 | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
     break label$4
    }
    if (!(+HEAPF64[($15_1 + 56 | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
     break label$3
    }
   }
   $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
   HEAP32[($15_1 + 112 | 0) >> 2] = 15;
  }
  label$5 : {
   if (!(+HEAPF64[($15_1 + 56 | 0) >> 3] != +HEAPF64[($15_1 + 56 | 0) >> 3] & 1 | 0)) {
    break label$5
   }
   $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
   HEAP32[($15_1 + 112 | 0) >> 2] = 15;
  }
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $80(HEAP32[($15_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 172 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 64 | 0) >> 3]), HEAP32[($15_1 + 20 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 108 | 0) >> 2] = wasm2js_i32$1;
  label$6 : {
   if (!((HEAP32[($15_1 + 108 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[($15_1 + 112 | 0) >> 2] = 15;
  }
  label$7 : {
   if (!(+HEAPF64[($15_1 + 152 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
    break label$7
   }
   HEAPF64[($15_1 + 152 | 0) >> 3] = 1.0e3;
   HEAPF64[($15_1 + 72 | 0) >> 3] = +(0 | 0);
   HEAPF64[($15_1 + 80 | 0) >> 3] = +(0 | 0);
   HEAP32[($15_1 + 100 | 0) >> 2] = 0;
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($15_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAPF64[($15_1 + 80 | 0) >> 3] = +HEAPF64[($15_1 + 80 | 0) >> 3] + +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[($15_1 + 72 | 0) >> 3] = +HEAPF64[($15_1 + 72 | 0) >> 3] + +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($15_1 + 100 | 0) >> 2] = (HEAP32[($15_1 + 100 | 0) >> 2] | 0) + 1 | 0;
     continue label$9;
    };
   }
   HEAPF64[($15_1 + 80 | 0) >> 3] = Math_sqrt(+HEAPF64[($15_1 + 80 | 0) >> 3]);
   HEAPF64[($15_1 + 72 | 0) >> 3] = Math_sqrt(+HEAPF64[($15_1 + 72 | 0) >> 3]);
   label$10 : {
    label$11 : {
     if (!(+HEAPF64[($15_1 + 80 | 0) >> 3] > +HEAPF64[($15_1 + 72 | 0) >> 3] & 1 | 0)) {
      break label$11
     }
     HEAPF64[($15_1 + 152 | 0) >> 3] = +HEAPF64[($15_1 + 152 | 0) >> 3] * +HEAPF64[($15_1 + 80 | 0) >> 3];
     break label$10;
    }
    HEAPF64[($15_1 + 152 | 0) >> 3] = +HEAPF64[($15_1 + 152 | 0) >> 3] * +HEAPF64[($15_1 + 72 | 0) >> 3];
   }
  }
  label$12 : {
   label$13 : {
    if (!(Math_abs(+HEAPF64[($15_1 + 56 | 0) >> 3]) > Math_abs(+HEAPF64[($15_1 + 160 | 0) >> 3]) & 1 | 0)) {
     break label$13
    }
    HEAPF64[($15_1 + 40 | 0) >> 3] = Math_abs(+HEAPF64[($15_1 + 56 | 0) >> 3]);
    break label$12;
   }
   HEAPF64[($15_1 + 40 | 0) >> 3] = Math_abs(+HEAPF64[($15_1 + 160 | 0) >> 3]);
  }
  HEAP32[($15_1 + 100 | 0) >> 2] = 0;
  label$14 : {
   label$15 : while (1) {
    if (!((HEAP32[($15_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$14
    }
    label$16 : {
     label$17 : {
      if (!(Math_abs(+HEAPF64[((HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) > 1.0 / Math_abs(+HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
       break label$17
      }
      HEAPF64[($15_1 + 48 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      break label$16;
     }
     HEAPF64[($15_1 + 48 | 0) >> 3] = 1.0 / Math_abs(+HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
    }
    HEAPF64[((HEAP32[($15_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($15_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) * +HEAPF64[($15_1 + 48 | 0) >> 3] / +HEAPF64[($15_1 + 40 | 0) >> 3];
    HEAP32[($15_1 + 100 | 0) >> 2] = (HEAP32[($15_1 + 100 | 0) >> 2] | 0) + 1 | 0;
    continue label$15;
   };
  }
  (wasm2js_i32$0 = $15_1, wasm2js_f64$0 = +$100(HEAP32[($15_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 32 | 0) >> 3] = wasm2js_f64$0;
  label$18 : {
   if (!(+HEAPF64[($15_1 + 32 | 0) >> 3] <= +HEAPF64[($15_1 + 128 | 0) >> 3] * .001 & 1 | 0)) {
    break label$18
   }
   HEAP32[($15_1 + 112 | 0) >> 2] = 1;
   HEAP32[($15_1 + 100 | 0) >> 2] = 0;
   label$19 : {
    label$20 : while (1) {
     if (!((HEAP32[($15_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$19
     }
     HEAPF64[((HEAP32[($15_1 + 116 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($15_1 + 100 | 0) >> 2] = (HEAP32[($15_1 + 100 | 0) >> 2] | 0) + 1 | 0;
     continue label$20;
    };
   }
  }
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $144(HEAP32[($15_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 172 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 136 | 0) >> 3]), +(+HEAPF64[($15_1 + 64 | 0) >> 3]), HEAP32[($15_1 + 16 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 104 | 0) >> 2] = wasm2js_i32$1;
  label$21 : {
   if (!((HEAP32[($15_1 + 104 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
    break label$21
   }
   HEAP32[($15_1 + 112 | 0) >> 2] = 15;
  }
  HEAP32[($15_1 + 100 | 0) >> 2] = 0;
  label$22 : {
   label$23 : while (1) {
    if (!((HEAP32[($15_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$22
    }
    HEAPF64[((HEAP32[($15_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($15_1 + 100 | 0) >> 2] = (HEAP32[($15_1 + 100 | 0) >> 2] | 0) + 1 | 0;
    continue label$23;
   };
  }
  label$24 : while (1) {
   $284_1 = 0;
   label$25 : {
    if (HEAP32[($15_1 + 112 | 0) >> 2] | 0) {
     break label$25
    }
    $284_1 = (HEAP32[(HEAP32[($15_1 + 144 | 0) >> 2] | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 96 | 0) >> 2] | 0 | 0);
   }
   label$26 : {
    if (!($284_1 & 1 | 0)) {
     break label$26
    }
    HEAP32[(HEAP32[($15_1 + 144 | 0) >> 2] | 0) >> 2] = (HEAP32[(HEAP32[($15_1 + 144 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0;
    +$139(HEAP32[($15_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 172 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 136 | 0) >> 3]), HEAP32[($15_1 + 4 | 0) >> 2] | 0 | 0);
    $110(HEAP32[($15_1 + 20 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, +(-1.0));
    $140(HEAP32[($15_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[$15_1 >> 2] | 0 | 0);
    $110(HEAP32[($15_1 + 20 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, +(-1.0));
    (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $145(HEAP32[($15_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[$15_1 >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 172 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 152 | 0) >> 3]), +(+HEAPF64[($15_1 + 120 | 0) >> 3]), HEAP32[($15_1 + 116 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 92 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $15_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($15_1 + 188 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($15_1 + 116 | 0) >> 2] | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0, HEAP32[((HEAP32[($15_1 + 188 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 24 | 0) >> 3] = wasm2js_f64$0;
    label$27 : {
     label$28 : {
      if (+HEAPF64[($15_1 + 24 | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
       break label$28
      }
      if (!(+HEAPF64[($15_1 + 24 | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
       break label$27
      }
     }
     $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
     HEAP32[($15_1 + 112 | 0) >> 2] = 15;
     break label$26;
    }
    label$29 : {
     if (!(+HEAPF64[($15_1 + 24 | 0) >> 3] != +HEAPF64[($15_1 + 24 | 0) >> 3] & 1 | 0)) {
      break label$29
     }
     $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
     HEAP32[($15_1 + 112 | 0) >> 2] = 15;
     break label$26;
    }
    (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $80(HEAP32[($15_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 172 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 64 | 0) >> 3]), HEAP32[($15_1 + 20 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 108 | 0) >> 2] = wasm2js_i32$1;
    label$30 : {
     if (!((HEAP32[($15_1 + 108 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
      break label$30
     }
     HEAP32[($15_1 + 112 | 0) >> 2] = 15;
     break label$26;
    }
    (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $146(+(+HEAPF64[($15_1 + 24 | 0) >> 3]), HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 172 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 160 | 0) >> 3]), +(+HEAPF64[($15_1 + 128 | 0) >> 3]), +(+HEAPF64[($15_1 + 120 | 0) >> 3]), HEAP32[($15_1 + 92 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 112 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $144(HEAP32[($15_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 172 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 136 | 0) >> 3]), +(+HEAPF64[($15_1 + 64 | 0) >> 3]), HEAP32[($15_1 + 16 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 104 | 0) >> 2] = wasm2js_i32$1;
    label$31 : {
     if (!((HEAP32[($15_1 + 104 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
      break label$31
     }
     HEAP32[($15_1 + 112 | 0) >> 2] = 15;
    }
    HEAP32[($15_1 + 100 | 0) >> 2] = 0;
    label$32 : {
     label$33 : while (1) {
      if (!((HEAP32[($15_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$32
      }
      HEAPF64[((HEAP32[($15_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 116 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($15_1 + 100 | 0) >> 2] = (HEAP32[($15_1 + 100 | 0) >> 2] | 0) + 1 | 0;
      continue label$33;
     };
    }
    continue label$24;
   }
   break label$24;
  };
  label$34 : {
   if (HEAP32[($15_1 + 112 | 0) >> 2] | 0) {
    break label$34
   }
   if (!((HEAP32[(HEAP32[($15_1 + 144 | 0) >> 2] | 0) >> 2] | 0 | 0) >= (HEAP32[($15_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$34
   }
   HEAP32[($15_1 + 112 | 0) >> 2] = 4;
  }
  HEAP32[($15_1 + 100 | 0) >> 2] = 0;
  label$35 : {
   label$36 : while (1) {
    if (!((HEAP32[($15_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$35
    }
    $432_1 = (HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$432_1 >> 3] = +HEAPF64[$432_1 >> 3] * +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 / +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($15_1 + 100 | 0) >> 2] = (HEAP32[($15_1 + 100 | 0) >> 2] | 0) + 1 | 0;
    continue label$36;
   };
  }
  $863(HEAP32[($15_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 8 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 4 | 0) >> 2] | 0 | 0);
  $863(HEAP32[$15_1 >> 2] | 0 | 0);
  $452_1 = HEAP32[($15_1 + 112 | 0) >> 2] | 0;
  global$0 = $15_1 + 192 | 0;
  return $452_1 | 0;
 }
 
 function $148($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = +$6_1;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = +$10_1;
  $11_1 = $11_1 | 0;
  $12_1 = +$12_1;
  $13_1 = $13_1 | 0;
  var $16_1 = 0, $168_1 = 0, $207_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $16_1 = global$0 - 160 | 0;
  global$0 = $16_1;
  HEAP32[($16_1 + 156 | 0) >> 2] = $0_1;
  HEAP32[($16_1 + 152 | 0) >> 2] = $1_1;
  HEAP32[($16_1 + 148 | 0) >> 2] = $2_1;
  HEAP32[($16_1 + 144 | 0) >> 2] = $3_1;
  HEAP32[($16_1 + 140 | 0) >> 2] = $4_1;
  HEAP32[($16_1 + 136 | 0) >> 2] = $5_1;
  HEAPF64[($16_1 + 128 | 0) >> 3] = $6_1;
  HEAP32[($16_1 + 124 | 0) >> 2] = $7_1;
  HEAP32[($16_1 + 120 | 0) >> 2] = $8_1;
  HEAP32[($16_1 + 116 | 0) >> 2] = $9_1;
  HEAPF64[($16_1 + 104 | 0) >> 3] = $10_1;
  HEAP32[($16_1 + 100 | 0) >> 2] = $11_1;
  HEAPF64[($16_1 + 88 | 0) >> 3] = $12_1;
  HEAP32[($16_1 + 84 | 0) >> 2] = $13_1;
  HEAP32[($16_1 + 80 | 0) >> 2] = 4;
  HEAPF64[($16_1 + 40 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($16_1 + 100 | 0) >> 2] | 0) + 56 | 0) >> 3] = 1.0;
  HEAP32[($16_1 + 68 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $862((HEAP32[($16_1 + 140 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $862((HEAP32[($16_1 + 140 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $862((HEAP32[($16_1 + 140 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  HEAPF64[($16_1 + 24 | 0) >> 3] = +(0 | 0);
  HEAP32[($16_1 + 76 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($16_1 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[($16_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($16_1 + 40 | 0) >> 3] = +HEAPF64[($16_1 + 40 | 0) >> 3] + +HEAPF64[((HEAP32[($16_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($16_1 + 144 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($16_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($16_1 + 144 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($16_1 + 76 | 0) >> 2] = (HEAP32[($16_1 + 76 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[($16_1 + 40 | 0) >> 3] = Math_sqrt(+HEAPF64[($16_1 + 40 | 0) >> 3]);
  label$3 : {
   label$4 : {
    if ((HEAP32[($16_1 + 124 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
     break label$4
    }
    if (!(+HEAPF64[(HEAP32[($16_1 + 100 | 0) >> 2] | 0) >> 3] == -1.0 & 1 | 0)) {
     break label$3
    }
   }
   HEAPF64[((HEAP32[($16_1 + 100 | 0) >> 2] | 0) + 8 | 0) >> 3] = +(0 | 0);
   HEAP32[($16_1 + 76 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($16_1 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[($16_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAPF64[((HEAP32[($16_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($16_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[((HEAP32[($16_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($16_1 + 76 | 0) >> 2] = (HEAP32[($16_1 + 76 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   (wasm2js_i32$0 = $16_1, wasm2js_f64$0 = +$95(HEAP32[($16_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 140 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 56 | 0) >> 3] = wasm2js_f64$0;
   HEAPF64[($16_1 + 56 | 0) >> 3] = +HEAPF64[($16_1 + 56 | 0) >> 3] * +HEAPF64[($16_1 + 56 | 0) >> 3];
   HEAPF64[($16_1 + 48 | 0) >> 3] = +(0 | 0);
   HEAP32[($16_1 + 76 | 0) >> 2] = 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($16_1 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[($16_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$7
     }
     HEAPF64[($16_1 + 32 | 0) >> 3] = +(0 | 0);
     HEAP32[($16_1 + 72 | 0) >> 2] = HEAP32[($16_1 + 76 | 0) >> 2] | 0;
     label$9 : {
      label$10 : while (1) {
       if (!((HEAP32[($16_1 + 72 | 0) >> 2] | 0 | 0) < (HEAP32[($16_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       HEAPF64[($16_1 + 32 | 0) >> 3] = +HEAPF64[($16_1 + 32 | 0) >> 3] + +HEAPF64[((HEAP32[($16_1 + 120 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($16_1 + 72 | 0) >> 2] | 0, HEAP32[($16_1 + 140 | 0) >> 2] | 0) + (HEAP32[($16_1 + 76 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($16_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 72 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / (+HEAPF64[((HEAP32[($16_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 72 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($16_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 72 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
       HEAP32[($16_1 + 72 | 0) >> 2] = (HEAP32[($16_1 + 72 | 0) >> 2] | 0) + 1 | 0;
       continue label$10;
      };
     }
     HEAPF64[($16_1 + 48 | 0) >> 3] = +HEAPF64[($16_1 + 48 | 0) >> 3] + +HEAPF64[($16_1 + 32 | 0) >> 3] * +HEAPF64[($16_1 + 32 | 0) >> 3];
     HEAP32[($16_1 + 76 | 0) >> 2] = (HEAP32[($16_1 + 76 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
   HEAPF64[(HEAP32[($16_1 + 100 | 0) >> 2] | 0) >> 3] = +HEAPF64[($16_1 + 56 | 0) >> 3] * Math_sqrt(+HEAPF64[($16_1 + 56 | 0) >> 3]) / +HEAPF64[($16_1 + 48 | 0) >> 3];
   label$11 : {
    if (!(+HEAPF64[(HEAP32[($16_1 + 100 | 0) >> 2] | 0) >> 3] > +HEAPF64[($16_1 + 128 | 0) >> 3] & 1 | 0)) {
     break label$11
    }
    HEAPF64[(HEAP32[($16_1 + 100 | 0) >> 2] | 0) >> 3] = +HEAPF64[($16_1 + 128 | 0) >> 3];
   }
  }
  label$12 : while (1) {
   $168_1 = 0;
   label$13 : {
    if (!((HEAP32[($16_1 + 80 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$13
    }
    $168_1 = (HEAP32[($16_1 + 80 | 0) >> 2] | 0 | 0) != (15 | 0);
   }
   label$14 : {
    if (!($168_1 & 1 | 0)) {
     break label$14
    }
    $149(HEAP32[($16_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 116 | 0) >> 2] | 0 | 0, +(+HEAPF64[($16_1 + 40 | 0) >> 3]), HEAP32[($16_1 + 100 | 0) >> 2] | 0 | 0, +(+HEAPF64[($16_1 + 88 | 0) >> 3]), HEAP32[($16_1 + 16 | 0) >> 2] | 0 | 0);
    HEAPF64[((HEAP32[($16_1 + 100 | 0) >> 2] | 0) + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($16_1 + 100 | 0) >> 2] | 0) >> 3];
    (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $150(HEAP32[($16_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 136 | 0) >> 2] | 0 | 0, +(+HEAPF64[($16_1 + 128 | 0) >> 3]), HEAP32[($16_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 116 | 0) >> 2] | 0 | 0, +(+HEAPF64[($16_1 + 104 | 0) >> 3]), HEAP32[($16_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 12 | 0) >> 2] | 0 | 0, $16_1 + 24 | 0 | 0, HEAP32[($16_1 + 84 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 80 | 0) >> 2] = wasm2js_i32$1;
    continue label$12;
   }
   break label$12;
  };
  $863(HEAP32[($16_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($16_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($16_1 + 12 | 0) >> 2] | 0 | 0);
  $207_1 = HEAP32[($16_1 + 80 | 0) >> 2] | 0;
  global$0 = $16_1 + 160 | 0;
  return $207_1 | 0;
 }
 
 function $149($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = +$6_1;
  $7_1 = $7_1 | 0;
  $8_1 = +$8_1;
  $9_1 = $9_1 | 0;
  var $12_1 = 0, $225_1 = 0, $270_1 = 0, $319_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $12_1 = global$0 - 208 | 0;
  global$0 = $12_1;
  HEAP32[($12_1 + 204 | 0) >> 2] = $0_1;
  HEAP32[($12_1 + 200 | 0) >> 2] = $1_1;
  HEAP32[($12_1 + 196 | 0) >> 2] = $2_1;
  HEAP32[($12_1 + 192 | 0) >> 2] = $3_1;
  HEAP32[($12_1 + 188 | 0) >> 2] = $4_1;
  HEAP32[($12_1 + 184 | 0) >> 2] = $5_1;
  HEAPF64[($12_1 + 176 | 0) >> 3] = $6_1;
  HEAP32[($12_1 + 172 | 0) >> 2] = $7_1;
  HEAPF64[($12_1 + 160 | 0) >> 3] = $8_1;
  HEAP32[($12_1 + 156 | 0) >> 2] = $9_1;
  HEAPF64[($12_1 + 80 | 0) >> 3] = 1.5;
  HEAPF64[($12_1 + 72 | 0) >> 3] = .75;
  HEAPF64[($12_1 + 48 | 0) >> 3] = +HEAPF64[(HEAP32[($12_1 + 172 | 0) >> 2] | 0) >> 3];
  HEAPF64[($12_1 + 40 | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 3];
  HEAPF64[($12_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 172 | 0) >> 2] | 0) + 16 | 0) >> 3];
  HEAPF64[($12_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 3];
  HEAPF64[($12_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 3];
  HEAPF64[($12_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 172 | 0) >> 2] | 0) + 40 | 0) >> 3];
  (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $862((HEAP32[($12_1 + 196 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $862((HEAP32[($12_1 + 196 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($12_1 + 176 | 0) >> 3] <= +HEAPF64[($12_1 + 80 | 0) >> 3] * +HEAPF64[($12_1 + 48 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    HEAPF64[((HEAP32[($12_1 + 172 | 0) >> 2] | 0) + 48 | 0) >> 3] = 1.0;
    HEAP32[($12_1 + 152 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($12_1 + 152 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[((HEAP32[($12_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($12_1 + 152 | 0) >> 2] = (HEAP32[($12_1 + 152 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAPF64[($12_1 + 40 | 0) >> 3] = +(0 | 0);
    label$5 : {
     if (!(+HEAPF64[($12_1 + 48 | 0) >> 3] > +HEAPF64[($12_1 + 176 | 0) >> 3] & 1 | 0)) {
      break label$5
     }
     HEAPF64[($12_1 + 48 | 0) >> 3] = +HEAPF64[($12_1 + 176 | 0) >> 3];
    }
    break label$1;
   }
   HEAPF64[((HEAP32[($12_1 + 172 | 0) >> 2] | 0) + 48 | 0) >> 3] = +(0 | 0);
   label$6 : {
    if (!(+HEAPF64[($12_1 + 40 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAPF64[($12_1 + 40 | 0) >> 3] = +HEAPF64[($12_1 + 40 | 0) >> 3] - (+HEAPF64[($12_1 + 24 | 0) >> 3] + +HEAPF64[($12_1 + 32 | 0) >> 3]) * (+HEAPF64[($12_1 + 32 | 0) >> 3] - +HEAPF64[($12_1 + 48 | 0) >> 3] + +HEAPF64[($12_1 + 24 | 0) >> 3]) / (+HEAPF64[($12_1 + 48 | 0) >> 3] * +HEAPF64[($12_1 + 16 | 0) >> 3]);
   }
   HEAPF64[($12_1 + 24 | 0) >> 3] = +HEAPF64[($12_1 + 176 | 0) >> 3] - +HEAPF64[($12_1 + 48 | 0) >> 3];
   label$7 : {
    if (!(+HEAPF64[((HEAP32[($12_1 + 172 | 0) >> 2] | 0) + 56 | 0) >> 3] == 1.0 & 1 | 0)) {
     break label$7
    }
    HEAPF64[((HEAP32[($12_1 + 172 | 0) >> 2] | 0) + 56 | 0) >> 3] = +(0 | 0);
    HEAP32[($12_1 + 152 | 0) >> 2] = 0;
    label$8 : {
     label$9 : while (1) {
      if (!((HEAP32[($12_1 + 152 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$8
      }
      HEAPF64[((HEAP32[($12_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($12_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($12_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($12_1 + 152 | 0) >> 2] = (HEAP32[($12_1 + 152 | 0) >> 2] | 0) + 1 | 0;
      continue label$9;
     };
    }
    HEAPF64[(HEAP32[$12_1 >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($12_1 + 4 | 0) >> 2] | 0) >> 3] / +HEAPF64[(HEAP32[($12_1 + 188 | 0) >> 2] | 0) >> 3];
    HEAP32[($12_1 + 152 | 0) >> 2] = 1;
    label$10 : {
     label$11 : while (1) {
      if (!((HEAP32[($12_1 + 152 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      HEAPF64[($12_1 + 128 | 0) >> 3] = +(0 | 0);
      HEAP32[($12_1 + 148 | 0) >> 2] = Math_imul(HEAP32[($12_1 + 152 | 0) >> 2] | 0, HEAP32[($12_1 + 196 | 0) >> 2] | 0);
      HEAP32[($12_1 + 140 | 0) >> 2] = 0;
      label$12 : {
       label$13 : while (1) {
        if (!((HEAP32[($12_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$12
        }
        HEAPF64[($12_1 + 128 | 0) >> 3] = +HEAPF64[($12_1 + 128 | 0) >> 3] + +HEAPF64[((HEAP32[$12_1 >> 2] | 0) + ((HEAP32[($12_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($12_1 + 188 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 148 | 0) >> 2] | 0) + (HEAP32[($12_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($12_1 + 140 | 0) >> 2] = (HEAP32[($12_1 + 140 | 0) >> 2] | 0) + 1 | 0;
        continue label$13;
       };
      }
      HEAPF64[((HEAP32[$12_1 >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[((HEAP32[($12_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($12_1 + 128 | 0) >> 3]) / +HEAPF64[((HEAP32[($12_1 + 188 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 148 | 0) >> 2] | 0) + (HEAP32[($12_1 + 152 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($12_1 + 152 | 0) >> 2] = (HEAP32[($12_1 + 152 | 0) >> 2] | 0) + 1 | 0;
      continue label$11;
     };
    }
    (wasm2js_i32$0 = $12_1, wasm2js_f64$0 = +$95(HEAP32[$12_1 >> 2] | 0 | 0, HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 120 | 0) >> 3] = wasm2js_f64$0;
    HEAPF64[($12_1 + 8 | 0) >> 3] = -+HEAPF64[($12_1 + 120 | 0) >> 3] * +HEAPF64[($12_1 + 120 | 0) >> 3] / +HEAPF64[($12_1 + 176 | 0) >> 3];
   }
   HEAPF64[($12_1 + 64 | 0) >> 3] = -+HEAPF64[($12_1 + 24 | 0) >> 3] / +HEAPF64[($12_1 + 8 | 0) >> 3];
   HEAP32[($12_1 + 152 | 0) >> 2] = 0;
   label$14 : {
    label$15 : while (1) {
     if (!((HEAP32[($12_1 + 152 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$14
     }
     HEAPF64[((HEAP32[($12_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 204 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[((HEAP32[($12_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($12_1 + 152 | 0) >> 2] = (HEAP32[($12_1 + 152 | 0) >> 2] | 0) + 1 | 0;
     continue label$15;
    };
   }
   (wasm2js_i32$0 = $12_1, wasm2js_f64$0 = +$95(HEAP32[($12_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 120 | 0) >> 3] = wasm2js_f64$0;
   HEAPF64[($12_1 + 56 | 0) >> 3] = +HEAPF64[($12_1 + 120 | 0) >> 3] / +HEAPF64[($12_1 + 48 | 0) >> 3];
   HEAP32[($12_1 + 144 | 0) >> 2] = 0;
   label$16 : {
    label$17 : while (1) {
     if (HEAP32[($12_1 + 144 | 0) >> 2] | 0) {
      break label$16
     }
     label$18 : {
      label$19 : {
       if (+HEAPF64[($12_1 + 40 | 0) >> 3] < +HEAPF64[($12_1 + 64 | 0) >> 3] & 1 | 0) {
        break label$19
       }
       if (!(+HEAPF64[($12_1 + 40 | 0) >> 3] > +HEAPF64[($12_1 + 56 | 0) >> 3] & 1 | 0)) {
        break label$18
       }
      }
      HEAPF64[($12_1 + 112 | 0) >> 3] = Math_sqrt(+HEAPF64[($12_1 + 64 | 0) >> 3] * +HEAPF64[($12_1 + 56 | 0) >> 3]);
      HEAPF64[($12_1 + 104 | 0) >> 3] = .001 * +HEAPF64[($12_1 + 56 | 0) >> 3];
      label$20 : {
       label$21 : {
        if (!(+HEAPF64[($12_1 + 112 | 0) >> 3] > +HEAPF64[($12_1 + 104 | 0) >> 3] & 1 | 0)) {
         break label$21
        }
        HEAPF64[($12_1 + 40 | 0) >> 3] = +HEAPF64[($12_1 + 112 | 0) >> 3];
        break label$20;
       }
       HEAPF64[($12_1 + 40 | 0) >> 3] = +HEAPF64[($12_1 + 104 | 0) >> 3];
      }
     }
     HEAP32[($12_1 + 152 | 0) >> 2] = 0;
     label$22 : {
      label$23 : while (1) {
       if (!((HEAP32[($12_1 + 152 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$22
       }
       HEAP32[($12_1 + 148 | 0) >> 2] = Math_imul(HEAP32[($12_1 + 152 | 0) >> 2] | 0, HEAP32[($12_1 + 196 | 0) >> 2] | 0);
       $225_1 = (HEAP32[($12_1 + 184 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 148 | 0) >> 2] | 0) + (HEAP32[($12_1 + 152 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
       HEAPF64[$225_1 >> 3] = +HEAPF64[$225_1 >> 3] + +HEAPF64[($12_1 + 40 | 0) >> 3] * +HEAPF64[((HEAP32[($12_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($12_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($12_1 + 152 | 0) >> 2] = (HEAP32[($12_1 + 152 | 0) >> 2] | 0) + 1 | 0;
       continue label$23;
      };
     }
     (wasm2js_i32$0 = $12_1, wasm2js_f64$0 = +$138(HEAP32[($12_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 188 | 0) >> 2] | 0 | 0, +(+HEAPF64[($12_1 + 160 | 0) >> 3]), +(+(0 | 0)))), HEAPF64[(wasm2js_i32$0 + 96 | 0) >> 3] = wasm2js_f64$0;
     $110(HEAP32[($12_1 + 204 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0, +(-1.0));
     $140(HEAP32[($12_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 156 | 0) >> 2] | 0 | 0);
     $110(HEAP32[($12_1 + 204 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0, +(-1.0));
     HEAP32[($12_1 + 152 | 0) >> 2] = 0;
     label$24 : {
      label$25 : while (1) {
       if (!((HEAP32[($12_1 + 152 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$24
       }
       HEAP32[($12_1 + 148 | 0) >> 2] = Math_imul(HEAP32[($12_1 + 152 | 0) >> 2] | 0, HEAP32[($12_1 + 196 | 0) >> 2] | 0);
       $270_1 = (HEAP32[($12_1 + 184 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 148 | 0) >> 2] | 0) + (HEAP32[($12_1 + 152 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
       HEAPF64[$270_1 >> 3] = +HEAPF64[$270_1 >> 3] - +HEAPF64[($12_1 + 40 | 0) >> 3] * +HEAPF64[((HEAP32[($12_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($12_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($12_1 + 152 | 0) >> 2] = (HEAP32[($12_1 + 152 | 0) >> 2] | 0) + 1 | 0;
       continue label$25;
      };
     }
     HEAP32[($12_1 + 152 | 0) >> 2] = 0;
     label$26 : {
      label$27 : while (1) {
       if (!((HEAP32[($12_1 + 152 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$26
       }
       HEAPF64[((HEAP32[($12_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($12_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($12_1 + 152 | 0) >> 2] = (HEAP32[($12_1 + 152 | 0) >> 2] | 0) + 1 | 0;
       continue label$27;
      };
     }
     (wasm2js_i32$0 = $12_1, wasm2js_f64$0 = +$95(HEAP32[($12_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 88 | 0) >> 3] = wasm2js_f64$0;
     HEAPF64[($12_1 + 24 | 0) >> 3] = +HEAPF64[($12_1 + 88 | 0) >> 3] - +HEAPF64[($12_1 + 48 | 0) >> 3];
     HEAP32[($12_1 + 152 | 0) >> 2] = 0;
     label$28 : {
      label$29 : while (1) {
       if (!((HEAP32[($12_1 + 152 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$28
       }
       $319_1 = (HEAP32[($12_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$319_1 >> 3] = +HEAPF64[$319_1 >> 3] * +HEAPF64[((HEAP32[($12_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($12_1 + 152 | 0) >> 2] = (HEAP32[($12_1 + 152 | 0) >> 2] | 0) + 1 | 0;
       continue label$29;
      };
     }
     HEAPF64[(HEAP32[$12_1 >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($12_1 + 4 | 0) >> 2] | 0) >> 3] / +HEAPF64[(HEAP32[($12_1 + 188 | 0) >> 2] | 0) >> 3];
     HEAP32[($12_1 + 152 | 0) >> 2] = 1;
     label$30 : {
      label$31 : while (1) {
       if (!((HEAP32[($12_1 + 152 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$30
       }
       HEAPF64[($12_1 + 128 | 0) >> 3] = +(0 | 0);
       HEAP32[($12_1 + 148 | 0) >> 2] = Math_imul(HEAP32[($12_1 + 152 | 0) >> 2] | 0, HEAP32[($12_1 + 196 | 0) >> 2] | 0);
       HEAP32[($12_1 + 140 | 0) >> 2] = 0;
       label$32 : {
        label$33 : while (1) {
         if (!((HEAP32[($12_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$32
         }
         HEAPF64[($12_1 + 128 | 0) >> 3] = +HEAPF64[($12_1 + 128 | 0) >> 3] + +HEAPF64[((HEAP32[$12_1 >> 2] | 0) + ((HEAP32[($12_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($12_1 + 188 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 148 | 0) >> 2] | 0) + (HEAP32[($12_1 + 140 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($12_1 + 140 | 0) >> 2] = (HEAP32[($12_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         continue label$33;
        };
       }
       HEAPF64[((HEAP32[$12_1 >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = (+HEAPF64[((HEAP32[($12_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($12_1 + 128 | 0) >> 3]) / +HEAPF64[((HEAP32[($12_1 + 188 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 148 | 0) >> 2] | 0) + (HEAP32[($12_1 + 152 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($12_1 + 152 | 0) >> 2] = (HEAP32[($12_1 + 152 | 0) >> 2] | 0) + 1 | 0;
       continue label$31;
      };
     }
     (wasm2js_i32$0 = $12_1, wasm2js_f64$0 = +$95(HEAP32[$12_1 >> 2] | 0 | 0, HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 120 | 0) >> 3] = wasm2js_f64$0;
     HEAPF64[($12_1 + 16 | 0) >> 3] = -+HEAPF64[($12_1 + 120 | 0) >> 3] * +HEAPF64[($12_1 + 120 | 0) >> 3] / +HEAPF64[($12_1 + 88 | 0) >> 3];
     label$34 : {
      label$35 : {
       label$36 : {
        label$37 : {
         if (!(+HEAPF64[($12_1 + 88 | 0) >> 3] >= +HEAPF64[($12_1 + 72 | 0) >> 3] * +HEAPF64[($12_1 + 48 | 0) >> 3] & 1 | 0)) {
          break label$37
         }
         if (+HEAPF64[($12_1 + 88 | 0) >> 3] <= +HEAPF64[($12_1 + 80 | 0) >> 3] * +HEAPF64[($12_1 + 48 | 0) >> 3] & 1 | 0) {
          break label$36
         }
        }
        if (!(+HEAPF64[($12_1 + 56 | 0) >> 3] - +HEAPF64[($12_1 + 64 | 0) >> 3] >= +(0 | 0) & 1 | 0)) {
         break label$35
        }
       }
       HEAP32[($12_1 + 144 | 0) >> 2] = 1;
       break label$34;
      }
      label$38 : {
       if (!(+HEAPF64[($12_1 + 64 | 0) >> 3] <= +HEAPF64[($12_1 + 40 | 0) >> 3] - +HEAPF64[($12_1 + 24 | 0) >> 3] / +HEAPF64[($12_1 + 16 | 0) >> 3] & 1 | 0)) {
        break label$38
       }
       HEAPF64[($12_1 + 64 | 0) >> 3] = +HEAPF64[($12_1 + 40 | 0) >> 3] - +HEAPF64[($12_1 + 24 | 0) >> 3] / +HEAPF64[($12_1 + 16 | 0) >> 3];
      }
      label$39 : {
       if (!(+HEAPF64[($12_1 + 24 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
        break label$39
       }
       HEAPF64[($12_1 + 64 | 0) >> 3] = +HEAPF64[($12_1 + 40 | 0) >> 3];
      }
      HEAPF64[($12_1 + 40 | 0) >> 3] = +HEAPF64[($12_1 + 40 | 0) >> 3] - +HEAPF64[($12_1 + 88 | 0) >> 3] * +HEAPF64[($12_1 + 24 | 0) >> 3] / (+HEAPF64[($12_1 + 48 | 0) >> 3] * +HEAPF64[($12_1 + 16 | 0) >> 3]);
     }
     continue label$17;
    };
   }
  }
  HEAPF64[(HEAP32[($12_1 + 172 | 0) >> 2] | 0) >> 3] = +HEAPF64[($12_1 + 48 | 0) >> 3];
  HEAPF64[((HEAP32[($12_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($12_1 + 40 | 0) >> 3];
  HEAPF64[((HEAP32[($12_1 + 172 | 0) >> 2] | 0) + 16 | 0) >> 3] = +HEAPF64[($12_1 + 32 | 0) >> 3];
  HEAPF64[((HEAP32[($12_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 3] = +HEAPF64[($12_1 + 24 | 0) >> 3];
  HEAPF64[((HEAP32[($12_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 3] = +HEAPF64[($12_1 + 16 | 0) >> 3];
  HEAPF64[((HEAP32[($12_1 + 172 | 0) >> 2] | 0) + 40 | 0) >> 3] = +HEAPF64[($12_1 + 8 | 0) >> 3];
  $863(HEAP32[($12_1 + 4 | 0) >> 2] | 0 | 0);
  $863(HEAP32[$12_1 >> 2] | 0 | 0);
  global$0 = $12_1 + 208 | 0;
  return;
 }
 
 function $150($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = +$6_1;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = +$10_1;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  $15_1 = $15_1 | 0;
  var $18_1 = 0, $125_1 = 0, $425_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $18_1 = global$0 - 208 | 0;
  global$0 = $18_1;
  HEAP32[($18_1 + 200 | 0) >> 2] = $0_1;
  HEAP32[($18_1 + 196 | 0) >> 2] = $1_1;
  HEAP32[($18_1 + 192 | 0) >> 2] = $2_1;
  HEAP32[($18_1 + 188 | 0) >> 2] = $3_1;
  HEAP32[($18_1 + 184 | 0) >> 2] = $4_1;
  HEAP32[($18_1 + 180 | 0) >> 2] = $5_1;
  HEAPF64[($18_1 + 168 | 0) >> 3] = $6_1;
  HEAP32[($18_1 + 164 | 0) >> 2] = $7_1;
  HEAP32[($18_1 + 160 | 0) >> 2] = $8_1;
  HEAP32[($18_1 + 156 | 0) >> 2] = $9_1;
  HEAPF64[($18_1 + 144 | 0) >> 3] = $10_1;
  HEAP32[($18_1 + 140 | 0) >> 2] = $11_1;
  HEAP32[($18_1 + 136 | 0) >> 2] = $12_1;
  HEAP32[($18_1 + 132 | 0) >> 2] = $13_1;
  HEAP32[($18_1 + 128 | 0) >> 2] = $14_1;
  HEAP32[($18_1 + 124 | 0) >> 2] = $15_1;
  HEAPF64[($18_1 + 88 | 0) >> 3] = .0001;
  HEAPF64[($18_1 + 96 | 0) >> 3] = +HEAPF64[(HEAP32[($18_1 + 136 | 0) >> 2] | 0) >> 3];
  HEAPF64[($18_1 + 80 | 0) >> 3] = +(0 | 0);
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $862(8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $862((HEAP32[($18_1 + 184 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($18_1 + 116 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($18_1 + 80 | 0) >> 3] = +HEAPF64[($18_1 + 80 | 0) >> 3] + +HEAPF64[((HEAP32[($18_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($18_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($18_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($18_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($18_1 + 116 | 0) >> 2] = (HEAP32[($18_1 + 116 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[($18_1 + 80 | 0) >> 3] = Math_sqrt(+HEAPF64[($18_1 + 80 | 0) >> 3]);
  (wasm2js_i32$0 = $18_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($18_1 + 200 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($18_1 + 196 | 0) >> 2] | 0, HEAP32[($18_1 + 184 | 0) >> 2] | 0, HEAP32[((HEAP32[($18_1 + 200 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
  label$3 : {
   label$4 : {
    label$5 : {
     if (+HEAPF64[($18_1 + 48 | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
      break label$5
     }
     if (!(+HEAPF64[($18_1 + 48 | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
      break label$4
     }
    }
    $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
    $863(HEAP32[($18_1 + 8 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($18_1 + 12 | 0) >> 2] | 0 | 0);
    HEAP32[($18_1 + 204 | 0) >> 2] = 15;
    break label$3;
   }
   label$6 : {
    if (!(+HEAPF64[($18_1 + 48 | 0) >> 3] != +HEAPF64[($18_1 + 48 | 0) >> 3] & 1 | 0)) {
     break label$6
    }
    $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
    $863(HEAP32[($18_1 + 8 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($18_1 + 12 | 0) >> 2] | 0 | 0);
    HEAP32[($18_1 + 204 | 0) >> 2] = 15;
    break label$3;
   }
   $108(HEAP32[($18_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 124 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($18_1 + 184 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $18_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($18_1 + 200 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($18_1 + 124 | 0) >> 2] | 0, HEAP32[($18_1 + 184 | 0) >> 2] | 0, HEAP32[((HEAP32[($18_1 + 200 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
   label$7 : {
    label$8 : {
     if (+HEAPF64[($18_1 + 40 | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
      break label$8
     }
     if (!(+HEAPF64[($18_1 + 40 | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
      break label$7
     }
    }
    $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
    $863(HEAP32[($18_1 + 8 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($18_1 + 12 | 0) >> 2] | 0 | 0);
    HEAP32[($18_1 + 204 | 0) >> 2] = 15;
    break label$3;
   }
   label$9 : {
    if (!(+HEAPF64[($18_1 + 40 | 0) >> 3] != +HEAPF64[($18_1 + 40 | 0) >> 3] & 1 | 0)) {
     break label$9
    }
    $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
    $863(HEAP32[($18_1 + 8 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($18_1 + 12 | 0) >> 2] | 0 | 0);
    HEAP32[($18_1 + 204 | 0) >> 2] = 15;
    break label$3;
   }
   HEAPF64[($18_1 + 32 | 0) >> 3] = +HEAPF64[($18_1 + 40 | 0) >> 3] - +HEAPF64[($18_1 + 48 | 0) >> 3];
   $125_1 = 1;
   $119(HEAP32[($18_1 + 192 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 12 | 0) >> 2] | 0 | 0, $125_1 | 0, HEAP32[($18_1 + 184 | 0) >> 2] | 0 | 0, $125_1 | 0);
   label$10 : {
    if (!((HEAP32[($18_1 + 164 | 0) >> 2] | 0 | 0) != (3 | 0) & 1 | 0)) {
     break label$10
    }
    HEAPF64[(HEAP32[($18_1 + 128 | 0) >> 2] | 0) >> 3] = +(0 | 0);
   }
   label$11 : {
    label$12 : {
     label$13 : {
      if (+HEAPF64[($18_1 + 32 | 0) >> 3] > +HEAPF64[($18_1 + 88 | 0) >> 3] * +HEAPF64[(HEAP32[($18_1 + 12 | 0) >> 2] | 0) >> 3] & 1 | 0) {
       break label$13
      }
      if (!(+HEAPF64[($18_1 + 40 | 0) >> 3] >= +HEAPF64[(HEAP32[($18_1 + 128 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
       break label$12
      }
     }
     if (!((HEAP32[($18_1 + 164 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP32[($18_1 + 116 | 0) >> 2] = 0;
     label$14 : {
      label$15 : while (1) {
       if (!((HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$14
       }
       HEAPF64[((HEAP32[($18_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 132 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($18_1 + 116 | 0) >> 2] = (HEAP32[($18_1 + 116 | 0) >> 2] | 0) + 1 | 0;
       continue label$15;
      };
     }
     HEAP32[($18_1 + 120 | 0) >> 2] = 0;
     HEAPF64[($18_1 + 40 | 0) >> 3] = +HEAPF64[(HEAP32[($18_1 + 128 | 0) >> 2] | 0) >> 3];
     HEAPF64[($18_1 + 96 | 0) >> 3] = +HEAPF64[($18_1 + 96 | 0) >> 3] / 2.0;
     break label$11;
    }
    label$16 : {
     label$17 : {
      if (!(+HEAPF64[($18_1 + 32 | 0) >> 3] >= +HEAPF64[($18_1 + 88 | 0) >> 3] * +HEAPF64[(HEAP32[($18_1 + 12 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
       break label$17
      }
      HEAP32[($18_1 + 116 | 0) >> 2] = 0;
      label$18 : {
       label$19 : while (1) {
        if (!((HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$18
        }
        label$20 : {
         label$21 : {
          if (!(Math_abs(+HEAPF64[((HEAP32[($18_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) > 1.0 / Math_abs(+HEAPF64[((HEAP32[($18_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
           break label$21
          }
          HEAPF64[($18_1 + 64 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($18_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
          break label$20;
         }
         HEAPF64[($18_1 + 64 | 0) >> 3] = 1.0 / Math_abs(+HEAPF64[((HEAP32[($18_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
        }
        HEAPF64[((HEAP32[($18_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[($18_1 + 64 | 0) >> 3];
        HEAP32[($18_1 + 116 | 0) >> 2] = (HEAP32[($18_1 + 116 | 0) >> 2] | 0) + 1 | 0;
        continue label$19;
       };
      }
      (wasm2js_i32$0 = $18_1, wasm2js_f64$0 = +$100(HEAP32[($18_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 184 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 72 | 0) >> 3] = wasm2js_f64$0;
      label$22 : {
       label$23 : {
        if (!(+HEAPF64[($18_1 + 72 | 0) >> 3] < +HEAPF64[($18_1 + 144 | 0) >> 3] & 1 | 0)) {
         break label$23
        }
        HEAP32[($18_1 + 120 | 0) >> 2] = 1;
        HEAP32[($18_1 + 116 | 0) >> 2] = 0;
        label$24 : {
         label$25 : while (1) {
          if (!((HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$24
          }
          HEAPF64[((HEAP32[($18_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          HEAP32[($18_1 + 116 | 0) >> 2] = (HEAP32[($18_1 + 116 | 0) >> 2] | 0) + 1 | 0;
          continue label$25;
         };
        }
        break label$22;
       }
       HEAP32[($18_1 + 120 | 0) >> 2] = 2;
       HEAPF64[($18_1 + 56 | 0) >> 3] = -+HEAPF64[(HEAP32[($18_1 + 12 | 0) >> 2] | 0) >> 3] * +HEAPF64[($18_1 + 80 | 0) >> 3] / (2.0 * (+HEAPF64[($18_1 + 32 | 0) >> 3] - +HEAPF64[($18_1 + 80 | 0) >> 3]));
       label$26 : {
        label$27 : {
         if (!(+HEAPF64[($18_1 + 56 | 0) >> 3] < .1 * +HEAPF64[($18_1 + 96 | 0) >> 3] & 1 | 0)) {
          break label$27
         }
         HEAPF64[($18_1 + 96 | 0) >> 3] = +HEAPF64[($18_1 + 96 | 0) >> 3] * .1;
         break label$26;
        }
        label$28 : {
         label$29 : {
          if (!(+HEAPF64[($18_1 + 56 | 0) >> 3] > .5 * +HEAPF64[($18_1 + 96 | 0) >> 3] & 1 | 0)) {
           break label$29
          }
          HEAPF64[($18_1 + 96 | 0) >> 3] = +HEAPF64[($18_1 + 96 | 0) >> 3] * .5;
          break label$28;
         }
         HEAPF64[($18_1 + 96 | 0) >> 3] = +HEAPF64[($18_1 + 56 | 0) >> 3];
        }
       }
      }
      break label$16;
     }
     HEAPF64[($18_1 + 24 | 0) >> 3] = +HEAPF64[(HEAP32[($18_1 + 12 | 0) >> 2] | 0) >> 3];
     label$30 : {
      label$31 : {
       if (HEAP32[($18_1 + 140 | 0) >> 2] | 0) {
        break label$31
       }
       HEAP32[($18_1 + 116 | 0) >> 2] = 0;
       label$32 : {
        label$33 : while (1) {
         if (!((HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$32
         }
         HEAP32[($18_1 + 108 | 0) >> 2] = Math_imul(HEAP32[($18_1 + 116 | 0) >> 2] | 0, HEAP32[($18_1 + 184 | 0) >> 2] | 0);
         HEAPF64[($18_1 + 16 | 0) >> 3] = .5 * +HEAPF64[((HEAP32[($18_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($18_1 + 108 | 0) >> 2] | 0) + (HEAP32[($18_1 + 116 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($18_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($18_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($18_1 + 112 | 0) >> 2] = (HEAP32[($18_1 + 116 | 0) >> 2] | 0) + 1 | 0;
         label$34 : {
          label$35 : while (1) {
           if (!((HEAP32[($18_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$34
           }
           HEAPF64[($18_1 + 16 | 0) >> 3] = +HEAPF64[($18_1 + 16 | 0) >> 3] + +HEAPF64[((HEAP32[($18_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($18_1 + 108 | 0) >> 2] | 0) + (HEAP32[($18_1 + 112 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($18_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($18_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($18_1 + 112 | 0) >> 2] = (HEAP32[($18_1 + 112 | 0) >> 2] | 0) + 1 | 0;
           continue label$35;
          };
         }
         HEAPF64[($18_1 + 24 | 0) >> 3] = +HEAPF64[($18_1 + 24 | 0) >> 3] + +HEAPF64[($18_1 + 16 | 0) >> 3];
         HEAP32[($18_1 + 116 | 0) >> 2] = (HEAP32[($18_1 + 116 | 0) >> 2] | 0) + 1 | 0;
         continue label$33;
        };
       }
       break label$30;
      }
      label$36 : {
       if (!((HEAP32[($18_1 + 140 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$36
       }
       HEAP32[($18_1 + 116 | 0) >> 2] = 0;
       label$37 : {
        label$38 : while (1) {
         if (!((HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$37
         }
         HEAPF64[($18_1 + 16 | 0) >> 3] = +(0 | 0);
         HEAP32[($18_1 + 112 | 0) >> 2] = HEAP32[($18_1 + 116 | 0) >> 2] | 0;
         label$39 : {
          label$40 : while (1) {
           if (!((HEAP32[($18_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$39
           }
           HEAPF64[($18_1 + 16 | 0) >> 3] = +HEAPF64[($18_1 + 16 | 0) >> 3] + +HEAPF64[((HEAP32[($18_1 + 160 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($18_1 + 112 | 0) >> 2] | 0, HEAP32[($18_1 + 184 | 0) >> 2] | 0) + (HEAP32[($18_1 + 116 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($18_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($18_1 + 112 | 0) >> 2] = (HEAP32[($18_1 + 112 | 0) >> 2] | 0) + 1 | 0;
           continue label$40;
          };
         }
         HEAPF64[($18_1 + 24 | 0) >> 3] = +HEAPF64[($18_1 + 24 | 0) >> 3] + +HEAPF64[($18_1 + 16 | 0) >> 3] * +HEAPF64[($18_1 + 16 | 0) >> 3] / 2.0;
         HEAP32[($18_1 + 116 | 0) >> 2] = (HEAP32[($18_1 + 116 | 0) >> 2] | 0) + 1 | 0;
         continue label$38;
        };
       }
      }
     }
     label$41 : {
      label$42 : {
       if (!((HEAP32[($18_1 + 164 | 0) >> 2] | 0 | 0) != (2 | 0) & 1 | 0)) {
        break label$42
       }
       label$43 : {
        if (Math_abs(+HEAPF64[($18_1 + 24 | 0) >> 3] - +HEAPF64[($18_1 + 32 | 0) >> 3]) <= Math_abs(+HEAPF64[($18_1 + 32 | 0) >> 3]) & 1 | 0) {
         break label$43
        }
        if (!(+HEAPF64[($18_1 + 32 | 0) >> 3] <= +HEAPF64[(HEAP32[($18_1 + 12 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
         break label$42
        }
       }
       if (!(+HEAPF64[((HEAP32[($18_1 + 136 | 0) >> 2] | 0) + 48 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
        break label$42
       }
       if (!(+HEAPF64[($18_1 + 96 | 0) >> 3] <= .99 * +HEAPF64[($18_1 + 168 | 0) >> 3] & 1 | 0)) {
        break label$42
       }
       HEAP32[($18_1 + 120 | 0) >> 2] = 3;
       HEAPF64[(HEAP32[($18_1 + 128 | 0) >> 2] | 0) >> 3] = +HEAPF64[($18_1 + 40 | 0) >> 3];
       HEAP32[($18_1 + 116 | 0) >> 2] = 0;
       label$44 : {
        label$45 : while (1) {
         if (!((HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$44
         }
         HEAPF64[((HEAP32[($18_1 + 132 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         HEAP32[($18_1 + 116 | 0) >> 2] = (HEAP32[($18_1 + 116 | 0) >> 2] | 0) + 1 | 0;
         continue label$45;
        };
       }
       label$46 : {
        label$47 : {
         if (!(+HEAPF64[($18_1 + 168 | 0) >> 3] > 2.0 * +HEAPF64[($18_1 + 96 | 0) >> 3] & 1 | 0)) {
          break label$47
         }
         HEAPF64[($18_1 + 96 | 0) >> 3] = 2.0 * +HEAPF64[($18_1 + 96 | 0) >> 3];
         break label$46;
        }
        HEAPF64[($18_1 + 96 | 0) >> 3] = +HEAPF64[($18_1 + 168 | 0) >> 3];
       }
       break label$41;
      }
      HEAP32[($18_1 + 120 | 0) >> 2] = 0;
      label$48 : {
       label$49 : {
        if (!(+HEAPF64[($18_1 + 32 | 0) >> 3] >= .1 * +HEAPF64[($18_1 + 24 | 0) >> 3] & 1 | 0)) {
         break label$49
        }
        HEAPF64[($18_1 + 96 | 0) >> 3] = +HEAPF64[($18_1 + 96 | 0) >> 3] / 2.0;
        break label$48;
       }
       label$50 : {
        if (!(+HEAPF64[($18_1 + 32 | 0) >> 3] <= .75 * +HEAPF64[($18_1 + 24 | 0) >> 3] & 1 | 0)) {
         break label$50
        }
        label$51 : {
         label$52 : {
          if (!(+HEAPF64[($18_1 + 168 | 0) >> 3] > 2.0 * +HEAPF64[($18_1 + 96 | 0) >> 3] & 1 | 0)) {
           break label$52
          }
          HEAPF64[($18_1 + 96 | 0) >> 3] = 2.0 * +HEAPF64[($18_1 + 96 | 0) >> 3];
          break label$51;
         }
         HEAPF64[($18_1 + 96 | 0) >> 3] = +HEAPF64[($18_1 + 168 | 0) >> 3];
        }
       }
      }
     }
    }
   }
   HEAPF64[(HEAP32[($18_1 + 136 | 0) >> 2] | 0) >> 3] = +HEAPF64[($18_1 + 96 | 0) >> 3];
   $863(HEAP32[($18_1 + 8 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($18_1 + 12 | 0) >> 2] | 0 | 0);
   HEAP32[($18_1 + 204 | 0) >> 2] = HEAP32[($18_1 + 120 | 0) >> 2] | 0;
  }
  $425_1 = HEAP32[($18_1 + 204 | 0) >> 2] | 0;
  global$0 = $18_1 + 208 | 0;
  return $425_1 | 0;
 }
 
 function $151($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  $6_1 = +$6_1;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = +$10_1;
  $11_1 = +$11_1;
  $12_1 = +$12_1;
  $13_1 = $13_1 | 0;
  var $16_1 = 0, $75_1 = 0, $289_1 = 0, $476_1 = 0, $497_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $16_1 = global$0 - 240 | 0;
  global$0 = $16_1;
  HEAP32[($16_1 + 236 | 0) >> 2] = $0_1;
  HEAP32[($16_1 + 232 | 0) >> 2] = $1_1;
  HEAP32[($16_1 + 228 | 0) >> 2] = $2_1;
  HEAP32[($16_1 + 224 | 0) >> 2] = $3_1;
  HEAP32[($16_1 + 220 | 0) >> 2] = $4_1;
  HEAPF64[($16_1 + 208 | 0) >> 3] = $5_1;
  HEAPF64[($16_1 + 200 | 0) >> 3] = $6_1;
  HEAP32[($16_1 + 196 | 0) >> 2] = $7_1;
  HEAP32[($16_1 + 192 | 0) >> 2] = $8_1;
  HEAP32[($16_1 + 188 | 0) >> 2] = $9_1;
  HEAPF64[($16_1 + 176 | 0) >> 3] = $10_1;
  HEAPF64[($16_1 + 168 | 0) >> 3] = $11_1;
  HEAPF64[($16_1 + 160 | 0) >> 3] = $12_1;
  HEAP32[($16_1 + 156 | 0) >> 2] = $13_1;
  (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $862((HEAP32[($16_1 + 224 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $862((HEAP32[($16_1 + 224 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $862((HEAP32[($16_1 + 224 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $862((HEAP32[($16_1 + 224 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($16_1 + 224 | 0) >> 2] | 0) << 3 | 0, HEAP32[($16_1 + 224 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($16_1 + 224 | 0) >> 2] | 0) << 3 | 0, HEAP32[($16_1 + 224 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $862(64 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($16_1 + 152 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($16_1 + 188 | 0) >> 2] | 0) >> 2] = 0;
  HEAP32[($16_1 + 132 | 0) >> 2] = HEAP32[($16_1 + 192 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $16_1, wasm2js_f64$0 = +$734(+(+HEAPF64[($16_1 + 176 | 0) >> 3]), +(.3333333333333333))), HEAPF64[(wasm2js_i32$0 + 88 | 0) >> 3] = wasm2js_f64$0;
  HEAPF64[($16_1 + 96 | 0) >> 3] = Math_sqrt(+HEAPF64[($16_1 + 176 | 0) >> 3]);
  HEAP32[($16_1 + 144 | 0) >> 2] = 0;
  HEAP32[($16_1 + 140 | 0) >> 2] = 0;
  label$1 : {
   if (!(+HEAPF64[($16_1 + 200 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($16_1 + 200 | 0) >> 3] = -1.0;
  }
  HEAPF64[(HEAP32[($16_1 + 12 | 0) >> 2] | 0) >> 3] = +HEAPF64[($16_1 + 200 | 0) >> 3];
  HEAP32[($16_1 + 136 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($16_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $75_1 = (HEAP32[($16_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$75_1 >> 3] = +HEAPF64[$75_1 >> 3] * +HEAPF64[((HEAP32[($16_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($16_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 / +HEAPF64[((HEAP32[($16_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($16_1 + 136 | 0) >> 2] = (HEAP32[($16_1 + 136 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  (wasm2js_i32$0 = $16_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($16_1 + 236 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($16_1 + 228 | 0) >> 2] | 0, HEAP32[($16_1 + 224 | 0) >> 2] | 0, HEAP32[((HEAP32[($16_1 + 236 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 80 | 0) >> 3] = wasm2js_f64$0;
  label$4 : {
   label$5 : {
    if (+HEAPF64[($16_1 + 80 | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
     break label$5
    }
    if (!(+HEAPF64[($16_1 + 80 | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
     break label$4
    }
   }
   $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
   HEAP32[($16_1 + 152 | 0) >> 2] = 15;
  }
  label$6 : {
   if (!(+HEAPF64[($16_1 + 80 | 0) >> 3] != +HEAPF64[($16_1 + 80 | 0) >> 3] & 1 | 0)) {
    break label$6
   }
   $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
   HEAP32[($16_1 + 152 | 0) >> 2] = 15;
  }
  (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $80(HEAP32[($16_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 220 | 0) >> 2] | 0 | 0, +(+HEAPF64[($16_1 + 96 | 0) >> 3]), HEAP32[($16_1 + 36 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 144 | 0) >> 2] = wasm2js_i32$1;
  label$7 : {
   if (!((HEAP32[($16_1 + 144 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
    break label$7
   }
   HEAP32[($16_1 + 152 | 0) >> 2] = 15;
  }
  HEAP32[($16_1 + 124 | 0) >> 2] = 1;
  HEAPF64[($16_1 + 48 | 0) >> 3] = 1.0e3;
  HEAPF64[($16_1 + 104 | 0) >> 3] = +(0 | 0);
  HEAPF64[($16_1 + 112 | 0) >> 3] = +(0 | 0);
  HEAP32[($16_1 + 136 | 0) >> 2] = 0;
  label$8 : {
   label$9 : while (1) {
    if (!((HEAP32[($16_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAPF64[($16_1 + 112 | 0) >> 3] = +HEAPF64[($16_1 + 112 | 0) >> 3] + +HEAPF64[((HEAP32[($16_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($16_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[($16_1 + 104 | 0) >> 3] = +HEAPF64[($16_1 + 104 | 0) >> 3] + +HEAPF64[((HEAP32[($16_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($16_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($16_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($16_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($16_1 + 136 | 0) >> 2] = (HEAP32[($16_1 + 136 | 0) >> 2] | 0) + 1 | 0;
    continue label$9;
   };
  }
  HEAPF64[($16_1 + 112 | 0) >> 3] = Math_sqrt(+HEAPF64[($16_1 + 112 | 0) >> 3]);
  HEAPF64[($16_1 + 104 | 0) >> 3] = Math_sqrt(+HEAPF64[($16_1 + 104 | 0) >> 3]);
  label$10 : {
   label$11 : {
    if (!(+HEAPF64[($16_1 + 112 | 0) >> 3] > +HEAPF64[($16_1 + 104 | 0) >> 3] & 1 | 0)) {
     break label$11
    }
    HEAPF64[($16_1 + 48 | 0) >> 3] = +HEAPF64[($16_1 + 48 | 0) >> 3] * +HEAPF64[($16_1 + 112 | 0) >> 3];
    break label$10;
   }
   HEAPF64[($16_1 + 48 | 0) >> 3] = +HEAPF64[($16_1 + 48 | 0) >> 3] * +HEAPF64[($16_1 + 104 | 0) >> 3];
  }
  label$12 : {
   label$13 : {
    if (!(Math_abs(+HEAPF64[($16_1 + 80 | 0) >> 3]) > Math_abs(+HEAPF64[($16_1 + 208 | 0) >> 3]) & 1 | 0)) {
     break label$13
    }
    HEAPF64[($16_1 + 64 | 0) >> 3] = Math_abs(+HEAPF64[($16_1 + 80 | 0) >> 3]);
    break label$12;
   }
   HEAPF64[($16_1 + 64 | 0) >> 3] = Math_abs(+HEAPF64[($16_1 + 208 | 0) >> 3]);
  }
  HEAP32[($16_1 + 136 | 0) >> 2] = 0;
  label$14 : {
   label$15 : while (1) {
    if (!((HEAP32[($16_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$14
    }
    label$16 : {
     label$17 : {
      if (!(Math_abs(+HEAPF64[((HEAP32[($16_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) > 1.0 / Math_abs(+HEAPF64[((HEAP32[($16_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
       break label$17
      }
      HEAPF64[($16_1 + 72 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($16_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      break label$16;
     }
     HEAPF64[($16_1 + 72 | 0) >> 3] = 1.0 / Math_abs(+HEAPF64[((HEAP32[($16_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
    }
    HEAPF64[((HEAP32[($16_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($16_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) * +HEAPF64[($16_1 + 72 | 0) >> 3] / +HEAPF64[($16_1 + 64 | 0) >> 3];
    HEAP32[($16_1 + 136 | 0) >> 2] = (HEAP32[($16_1 + 136 | 0) >> 2] | 0) + 1 | 0;
    continue label$15;
   };
  }
  (wasm2js_i32$0 = $16_1, wasm2js_f64$0 = +$100(HEAP32[($16_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 56 | 0) >> 3] = wasm2js_f64$0;
  label$18 : {
   if (!(+HEAPF64[($16_1 + 56 | 0) >> 3] <= +HEAPF64[($16_1 + 168 | 0) >> 3] * .001 & 1 | 0)) {
    break label$18
   }
   HEAP32[($16_1 + 152 | 0) >> 2] = 1;
   HEAP32[($16_1 + 136 | 0) >> 2] = 0;
   label$19 : {
    label$20 : while (1) {
     if (!((HEAP32[($16_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$19
     }
     HEAPF64[((HEAP32[($16_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($16_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($16_1 + 136 | 0) >> 2] = (HEAP32[($16_1 + 136 | 0) >> 2] | 0) + 1 | 0;
     continue label$20;
    };
   }
  }
  (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $144(HEAP32[($16_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 220 | 0) >> 2] | 0 | 0, +(+HEAPF64[($16_1 + 176 | 0) >> 3]), +(+HEAPF64[($16_1 + 96 | 0) >> 3]), HEAP32[($16_1 + 32 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 140 | 0) >> 2] = wasm2js_i32$1;
  label$21 : {
   if (!((HEAP32[($16_1 + 140 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
    break label$21
   }
   HEAP32[($16_1 + 152 | 0) >> 2] = 15;
  }
  HEAP32[($16_1 + 136 | 0) >> 2] = 0;
  label$22 : {
   label$23 : while (1) {
    if (!((HEAP32[($16_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$22
    }
    HEAPF64[((HEAP32[($16_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($16_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($16_1 + 136 | 0) >> 2] = (HEAP32[($16_1 + 136 | 0) >> 2] | 0) + 1 | 0;
    continue label$23;
   };
  }
  label$24 : while (1) {
   $289_1 = 0;
   label$25 : {
    if (HEAP32[($16_1 + 152 | 0) >> 2] | 0) {
     break label$25
    }
    $289_1 = (HEAP32[(HEAP32[($16_1 + 188 | 0) >> 2] | 0) >> 2] | 0 | 0) < (HEAP32[($16_1 + 132 | 0) >> 2] | 0 | 0);
   }
   label$26 : {
    if (!($289_1 & 1 | 0)) {
     break label$26
    }
    HEAP32[(HEAP32[($16_1 + 188 | 0) >> 2] | 0) >> 2] = (HEAP32[(HEAP32[($16_1 + 188 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0;
    +$139(HEAP32[($16_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 220 | 0) >> 2] | 0 | 0, +(+HEAPF64[($16_1 + 176 | 0) >> 3]), HEAP32[($16_1 + 20 | 0) >> 2] | 0 | 0);
    $110(HEAP32[($16_1 + 36 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0, +(-1.0));
    $140(HEAP32[($16_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 16 | 0) >> 2] | 0 | 0);
    $110(HEAP32[($16_1 + 36 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0, +(-1.0));
    HEAP32[($16_1 + 148 | 0) >> 2] = HEAP32[(HEAP32[($16_1 + 188 | 0) >> 2] | 0) >> 2] | 0;
    label$27 : {
     label$28 : {
      if (HEAP32[($16_1 + 196 | 0) >> 2] | 0) {
       break label$28
      }
      (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $148(HEAP32[($16_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 220 | 0) >> 2] | 0 | 0, +(+HEAPF64[($16_1 + 48 | 0) >> 3]), HEAP32[($16_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 32 | 0) >> 2] | 0 | 0, +(+HEAPF64[($16_1 + 160 | 0) >> 3]), HEAP32[($16_1 + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[($16_1 + 176 | 0) >> 3]), HEAP32[($16_1 + 156 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 128 | 0) >> 2] = wasm2js_i32$1;
      break label$27;
     }
     label$29 : {
      label$30 : {
       if (!((HEAP32[($16_1 + 196 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$30
       }
       (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $152(HEAP32[($16_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 220 | 0) >> 2] | 0 | 0, +(+HEAPF64[($16_1 + 48 | 0) >> 3]), HEAP32[($16_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 32 | 0) >> 2] | 0 | 0, +(+HEAPF64[($16_1 + 160 | 0) >> 3]), HEAP32[($16_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 156 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 128 | 0) >> 2] = wasm2js_i32$1;
       break label$29;
      }
      $875(global$3 + 4760 | 0 | 0, 0 | 0) | 0;
      $875(global$3 + 4874 | 0 | 0, 0 | 0) | 0;
      $875(global$3 + 4944 | 0 | 0, 0 | 0) | 0;
      fimport$0(1 | 0);
      abort();
     }
    }
    (wasm2js_i32$0 = $16_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($16_1 + 236 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($16_1 + 156 | 0) >> 2] | 0, HEAP32[($16_1 + 224 | 0) >> 2] | 0, HEAP32[((HEAP32[($16_1 + 236 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
    label$31 : {
     label$32 : {
      if (+HEAPF64[($16_1 + 40 | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
       break label$32
      }
      if (!(+HEAPF64[($16_1 + 40 | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
       break label$31
      }
     }
     $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
     HEAP32[($16_1 + 152 | 0) >> 2] = 15;
     break label$26;
    }
    label$33 : {
     if (!(+HEAPF64[($16_1 + 40 | 0) >> 3] != +HEAPF64[($16_1 + 40 | 0) >> 3] & 1 | 0)) {
      break label$33
     }
     $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
     HEAP32[($16_1 + 152 | 0) >> 2] = 15;
     break label$26;
    }
    (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $80(HEAP32[($16_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 220 | 0) >> 2] | 0 | 0, +(+HEAPF64[($16_1 + 96 | 0) >> 3]), HEAP32[($16_1 + 36 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 144 | 0) >> 2] = wasm2js_i32$1;
    label$34 : {
     if (!((HEAP32[($16_1 + 144 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
      break label$34
     }
     HEAP32[($16_1 + 152 | 0) >> 2] = 15;
     break label$26;
    }
    (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $146(+(+HEAPF64[($16_1 + 40 | 0) >> 3]), HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 220 | 0) >> 2] | 0 | 0, +(+HEAPF64[($16_1 + 208 | 0) >> 3]), +(+HEAPF64[($16_1 + 168 | 0) >> 3]), +(+HEAPF64[($16_1 + 160 | 0) >> 3]), HEAP32[($16_1 + 128 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 152 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $144(HEAP32[($16_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 220 | 0) >> 2] | 0 | 0, +(+HEAPF64[($16_1 + 176 | 0) >> 3]), +(+HEAPF64[($16_1 + 96 | 0) >> 3]), HEAP32[($16_1 + 32 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 140 | 0) >> 2] = wasm2js_i32$1;
    label$35 : {
     if (!((HEAP32[($16_1 + 140 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
      break label$35
     }
     HEAP32[($16_1 + 152 | 0) >> 2] = 15;
    }
    HEAP32[($16_1 + 136 | 0) >> 2] = 0;
    label$36 : {
     label$37 : while (1) {
      if (!((HEAP32[($16_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$36
      }
      HEAPF64[((HEAP32[($16_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($16_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($16_1 + 136 | 0) >> 2] = (HEAP32[($16_1 + 136 | 0) >> 2] | 0) + 1 | 0;
      continue label$37;
     };
    }
    continue label$24;
   }
   break label$24;
  };
  label$38 : {
   if (HEAP32[($16_1 + 152 | 0) >> 2] | 0) {
    break label$38
   }
   if (!((HEAP32[(HEAP32[($16_1 + 188 | 0) >> 2] | 0) >> 2] | 0 | 0) >= (HEAP32[($16_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$38
   }
   HEAP32[($16_1 + 152 | 0) >> 2] = 4;
  }
  HEAP32[($16_1 + 136 | 0) >> 2] = 0;
  label$39 : {
   label$40 : while (1) {
    if (!((HEAP32[($16_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($16_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$39
    }
    $476_1 = (HEAP32[($16_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$476_1 >> 3] = +HEAPF64[$476_1 >> 3] * +HEAPF64[((HEAP32[($16_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($16_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 / +HEAPF64[((HEAP32[($16_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($16_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($16_1 + 136 | 0) >> 2] = (HEAP32[($16_1 + 136 | 0) >> 2] | 0) + 1 | 0;
    continue label$40;
   };
  }
  $863(HEAP32[($16_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($16_1 + 36 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($16_1 + 32 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($16_1 + 28 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($16_1 + 24 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($16_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($16_1 + 16 | 0) >> 2] | 0 | 0);
  $497_1 = HEAP32[($16_1 + 152 | 0) >> 2] | 0;
  global$0 = $16_1 + 240 | 0;
  return $497_1 | 0;
 }
 
 function $152($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = +$6_1;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = +$10_1;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  var $15_1 = 0, $80_1 = 0, $121_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $15_1 = global$0 - 128 | 0;
  global$0 = $15_1;
  HEAP32[($15_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($15_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($15_1 + 116 | 0) >> 2] = $2_1;
  HEAP32[($15_1 + 112 | 0) >> 2] = $3_1;
  HEAP32[($15_1 + 108 | 0) >> 2] = $4_1;
  HEAP32[($15_1 + 104 | 0) >> 2] = $5_1;
  HEAPF64[($15_1 + 96 | 0) >> 3] = $6_1;
  HEAP32[($15_1 + 92 | 0) >> 2] = $7_1;
  HEAP32[($15_1 + 88 | 0) >> 2] = $8_1;
  HEAP32[($15_1 + 84 | 0) >> 2] = $9_1;
  HEAPF64[($15_1 + 72 | 0) >> 3] = $10_1;
  HEAP32[($15_1 + 68 | 0) >> 2] = $11_1;
  HEAP32[($15_1 + 64 | 0) >> 2] = $12_1;
  HEAP32[($15_1 + 60 | 0) >> 2] = 4;
  HEAPF64[($15_1 + 40 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($15_1 + 68 | 0) >> 2] | 0) + 56 | 0) >> 3] = 1.0;
  HEAP32[($15_1 + 52 | 0) >> 2] = 1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 108 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 108 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 108 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 108 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 108 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($15_1 + 56 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($15_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($15_1 + 40 | 0) >> 3] = +HEAPF64[($15_1 + 40 | 0) >> 3] + +HEAPF64[((HEAP32[($15_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($15_1 + 56 | 0) >> 2] = (HEAP32[($15_1 + 56 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[($15_1 + 40 | 0) >> 3] = Math_sqrt(+HEAPF64[($15_1 + 40 | 0) >> 3]);
  HEAPF64[($15_1 + 32 | 0) >> 3] = +(0 | 0);
  label$3 : while (1) {
   $80_1 = 0;
   label$4 : {
    if (!((HEAP32[($15_1 + 60 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
     break label$4
    }
    $80_1 = (HEAP32[($15_1 + 60 | 0) >> 2] | 0 | 0) != (15 | 0);
   }
   label$5 : {
    if (!($80_1 & 1 | 0)) {
     break label$5
    }
    $153(HEAP32[($15_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 104 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 96 | 0) >> 3]), HEAP32[($15_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 84 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 40 | 0) >> 3]), HEAP32[($15_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 24 | 0) >> 2] | 0 | 0);
    (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $150(HEAP32[($15_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 104 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 96 | 0) >> 3]), HEAP32[($15_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 84 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 72 | 0) >> 3]), HEAP32[($15_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 20 | 0) >> 2] | 0 | 0, $15_1 + 32 | 0 | 0, HEAP32[($15_1 + 64 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
    continue label$3;
   }
   break label$3;
  };
  $863(HEAP32[($15_1 + 28 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 24 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 12 | 0) >> 2] | 0 | 0);
  $121_1 = HEAP32[($15_1 + 60 | 0) >> 2] | 0;
  global$0 = $15_1 + 128 | 0;
  return $121_1 | 0;
 }
 
 function $153($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = +$7_1;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $14_1 = 0, $167_1 = 0, $263_1 = 0, $268_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $14_1 = global$0 - 144 | 0;
  global$0 = $14_1;
  HEAP32[($14_1 + 140 | 0) >> 2] = $0_1;
  HEAP32[($14_1 + 136 | 0) >> 2] = $1_1;
  HEAP32[($14_1 + 132 | 0) >> 2] = $2_1;
  HEAP32[($14_1 + 128 | 0) >> 2] = $3_1;
  HEAPF64[($14_1 + 120 | 0) >> 3] = $4_1;
  HEAP32[($14_1 + 116 | 0) >> 2] = $5_1;
  HEAP32[($14_1 + 112 | 0) >> 2] = $6_1;
  HEAPF64[($14_1 + 104 | 0) >> 3] = $7_1;
  HEAP32[($14_1 + 100 | 0) >> 2] = $8_1;
  HEAP32[($14_1 + 96 | 0) >> 2] = $9_1;
  HEAP32[($14_1 + 92 | 0) >> 2] = $10_1;
  HEAP32[($14_1 + 88 | 0) >> 2] = $11_1;
  HEAPF64[($14_1 + 40 | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 100 | 0) >> 2] | 0) >> 3];
  HEAPF64[($14_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 100 | 0) >> 2] | 0) + 8 | 0) >> 3];
  HEAPF64[($14_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 100 | 0) >> 2] | 0) + 16 | 0) >> 3];
  (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862((HEAP32[($14_1 + 132 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862(8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862(8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $862(8 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($14_1 + 104 | 0) >> 3] <= +HEAPF64[($14_1 + 40 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    HEAPF64[((HEAP32[($14_1 + 100 | 0) >> 2] | 0) + 48 | 0) >> 3] = 1.0;
    HEAP32[($14_1 + 84 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($14_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[((HEAP32[($14_1 + 88 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($14_1 + 84 | 0) >> 2] = (HEAP32[($14_1 + 84 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAPF64[($14_1 + 40 | 0) >> 3] = +HEAPF64[($14_1 + 104 | 0) >> 3];
    break label$1;
   }
   HEAPF64[((HEAP32[($14_1 + 100 | 0) >> 2] | 0) + 48 | 0) >> 3] = +(0 | 0);
   label$5 : {
    if (!(+HEAPF64[((HEAP32[($14_1 + 100 | 0) >> 2] | 0) + 56 | 0) >> 3] == 1.0 & 1 | 0)) {
     break label$5
    }
    HEAPF64[((HEAP32[($14_1 + 100 | 0) >> 2] | 0) + 56 | 0) >> 3] = +(0 | 0);
    HEAP32[($14_1 + 84 | 0) >> 2] = 0;
    label$6 : {
     label$7 : while (1) {
      if (!((HEAP32[($14_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAPF64[((HEAP32[($14_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[((HEAP32[($14_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($14_1 + 84 | 0) >> 2] = (HEAP32[($14_1 + 84 | 0) >> 2] | 0) + 1 | 0;
      continue label$7;
     };
    }
    (wasm2js_i32$0 = $14_1, wasm2js_f64$0 = +$95(HEAP32[($14_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 72 | 0) >> 3] = wasm2js_f64$0;
    HEAPF64[($14_1 + 56 | 0) >> 3] = +HEAPF64[($14_1 + 72 | 0) >> 3] * +HEAPF64[($14_1 + 72 | 0) >> 3];
    HEAPF64[($14_1 + 48 | 0) >> 3] = +(0 | 0);
    HEAP32[($14_1 + 84 | 0) >> 2] = 0;
    label$8 : {
     label$9 : while (1) {
      if (!((HEAP32[($14_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$8
      }
      HEAPF64[($14_1 + 64 | 0) >> 3] = +(0 | 0);
      HEAP32[($14_1 + 80 | 0) >> 2] = HEAP32[($14_1 + 84 | 0) >> 2] | 0;
      label$10 : {
       label$11 : while (1) {
        if (!((HEAP32[($14_1 + 80 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$10
        }
        HEAPF64[($14_1 + 64 | 0) >> 3] = +HEAPF64[($14_1 + 64 | 0) >> 3] + +HEAPF64[((HEAP32[($14_1 + 116 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($14_1 + 80 | 0) >> 2] | 0, HEAP32[($14_1 + 132 | 0) >> 2] | 0) + (HEAP32[($14_1 + 84 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / (+HEAPF64[((HEAP32[($14_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
        HEAP32[($14_1 + 80 | 0) >> 2] = (HEAP32[($14_1 + 80 | 0) >> 2] | 0) + 1 | 0;
        continue label$11;
       };
      }
      HEAPF64[($14_1 + 48 | 0) >> 3] = +HEAPF64[($14_1 + 48 | 0) >> 3] + +HEAPF64[($14_1 + 64 | 0) >> 3] * +HEAPF64[($14_1 + 64 | 0) >> 3];
      HEAP32[($14_1 + 84 | 0) >> 2] = (HEAP32[($14_1 + 84 | 0) >> 2] | 0) + 1 | 0;
      continue label$9;
     };
    }
    HEAPF64[($14_1 + 72 | 0) >> 3] = -+HEAPF64[($14_1 + 56 | 0) >> 3] / +HEAPF64[($14_1 + 48 | 0) >> 3];
    HEAP32[($14_1 + 84 | 0) >> 2] = 0;
    label$12 : {
     label$13 : while (1) {
      if (!((HEAP32[($14_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$12
      }
      HEAPF64[((HEAP32[($14_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 72 | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[((HEAP32[($14_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($14_1 + 84 | 0) >> 2] = (HEAP32[($14_1 + 84 | 0) >> 2] | 0) + 1 | 0;
      continue label$13;
     };
    }
    HEAPF64[($14_1 + 32 | 0) >> 3] = +HEAPF64[($14_1 + 56 | 0) >> 3] * Math_sqrt(+HEAPF64[($14_1 + 56 | 0) >> 3]) / +HEAPF64[($14_1 + 48 | 0) >> 3];
    $167_1 = 1;
    $119(HEAP32[($14_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 8 | 0) >> 2] | 0 | 0, $167_1 | 0, HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0, $167_1 | 0);
    HEAPF64[($14_1 + 24 | 0) >> 3] = .2 + .8 * +HEAPF64[($14_1 + 56 | 0) >> 3] * +HEAPF64[($14_1 + 56 | 0) >> 3] / (+HEAPF64[($14_1 + 48 | 0) >> 3] * Math_abs(+HEAPF64[(HEAP32[($14_1 + 8 | 0) >> 2] | 0) >> 3]));
    HEAP32[($14_1 + 84 | 0) >> 2] = 0;
    label$14 : {
     label$15 : while (1) {
      if (!((HEAP32[($14_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$14
      }
      HEAPF64[((HEAP32[($14_1 + 92 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 24 | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($14_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($14_1 + 84 | 0) >> 2] = (HEAP32[($14_1 + 84 | 0) >> 2] | 0) + 1 | 0;
      continue label$15;
     };
    }
    label$16 : {
     if (!(+HEAPF64[($14_1 + 40 | 0) >> 3] == -1.0 & 1 | 0)) {
      break label$16
     }
     label$17 : {
      label$18 : {
       if (!(+HEAPF64[($14_1 + 32 | 0) >> 3] < +HEAPF64[($14_1 + 120 | 0) >> 3] & 1 | 0)) {
        break label$18
       }
       HEAPF64[($14_1 + 40 | 0) >> 3] = +HEAPF64[($14_1 + 32 | 0) >> 3];
       break label$17;
      }
      HEAPF64[($14_1 + 40 | 0) >> 3] = +HEAPF64[($14_1 + 120 | 0) >> 3];
     }
    }
   }
   label$19 : {
    label$20 : {
     if (!(+HEAPF64[($14_1 + 24 | 0) >> 3] * +HEAPF64[($14_1 + 104 | 0) >> 3] <= +HEAPF64[($14_1 + 40 | 0) >> 3] & 1 | 0)) {
      break label$20
     }
     HEAPF64[($14_1 + 72 | 0) >> 3] = +HEAPF64[($14_1 + 40 | 0) >> 3] / +HEAPF64[($14_1 + 104 | 0) >> 3];
     HEAP32[($14_1 + 84 | 0) >> 2] = 0;
     label$21 : {
      label$22 : while (1) {
       if (!((HEAP32[($14_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$21
       }
       HEAPF64[((HEAP32[($14_1 + 88 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 72 | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($14_1 + 84 | 0) >> 2] = (HEAP32[($14_1 + 84 | 0) >> 2] | 0) + 1 | 0;
       continue label$22;
      };
     }
     break label$19;
    }
    label$23 : {
     label$24 : {
      if (!(+HEAPF64[($14_1 + 32 | 0) >> 3] >= +HEAPF64[($14_1 + 40 | 0) >> 3] & 1 | 0)) {
       break label$24
      }
      HEAPF64[($14_1 + 72 | 0) >> 3] = +HEAPF64[($14_1 + 40 | 0) >> 3] / +HEAPF64[($14_1 + 32 | 0) >> 3];
      HEAP32[($14_1 + 84 | 0) >> 2] = 0;
      label$25 : {
       label$26 : while (1) {
        if (!((HEAP32[($14_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$25
        }
        HEAPF64[((HEAP32[($14_1 + 88 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 72 | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[((HEAP32[($14_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($14_1 + 84 | 0) >> 2] = (HEAP32[($14_1 + 84 | 0) >> 2] | 0) + 1 | 0;
        continue label$26;
       };
      }
      break label$23;
     }
     $263_1 = 1;
     $119(HEAP32[($14_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 4 | 0) >> 2] | 0 | 0, $263_1 | 0, HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0, $263_1 | 0);
     $268_1 = 1;
     $119(HEAP32[($14_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($14_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[$14_1 >> 2] | 0 | 0, $268_1 | 0, HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0, $268_1 | 0);
     HEAPF64[($14_1 + 16 | 0) >> 3] = (-+HEAPF64[(HEAP32[($14_1 + 4 | 0) >> 2] | 0) >> 3] + Math_sqrt(+HEAPF64[(HEAP32[($14_1 + 4 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($14_1 + 4 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[$14_1 >> 2] | 0) >> 3] * (+HEAPF64[($14_1 + 32 | 0) >> 3] * +HEAPF64[($14_1 + 32 | 0) >> 3] - +HEAPF64[($14_1 + 40 | 0) >> 3] * +HEAPF64[($14_1 + 40 | 0) >> 3]))) / +HEAPF64[(HEAP32[$14_1 >> 2] | 0) >> 3];
     HEAP32[($14_1 + 84 | 0) >> 2] = 0;
     label$27 : {
      label$28 : while (1) {
       if (!((HEAP32[($14_1 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($14_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$27
       }
       HEAPF64[((HEAP32[($14_1 + 88 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[((HEAP32[($14_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[($14_1 + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 92 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[((HEAP32[($14_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($14_1 + 84 | 0) >> 2] = (HEAP32[($14_1 + 84 | 0) >> 2] | 0) + 1 | 0;
       continue label$28;
      };
     }
    }
   }
  }
  HEAPF64[(HEAP32[($14_1 + 100 | 0) >> 2] | 0) >> 3] = +HEAPF64[($14_1 + 40 | 0) >> 3];
  HEAPF64[((HEAP32[($14_1 + 100 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($14_1 + 32 | 0) >> 3];
  HEAPF64[((HEAP32[($14_1 + 100 | 0) >> 2] | 0) + 16 | 0) >> 3] = +HEAPF64[($14_1 + 24 | 0) >> 3];
  $863(HEAP32[($14_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($14_1 + 4 | 0) >> 2] | 0 | 0);
  $863(HEAP32[$14_1 >> 2] | 0 | 0);
  $863(HEAP32[($14_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $14_1 + 144 | 0;
  return;
 }
 
 function $154($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $241_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $9_1 = global$0 - 128 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 120 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 116 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 112 | 0) >> 2] = $3_1;
  HEAPF64[($9_1 + 104 | 0) >> 3] = $4_1;
  HEAP32[($9_1 + 100 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 96 | 0) >> 2] = $6_1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 116 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  HEAPF64[($9_1 + 64 | 0) >> 3] = 1.0;
  HEAP32[($9_1 + 84 | 0) >> 2] = Math_imul(HEAP32[($9_1 + 116 | 0) >> 2] | 0, 200);
  HEAP32[($9_1 + 80 | 0) >> 2] = 0;
  HEAPF64[($9_1 + 16 | 0) >> 3] = -1.0;
  (wasm2js_i32$0 = $9_1, wasm2js_f64$0 = +$88()), HEAPF64[(wasm2js_i32$0 + 56 | 0) >> 3] = wasm2js_f64$0;
  HEAP32[($9_1 + 92 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
    HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$3 : {
   label$4 : {
    if (HEAP32[($9_1 + 100 | 0) >> 2] | 0) {
     break label$4
    }
    (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $137(HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[($9_1 + 64 | 0) >> 3]), HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0, $9_1 + 80 | 0 | 0, +(+HEAPF64[($9_1 + 56 | 0) >> 3]), HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
    break label$3;
   }
   label$5 : {
    label$6 : {
     if (!((HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$6
     }
     (wasm2js_i32$0 = $9_1, wasm2js_f64$0 = +$734(+(+HEAPF64[($9_1 + 56 | 0) >> 3]), +(.3333333333333333))), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
     HEAPF64[($9_1 + 40 | 0) >> 3] = +HEAPF64[($9_1 + 48 | 0) >> 3] * +HEAPF64[($9_1 + 48 | 0) >> 3];
     label$7 : {
      if (!((HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0) < (1e3 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[($9_1 + 84 | 0) >> 2] = 1e3;
     }
     (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $147(HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[($9_1 + 64 | 0) >> 3]), +(+HEAPF64[($9_1 + 104 | 0) >> 3]), HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0, $9_1 + 80 | 0 | 0, +(+HEAPF64[($9_1 + 56 | 0) >> 3]), +(+HEAPF64[($9_1 + 48 | 0) >> 3]), +(+HEAPF64[($9_1 + 40 | 0) >> 3]), HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
     break label$5;
    }
    label$8 : {
     label$9 : {
      if (!((HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$9
      }
      (wasm2js_i32$0 = $9_1, wasm2js_f64$0 = +$734(+(+HEAPF64[($9_1 + 56 | 0) >> 3]), +(.3333333333333333))), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
      HEAPF64[($9_1 + 40 | 0) >> 3] = +HEAPF64[($9_1 + 48 | 0) >> 3] * +HEAPF64[($9_1 + 48 | 0) >> 3];
      label$10 : {
       if (!((HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0) < (1e3 | 0) & 1 | 0)) {
        break label$10
       }
       HEAP32[($9_1 + 84 | 0) >> 2] = 1e3;
      }
      (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $151(HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[($9_1 + 64 | 0) >> 3]), +(+HEAPF64[($9_1 + 16 | 0) >> 3]), 0 | 0, HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0, $9_1 + 80 | 0 | 0, +(+HEAPF64[($9_1 + 56 | 0) >> 3]), +(+HEAPF64[($9_1 + 48 | 0) >> 3]), +(+HEAPF64[($9_1 + 40 | 0) >> 3]), HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
      break label$8;
     }
     label$11 : {
      label$12 : {
       if (!((HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
        break label$12
       }
       (wasm2js_i32$0 = $9_1, wasm2js_f64$0 = +$734(+(+HEAPF64[($9_1 + 56 | 0) >> 3]), +(.3333333333333333))), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
       HEAPF64[($9_1 + 40 | 0) >> 3] = +HEAPF64[($9_1 + 48 | 0) >> 3] * +HEAPF64[($9_1 + 48 | 0) >> 3];
       label$13 : {
        if (!((HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0) < (1e3 | 0) & 1 | 0)) {
         break label$13
        }
        HEAP32[($9_1 + 84 | 0) >> 2] = 1e3;
       }
       (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $151(HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[($9_1 + 64 | 0) >> 3]), +(+HEAPF64[($9_1 + 16 | 0) >> 3]), 1 | 0, HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0, $9_1 + 80 | 0 | 0, +(+HEAPF64[($9_1 + 56 | 0) >> 3]), +(+HEAPF64[($9_1 + 48 | 0) >> 3]), +(+HEAPF64[($9_1 + 40 | 0) >> 3]), HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
       break label$11;
      }
      label$14 : {
       label$15 : {
        if (!((HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
         break label$15
        }
        (wasm2js_i32$0 = $9_1, wasm2js_f64$0 = +$734(+(+HEAPF64[($9_1 + 56 | 0) >> 3]), +(.3333333333333333))), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
        HEAPF64[($9_1 + 32 | 0) >> 3] = +HEAPF64[($9_1 + 48 | 0) >> 3] * +HEAPF64[($9_1 + 48 | 0) >> 3];
        HEAPF64[($9_1 + 24 | 0) >> 3] = +HEAPF64[($9_1 + 56 | 0) >> 3];
        label$16 : {
         if (!((HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0) < (1e3 | 0) & 1 | 0)) {
          break label$16
         }
         HEAP32[($9_1 + 84 | 0) >> 2] = 1e3;
        }
        (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $12(HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[($9_1 + 104 | 0) >> 3]), HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0, $9_1 + 80 | 0 | 0, +(+HEAPF64[($9_1 + 56 | 0) >> 3]), +(+HEAPF64[($9_1 + 48 | 0) >> 3]), +(+HEAPF64[($9_1 + 32 | 0) >> 3]), +(+HEAPF64[($9_1 + 24 | 0) >> 3]), HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
        break label$14;
       }
       label$17 : {
        label$18 : {
         if (!((HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) == (5 | 0) & 1 | 0)) {
          break label$18
         }
         (wasm2js_i32$0 = $9_1, wasm2js_f64$0 = +$734(+(+HEAPF64[($9_1 + 56 | 0) >> 3]), +(.3333333333333333))), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
         HEAPF64[($9_1 + 40 | 0) >> 3] = +HEAPF64[($9_1 + 48 | 0) >> 3] * +HEAPF64[($9_1 + 48 | 0) >> 3];
         label$19 : {
          if (!((HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0) < (1e3 | 0) & 1 | 0)) {
           break label$19
          }
          HEAP32[($9_1 + 84 | 0) >> 2] = 1e3;
         }
         (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $202(HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[($9_1 + 64 | 0) >> 3]), +(+HEAPF64[($9_1 + 104 | 0) >> 3]), HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0, $9_1 + 80 | 0 | 0, +(+HEAPF64[($9_1 + 56 | 0) >> 3]), +(+HEAPF64[($9_1 + 48 | 0) >> 3]), +(+HEAPF64[($9_1 + 40 | 0) >> 3]), HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
         break label$17;
        }
        label$20 : {
         label$21 : {
          if (!((HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) == (6 | 0) & 1 | 0)) {
           break label$21
          }
          (wasm2js_i32$0 = $9_1, wasm2js_f64$0 = +$734(+(+HEAPF64[($9_1 + 56 | 0) >> 3]), +(.3333333333333333))), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
          HEAPF64[($9_1 + 32 | 0) >> 3] = +HEAPF64[($9_1 + 48 | 0) >> 3] * +HEAPF64[($9_1 + 48 | 0) >> 3];
          HEAPF64[($9_1 + 24 | 0) >> 3] = +HEAPF64[($9_1 + 56 | 0) >> 3];
          label$22 : {
           if (!((HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0) < (1e3 | 0) & 1 | 0)) {
            break label$22
           }
           HEAP32[($9_1 + 84 | 0) >> 2] = 1e3;
          }
          (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $155(HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 76 | 0) >> 2] = wasm2js_i32$1;
          (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $207(HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[($9_1 + 64 | 0) >> 3]), +(+HEAPF64[($9_1 + 104 | 0) >> 3]), HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0, $9_1 + 80 | 0 | 0, +(+HEAPF64[($9_1 + 56 | 0) >> 3]), +(+HEAPF64[($9_1 + 48 | 0) >> 3]), +(+HEAPF64[($9_1 + 32 | 0) >> 3]), +(+HEAPF64[($9_1 + 24 | 0) >> 3]), HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
          break label$20;
         }
         label$23 : {
          label$24 : {
           if (!((HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
            break label$24
           }
           (wasm2js_i32$0 = $9_1, wasm2js_f64$0 = +$734(+(+HEAPF64[($9_1 + 56 | 0) >> 3]), +(.3333333333333333))), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
           HEAPF64[($9_1 + 32 | 0) >> 3] = +HEAPF64[($9_1 + 48 | 0) >> 3] * +HEAPF64[($9_1 + 48 | 0) >> 3];
           HEAPF64[($9_1 + 24 | 0) >> 3] = +HEAPF64[($9_1 + 56 | 0) >> 3];
           label$25 : {
            if (!((HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0) < (1e3 | 0) & 1 | 0)) {
             break label$25
            }
            HEAP32[($9_1 + 84 | 0) >> 2] = 1e3;
           }
           (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $155(HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 76 | 0) >> 2] = wasm2js_i32$1;
           (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $204(HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[($9_1 + 64 | 0) >> 3]), +(+HEAPF64[($9_1 + 104 | 0) >> 3]), HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0, $9_1 + 80 | 0 | 0, +(+HEAPF64[($9_1 + 56 | 0) >> 3]), +(+HEAPF64[($9_1 + 48 | 0) >> 3]), +(+HEAPF64[($9_1 + 32 | 0) >> 3]), +(+HEAPF64[($9_1 + 24 | 0) >> 3]), HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
           break label$23;
          }
          $875(global$3 + 6390 | 0 | 0, 0 | 0) | 0;
          fimport$0(1 | 0);
          abort();
         }
        }
       }
      }
     }
    }
   }
  }
  $863(HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0);
  $241_1 = HEAP32[($9_1 + 88 | 0) >> 2] | 0;
  global$0 = $9_1 + 128 | 0;
  return $241_1 | 0;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) <= (10 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) > (10 | 0) & 1 | 0)) {
      break label$4
     }
     if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) <= (20 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = 10;
     break label$3;
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) > (20 | 0) & 1 | 0)) {
       break label$6
      }
      if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) <= (200 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($3_1 + 8 | 0) >> 2] = 15;
      break label$5;
     }
     label$7 : {
      if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) > (200 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[($3_1 + 8 | 0) >> 2] = 20;
     }
    }
   }
  }
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $156($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $18_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAPF64[($5_1 + 32 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 24 | 0) >> 3] = $2_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = 1.0e-12;
  (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$88()), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  +$10(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, +(+HEAPF64[($5_1 + 32 | 0) >> 3]), +(+HEAPF64[($5_1 + 24 | 0) >> 3]), +(+HEAPF64[($5_1 + 8 | 0) >> 3]), +(+HEAPF64[$5_1 >> 3]), $5_1 + 16 | 0 | 0);
  $18_1 = +HEAPF64[($5_1 + 16 | 0) >> 3];
  global$0 = $5_1 + 48 | 0;
  return +$18_1;
 }
 
 function $157($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $49_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAPF64[($5_1 + 40 | 0) >> 3] = $0_1;
  HEAPF64[($5_1 + 32 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 24 | 0) >> 3] = $2_1;
  label$1 : {
   if (!(+HEAPF64[($5_1 + 24 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
    break label$1
   }
   $875(global$3 + 2441 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$2 : {
   label$3 : {
    if (+HEAPF64[($5_1 + 40 | 0) >> 3] < +(0 | 0) & 1 | 0) {
     break label$3
    }
    if (!(+HEAPF64[($5_1 + 40 | 0) >> 3] > 1.0 & 1 | 0)) {
     break label$2
    }
   }
   $875(global$3 + 3806 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = Math_sqrt(2.0) * +$71(+(2.0 * +HEAPF64[($5_1 + 40 | 0) >> 3] - 1.0))), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
  HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[($5_1 + 24 | 0) >> 3] + +HEAPF64[($5_1 + 32 | 0) >> 3];
  $49_1 = +HEAPF64[($5_1 + 16 | 0) >> 3];
  global$0 = $5_1 + 48 | 0;
  return +$49_1;
 }
 
 function $158($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $165_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 72 | 0) >> 3] = $0_1;
  HEAP32[($4_1 + 68 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0)) {
    break label$1
   }
   $875(global$3 + 1673 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$2 : {
   label$3 : {
    if (+HEAPF64[($4_1 + 72 | 0) >> 3] < +(0 | 0) & 1 | 0) {
     break label$3
    }
    if (!(+HEAPF64[($4_1 + 72 | 0) >> 3] > 1.0 & 1 | 0)) {
     break label$2
    }
   }
   $875(global$3 + 3806 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$4 : {
   if (!(+HEAPF64[($4_1 + 72 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
    break label$4
   }
   HEAPF64[($4_1 + 56 | 0) >> 3] = -1.79e+308;
  }
  label$5 : {
   if (!(+HEAPF64[($4_1 + 72 | 0) >> 3] == 1.0 & 1 | 0)) {
    break label$5
   }
   HEAPF64[($4_1 + 56 | 0) >> 3] = 1.79e+308;
  }
  label$6 : {
   if (!(+HEAPF64[($4_1 + 72 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
    break label$6
   }
   if (!(+HEAPF64[($4_1 + 72 | 0) >> 3] < 1.0 & 1 | 0)) {
    break label$6
   }
   (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +$157(+(+HEAPF64[($4_1 + 72 | 0) >> 3]), +(+(0 | 0)), +(1.0))), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
   HEAPF64[($4_1 + 40 | 0) >> 3] = +(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = (+$734(+(+HEAPF64[($4_1 + 48 | 0) >> 3]), +(3.0)) + +HEAPF64[($4_1 + 48 | 0) >> 3]) / (4.0 * +HEAPF64[($4_1 + 40 | 0) >> 3])), HEAPF64[(wasm2js_i32$0 + 32 | 0) >> 3] = wasm2js_f64$0;
   (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = (5.0 * +$734(+(+HEAPF64[($4_1 + 48 | 0) >> 3]), +(5.0)) + 16.0 * +$734(+(+HEAPF64[($4_1 + 48 | 0) >> 3]), +(3.0)) + 3.0 * +HEAPF64[($4_1 + 48 | 0) >> 3]) / (96.0 * +$734(+(+HEAPF64[($4_1 + 40 | 0) >> 3]), +(2.0)))), HEAPF64[(wasm2js_i32$0 + 24 | 0) >> 3] = wasm2js_f64$0;
   (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = (3.0 * +$734(+(+HEAPF64[($4_1 + 48 | 0) >> 3]), +(7.0)) + 19.0 * +$734(+(+HEAPF64[($4_1 + 48 | 0) >> 3]), +(5.0)) + 17.0 * +$734(+(+HEAPF64[($4_1 + 48 | 0) >> 3]), +(3.0)) - 15.0 * +HEAPF64[($4_1 + 48 | 0) >> 3]) / (384.0 * +$734(+(+HEAPF64[($4_1 + 40 | 0) >> 3]), +(3.0)))), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
   (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = (79.0 * +$734(+(+HEAPF64[($4_1 + 48 | 0) >> 3]), +(9.0)) + 776.0 * +$734(+(+HEAPF64[($4_1 + 48 | 0) >> 3]), +(7.0)) + 1482.0 * +$734(+(+HEAPF64[($4_1 + 48 | 0) >> 3]), +(5.0)) - 1920.0 * +$734(+(+HEAPF64[($4_1 + 48 | 0) >> 3]), +(3.0)) - 945.0 * +HEAPF64[($4_1 + 48 | 0) >> 3]) / (92160.0 * +$734(+(+HEAPF64[($4_1 + 40 | 0) >> 3]), +(4.0)))), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
   HEAPF64[($4_1 + 56 | 0) >> 3] = +HEAPF64[($4_1 + 48 | 0) >> 3] + +HEAPF64[($4_1 + 32 | 0) >> 3] + +HEAPF64[($4_1 + 24 | 0) >> 3] + +HEAPF64[($4_1 + 16 | 0) >> 3] + +HEAPF64[($4_1 + 8 | 0) >> 3];
  }
  $165_1 = +HEAPF64[($4_1 + 56 | 0) >> 3];
  global$0 = $4_1 + 80 | 0;
  return +$165_1;
 }
 
 function $159($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $126_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 72 | 0) >> 3] = $0_1;
  HEAP32[($4_1 + 68 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0)) {
    break label$1
   }
   $875(global$3 + 1621 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$2 : {
   label$3 : {
    if (+HEAPF64[($4_1 + 72 | 0) >> 3] < +(0 | 0) & 1 | 0) {
     break label$3
    }
    if (!(+HEAPF64[($4_1 + 72 | 0) >> 3] > 1.0 & 1 | 0)) {
     break label$2
    }
   }
   $875(global$3 + 3806 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  HEAPF64[($4_1 + 48 | 0) >> 3] = 1.0 - +HEAPF64[($4_1 + 72 | 0) >> 3];
  label$4 : {
   label$5 : {
    if (!(+HEAPF64[($4_1 + 72 | 0) >> 3] <= +HEAPF64[($4_1 + 48 | 0) >> 3] & 1 | 0)) {
     break label$5
    }
    HEAPF64[($4_1 + 40 | 0) >> 3] = 2.0 * +HEAPF64[($4_1 + 72 | 0) >> 3];
    break label$4;
   }
   HEAPF64[($4_1 + 40 | 0) >> 3] = 2.0 * +HEAPF64[($4_1 + 48 | 0) >> 3];
  }
  label$6 : {
   if (!(+HEAPF64[($4_1 + 72 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
    break label$6
   }
   HEAPF64[($4_1 + 56 | 0) >> 3] = -1.79e+308;
  }
  label$7 : {
   if (!(+HEAPF64[($4_1 + 72 | 0) >> 3] == 1.0 & 1 | 0)) {
    break label$7
   }
   HEAPF64[($4_1 + 56 | 0) >> 3] = 1.79e+308;
  }
  label$8 : {
   if (!(+HEAPF64[($4_1 + 72 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
    break label$8
   }
   if (!(+HEAPF64[($4_1 + 72 | 0) >> 3] < 1.0 & 1 | 0)) {
    break label$8
   }
   if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) <= (1e3 | 0) & 1 | 0)) {
    break label$8
   }
   label$9 : {
    label$10 : {
     if (!(+HEAPF64[($4_1 + 72 | 0) >> 3] < .5 & 1 | 0)) {
      break label$10
     }
     HEAPF64[($4_1 + 8 | 0) >> 3] = -1.0;
     break label$9;
    }
    HEAPF64[($4_1 + 8 | 0) >> 3] = 1.0;
   }
   HEAPF64[($4_1 + 16 | 0) >> 3] = +(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) / 2.0;
   (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +$51(+(+HEAPF64[($4_1 + 40 | 0) >> 3]), +(+HEAPF64[($4_1 + 16 | 0) >> 3]), +(.5))), HEAPF64[(wasm2js_i32$0 + 32 | 0) >> 3] = wasm2js_f64$0;
   HEAPF64[($4_1 + 24 | 0) >> 3] = 1.0 - +HEAPF64[($4_1 + 32 | 0) >> 3];
   HEAPF64[($4_1 + 56 | 0) >> 3] = Math_sqrt(+(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) * +HEAPF64[($4_1 + 24 | 0) >> 3] / +HEAPF64[($4_1 + 32 | 0) >> 3]);
  }
  label$11 : {
   if (!(+HEAPF64[($4_1 + 72 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
    break label$11
   }
   if (!(+HEAPF64[($4_1 + 72 | 0) >> 3] < 1.0 & 1 | 0)) {
    break label$11
   }
   if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) > (1e3 | 0) & 1 | 0)) {
    break label$11
   }
   (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +$158(+(+HEAPF64[($4_1 + 72 | 0) >> 3]), HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 56 | 0) >> 3] = wasm2js_f64$0;
  }
  $126_1 = +HEAPF64[($4_1 + 56 | 0) >> 3];
  global$0 = $4_1 + 80 | 0;
  return +$126_1;
 }
 
 function $160($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $81_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAPF64[($5_1 + 40 | 0) >> 3] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $875(global$3 + 1319 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$3 : {
   if (!(+HEAPF64[($5_1 + 40 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
    break label$3
   }
   $875(global$3 + 1371 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  HEAPF64[($5_1 + 16 | 0) >> 3] = +(HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
  HEAPF64[($5_1 + 8 | 0) >> 3] = +(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
  label$4 : {
   label$5 : {
    if (!(+HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 40 | 0) >> 3] < +HEAPF64[($5_1 + 8 | 0) >> 3] & 1 | 0)) {
     break label$5
    }
    HEAPF64[$5_1 >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 40 | 0) >> 3] / (+HEAPF64[($5_1 + 8 | 0) >> 3] + +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 40 | 0) >> 3]);
    (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$47(+(+HEAPF64[$5_1 >> 3]), +(+HEAPF64[($5_1 + 16 | 0) >> 3] / 2.0), +(+HEAPF64[($5_1 + 8 | 0) >> 3] / 2.0))), HEAPF64[(wasm2js_i32$0 + 24 | 0) >> 3] = wasm2js_f64$0;
    break label$4;
   }
   HEAPF64[$5_1 >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3] / (+HEAPF64[($5_1 + 8 | 0) >> 3] + +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 40 | 0) >> 3]);
   (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$48(+(+HEAPF64[$5_1 >> 3]), +(+HEAPF64[($5_1 + 8 | 0) >> 3] / 2.0), +(+HEAPF64[($5_1 + 16 | 0) >> 3] / 2.0))), HEAPF64[(wasm2js_i32$0 + 24 | 0) >> 3] = wasm2js_f64$0;
  }
  $81_1 = +HEAPF64[($5_1 + 24 | 0) >> 3];
  global$0 = $5_1 + 48 | 0;
  return +$81_1;
 }
 
 function $161($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $75_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAPF64[($5_1 + 40 | 0) >> 3] = $0_1;
  HEAPF64[($5_1 + 32 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 24 | 0) >> 3] = $2_1;
  label$1 : {
   label$2 : {
    if (+HEAPF64[($5_1 + 32 | 0) >> 3] <= +(0 | 0) & 1 | 0) {
     break label$2
    }
    if (!(+HEAPF64[($5_1 + 24 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $875(global$3 + 3865 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3] / +HEAPF64[($5_1 + 24 | 0) >> 3];
  label$3 : {
   label$4 : {
    if (!(+HEAPF64[($5_1 + 8 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
     break label$4
    }
    (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$730(+((+HEAPF64[($5_1 + 32 | 0) >> 3] - 1.0) * +$729(+(+HEAPF64[($5_1 + 8 | 0) >> 3])) - +HEAPF64[($5_1 + 8 | 0) >> 3] - +$41(+(+HEAPF64[($5_1 + 32 | 0) >> 3])))) / +HEAPF64[($5_1 + 24 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
    break label$3;
   }
   label$5 : {
    label$6 : {
     if (!(+HEAPF64[($5_1 + 8 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAPF64[($5_1 + 16 | 0) >> 3] = +(0 | 0);
     break label$5;
    }
    label$7 : {
     label$8 : {
      if (!(+HEAPF64[($5_1 + 8 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
       break label$8
      }
      if (!(+HEAPF64[($5_1 + 32 | 0) >> 3] == 1.0 & 1 | 0)) {
       break label$8
      }
      HEAPF64[($5_1 + 16 | 0) >> 3] = 1.0 / +HEAPF64[($5_1 + 24 | 0) >> 3];
      break label$7;
     }
     $875(global$3 + 2700 | 0 | 0, 0 | 0) | 0;
     fimport$0(1 | 0);
     abort();
    }
   }
  }
  $75_1 = +HEAPF64[($5_1 + 16 | 0) >> 3];
  global$0 = $5_1 + 48 | 0;
  return +$75_1;
 }
 
 function $162($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $39_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAPF64[($5_1 + 40 | 0) >> 3] = $0_1;
  HEAPF64[($5_1 + 32 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 24 | 0) >> 3] = $2_1;
  label$1 : {
   label$2 : {
    if (+HEAPF64[($5_1 + 32 | 0) >> 3] <= +(0 | 0) & 1 | 0) {
     break label$2
    }
    if (!(+HEAPF64[($5_1 + 24 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $875(global$3 + 3865 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$3 : {
   if (!(+HEAPF64[($5_1 + 40 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
    break label$3
   }
   HEAPF64[($5_1 + 40 | 0) >> 3] = +(0 | 0);
  }
  HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3] / +HEAPF64[($5_1 + 24 | 0) >> 3];
  (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$43(+(+HEAPF64[($5_1 + 8 | 0) >> 3]), +(+HEAPF64[($5_1 + 32 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
  $39_1 = +HEAPF64[($5_1 + 16 | 0) >> 3];
  global$0 = $5_1 + 48 | 0;
  return +$39_1;
 }
 
 function $163($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $51_1 = 0, $148_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  HEAPF64[($5_1 + 88 | 0) >> 3] = $0_1;
  HEAPF64[($5_1 + 80 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 72 | 0) >> 3] = $2_1;
  label$1 : {
   label$2 : {
    if (+HEAPF64[($5_1 + 88 | 0) >> 3] < +(0 | 0) & 1 | 0) {
     break label$2
    }
    if (!(+HEAPF64[($5_1 + 88 | 0) >> 3] > 1.0 & 1 | 0)) {
     break label$1
    }
   }
   $875(global$3 + 3806 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$3 : {
   label$4 : {
    if (+HEAPF64[($5_1 + 80 | 0) >> 3] <= +(0 | 0) & 1 | 0) {
     break label$4
    }
    if (!(+HEAPF64[($5_1 + 72 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
     break label$3
    }
   }
   $875(global$3 + 3865 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$5 : {
   if (!(+HEAPF64[($5_1 + 88 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
    break label$5
   }
   HEAPF64[($5_1 + 64 | 0) >> 3] = +(0 | 0);
  }
  label$6 : {
   if (!(+HEAPF64[($5_1 + 88 | 0) >> 3] == 1.0 & 1 | 0)) {
    break label$6
   }
   HEAPF64[($5_1 + 64 | 0) >> 3] = 1.79e+308;
  }
  label$7 : {
   if (!(+HEAPF64[($5_1 + 88 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
    break label$7
   }
   if (!(+HEAPF64[($5_1 + 88 | 0) >> 3] < 1.0 & 1 | 0)) {
    break label$7
   }
   (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$729(+(1.0 + +HEAPF64[($5_1 + 80 | 0) >> 3])) - +$729(+(+HEAPF64[($5_1 + 80 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 24 | 0) >> 3] = wasm2js_f64$0;
   (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$729(+(+HEAPF64[($5_1 + 80 | 0) >> 3])) - .5 * +HEAPF64[($5_1 + 24 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 32 | 0) >> 3] = wasm2js_f64$0;
   (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$730(+(+HEAPF64[($5_1 + 32 | 0) >> 3] - Math_sqrt(2.0 * +HEAPF64[($5_1 + 24 | 0) >> 3]) * +$72(+(2.0 * +HEAPF64[($5_1 + 88 | 0) >> 3]))))), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
   HEAPF64[($5_1 + 40 | 0) >> 3] = 1.0;
   (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$39(+(2.2251e-308))), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   label$8 : while (1) {
    $51_1 = 0;
    label$9 : {
     if (!(Math_abs(+HEAPF64[($5_1 + 40 | 0) >> 3]) > +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 48 | 0) >> 3] & 1 | 0)) {
      break label$9
     }
     $51_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (1e3 | 0);
    }
    label$10 : {
     if (!($51_1 & 1 | 0)) {
      break label$10
     }
     (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = (+$162(+(+HEAPF64[($5_1 + 48 | 0) >> 3]), +(+HEAPF64[($5_1 + 80 | 0) >> 3]), +(1.0)) - +HEAPF64[($5_1 + 88 | 0) >> 3]) / +$50(+(+$161(+(+HEAPF64[($5_1 + 48 | 0) >> 3]), +(+HEAPF64[($5_1 + 80 | 0) >> 3]), +(1.0))), +(2.2251e-308))), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     HEAPF64[($5_1 + 56 | 0) >> 3] = +HEAPF64[($5_1 + 48 | 0) >> 3] - +HEAPF64[($5_1 + 40 | 0) >> 3];
     label$11 : {
      if (!(+HEAPF64[($5_1 + 56 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
       break label$11
      }
      HEAPF64[($5_1 + 56 | 0) >> 3] = +HEAPF64[($5_1 + 48 | 0) >> 3] / 10.0;
      HEAPF64[($5_1 + 40 | 0) >> 3] = +HEAPF64[($5_1 + 48 | 0) >> 3] - +HEAPF64[($5_1 + 56 | 0) >> 3];
     }
     HEAPF64[($5_1 + 48 | 0) >> 3] = +HEAPF64[($5_1 + 56 | 0) >> 3];
     continue label$8;
    }
    break label$8;
   };
   HEAPF64[($5_1 + 64 | 0) >> 3] = +HEAPF64[($5_1 + 48 | 0) >> 3] * +HEAPF64[($5_1 + 72 | 0) >> 3];
  }
  $148_1 = +HEAPF64[($5_1 + 64 | 0) >> 3];
  global$0 = $5_1 + 96 | 0;
  return +$148_1;
 }
 
 function $164($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $43_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAPF64[($4_1 + 24 | 0) >> 3] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0)) {
    break label$1
   }
   $875(global$3 + 1716 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  label$2 : {
   label$3 : {
    if (+HEAPF64[($4_1 + 24 | 0) >> 3] < +(0 | 0) & 1 | 0) {
     break label$3
    }
    if (!(+HEAPF64[($4_1 + 24 | 0) >> 3] > 1.0 & 1 | 0)) {
     break label$2
    }
   }
   $875(global$3 + 3806 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  HEAPF64[$4_1 >> 3] = +(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +$163(+(+HEAPF64[($4_1 + 24 | 0) >> 3]), +(+HEAPF64[$4_1 >> 3] / 2.0), +(2.0))), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
  $43_1 = +HEAPF64[($4_1 + 8 | 0) >> 3];
  global$0 = $4_1 + 32 | 0;
  return +$43_1;
 }
 
 function $165($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $78_1 = 0, $460_1 = 0.0, $481_1 = 0.0, $433_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $7_1 = global$0 - 272 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 264 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 260 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 252 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 248 | 0) >> 2] = $4_1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(800 | 0) | 0), HEAP32[(wasm2js_i32$0 + 236 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(800 | 0) | 0), HEAP32[(wasm2js_i32$0 + 232 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(800 | 0) | 0), HEAP32[(wasm2js_i32$0 + 228 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(800 | 0) | 0), HEAP32[(wasm2js_i32$0 + 224 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(800 | 0) | 0), HEAP32[(wasm2js_i32$0 + 220 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(800 | 0) | 0), HEAP32[(wasm2js_i32$0 + 216 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(800 | 0) | 0), HEAP32[(wasm2js_i32$0 + 212 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(800 | 0) | 0), HEAP32[(wasm2js_i32$0 + 208 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(800 | 0) | 0), HEAP32[(wasm2js_i32$0 + 204 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(800 | 0) | 0), HEAP32[(wasm2js_i32$0 + 200 | 0) >> 2] = wasm2js_i32$1;
  $166($7_1 + 128 | 0 | 0, $7_1 + 120 | 0 | 0, $7_1 + 80 | 0 | 0, $7_1 + 72 | 0 | 0);
  HEAPF64[($7_1 + 144 | 0) >> 3] = +HEAPF64[($7_1 + 128 | 0) >> 3];
  HEAPF64[($7_1 + 136 | 0) >> 3] = 2.0 * Math_sqrt(2.0) * +HEAPF64[($7_1 + 128 | 0) >> 3];
  HEAPF64[($7_1 + 112 | 0) >> 3] = .70710678;
  HEAPF64[($7_1 + 104 | 0) >> 3] = -+HEAPF64[($7_1 + 112 | 0) >> 3];
  HEAPF64[($7_1 + 96 | 0) >> 3] = -.060756474;
  HEAPF64[($7_1 + 88 | 0) >> 3] = .99756405;
  HEAP32[($7_1 + 244 | 0) >> 2] = 0;
  HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 256 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   label$2 : {
    if (+HEAPF64[(HEAP32[($7_1 + 264 | 0) >> 2] | 0) >> 3] != +(0 | 0) & 1 | 0) {
     break label$2
    }
    if (+HEAPF64[(HEAP32[($7_1 + 260 | 0) >> 2] | 0) >> 3] != +(0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($7_1 + 244 | 0) >> 2] = 1;
    $863(HEAP32[($7_1 + 236 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($7_1 + 232 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($7_1 + 228 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($7_1 + 224 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($7_1 + 200 | 0) >> 2] | 0 | 0);
    HEAP32[($7_1 + 268 | 0) >> 2] = HEAP32[($7_1 + 244 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : while (1) {
    $78_1 = 1;
    label$4 : {
     if (+HEAPF64[((HEAP32[($7_1 + 264 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 36 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] != +(0 | 0) & 1 | 0) {
      break label$4
     }
     $78_1 = +HEAPF64[((HEAP32[($7_1 + 260 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 36 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] != +(0 | 0);
    }
    label$5 : {
     if (!(($78_1 ^ -1 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = ((HEAP32[($7_1 + 256 | 0) >> 2] | 0) - (HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0) + 2 | 0;
     HEAPF64[((HEAP32[($7_1 + 252 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 24 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAPF64[((HEAP32[($7_1 + 248 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 24 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) - 1 | 0;
     continue label$3;
    }
    break label$3;
   };
   HEAP32[($7_1 + 20 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAPF64[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 264 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[((HEAP32[($7_1 + 232 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 260 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     $460_1 = +$167((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($7_1 + 232 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0 | 0);
     HEAPF64[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $460_1;
     HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$168(HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0, +(+HEAPF64[($7_1 + 128 | 0) >> 3]), +(+HEAPF64[($7_1 + 120 | 0) >> 3]), +(+HEAPF64[($7_1 + 80 | 0) >> 3]), +(+HEAPF64[($7_1 + 72 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
   label$8 : {
    if (!(+HEAPF64[($7_1 + 40 | 0) >> 3] != 1.0 & 1 | 0)) {
     break label$8
    }
    HEAP32[($7_1 + 20 | 0) >> 2] = 0;
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAPF64[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 40 | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[((HEAP32[($7_1 + 232 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 40 | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 232 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$10;
     };
    }
   }
   label$11 : while (1) {
    label$12 : {
     if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) <= (2 | 0) & 1 | 0)) {
      break label$12
     }
     HEAPF64[($7_1 + 8 | 0) >> 3] = -1.0 * +HEAPF64[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + 8 | 0) >> 3];
     HEAPF64[$7_1 >> 3] = -1.0 * +HEAPF64[((HEAP32[($7_1 + 232 | 0) >> 2] | 0) + 8 | 0) >> 3];
     $169($7_1 + 8 | 0 | 0, $7_1 | 0, HEAP32[($7_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 232 | 0) >> 2] | 0 | 0, +(+HEAPF64[($7_1 + 120 | 0) >> 3]), (HEAP32[($7_1 + 252 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 256 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($7_1 + 248 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 256 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0 | 0);
     $863(HEAP32[($7_1 + 236 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($7_1 + 232 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($7_1 + 228 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($7_1 + 224 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($7_1 + 200 | 0) >> 2] | 0 | 0);
     HEAP32[($7_1 + 268 | 0) >> 2] = HEAP32[($7_1 + 244 | 0) >> 2] | 0;
     break label$1;
    }
    HEAP32[($7_1 + 20 | 0) >> 2] = 0;
    label$13 : {
     label$14 : while (1) {
      if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$13
      }
      $481_1 = +$167((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($7_1 + 232 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0 | 0);
      HEAPF64[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $481_1;
      HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$14;
     };
    }
    (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$170(HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 200 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
    HEAP32[($7_1 + 32 | 0) >> 2] = 1;
    label$15 : {
     label$16 : while (1) {
      if (!((HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) <= (2 | 0) & 1 | 0)) {
       break label$15
      }
      $171(HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, 5 | 0, $7_1 + 192 | 0 | 0, $7_1 + 184 | 0 | 0, HEAP32[($7_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0, $7_1 + 160 | 0 | 0, $7_1 + 152 | 0 | 0, +(+HEAPF64[($7_1 + 144 | 0) >> 3]), +(+HEAPF64[($7_1 + 136 | 0) >> 3]), +(+HEAPF64[($7_1 + 128 | 0) >> 3]), +(+HEAPF64[($7_1 + 120 | 0) >> 3]), HEAP32[($7_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 200 | 0) >> 2] | 0 | 0, $7_1 + 176 | 0 | 0, $7_1 + 168 | 0 | 0);
      HEAP32[($7_1 + 28 | 0) >> 2] = 1;
      label$17 : {
       label$18 : while (1) {
        if (!((HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) <= (9 | 0) & 1 | 0)) {
         break label$17
        }
        HEAPF64[($7_1 + 64 | 0) >> 3] = +HEAPF64[($7_1 + 96 | 0) >> 3] * +HEAPF64[($7_1 + 112 | 0) >> 3] - +HEAPF64[($7_1 + 88 | 0) >> 3] * +HEAPF64[($7_1 + 104 | 0) >> 3];
        HEAPF64[($7_1 + 104 | 0) >> 3] = +HEAPF64[($7_1 + 88 | 0) >> 3] * +HEAPF64[($7_1 + 112 | 0) >> 3] + +HEAPF64[($7_1 + 96 | 0) >> 3] * +HEAPF64[($7_1 + 104 | 0) >> 3];
        HEAPF64[($7_1 + 112 | 0) >> 3] = +HEAPF64[($7_1 + 64 | 0) >> 3];
        HEAPF64[($7_1 + 192 | 0) >> 3] = +HEAPF64[($7_1 + 40 | 0) >> 3] * +HEAPF64[($7_1 + 112 | 0) >> 3];
        HEAPF64[($7_1 + 184 | 0) >> 3] = +HEAPF64[($7_1 + 40 | 0) >> 3] * +HEAPF64[($7_1 + 104 | 0) >> 3];
        $172(HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($7_1 + 28 | 0) >> 2] | 0, 10) | 0, $7_1 + 56 | 0 | 0, $7_1 + 48 | 0 | 0, $7_1 + 240 | 0 | 0, $7_1 + 192 | 0 | 0, $7_1 + 184 | 0 | 0, HEAP32[($7_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0, $7_1 + 160 | 0 | 0, $7_1 + 152 | 0 | 0, +(+HEAPF64[($7_1 + 144 | 0) >> 3]), +(+HEAPF64[($7_1 + 136 | 0) >> 3]), +(+HEAPF64[($7_1 + 128 | 0) >> 3]), +(+HEAPF64[($7_1 + 120 | 0) >> 3]), HEAP32[($7_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 200 | 0) >> 2] | 0 | 0, $7_1 + 176 | 0 | 0, $7_1 + 168 | 0 | 0);
        label$19 : {
         if (!((HEAP32[($7_1 + 240 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
          break label$19
         }
         HEAP32[($7_1 + 24 | 0) >> 2] = ((HEAP32[($7_1 + 256 | 0) >> 2] | 0) - (HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0) + 2 | 0;
         HEAPF64[((HEAP32[($7_1 + 252 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 24 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 56 | 0) >> 3];
         HEAPF64[((HEAP32[($7_1 + 248 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 24 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 48 | 0) >> 3];
         HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) - 1 | 0;
         HEAP32[($7_1 + 20 | 0) >> 2] = 0;
         label$20 : {
          label$21 : while (1) {
           if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$20
           }
           HEAPF64[((HEAP32[($7_1 + 236 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAPF64[((HEAP32[($7_1 + 232 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
           continue label$21;
          };
         }
         continue label$11;
        }
        HEAP32[($7_1 + 28 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1 | 0;
        continue label$18;
       };
      }
      HEAP32[($7_1 + 32 | 0) >> 2] = (HEAP32[($7_1 + 32 | 0) >> 2] | 0) + 1 | 0;
      continue label$16;
     };
    }
    break label$11;
   };
   HEAP32[($7_1 + 244 | 0) >> 2] = 1;
   $863(HEAP32[($7_1 + 236 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($7_1 + 232 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($7_1 + 228 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($7_1 + 224 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($7_1 + 200 | 0) >> 2] | 0 | 0);
   HEAP32[($7_1 + 268 | 0) >> 2] = HEAP32[($7_1 + 244 | 0) >> 2] | 0;
  }
  $433_1 = HEAP32[($7_1 + 268 | 0) >> 2] | 0;
  global$0 = $7_1 + 272 | 0;
  return $433_1 | 0;
 }
 
 function $166($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $13_1 = 0.0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $13_1 = +$88();
  HEAPF64[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 3] = $13_1;
  HEAPF64[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAPF64[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 3] = 2.2250738585072014e-308;
  HEAPF64[(HEAP32[$6_1 >> 2] | 0) >> 3] = 2.0;
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $167($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 48 | 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 32 | 0) >> 2] = $1_1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = Math_abs(+HEAPF64[(HEAP32[($4_1 + 36 | 0) >> 2] | 0) >> 3]);
  HEAPF64[($4_1 + 8 | 0) >> 3] = Math_abs(+HEAPF64[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 3]);
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($4_1 + 16 | 0) >> 3] < +HEAPF64[($4_1 + 8 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    HEAPF64[$4_1 >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3] / +HEAPF64[($4_1 + 8 | 0) >> 3];
    HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[($4_1 + 8 | 0) >> 3] * Math_sqrt(1.0 + +HEAPF64[$4_1 >> 3] * +HEAPF64[$4_1 >> 3]);
    HEAPF64[($4_1 + 40 | 0) >> 3] = +HEAPF64[($4_1 + 24 | 0) >> 3];
    break label$1;
   }
   label$3 : {
    if (!(+HEAPF64[($4_1 + 16 | 0) >> 3] > +HEAPF64[($4_1 + 8 | 0) >> 3] & 1 | 0)) {
     break label$3
    }
    HEAPF64[$4_1 >> 3] = +HEAPF64[($4_1 + 8 | 0) >> 3] / +HEAPF64[($4_1 + 16 | 0) >> 3];
    HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3] * Math_sqrt(1.0 + +HEAPF64[$4_1 >> 3] * +HEAPF64[$4_1 >> 3]);
    HEAPF64[($4_1 + 40 | 0) >> 3] = +HEAPF64[($4_1 + 24 | 0) >> 3];
    break label$1;
   }
   HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3] * Math_sqrt(2.0);
   HEAPF64[($4_1 + 40 | 0) >> 3] = +HEAPF64[($4_1 + 24 | 0) >> 3];
  }
  return +(+HEAPF64[($4_1 + 40 | 0) >> 3]);
 }
 
 function $168($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3_1 = +$3_1;
  $4_1 = +$4_1;
  $5_1 = +$5_1;
  var $8_1 = 0, $101_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $8_1 = global$0 - 128 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 116 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 112 | 0) >> 2] = $1_1;
  HEAPF64[($8_1 + 104 | 0) >> 3] = $2_1;
  HEAPF64[($8_1 + 96 | 0) >> 3] = $3_1;
  HEAPF64[($8_1 + 88 | 0) >> 3] = $4_1;
  HEAPF64[($8_1 + 80 | 0) >> 3] = $5_1;
  HEAPF64[($8_1 + 72 | 0) >> 3] = Math_sqrt(+HEAPF64[($8_1 + 96 | 0) >> 3]);
  HEAPF64[($8_1 + 64 | 0) >> 3] = +HEAPF64[($8_1 + 88 | 0) >> 3] / +HEAPF64[($8_1 + 104 | 0) >> 3];
  HEAPF64[($8_1 + 56 | 0) >> 3] = +(0 | 0);
  HEAPF64[($8_1 + 48 | 0) >> 3] = +HEAPF64[($8_1 + 96 | 0) >> 3];
  HEAP32[($8_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($8_1 + 40 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$3 : {
     if (!(+HEAPF64[($8_1 + 40 | 0) >> 3] > +HEAPF64[($8_1 + 56 | 0) >> 3] & 1 | 0)) {
      break label$3
     }
     HEAPF64[($8_1 + 56 | 0) >> 3] = +HEAPF64[($8_1 + 40 | 0) >> 3];
    }
    label$4 : {
     if (!(+HEAPF64[($8_1 + 40 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
      break label$4
     }
     if (!(+HEAPF64[($8_1 + 40 | 0) >> 3] < +HEAPF64[($8_1 + 48 | 0) >> 3] & 1 | 0)) {
      break label$4
     }
     HEAPF64[($8_1 + 48 | 0) >> 3] = +HEAPF64[($8_1 + 40 | 0) >> 3];
    }
    HEAP32[($8_1 + 12 | 0) >> 2] = (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[($8_1 + 32 | 0) >> 3] = 1.0;
  label$5 : {
   label$6 : {
    if (!(+HEAPF64[($8_1 + 48 | 0) >> 3] >= +HEAPF64[($8_1 + 64 | 0) >> 3] & 1 | 0)) {
     break label$6
    }
    if (!(+HEAPF64[($8_1 + 56 | 0) >> 3] <= +HEAPF64[($8_1 + 72 | 0) >> 3] & 1 | 0)) {
     break label$6
    }
    HEAPF64[($8_1 + 120 | 0) >> 3] = +HEAPF64[($8_1 + 32 | 0) >> 3];
    break label$5;
   }
   HEAPF64[($8_1 + 40 | 0) >> 3] = +HEAPF64[($8_1 + 64 | 0) >> 3] / +HEAPF64[($8_1 + 48 | 0) >> 3];
   label$7 : {
    label$8 : {
     if (!(+HEAPF64[($8_1 + 40 | 0) >> 3] <= 1.0 & 1 | 0)) {
      break label$8
     }
     HEAPF64[($8_1 + 24 | 0) >> 3] = 1.0 / (Math_sqrt(+HEAPF64[($8_1 + 56 | 0) >> 3]) * Math_sqrt(+HEAPF64[($8_1 + 48 | 0) >> 3]));
     break label$7;
    }
    HEAPF64[($8_1 + 24 | 0) >> 3] = +HEAPF64[($8_1 + 40 | 0) >> 3];
    label$9 : {
     if (!(+HEAPF64[($8_1 + 96 | 0) >> 3] / +HEAPF64[($8_1 + 24 | 0) >> 3] > +HEAPF64[($8_1 + 56 | 0) >> 3] & 1 | 0)) {
      break label$9
     }
     HEAPF64[($8_1 + 24 | 0) >> 3] = 1.0;
    }
   }
   (wasm2js_i32$0 = $8_1, wasm2js_f64$0 = +$729(+(+HEAPF64[($8_1 + 24 | 0) >> 3])) / +$729(+(+HEAPF64[($8_1 + 80 | 0) >> 3])) + .5), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
   (wasm2js_i32$0 = $8_1, wasm2js_f64$0 = +$734(+(+HEAPF64[($8_1 + 80 | 0) >> 3]), +(+HEAPF64[($8_1 + 16 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 32 | 0) >> 3] = wasm2js_f64$0;
   HEAPF64[($8_1 + 120 | 0) >> 3] = +HEAPF64[($8_1 + 32 | 0) >> 3];
  }
  $101_1 = +HEAPF64[($8_1 + 120 | 0) >> 3];
  global$0 = $8_1 + 128 | 0;
  return +$101_1;
 }
 
 function $169($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $52_1 = 0.0;
  $9_1 = global$0 - 64 | 0;
  HEAP32[($9_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 48 | 0) >> 2] = $3_1;
  HEAPF64[($9_1 + 40 | 0) >> 3] = $4_1;
  HEAP32[($9_1 + 36 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 32 | 0) >> 2] = $6_1;
  label$1 : {
   label$2 : {
    if (+HEAPF64[(HEAP32[($9_1 + 52 | 0) >> 2] | 0) >> 3] != +(0 | 0) & 1 | 0) {
     break label$2
    }
    if (+HEAPF64[(HEAP32[($9_1 + 48 | 0) >> 2] | 0) >> 3] != +(0 | 0) & 1 | 0) {
     break label$2
    }
    HEAPF64[($9_1 + 24 | 0) >> 3] = +HEAPF64[($9_1 + 40 | 0) >> 3];
    $52_1 = +HEAPF64[($9_1 + 24 | 0) >> 3];
    HEAPF64[(HEAP32[($9_1 + 32 | 0) >> 2] | 0) >> 3] = $52_1;
    HEAPF64[(HEAP32[($9_1 + 36 | 0) >> 2] | 0) >> 3] = $52_1;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!(Math_abs(+HEAPF64[(HEAP32[($9_1 + 52 | 0) >> 2] | 0) >> 3]) < Math_abs(+HEAPF64[(HEAP32[($9_1 + 48 | 0) >> 2] | 0) >> 3]) & 1 | 0)) {
      break label$4
     }
     HEAPF64[($9_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($9_1 + 52 | 0) >> 2] | 0) >> 3] / +HEAPF64[(HEAP32[($9_1 + 48 | 0) >> 2] | 0) >> 3];
     HEAPF64[($9_1 + 8 | 0) >> 3] = +HEAPF64[(HEAP32[($9_1 + 48 | 0) >> 2] | 0) >> 3] + +HEAPF64[($9_1 + 16 | 0) >> 3] * +HEAPF64[(HEAP32[($9_1 + 52 | 0) >> 2] | 0) >> 3];
     HEAPF64[(HEAP32[($9_1 + 36 | 0) >> 2] | 0) >> 3] = (+HEAPF64[(HEAP32[($9_1 + 60 | 0) >> 2] | 0) >> 3] * +HEAPF64[($9_1 + 16 | 0) >> 3] + +HEAPF64[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 3]) / +HEAPF64[($9_1 + 8 | 0) >> 3];
     HEAPF64[(HEAP32[($9_1 + 32 | 0) >> 2] | 0) >> 3] = (+HEAPF64[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 3] * +HEAPF64[($9_1 + 16 | 0) >> 3] - +HEAPF64[(HEAP32[($9_1 + 60 | 0) >> 2] | 0) >> 3]) / +HEAPF64[($9_1 + 8 | 0) >> 3];
     break label$3;
    }
    HEAPF64[($9_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($9_1 + 48 | 0) >> 2] | 0) >> 3] / +HEAPF64[(HEAP32[($9_1 + 52 | 0) >> 2] | 0) >> 3];
    HEAPF64[($9_1 + 8 | 0) >> 3] = +HEAPF64[(HEAP32[($9_1 + 52 | 0) >> 2] | 0) >> 3] + +HEAPF64[($9_1 + 16 | 0) >> 3] * +HEAPF64[(HEAP32[($9_1 + 48 | 0) >> 2] | 0) >> 3];
    HEAPF64[(HEAP32[($9_1 + 36 | 0) >> 2] | 0) >> 3] = (+HEAPF64[(HEAP32[($9_1 + 60 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 3] * +HEAPF64[($9_1 + 16 | 0) >> 3]) / +HEAPF64[($9_1 + 8 | 0) >> 3];
    HEAPF64[(HEAP32[($9_1 + 32 | 0) >> 2] | 0) >> 3] = (+HEAPF64[(HEAP32[($9_1 + 56 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($9_1 + 60 | 0) >> 2] | 0) >> 3] * +HEAPF64[($9_1 + 16 | 0) >> 3]) / +HEAPF64[($9_1 + 8 | 0) >> 3];
   }
  }
  return;
 }
 
 function $170($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $199_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 68 | 0) >> 2] = $2_1;
  HEAPF64[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 76 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 76 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
  HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 76 | 0) >> 2] | 0) - 1 | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$730(+((+$729(+-+HEAPF64[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 76 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3]) - +$729(+(+HEAPF64[(HEAP32[($5_1 + 72 | 0) >> 2] | 0) >> 3]))) / +(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0)))), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
  label$1 : {
   if (!(+HEAPF64[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 8 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] != +(0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($5_1 + 40 | 0) >> 3] = -+HEAPF64[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 76 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 8 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
   label$2 : {
    if (!(+HEAPF64[($5_1 + 40 | 0) >> 3] < +HEAPF64[($5_1 + 48 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    HEAPF64[($5_1 + 48 | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3];
   }
  }
  HEAPF64[($5_1 + 40 | 0) >> 3] = .1 * +HEAPF64[($5_1 + 48 | 0) >> 3];
  HEAPF64[($5_1 + 32 | 0) >> 3] = .1;
  label$3 : while (1) {
   HEAPF64[($5_1 + 32 | 0) >> 3] = +HEAPF64[(HEAP32[($5_1 + 72 | 0) >> 2] | 0) >> 3];
   HEAP32[($5_1 + 12 | 0) >> 2] = 1;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAPF64[($5_1 + 32 | 0) >> 3] = +HEAPF64[($5_1 + 32 | 0) >> 3] * +HEAPF64[($5_1 + 40 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
   label$6 : {
    label$7 : {
     label$8 : {
      if (!(+HEAPF64[($5_1 + 32 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$8
      }
      HEAPF64[($5_1 + 48 | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3];
      break label$7;
     }
     break label$6;
    }
    continue label$3;
   }
   break label$3;
  };
  HEAPF64[($5_1 + 24 | 0) >> 3] = +HEAPF64[($5_1 + 48 | 0) >> 3];
  label$9 : {
   label$10 : while (1) {
    if (!(Math_abs(+HEAPF64[($5_1 + 24 | 0) >> 3] / +HEAPF64[($5_1 + 48 | 0) >> 3]) > .005 & 1 | 0)) {
     break label$9
    }
    HEAPF64[(HEAP32[($5_1 + 68 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($5_1 + 72 | 0) >> 2] | 0) >> 3];
    HEAP32[($5_1 + 12 | 0) >> 2] = 1;
    label$11 : {
     label$12 : while (1) {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      HEAPF64[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 12 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($5_1 + 48 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$12;
     };
    }
    HEAPF64[($5_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 76 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($5_1 + 68 | 0) >> 2] | 0) >> 3];
    HEAP32[($5_1 + 12 | 0) >> 2] = 1;
    label$13 : {
     label$14 : while (1) {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$13
      }
      HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[($5_1 + 48 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$14;
     };
    }
    HEAPF64[($5_1 + 24 | 0) >> 3] = +HEAPF64[($5_1 + 32 | 0) >> 3] / +HEAPF64[($5_1 + 16 | 0) >> 3];
    HEAPF64[($5_1 + 48 | 0) >> 3] = +HEAPF64[($5_1 + 48 | 0) >> 3] - +HEAPF64[($5_1 + 24 | 0) >> 3];
    continue label$10;
   };
  }
  HEAPF64[($5_1 + 56 | 0) >> 3] = +HEAPF64[($5_1 + 48 | 0) >> 3];
  $199_1 = +HEAPF64[($5_1 + 56 | 0) >> 3];
  global$0 = $5_1 + 80 | 0;
  return +$199_1;
 }
 
 function $171($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1, $16_1, $17_1, $18_1, $19_1, $20_1, $21_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = +$10_1;
  $11_1 = +$11_1;
  $12_1 = +$12_1;
  $13_1 = +$13_1;
  $14_1 = $14_1 | 0;
  $15_1 = $15_1 | 0;
  $16_1 = $16_1 | 0;
  $17_1 = $17_1 | 0;
  $18_1 = $18_1 | 0;
  $19_1 = $19_1 | 0;
  $20_1 = $20_1 | 0;
  $21_1 = $21_1 | 0;
  var $24_1 = 0;
  $24_1 = global$0 - 176 | 0;
  global$0 = $24_1;
  HEAP32[($24_1 + 172 | 0) >> 2] = $0_1;
  HEAP32[($24_1 + 168 | 0) >> 2] = $1_1;
  HEAP32[($24_1 + 164 | 0) >> 2] = $2_1;
  HEAP32[($24_1 + 160 | 0) >> 2] = $3_1;
  HEAP32[($24_1 + 156 | 0) >> 2] = $4_1;
  HEAP32[($24_1 + 152 | 0) >> 2] = $5_1;
  HEAP32[($24_1 + 148 | 0) >> 2] = $6_1;
  HEAP32[($24_1 + 144 | 0) >> 2] = $7_1;
  HEAP32[($24_1 + 140 | 0) >> 2] = $8_1;
  HEAP32[($24_1 + 136 | 0) >> 2] = $9_1;
  HEAPF64[($24_1 + 128 | 0) >> 3] = $10_1;
  HEAPF64[($24_1 + 120 | 0) >> 3] = $11_1;
  HEAPF64[($24_1 + 112 | 0) >> 3] = $12_1;
  HEAPF64[($24_1 + 104 | 0) >> 3] = $13_1;
  HEAP32[($24_1 + 100 | 0) >> 2] = $14_1;
  HEAP32[($24_1 + 96 | 0) >> 2] = $15_1;
  HEAP32[($24_1 + 92 | 0) >> 2] = $16_1;
  HEAP32[($24_1 + 88 | 0) >> 2] = $17_1;
  HEAP32[($24_1 + 84 | 0) >> 2] = $18_1;
  HEAP32[($24_1 + 80 | 0) >> 2] = $19_1;
  HEAP32[($24_1 + 76 | 0) >> 2] = $20_1;
  HEAP32[($24_1 + 72 | 0) >> 2] = $21_1;
  HEAP32[($24_1 + 44 | 0) >> 2] = (HEAP32[($24_1 + 172 | 0) >> 2] | 0) - 1 | 0;
  HEAP32[($24_1 + 40 | 0) >> 2] = (HEAP32[($24_1 + 44 | 0) >> 2] | 0) - 1 | 0;
  HEAP32[($24_1 + 36 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($24_1 + 36 | 0) >> 2] | 0 | 0) <= (HEAP32[($24_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($24_1 + 32 | 0) >> 2] = (HEAP32[($24_1 + 36 | 0) >> 2] | 0) - 1 | 0;
    HEAPF64[($24_1 + 64 | 0) >> 3] = +((HEAP32[($24_1 + 172 | 0) >> 2] | 0) - (HEAP32[($24_1 + 36 | 0) >> 2] | 0) | 0 | 0);
    HEAPF64[((HEAP32[($24_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($24_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($24_1 + 64 | 0) >> 3] * +HEAPF64[((HEAP32[($24_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($24_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +(HEAP32[($24_1 + 44 | 0) >> 2] | 0 | 0);
    HEAPF64[((HEAP32[($24_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($24_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($24_1 + 64 | 0) >> 3] * +HEAPF64[((HEAP32[($24_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($24_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +(HEAP32[($24_1 + 44 | 0) >> 2] | 0 | 0);
    HEAP32[($24_1 + 36 | 0) >> 2] = (HEAP32[($24_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($24_1 + 24 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($24_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($24_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     label$6 : {
      if (!(+$167((HEAP32[($24_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($24_1 + 44 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($24_1 + 96 | 0) >> 2] | 0) + (((HEAP32[($24_1 + 44 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0 | 0) > +HEAPF64[($24_1 + 112 | 0) >> 3] * 10.0 * +$167((HEAP32[($24_1 + 156 | 0) >> 2] | 0) + (((HEAP32[($24_1 + 44 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($24_1 + 152 | 0) >> 2] | 0) + (((HEAP32[($24_1 + 44 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAPF64[($24_1 + 8 | 0) >> 3] = -1.0 * +HEAPF64[(HEAP32[($24_1 + 156 | 0) >> 2] | 0) >> 3];
      HEAPF64[$24_1 >> 3] = -1.0 * +HEAPF64[(HEAP32[($24_1 + 152 | 0) >> 2] | 0) >> 3];
      $169($24_1 + 8 | 0 | 0, $24_1 | 0, (HEAP32[($24_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($24_1 + 44 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($24_1 + 96 | 0) >> 2] | 0) + (((HEAP32[($24_1 + 44 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0 | 0, +(+HEAPF64[($24_1 + 104 | 0) >> 3]), HEAP32[($24_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($24_1 + 72 | 0) >> 2] | 0 | 0);
      HEAP32[($24_1 + 36 | 0) >> 2] = 1;
      label$7 : {
       label$8 : while (1) {
        if (!((HEAP32[($24_1 + 36 | 0) >> 2] | 0 | 0) <= (HEAP32[($24_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$7
        }
        HEAP32[($24_1 + 28 | 0) >> 2] = ((HEAP32[($24_1 + 172 | 0) >> 2] | 0) - (HEAP32[($24_1 + 36 | 0) >> 2] | 0) | 0) - 1 | 0;
        HEAP32[($24_1 + 20 | 0) >> 2] = (HEAP32[($24_1 + 28 | 0) >> 2] | 0) - 1 | 0;
        HEAPF64[($24_1 + 56 | 0) >> 3] = +HEAPF64[((HEAP32[($24_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($24_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAPF64[($24_1 + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($24_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($24_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAPF64[((HEAP32[($24_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($24_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(HEAP32[($24_1 + 76 | 0) >> 2] | 0) >> 3] * +HEAPF64[($24_1 + 56 | 0) >> 3] - +HEAPF64[(HEAP32[($24_1 + 72 | 0) >> 2] | 0) >> 3] * +HEAPF64[($24_1 + 48 | 0) >> 3] + +HEAPF64[((HEAP32[($24_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($24_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAPF64[((HEAP32[($24_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($24_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(HEAP32[($24_1 + 76 | 0) >> 2] | 0) >> 3] * +HEAPF64[($24_1 + 48 | 0) >> 3] + +HEAPF64[(HEAP32[($24_1 + 72 | 0) >> 2] | 0) >> 3] * +HEAPF64[($24_1 + 56 | 0) >> 3] + +HEAPF64[((HEAP32[($24_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($24_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($24_1 + 36 | 0) >> 2] = (HEAP32[($24_1 + 36 | 0) >> 2] | 0) + 1 | 0;
        continue label$8;
       };
      }
      HEAPF64[(HEAP32[($24_1 + 100 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($24_1 + 156 | 0) >> 2] | 0) >> 3];
      HEAPF64[(HEAP32[($24_1 + 96 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($24_1 + 152 | 0) >> 2] | 0) >> 3];
      break label$5;
     }
     HEAP32[($24_1 + 36 | 0) >> 2] = 1;
     label$9 : {
      label$10 : while (1) {
       if (!((HEAP32[($24_1 + 36 | 0) >> 2] | 0 | 0) <= (HEAP32[($24_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       HEAP32[($24_1 + 28 | 0) >> 2] = ((HEAP32[($24_1 + 172 | 0) >> 2] | 0) - (HEAP32[($24_1 + 36 | 0) >> 2] | 0) | 0) - 1 | 0;
       HEAPF64[((HEAP32[($24_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($24_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($24_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($24_1 + 28 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[((HEAP32[($24_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($24_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($24_1 + 96 | 0) >> 2] | 0) + (((HEAP32[($24_1 + 28 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($24_1 + 36 | 0) >> 2] = (HEAP32[($24_1 + 36 | 0) >> 2] | 0) + 1 | 0;
       continue label$10;
      };
     }
     HEAPF64[(HEAP32[($24_1 + 100 | 0) >> 2] | 0) >> 3] = +(0 | 0);
     HEAPF64[(HEAP32[($24_1 + 96 | 0) >> 2] | 0) >> 3] = +(0 | 0);
    }
    HEAP32[($24_1 + 24 | 0) >> 2] = (HEAP32[($24_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  global$0 = $24_1 + 176 | 0;
  return;
 }
 
 function $172($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1, $16_1, $17_1, $18_1, $19_1, $20_1, $21_1, $22_1, $23_1, $24_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = +$13_1;
  $14_1 = +$14_1;
  $15_1 = +$15_1;
  $16_1 = +$16_1;
  $17_1 = $17_1 | 0;
  $18_1 = $18_1 | 0;
  $19_1 = $19_1 | 0;
  $20_1 = $20_1 | 0;
  $21_1 = $21_1 | 0;
  $22_1 = $22_1 | 0;
  $23_1 = $23_1 | 0;
  $24_1 = $24_1 | 0;
  var $27_1 = 0;
  $27_1 = global$0 - 192 | 0;
  global$0 = $27_1;
  HEAP32[($27_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($27_1 + 184 | 0) >> 2] = $1_1;
  HEAP32[($27_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($27_1 + 176 | 0) >> 2] = $3_1;
  HEAP32[($27_1 + 172 | 0) >> 2] = $4_1;
  HEAP32[($27_1 + 168 | 0) >> 2] = $5_1;
  HEAP32[($27_1 + 164 | 0) >> 2] = $6_1;
  HEAP32[($27_1 + 160 | 0) >> 2] = $7_1;
  HEAP32[($27_1 + 156 | 0) >> 2] = $8_1;
  HEAP32[($27_1 + 152 | 0) >> 2] = $9_1;
  HEAP32[($27_1 + 148 | 0) >> 2] = $10_1;
  HEAP32[($27_1 + 144 | 0) >> 2] = $11_1;
  HEAP32[($27_1 + 140 | 0) >> 2] = $12_1;
  HEAPF64[($27_1 + 128 | 0) >> 3] = $13_1;
  HEAPF64[($27_1 + 120 | 0) >> 3] = $14_1;
  HEAPF64[($27_1 + 112 | 0) >> 3] = $15_1;
  HEAPF64[($27_1 + 104 | 0) >> 3] = $16_1;
  HEAP32[($27_1 + 100 | 0) >> 2] = $17_1;
  HEAP32[($27_1 + 96 | 0) >> 2] = $18_1;
  HEAP32[($27_1 + 92 | 0) >> 2] = $19_1;
  HEAP32[($27_1 + 88 | 0) >> 2] = $20_1;
  HEAP32[($27_1 + 84 | 0) >> 2] = $21_1;
  HEAP32[($27_1 + 80 | 0) >> 2] = $22_1;
  HEAP32[($27_1 + 76 | 0) >> 2] = $23_1;
  HEAP32[($27_1 + 72 | 0) >> 2] = $24_1;
  HEAP32[($27_1 + 36 | 0) >> 2] = (HEAP32[($27_1 + 188 | 0) >> 2] | 0) - 1 | 0;
  $173(HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 140 | 0) >> 2] | 0 | 0);
  HEAP32[($27_1 + 32 | 0) >> 2] = 1;
  HEAP32[($27_1 + 28 | 0) >> 2] = 0;
  $174($27_1 + 24 | 0 | 0, HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 88 | 0) >> 2] | 0 | 0, +(+HEAPF64[($27_1 + 128 | 0) >> 3]), +(+HEAPF64[($27_1 + 104 | 0) >> 3]), HEAP32[($27_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 72 | 0) >> 2] | 0 | 0);
  HEAP32[($27_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($27_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($27_1 + 64 | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 76 | 0) >> 2] | 0) >> 3];
    HEAPF64[($27_1 + 56 | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 72 | 0) >> 2] | 0) >> 3];
    $175($27_1 + 24 | 0 | 0, HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 96 | 0) >> 2] | 0 | 0);
    $174($27_1 + 24 | 0 | 0, HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 88 | 0) >> 2] | 0 | 0, +(+HEAPF64[($27_1 + 128 | 0) >> 3]), +(+HEAPF64[($27_1 + 104 | 0) >> 3]), HEAP32[($27_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 72 | 0) >> 2] | 0 | 0);
    HEAPF64[(HEAP32[($27_1 + 180 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 168 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($27_1 + 76 | 0) >> 2] | 0) >> 3];
    HEAPF64[(HEAP32[($27_1 + 176 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 164 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($27_1 + 72 | 0) >> 2] | 0) >> 3];
    label$3 : {
     if ((HEAP32[($27_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
      break label$3
     }
     if (!(HEAP32[($27_1 + 32 | 0) >> 2] | 0)) {
      break label$3
     }
     if ((HEAP32[($27_1 + 20 | 0) >> 2] | 0 | 0) == ((HEAP32[($27_1 + 184 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0) {
      break label$3
     }
     HEAPF64[($27_1 + 8 | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 76 | 0) >> 2] | 0) >> 3] - +HEAPF64[($27_1 + 64 | 0) >> 3];
     HEAPF64[$27_1 >> 3] = +HEAPF64[(HEAP32[($27_1 + 72 | 0) >> 2] | 0) >> 3] - +HEAPF64[($27_1 + 56 | 0) >> 3];
     label$4 : {
      label$5 : {
       if (!(+$167($27_1 + 8 | 0 | 0, $27_1 | 0) < .5 * +$167(HEAP32[($27_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$5
       }
       label$6 : {
        label$7 : {
         if (!((HEAP32[($27_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
          break label$7
         }
         HEAP32[($27_1 + 16 | 0) >> 2] = 0;
         label$8 : {
          label$9 : while (1) {
           if (!((HEAP32[($27_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$8
           }
           HEAPF64[((HEAP32[($27_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAPF64[((HEAP32[($27_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($27_1 + 16 | 0) >> 2] = (HEAP32[($27_1 + 16 | 0) >> 2] | 0) + 1 | 0;
           continue label$9;
          };
         }
         HEAPF64[($27_1 + 48 | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 168 | 0) >> 2] | 0) >> 3];
         HEAPF64[($27_1 + 40 | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 164 | 0) >> 2] | 0) >> 3];
         $176(HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, 10 | 0, HEAP32[($27_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 140 | 0) >> 2] | 0 | 0, +(+HEAPF64[($27_1 + 128 | 0) >> 3]), +(+HEAPF64[($27_1 + 120 | 0) >> 3]), +(+HEAPF64[($27_1 + 112 | 0) >> 3]), +(+HEAPF64[($27_1 + 104 | 0) >> 3]), HEAP32[($27_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 72 | 0) >> 2] | 0 | 0);
         label$10 : {
          if (!((HEAP32[(HEAP32[($27_1 + 172 | 0) >> 2] | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
           break label$10
          }
          break label$1;
         }
         HEAP32[($27_1 + 32 | 0) >> 2] = 0;
         HEAP32[($27_1 + 16 | 0) >> 2] = 0;
         label$11 : {
          label$12 : while (1) {
           if (!((HEAP32[($27_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$11
           }
           HEAPF64[((HEAP32[($27_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAPF64[((HEAP32[($27_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($27_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($27_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($27_1 + 16 | 0) >> 2] = (HEAP32[($27_1 + 16 | 0) >> 2] | 0) + 1 | 0;
           continue label$12;
          };
         }
         HEAPF64[(HEAP32[($27_1 + 168 | 0) >> 2] | 0) >> 3] = +HEAPF64[($27_1 + 48 | 0) >> 3];
         HEAPF64[(HEAP32[($27_1 + 164 | 0) >> 2] | 0) >> 3] = +HEAPF64[($27_1 + 40 | 0) >> 3];
         $173(HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 140 | 0) >> 2] | 0 | 0);
         $174($27_1 + 24 | 0 | 0, HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 88 | 0) >> 2] | 0 | 0, +(+HEAPF64[($27_1 + 128 | 0) >> 3]), +(+HEAPF64[($27_1 + 104 | 0) >> 3]), HEAP32[($27_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 72 | 0) >> 2] | 0 | 0);
         break label$6;
        }
        HEAP32[($27_1 + 28 | 0) >> 2] = 1;
       }
       break label$4;
      }
      HEAP32[($27_1 + 28 | 0) >> 2] = 0;
     }
    }
    HEAP32[($27_1 + 20 | 0) >> 2] = (HEAP32[($27_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $176(HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, 10 | 0, HEAP32[($27_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 140 | 0) >> 2] | 0 | 0, +(+HEAPF64[($27_1 + 128 | 0) >> 3]), +(+HEAPF64[($27_1 + 120 | 0) >> 3]), +(+HEAPF64[($27_1 + 112 | 0) >> 3]), +(+HEAPF64[($27_1 + 104 | 0) >> 3]), HEAP32[($27_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 72 | 0) >> 2] | 0 | 0);
  global$0 = $27_1 + 192 | 0;
  return;
 }
 
 function $173($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0;
  $11_1 = global$0 - 64 | 0;
  HEAP32[($11_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 32 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 28 | 0) >> 2] = $8_1;
  HEAPF64[(HEAP32[($11_1 + 40 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($11_1 + 48 | 0) >> 2] | 0) >> 3];
  HEAPF64[(HEAP32[($11_1 + 36 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($11_1 + 44 | 0) >> 2] | 0) >> 3];
  HEAPF64[(HEAP32[($11_1 + 32 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($11_1 + 40 | 0) >> 2] | 0) >> 3];
  HEAPF64[(HEAP32[($11_1 + 28 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($11_1 + 36 | 0) >> 2] | 0) >> 3];
  HEAP32[($11_1 + 12 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($11_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($11_1 + 32 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($11_1 + 56 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($11_1 + 28 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($11_1 + 52 | 0) >> 2] | 0) >> 3] + +HEAPF64[((HEAP32[($11_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[(HEAP32[($11_1 + 28 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($11_1 + 32 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($11_1 + 52 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($11_1 + 28 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($11_1 + 56 | 0) >> 2] | 0) >> 3] + +HEAPF64[((HEAP32[($11_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[(HEAP32[($11_1 + 32 | 0) >> 2] | 0) >> 3] = +HEAPF64[($11_1 + 16 | 0) >> 3];
    HEAPF64[((HEAP32[($11_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(HEAP32[($11_1 + 32 | 0) >> 2] | 0) >> 3];
    HEAPF64[((HEAP32[($11_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(HEAP32[($11_1 + 28 | 0) >> 2] | 0) >> 3];
    HEAP32[($11_1 + 12 | 0) >> 2] = (HEAP32[($11_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $174($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = +$8_1;
  $9_1 = +$9_1;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  var $16_1 = 0;
  $16_1 = global$0 - 112 | 0;
  global$0 = $16_1;
  HEAP32[($16_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($16_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($16_1 + 100 | 0) >> 2] = $2_1;
  HEAP32[($16_1 + 96 | 0) >> 2] = $3_1;
  HEAP32[($16_1 + 92 | 0) >> 2] = $4_1;
  HEAP32[($16_1 + 88 | 0) >> 2] = $5_1;
  HEAP32[($16_1 + 84 | 0) >> 2] = $6_1;
  HEAP32[($16_1 + 80 | 0) >> 2] = $7_1;
  HEAPF64[($16_1 + 72 | 0) >> 3] = $8_1;
  HEAPF64[($16_1 + 64 | 0) >> 3] = $9_1;
  HEAP32[($16_1 + 60 | 0) >> 2] = $10_1;
  HEAP32[($16_1 + 56 | 0) >> 2] = $11_1;
  HEAP32[($16_1 + 52 | 0) >> 2] = $12_1;
  HEAP32[($16_1 + 48 | 0) >> 2] = $13_1;
  HEAP32[($16_1 + 12 | 0) >> 2] = (HEAP32[($16_1 + 104 | 0) >> 2] | 0) - 1 | 0;
  $173(HEAP32[($16_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 80 | 0) >> 2] | 0 | 0, $16_1 + 40 | 0 | 0, $16_1 + 32 | 0 | 0);
  label$1 : {
   label$2 : {
    if (!(+$167($16_1 + 40 | 0 | 0, $16_1 + 32 | 0 | 0) <= +HEAPF64[($16_1 + 72 | 0) >> 3] * 10.0 * +$167((HEAP32[($16_1 + 92 | 0) >> 2] | 0) + (((HEAP32[($16_1 + 12 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($16_1 + 88 | 0) >> 2] | 0) + (((HEAP32[($16_1 + 12 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[(HEAP32[($16_1 + 108 | 0) >> 2] | 0) >> 2] = 1;
    break label$1;
   }
   HEAP32[(HEAP32[($16_1 + 108 | 0) >> 2] | 0) >> 2] = 0;
  }
  HEAPF64[($16_1 + 24 | 0) >> 3] = -1.0 * +HEAPF64[(HEAP32[($16_1 + 60 | 0) >> 2] | 0) >> 3];
  HEAPF64[($16_1 + 16 | 0) >> 3] = -1.0 * +HEAPF64[(HEAP32[($16_1 + 56 | 0) >> 2] | 0) >> 3];
  label$3 : {
   label$4 : {
    if (HEAP32[(HEAP32[($16_1 + 108 | 0) >> 2] | 0) >> 2] | 0) {
     break label$4
    }
    $169($16_1 + 24 | 0 | 0, $16_1 + 16 | 0 | 0, $16_1 + 40 | 0 | 0, $16_1 + 32 | 0 | 0, +(+HEAPF64[($16_1 + 64 | 0) >> 3]), HEAP32[($16_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 48 | 0) >> 2] | 0 | 0);
    break label$3;
   }
   HEAPF64[(HEAP32[($16_1 + 52 | 0) >> 2] | 0) >> 3] = +(0 | 0);
   HEAPF64[(HEAP32[($16_1 + 48 | 0) >> 2] | 0) >> 3] = +(0 | 0);
  }
  global$0 = $16_1 + 112 | 0;
  return;
 }
 
 function $175($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 80 | 0;
  HEAP32[($12_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($12_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($12_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($12_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($12_1 + 60 | 0) >> 2] = $4_1;
  HEAP32[($12_1 + 56 | 0) >> 2] = $5_1;
  HEAP32[($12_1 + 52 | 0) >> 2] = $6_1;
  HEAP32[($12_1 + 48 | 0) >> 2] = $7_1;
  HEAP32[($12_1 + 44 | 0) >> 2] = $8_1;
  HEAP32[($12_1 + 40 | 0) >> 2] = $9_1;
  HEAP32[($12_1 + 20 | 0) >> 2] = (HEAP32[($12_1 + 72 | 0) >> 2] | 0) - 1 | 0;
  HEAP32[($12_1 + 16 | 0) >> 2] = (HEAP32[($12_1 + 20 | 0) >> 2] | 0) - 1 | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[(HEAP32[($12_1 + 76 | 0) >> 2] | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($12_1 + 12 | 0) >> 2] = 1;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($12_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[($12_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 68 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 12 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[($12_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 64 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 12 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[((HEAP32[($12_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(HEAP32[($12_1 + 52 | 0) >> 2] | 0) >> 3] * +HEAPF64[($12_1 + 32 | 0) >> 3] - +HEAPF64[(HEAP32[($12_1 + 48 | 0) >> 2] | 0) >> 3] * +HEAPF64[($12_1 + 24 | 0) >> 3] + +HEAPF64[((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[((HEAP32[($12_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(HEAP32[($12_1 + 52 | 0) >> 2] | 0) >> 3] * +HEAPF64[($12_1 + 24 | 0) >> 3] + +HEAPF64[(HEAP32[($12_1 + 48 | 0) >> 2] | 0) >> 3] * +HEAPF64[($12_1 + 32 | 0) >> 3] + +HEAPF64[((HEAP32[($12_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($12_1 + 12 | 0) >> 2] = (HEAP32[($12_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAPF64[(HEAP32[($12_1 + 44 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($12_1 + 60 | 0) >> 2] | 0) >> 3];
    HEAPF64[(HEAP32[($12_1 + 40 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($12_1 + 56 | 0) >> 2] | 0) >> 3];
    break label$1;
   }
   HEAP32[($12_1 + 12 | 0) >> 2] = 1;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($12_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAPF64[((HEAP32[($12_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 68 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 12 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[((HEAP32[($12_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 64 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 12 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($12_1 + 12 | 0) >> 2] = (HEAP32[($12_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   HEAPF64[(HEAP32[($12_1 + 44 | 0) >> 2] | 0) >> 3] = +(0 | 0);
   HEAPF64[(HEAP32[($12_1 + 40 | 0) >> 2] | 0) >> 3] = +(0 | 0);
  }
  return;
 }
 
 function $176($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1, $16_1, $17_1, $18_1, $19_1, $20_1, $21_1, $22_1, $23_1, $24_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = +$13_1;
  $14_1 = +$14_1;
  $15_1 = +$15_1;
  $16_1 = +$16_1;
  $17_1 = $17_1 | 0;
  $18_1 = $18_1 | 0;
  $19_1 = $19_1 | 0;
  $20_1 = $20_1 | 0;
  $21_1 = $21_1 | 0;
  $22_1 = $22_1 | 0;
  $23_1 = $23_1 | 0;
  $24_1 = $24_1 | 0;
  var $27_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $27_1 = global$0 - 192 | 0;
  global$0 = $27_1;
  HEAP32[($27_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($27_1 + 184 | 0) >> 2] = $1_1;
  HEAP32[($27_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($27_1 + 176 | 0) >> 2] = $3_1;
  HEAP32[($27_1 + 172 | 0) >> 2] = $4_1;
  HEAP32[($27_1 + 168 | 0) >> 2] = $5_1;
  HEAP32[($27_1 + 164 | 0) >> 2] = $6_1;
  HEAP32[($27_1 + 160 | 0) >> 2] = $7_1;
  HEAP32[($27_1 + 156 | 0) >> 2] = $8_1;
  HEAP32[($27_1 + 152 | 0) >> 2] = $9_1;
  HEAP32[($27_1 + 148 | 0) >> 2] = $10_1;
  HEAP32[($27_1 + 144 | 0) >> 2] = $11_1;
  HEAP32[($27_1 + 140 | 0) >> 2] = $12_1;
  HEAPF64[($27_1 + 128 | 0) >> 3] = $13_1;
  HEAPF64[($27_1 + 120 | 0) >> 3] = $14_1;
  HEAPF64[($27_1 + 112 | 0) >> 3] = $15_1;
  HEAPF64[($27_1 + 104 | 0) >> 3] = $16_1;
  HEAP32[($27_1 + 100 | 0) >> 2] = $17_1;
  HEAP32[($27_1 + 96 | 0) >> 2] = $18_1;
  HEAP32[($27_1 + 92 | 0) >> 2] = $19_1;
  HEAP32[($27_1 + 88 | 0) >> 2] = $20_1;
  HEAP32[($27_1 + 84 | 0) >> 2] = $21_1;
  HEAP32[($27_1 + 80 | 0) >> 2] = $22_1;
  HEAP32[($27_1 + 76 | 0) >> 2] = $23_1;
  HEAP32[($27_1 + 72 | 0) >> 2] = $24_1;
  HEAPF64[(HEAP32[($27_1 + 168 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 180 | 0) >> 2] | 0) >> 3];
  HEAPF64[(HEAP32[($27_1 + 164 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 176 | 0) >> 2] | 0) >> 3];
  HEAP32[($27_1 + 12 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($27_1 + 172 | 0) >> 2] | 0) >> 2] = 0;
  HEAP32[($27_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($27_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($27_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $173(HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 140 | 0) >> 2] | 0 | 0);
    (wasm2js_i32$0 = $27_1, wasm2js_f64$0 = +$167(HEAP32[($27_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 140 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 64 | 0) >> 3] = wasm2js_f64$0;
    (wasm2js_i32$0 = $27_1, wasm2js_f64$0 = +$167(HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 164 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 56 | 0) >> 3] = wasm2js_f64$0;
    label$3 : {
     if (!(+HEAPF64[($27_1 + 64 | 0) >> 3] <= 20.0 * +$178(HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 148 | 0) >> 2] | 0 | 0, +(+HEAPF64[($27_1 + 56 | 0) >> 3]), +(+HEAPF64[($27_1 + 64 | 0) >> 3]), +(+HEAPF64[($27_1 + 128 | 0) >> 3]), +(+HEAPF64[($27_1 + 120 | 0) >> 3])) & 1 | 0)) {
      break label$3
     }
     HEAP32[(HEAP32[($27_1 + 172 | 0) >> 2] | 0) >> 2] = 1;
     HEAPF64[(HEAP32[($27_1 + 180 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 168 | 0) >> 2] | 0) >> 3];
     HEAPF64[(HEAP32[($27_1 + 176 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 164 | 0) >> 2] | 0) >> 3];
     break label$1;
    }
    label$4 : {
     label$5 : {
      if (HEAP32[($27_1 + 4 | 0) >> 2] | 0) {
       break label$5
      }
      HEAPF64[($27_1 + 48 | 0) >> 3] = +HEAPF64[($27_1 + 64 | 0) >> 3];
      break label$4;
     }
     label$6 : {
      label$7 : {
       if ((HEAP32[($27_1 + 12 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
        break label$7
       }
       if (+HEAPF64[($27_1 + 64 | 0) >> 3] < +HEAPF64[($27_1 + 48 | 0) >> 3] & 1 | 0) {
        break label$7
       }
       if (+HEAPF64[($27_1 + 40 | 0) >> 3] >= .05 & 1 | 0) {
        break label$7
       }
       HEAPF64[($27_1 + 16 | 0) >> 3] = +HEAPF64[($27_1 + 40 | 0) >> 3];
       HEAP32[($27_1 + 12 | 0) >> 2] = 1;
       label$8 : {
        if (!(+HEAPF64[($27_1 + 40 | 0) >> 3] < +HEAPF64[($27_1 + 112 | 0) >> 3] & 1 | 0)) {
         break label$8
        }
        HEAPF64[($27_1 + 16 | 0) >> 3] = +HEAPF64[($27_1 + 112 | 0) >> 3];
       }
       HEAPF64[($27_1 + 32 | 0) >> 3] = Math_sqrt(+HEAPF64[($27_1 + 16 | 0) >> 3]);
       HEAPF64[($27_1 + 24 | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 168 | 0) >> 2] | 0) >> 3] * (1.0 + +HEAPF64[($27_1 + 32 | 0) >> 3]) - +HEAPF64[(HEAP32[($27_1 + 164 | 0) >> 2] | 0) >> 3] * +HEAPF64[($27_1 + 32 | 0) >> 3];
       HEAPF64[(HEAP32[($27_1 + 164 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 168 | 0) >> 2] | 0) >> 3] * +HEAPF64[($27_1 + 32 | 0) >> 3] + +HEAPF64[(HEAP32[($27_1 + 164 | 0) >> 2] | 0) >> 3] * (1.0 + +HEAPF64[($27_1 + 32 | 0) >> 3]);
       HEAPF64[(HEAP32[($27_1 + 168 | 0) >> 2] | 0) >> 3] = +HEAPF64[($27_1 + 24 | 0) >> 3];
       $173(HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 140 | 0) >> 2] | 0 | 0);
       HEAP32[$27_1 >> 2] = 0;
       label$9 : {
        label$10 : while (1) {
         if (!((HEAP32[$27_1 >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
          break label$9
         }
         $174($27_1 + 8 | 0 | 0, HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 88 | 0) >> 2] | 0 | 0, +(+HEAPF64[($27_1 + 128 | 0) >> 3]), +(+HEAPF64[($27_1 + 104 | 0) >> 3]), HEAP32[($27_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 72 | 0) >> 2] | 0 | 0);
         $175($27_1 + 8 | 0 | 0, HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 96 | 0) >> 2] | 0 | 0);
         HEAP32[$27_1 >> 2] = (HEAP32[$27_1 >> 2] | 0) + 1 | 0;
         continue label$10;
        };
       }
       HEAPF64[($27_1 + 48 | 0) >> 3] = +HEAPF64[($27_1 + 104 | 0) >> 3];
       break label$6;
      }
      label$11 : {
       if (!(+HEAPF64[($27_1 + 64 | 0) >> 3] * .1 > +HEAPF64[($27_1 + 48 | 0) >> 3] & 1 | 0)) {
        break label$11
       }
       break label$1;
      }
      HEAPF64[($27_1 + 48 | 0) >> 3] = +HEAPF64[($27_1 + 64 | 0) >> 3];
     }
    }
    $174($27_1 + 8 | 0 | 0, HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 88 | 0) >> 2] | 0 | 0, +(+HEAPF64[($27_1 + 128 | 0) >> 3]), +(+HEAPF64[($27_1 + 104 | 0) >> 3]), HEAP32[($27_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 72 | 0) >> 2] | 0 | 0);
    $175($27_1 + 8 | 0 | 0, HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 152 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 96 | 0) >> 2] | 0 | 0);
    $174($27_1 + 8 | 0 | 0, HEAP32[($27_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 88 | 0) >> 2] | 0 | 0, +(+HEAPF64[($27_1 + 128 | 0) >> 3]), +(+HEAPF64[($27_1 + 104 | 0) >> 3]), HEAP32[($27_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 72 | 0) >> 2] | 0 | 0);
    label$12 : {
     if (HEAP32[($27_1 + 8 | 0) >> 2] | 0) {
      break label$12
     }
     (wasm2js_i32$0 = $27_1, wasm2js_f64$0 = +$167(HEAP32[($27_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 72 | 0) >> 2] | 0 | 0) / +$167(HEAP32[($27_1 + 168 | 0) >> 2] | 0 | 0, HEAP32[($27_1 + 164 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
     HEAPF64[(HEAP32[($27_1 + 168 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 168 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($27_1 + 76 | 0) >> 2] | 0) >> 3];
     HEAPF64[(HEAP32[($27_1 + 164 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($27_1 + 164 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[($27_1 + 72 | 0) >> 2] | 0) >> 3];
    }
    HEAP32[($27_1 + 4 | 0) >> 2] = (HEAP32[($27_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $27_1 + 192 | 0;
  return;
 }
 
 function $177($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $57_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 1 | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + ((((HEAP32[($6_1 + 20 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $165(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  $863(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
  $57_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 48 | 0;
  return $57_1 | 0;
 }
 
 function $178($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = +$3_1;
  $4_1 = +$4_1;
  $5_1 = +$5_1;
  $6_1 = +$6_1;
  var $9_1 = 0, $56_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $9_1 = global$0 - 80 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 68 | 0) >> 2] = $2_1;
  HEAPF64[($9_1 + 56 | 0) >> 3] = $3_1;
  HEAPF64[($9_1 + 48 | 0) >> 3] = $4_1;
  HEAPF64[($9_1 + 40 | 0) >> 3] = $5_1;
  HEAPF64[($9_1 + 32 | 0) >> 3] = $6_1;
  (wasm2js_i32$0 = $9_1, wasm2js_f64$0 = +$167(HEAP32[($9_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 68 | 0) >> 2] | 0 | 0) * +HEAPF64[($9_1 + 32 | 0) >> 3] / (+HEAPF64[($9_1 + 40 | 0) >> 3] + +HEAPF64[($9_1 + 32 | 0) >> 3])), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
  HEAP32[($9_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    (wasm2js_i32$0 = $9_1, wasm2js_f64$0 = +HEAPF64[($9_1 + 16 | 0) >> 3] * +HEAPF64[($9_1 + 56 | 0) >> 3] + +$167((HEAP32[($9_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($9_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
    HEAP32[($9_1 + 12 | 0) >> 2] = (HEAP32[($9_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[($9_1 + 24 | 0) >> 3] = +HEAPF64[($9_1 + 16 | 0) >> 3] * (+HEAPF64[($9_1 + 40 | 0) >> 3] + +HEAPF64[($9_1 + 32 | 0) >> 3]) - +HEAPF64[($9_1 + 48 | 0) >> 3] * +HEAPF64[($9_1 + 32 | 0) >> 3];
  $56_1 = +HEAPF64[($9_1 + 24 | 0) >> 3];
  global$0 = $9_1 + 80 | 0;
  return +$56_1;
 }
 
 function $179($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $129_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$1
   }
   $875(global$3 + 4633 | 0 | 0, 0 | 0) | 0;
   $875(global$3 + 7617 | 0 | 0, 0 | 0) | 0;
   fimport$0(1 | 0);
   abort();
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 5 | 0) + 208 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 3] = .05;
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 24 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 32 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 56 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 40 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 64 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 48 | 0) >> 3] = +(0 | 0);
  HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 84 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 88 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0 ? 1 : 0;
  $741((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 72 | 0 | 0, global$3 + 1571 | 0 | 0) | 0;
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 96 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 104 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 112 | 0) >> 3] = +(0 | 0);
  HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 120 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 124 | 0) >> 2] = 0;
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 128 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 136 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 144 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 152 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 160 | 0) >> 3] = +(0 | 0);
  HEAPF64[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 168 | 0) >> 3] = +(0 | 0);
  HEAP32[$4_1 >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) < ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[(((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[$4_1 >> 2] | 0) << 5 | 0) | 0) >> 3] = +(0 | 0);
    HEAPF64[((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[$4_1 >> 2] | 0) << 5 | 0) | 0) + 8 | 0) >> 3] = +(0 | 0);
    HEAPF64[((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[$4_1 >> 2] | 0) << 5 | 0) | 0) + 16 | 0) >> 3] = +(0 | 0);
    HEAPF64[((((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[$4_1 >> 2] | 0) << 5 | 0) | 0) + 24 | 0) >> 3] = +(0 | 0);
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  $129_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $129_1 | 0;
 }
 
 function $180($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = +$9_1;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  $15_1 = $15_1 | 0;
  var $18_1 = 0, $227_1 = 0, $238_1 = 0, $243_1 = 0, $266_1 = 0, $181_1 = 0, $732_1 = 0.0, $768_1 = 0.0, $788_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $18_1 = global$0 - 224 | 0;
  global$0 = $18_1;
  HEAP32[($18_1 + 220 | 0) >> 2] = $0_1;
  HEAP32[($18_1 + 216 | 0) >> 2] = $1_1;
  HEAP32[($18_1 + 212 | 0) >> 2] = $2_1;
  HEAP32[($18_1 + 208 | 0) >> 2] = $3_1;
  HEAP32[($18_1 + 204 | 0) >> 2] = $4_1;
  HEAP32[($18_1 + 200 | 0) >> 2] = $5_1;
  HEAP32[($18_1 + 196 | 0) >> 2] = $6_1;
  HEAP32[($18_1 + 192 | 0) >> 2] = $7_1;
  HEAP32[($18_1 + 188 | 0) >> 2] = $8_1;
  HEAPF64[($18_1 + 176 | 0) >> 3] = $9_1;
  HEAP32[($18_1 + 172 | 0) >> 2] = $10_1;
  HEAP32[($18_1 + 168 | 0) >> 2] = $11_1;
  HEAP32[($18_1 + 164 | 0) >> 2] = $12_1;
  HEAP32[($18_1 + 160 | 0) >> 2] = $13_1;
  HEAP32[($18_1 + 156 | 0) >> 2] = $14_1;
  HEAP32[($18_1 + 152 | 0) >> 2] = $15_1;
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($18_1 + 220 | 0) >> 2] | 0) << 3 | 0, HEAP32[($18_1 + 208 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 148 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($18_1 + 220 | 0) >> 2] | 0) << 3 | 0, HEAP32[($18_1 + 208 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 144 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $862((HEAP32[($18_1 + 208 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 136 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($18_1 + 220 | 0) >> 2] | 0) << 3 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 132 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($18_1 + 220 | 0) >> 2] | 0) << 3 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 112 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $862((HEAP32[($18_1 + 220 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 128 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $862((HEAP32[($18_1 + 220 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 100 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $864(1 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 124 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $862((HEAP32[($18_1 + 220 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 120 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $862((HEAP32[($18_1 + 220 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 140 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $864(1 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 116 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($18_1 + 152 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($18_1 + 108 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($18_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[((HEAP32[($18_1 + 144 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
      HEAP32[($18_1 + 108 | 0) >> 2] = (HEAP32[($18_1 + 108 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($18_1 + 108 | 0) >> 2] = HEAP32[($18_1 + 208 | 0) >> 2] | 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($18_1 + 108 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($18_1 + 220 | 0) >> 2] | 0, HEAP32[($18_1 + 208 | 0) >> 2] | 0) | 0) & 1 | 0)) {
       break label$5
      }
      HEAPF64[((HEAP32[($18_1 + 144 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 216 | 0) >> 2] | 0) + (((HEAP32[($18_1 + 108 | 0) >> 2] | 0) - (HEAP32[($18_1 + 208 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($18_1 + 108 | 0) >> 2] = (HEAP32[($18_1 + 108 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    break label$1;
   }
   label$7 : {
    if (HEAP32[($18_1 + 152 | 0) >> 2] | 0) {
     break label$7
    }
    HEAP32[($18_1 + 108 | 0) >> 2] = 0;
    label$8 : {
     label$9 : while (1) {
      if (!((HEAP32[($18_1 + 108 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($18_1 + 220 | 0) >> 2] | 0, HEAP32[($18_1 + 208 | 0) >> 2] | 0) | 0) & 1 | 0)) {
       break label$8
      }
      HEAPF64[((HEAP32[($18_1 + 144 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($18_1 + 108 | 0) >> 2] = (HEAP32[($18_1 + 108 | 0) >> 2] | 0) + 1 | 0;
      continue label$9;
     };
    }
   }
  }
  $106(HEAP32[($18_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 148 | 0) >> 2] | 0 | 0);
  $119(HEAP32[($18_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0);
  $868(HEAP32[($18_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 132 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[($18_1 + 220 | 0) >> 2] | 0) << 3 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0) | 0) | 0;
  $119(HEAP32[($18_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0, 1 | 0);
  label$10 : {
   if (!((HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$10
   }
   label$11 : {
    label$12 : {
     if ($739(HEAP32[($18_1 + 156 | 0) >> 2] | 0 | 0, global$3 + 1571 | 0 | 0) | 0) {
      break label$12
     }
     $181_1 = $75(HEAP32[($18_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 204 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[(HEAP32[($18_1 + 160 | 0) >> 2] | 0) >> 2] = $181_1;
     break label$11;
    }
    label$13 : {
     label$14 : {
      if ($739(HEAP32[($18_1 + 156 | 0) >> 2] | 0 | 0, global$3 + 2011 | 0 | 0) | 0) {
       break label$14
      }
      $74(HEAP32[($18_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 204 | 0) >> 2] | 0 | 0) | 0;
      $875(global$3 + 7088 | 0 | 0, 0 | 0) | 0;
      break label$13;
     }
     label$15 : {
      label$16 : {
       if ($739(HEAP32[($18_1 + 156 | 0) >> 2] | 0 | 0, global$3 + 2656 | 0 | 0) | 0) {
        break label$16
       }
       $79(HEAP32[($18_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 204 | 0) >> 2] | 0 | 0) | 0;
       $875(global$3 + 7088 | 0 | 0, 0 | 0) | 0;
       break label$15;
      }
      $875(global$3 + 7450 | 0 | 0, 0 | 0) | 0;
      $875(global$3 + 6707 | 0 | 0, 0 | 0) | 0;
      fimport$0(-1 | 0);
      abort();
     }
    }
   }
  }
  HEAP32[($18_1 + 104 | 0) >> 2] = (HEAP32[($18_1 + 208 | 0) >> 2] | 0) - (HEAP32[($18_1 + 220 | 0) >> 2] | 0) | 0;
  $227_1 = 1;
  $119(HEAP32[($18_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0, $227_1 | 0, HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0, $227_1 | 0);
  $119(HEAP32[($18_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0, 1 | 0);
  $238_1 = 1;
  $119(HEAP32[($18_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 124 | 0) >> 2] | 0 | 0, $238_1 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0, $238_1 | 0);
  HEAPF64[(HEAP32[($18_1 + 200 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($18_1 + 116 | 0) >> 2] | 0) >> 3] - +HEAPF64[(HEAP32[($18_1 + 124 | 0) >> 2] | 0) >> 3];
  $243_1 = HEAP32[($18_1 + 200 | 0) >> 2] | 0;
  HEAPF64[$243_1 >> 3] = +HEAPF64[$243_1 >> 3] / +(HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0);
  HEAPF64[($18_1 + 88 | 0) >> 3] = +HEAPF64[(HEAP32[($18_1 + 200 | 0) >> 2] | 0) >> 3];
  $120(HEAP32[($18_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 100 | 0) >> 2] | 0 | 0);
  $123(HEAP32[($18_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 196 | 0) >> 2] | 0 | 0);
  HEAP32[($18_1 + 108 | 0) >> 2] = 0;
  label$17 : {
   label$18 : while (1) {
    if (!((HEAP32[($18_1 + 108 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($18_1 + 220 | 0) >> 2] | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0) | 0) & 1 | 0)) {
     break label$17
    }
    $266_1 = (HEAP32[($18_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$266_1 >> 3] = +HEAPF64[$266_1 >> 3] * +HEAPF64[($18_1 + 88 | 0) >> 3];
    HEAP32[($18_1 + 108 | 0) >> 2] = (HEAP32[($18_1 + 108 | 0) >> 2] | 0) + 1 | 0;
    continue label$18;
   };
  }
  HEAPF64[($18_1 + 80 | 0) >> 3] = +(0 | 0);
  HEAP32[($18_1 + 108 | 0) >> 2] = 0;
  label$19 : {
   label$20 : while (1) {
    if (!((HEAP32[($18_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$19
    }
    HEAPF64[($18_1 + 80 | 0) >> 3] = +HEAPF64[($18_1 + 80 | 0) >> 3] + +HEAPF64[((HEAP32[($18_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($18_1 + 108 | 0) >> 2] = (HEAP32[($18_1 + 108 | 0) >> 2] | 0) + 1 | 0;
    continue label$20;
   };
  }
  HEAPF64[($18_1 + 72 | 0) >> 3] = +HEAPF64[($18_1 + 80 | 0) >> 3] / +(HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0);
  HEAPF64[($18_1 + 64 | 0) >> 3] = +HEAPF64[($18_1 + 72 | 0) >> 3] * +HEAPF64[($18_1 + 72 | 0) >> 3];
  HEAPF64[(HEAP32[($18_1 + 192 | 0) >> 2] | 0) >> 3] = (+HEAPF64[(HEAP32[($18_1 + 124 | 0) >> 2] | 0) >> 3] - +(HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0) * +HEAPF64[($18_1 + 64 | 0) >> 3]) / (+HEAPF64[(HEAP32[($18_1 + 116 | 0) >> 2] | 0) >> 3] - +(HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0) * +HEAPF64[($18_1 + 64 | 0) >> 3]);
  HEAPF64[($18_1 + 16 | 0) >> 3] = (HEAP32[($18_1 + 152 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0 ? 1.0 : +(0 | 0);
  HEAPF64[((HEAP32[($18_1 + 192 | 0) >> 2] | 0) + 8 | 0) >> 3] = 1.0 - (1.0 - +HEAPF64[(HEAP32[($18_1 + 192 | 0) >> 2] | 0) >> 3]) * (+(HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0) - +HEAPF64[($18_1 + 16 | 0) >> 3]) / +(HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0);
  HEAPF64[($18_1 + 56 | 0) >> 3] = +HEAPF64[($18_1 + 176 | 0) >> 3] / 2.0;
  HEAP32[($18_1 + 108 | 0) >> 2] = 0;
  label$21 : {
   label$22 : while (1) {
    if (!((HEAP32[($18_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$21
    }
    HEAPF64[((HEAP32[($18_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[($18_1 + 196 | 0) >> 2] | 0) + (Math_imul(HEAP32[($18_1 + 108 | 0) >> 2] | 0, (HEAP32[($18_1 + 220 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3]);
    (wasm2js_i32$0 = $18_1, wasm2js_f64$0 = +$159(+(+HEAPF64[($18_1 + 56 | 0) >> 3]), HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
    HEAPF64[($18_1 + 40 | 0) >> 3] = +HEAPF64[($18_1 + 48 | 0) >> 3] * +HEAPF64[((HEAP32[($18_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($18_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 204 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($18_1 + 40 | 0) >> 3];
    HEAPF64[((HEAP32[($18_1 + 164 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 204 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[($18_1 + 40 | 0) >> 3];
    HEAP32[($18_1 + 108 | 0) >> 2] = (HEAP32[($18_1 + 108 | 0) >> 2] | 0) + 1 | 0;
    continue label$22;
   };
  }
  (wasm2js_i32$0 = $18_1, wasm2js_f64$0 = +$164(+(+HEAPF64[($18_1 + 56 | 0) >> 3]), HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 32 | 0) >> 3] = wasm2js_f64$0;
  (wasm2js_i32$0 = $18_1, wasm2js_f64$0 = +$164(+(1.0 - +HEAPF64[($18_1 + 56 | 0) >> 3]), HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 24 | 0) >> 3] = wasm2js_f64$0;
  HEAPF64[((HEAP32[($18_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 220 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0) * +HEAPF64[($18_1 + 88 | 0) >> 3] / +HEAPF64[($18_1 + 24 | 0) >> 3];
  HEAPF64[((HEAP32[($18_1 + 164 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 220 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0) * +HEAPF64[($18_1 + 88 | 0) >> 3] / +HEAPF64[($18_1 + 32 | 0) >> 3];
  $119(HEAP32[($18_1 + 148 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 204 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0, 1 | 0);
  HEAP32[($18_1 + 108 | 0) >> 2] = 0;
  label$23 : {
   label$24 : while (1) {
    if (!((HEAP32[($18_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$23
    }
    HEAPF64[((HEAP32[($18_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($18_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($18_1 + 108 | 0) >> 2] = (HEAP32[($18_1 + 108 | 0) >> 2] | 0) + 1 | 0;
    continue label$24;
   };
  }
  HEAPF64[($18_1 + 8 | 0) >> 3] = +(0 | 0);
  HEAPF64[$18_1 >> 3] = +(0 | 0);
  HEAP32[($18_1 + 108 | 0) >> 2] = 0;
  label$25 : {
   label$26 : while (1) {
    if (!((HEAP32[($18_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$25
    }
    HEAPF64[($18_1 + 8 | 0) >> 3] = +HEAPF64[($18_1 + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($18_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($18_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[$18_1 >> 3] = +HEAPF64[$18_1 >> 3] + +HEAPF64[((HEAP32[($18_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($18_1 + 188 | 0) >> 2] | 0) + ((HEAP32[($18_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($18_1 + 108 | 0) >> 2] = (HEAP32[($18_1 + 108 | 0) >> 2] | 0) + 1 | 0;
    continue label$26;
   };
  }
  label$27 : {
   label$28 : {
    if (!((HEAP32[($18_1 + 152 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$28
    }
    label$29 : {
     label$30 : {
      if (!((HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$30
      }
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[(HEAP32[($18_1 + 192 | 0) >> 2] | 0) >> 3] * (+HEAPF64[(HEAP32[($18_1 + 116 | 0) >> 2] | 0) >> 3] - +(HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0) * +HEAPF64[($18_1 + 64 | 0) >> 3]);
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 16 | 0) >> 3] = (1.0 - +HEAPF64[(HEAP32[($18_1 + 192 | 0) >> 2] | 0) >> 3]) * (+HEAPF64[(HEAP32[($18_1 + 116 | 0) >> 2] | 0) >> 3] - +(HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0) * +HEAPF64[($18_1 + 64 | 0) >> 3]);
      HEAPF64[(HEAP32[($18_1 + 172 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 16 | 0) >> 3];
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 3] = +(HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0) - +HEAPF64[($18_1 + 16 | 0) >> 3];
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 3] = +(HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0);
      break label$29;
     }
     label$31 : {
      if (!((HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
       break label$31
      }
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[(HEAP32[($18_1 + 192 | 0) >> 2] | 0) >> 3] * (+HEAPF64[(HEAP32[($18_1 + 116 | 0) >> 2] | 0) >> 3] - +(HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0) * +HEAPF64[($18_1 + 64 | 0) >> 3]);
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 16 | 0) >> 3] = (1.0 - +HEAPF64[(HEAP32[($18_1 + 192 | 0) >> 2] | 0) >> 3]) * (+HEAPF64[(HEAP32[($18_1 + 116 | 0) >> 2] | 0) >> 3] - +(HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0) * +HEAPF64[($18_1 + 64 | 0) >> 3]);
      HEAPF64[(HEAP32[($18_1 + 172 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 16 | 0) >> 3];
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 3] = +(HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0) - +HEAPF64[($18_1 + 16 | 0) >> 3];
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 3] = +(HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0);
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 40 | 0) >> 3] = +HEAPF64[(HEAP32[($18_1 + 192 | 0) >> 2] | 0) >> 3] / +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 3] / ((1.0 - +HEAPF64[(HEAP32[($18_1 + 192 | 0) >> 2] | 0) >> 3]) / +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 3]);
      $732_1 = 1.0 - +$160(+(+HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 40 | 0) >> 3]), (HEAP32[($18_1 + 220 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0);
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 48 | 0) >> 3] = $732_1;
     }
    }
    break label$27;
   }
   HEAPF64[(HEAP32[($18_1 + 192 | 0) >> 2] | 0) >> 3] = +HEAPF64[($18_1 + 8 | 0) >> 3] / (+HEAPF64[($18_1 + 8 | 0) >> 3] + +HEAPF64[$18_1 >> 3]);
   HEAPF64[((HEAP32[($18_1 + 192 | 0) >> 2] | 0) + 8 | 0) >> 3] = 1.0 - (1.0 - +HEAPF64[(HEAP32[($18_1 + 192 | 0) >> 2] | 0) >> 3]) * (+(HEAP32[($18_1 + 208 | 0) >> 2] | 0 | 0) - +HEAPF64[($18_1 + 16 | 0) >> 3]) / +(HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0);
   label$32 : {
    label$33 : {
     if (!((HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$33
     }
     HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($18_1 + 8 | 0) >> 3];
     HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 16 | 0) >> 3] = +HEAPF64[$18_1 >> 3];
     HEAPF64[(HEAP32[($18_1 + 172 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 16 | 0) >> 3];
     HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 3] = +(HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0);
     HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 3] = +(HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0);
     HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 40 | 0) >> 3] = +HEAPF64[(HEAP32[($18_1 + 192 | 0) >> 2] | 0) >> 3] / +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 3] / ((1.0 - +HEAPF64[(HEAP32[($18_1 + 192 | 0) >> 2] | 0) >> 3]) / +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 3]);
     $768_1 = 1.0 - +$160(+(+HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 40 | 0) >> 3]), HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0);
     HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 48 | 0) >> 3] = $768_1;
     break label$32;
    }
    label$34 : {
     label$35 : {
      if (!((HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
       break label$35
      }
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($18_1 + 8 | 0) >> 3];
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 16 | 0) >> 3] = +HEAPF64[$18_1 >> 3];
      HEAPF64[(HEAP32[($18_1 + 172 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 16 | 0) >> 3];
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 3] = +(HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0);
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 3] = +(HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0);
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 40 | 0) >> 3] = +HEAPF64[(HEAP32[($18_1 + 192 | 0) >> 2] | 0) >> 3] / +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 3] / ((1.0 - +HEAPF64[(HEAP32[($18_1 + 192 | 0) >> 2] | 0) >> 3]) / +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 3]);
      $788_1 = 1.0 - +$160(+(+HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 40 | 0) >> 3]), (HEAP32[($18_1 + 220 | 0) >> 2] | 0) - 1 | 0 | 0, HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0);
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 48 | 0) >> 3] = $788_1;
      break label$34;
     }
     label$36 : {
      if (HEAP32[($18_1 + 220 | 0) >> 2] | 0) {
       break label$36
      }
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($18_1 + 8 | 0) >> 3];
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 16 | 0) >> 3] = +HEAPF64[$18_1 >> 3];
      HEAPF64[(HEAP32[($18_1 + 172 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 16 | 0) >> 3];
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 24 | 0) >> 3] = +(HEAP32[($18_1 + 220 | 0) >> 2] | 0 | 0);
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 32 | 0) >> 3] = +(HEAP32[($18_1 + 104 | 0) >> 2] | 0 | 0);
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 40 | 0) >> 3] = nan;
      HEAPF64[((HEAP32[($18_1 + 172 | 0) >> 2] | 0) + 48 | 0) >> 3] = nan;
     }
    }
   }
  }
  $863(HEAP32[($18_1 + 100 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($18_1 + 148 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($18_1 + 144 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($18_1 + 132 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($18_1 + 112 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($18_1 + 128 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($18_1 + 124 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($18_1 + 120 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($18_1 + 116 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($18_1 + 140 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($18_1 + 136 | 0) >> 2] | 0 | 0);
  global$0 = $18_1 + 224 | 0;
  return;
 }
 
 function $181($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 88 | 0) >> 2] = 1;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (HEAP32[($4_1 + 8 | 0) >> 2] | 0) {
      break label$4
     }
     HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 88 | 0) >> 2] = 0;
     break label$3;
    }
    $875(global$3 + 7355 | 0 | 0, 0 | 0) | 0;
    fimport$0(-1 | 0);
    abort();
   }
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $182($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  var $8_1 = 0, $16_1 = 0, $261_1 = 0.0, $89_1 = 0, $264_1 = 0.0, $97_1 = 0, $222_1 = 0, $298_1 = 0.0, $310_1 = 0.0, $312_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 96 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 84 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 80 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 76 | 0) >> 2] = $4_1;
  HEAPF64[($8_1 + 64 | 0) >> 3] = $5_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($8_1 + 64 | 0) >> 3];
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862(56 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   label$2 : {
    if (HEAP32[($8_1 + 40 | 0) >> 2] | 0) {
     break label$2
    }
    $16_1 = 0;
    break label$1;
   }
   $16_1 = $862((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  }
  HEAP32[($8_1 + 56 | 0) >> 2] = $16_1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862(((HEAP32[($8_1 + 40 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 52 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862(((HEAP32[($8_1 + 40 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862(8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
  HEAPF64[$8_1 >> 3] = 3.141592653589793;
  $180(HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($8_1 + 92 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 76 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 56 | 0 | 0, HEAP32[($8_1 + 80 | 0) >> 2] | 0 | 0, +(+HEAPF64[($8_1 + 64 | 0) >> 3]), HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 92 | 0 | 0, (HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 72 | 0 | 0, HEAP32[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0 | 0);
  HEAP32[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 84 | 0) >> 2] = (HEAP32[(HEAP32[($8_1 + 92 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0;
  HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 44 | 0) >> 2] | 0) >> 3];
  HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
  HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
  HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 96 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 60 | 0) >> 2] | 0) >> 3];
  HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 104 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 3];
  HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 112 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 16 | 0) >> 3];
  $261_1 = +HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 24 | 0) >> 3];
  label$3 : {
   label$4 : {
    if (!(Math_abs($261_1) < 2147483648.0)) {
     break label$4
    }
    $89_1 = ~~$261_1;
    break label$3;
   }
   $89_1 = -2147483648;
  }
  HEAP32[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 120 | 0) >> 2] = $89_1;
  $264_1 = +HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 32 | 0) >> 3];
  label$5 : {
   label$6 : {
    if (!(Math_abs($264_1) < 2147483648.0)) {
     break label$6
    }
    $97_1 = ~~$264_1;
    break label$5;
   }
   $97_1 = -2147483648;
  }
  HEAP32[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 124 | 0) >> 2] = $97_1;
  HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 128 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 40 | 0) >> 3];
  HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 136 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + 48 | 0) >> 3];
  HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 40 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 56 | 0) >> 3];
  HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 64 | 0) >> 3];
  HEAP32[($8_1 + 36 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAPF64[(((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 5 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 5 | 0) | 0) + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 5 | 0) | 0) + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 5 | 0) | 0) + 24 | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[($8_1 + 76 | 0) >> 2] | 0) + (Math_imul((HEAP32[($8_1 + 40 | 0) >> 2] | 0) + 1 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
    HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  HEAPF64[($8_1 + 8 | 0) >> 3] = +(HEAP32[(HEAP32[($8_1 + 92 | 0) >> 2] | 0) >> 2] | 0 | 0) / 2.0;
  HEAPF64[($8_1 + 16 | 0) >> 3] = +(0 | 0);
  HEAP32[($8_1 + 36 | 0) >> 2] = 0;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($8_1 + 92 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$9
    }
    HEAPF64[($8_1 + 16 | 0) >> 3] = +HEAPF64[($8_1 + 16 | 0) >> 3] + +HEAPF64[((HEAP32[($8_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($8_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$10;
   };
  }
  $298_1 = -+HEAPF64[($8_1 + 8 | 0) >> 3] * +$729(+(2.0 * +HEAPF64[$8_1 >> 3])) - +HEAPF64[($8_1 + 8 | 0) >> 3] * +$729(+(+HEAPF64[($8_1 + 16 | 0) >> 3] / +(HEAP32[(HEAP32[($8_1 + 92 | 0) >> 2] | 0) >> 2] | 0 | 0)));
  HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 144 | 0) >> 3] = $298_1 - +HEAPF64[($8_1 + 8 | 0) >> 3];
  HEAP32[($8_1 + 28 | 0) >> 2] = (HEAP32[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0 ? 1 : 0;
  label$11 : {
   label$12 : {
    if (!((HEAP32[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$12
    }
    $222_1 = (HEAP32[($8_1 + 40 | 0) >> 2] | 0) - 1 | 0;
    break label$11;
   }
   $222_1 = HEAP32[($8_1 + 40 | 0) >> 2] | 0;
  }
  HEAP32[($8_1 + 24 | 0) >> 2] = $222_1;
  HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 152 | 0) >> 3] = -2.0 * +HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 144 | 0) >> 3] + 2.0 * +((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (HEAP32[($8_1 + 24 | 0) >> 2] | 0) | 0 | 0);
  $310_1 = -2.0 * +HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 144 | 0) >> 3];
  $312_1 = +$729(+(+(HEAP32[(HEAP32[($8_1 + 92 | 0) >> 2] | 0) >> 2] | 0 | 0)));
  HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 160 | 0) >> 3] = $310_1 + $312_1 * +((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (HEAP32[($8_1 + 24 | 0) >> 2] | 0) | 0 | 0);
  HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 168 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 92 | 0) >> 2] | 0) + 152 | 0) >> 3] + 2.0 * +(HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) * (+(HEAP32[(HEAP32[($8_1 + 92 | 0) >> 2] | 0) >> 2] | 0 | 0) / (+(HEAP32[(HEAP32[($8_1 + 92 | 0) >> 2] | 0) >> 2] | 0 | 0) - +(HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) - 1.0) - 1.0);
  $863(HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0);
  global$0 = $8_1 + 96 | 0;
  return;
 }
 
 function $183($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $106_1 = 0, $118_1 = 0, $141_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862(8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 3] = 1.0;
    HEAPF64[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 176 | 0) >> 3];
    HEAP32[($6_1 + 28 | 0) >> 2] = 1;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 28 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[((HEAP32[($6_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 5 | 0) | 0) >> 3];
      HEAP32[($6_1 + 28 | 0) >> 2] = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    break label$1;
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAPF64[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[((HEAP32[($6_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 5 | 0) | 0) >> 3];
     HEAP32[($6_1 + 28 | 0) >> 2] = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
  }
  $106_1 = 1;
  $119(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $106_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $106_1 | 0);
  HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 3];
  $119(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
  $118_1 = 1;
  $119(HEAP32[$6_1 >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $118_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $118_1 | 0);
  HEAPF64[(HEAP32[($6_1 + 32 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 3];
  HEAPF64[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 3] + +HEAPF64[(HEAP32[($6_1 + 32 | 0) >> 2] | 0) >> 3];
  $863(HEAP32[$6_1 >> 2] | 0 | 0);
  $863(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0);
  $141_1 = +HEAPF64[($6_1 + 16 | 0) >> 3];
  global$0 = $6_1 + 48 | 0;
  return +$141_1;
 }
 
 function $184($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $863(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $185($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1, $16_1, $17_1, $18_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  $15_1 = $15_1 | 0;
  $16_1 = $16_1 | 0;
  $17_1 = $17_1 | 0;
  $18_1 = $18_1 | 0;
  var $21_1 = 0, $343_1 = 0.0, $82_1 = 0, $94_1 = 0, $106_1 = 0, $119_1 = 0, $131_1 = 0, $350_1 = 0.0, $352_1 = 0.0, $148_1 = 0, $359_1 = 0.0, $361_1 = 0.0, $164_1 = 0, $368_1 = 0.0, $370_1 = 0.0, $180_1 = 0, $191_1 = 0, $206_1 = 0, $221_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $21_1 = global$0 - 144 | 0;
  global$0 = $21_1;
  HEAP32[($21_1 + 140 | 0) >> 2] = $0_1;
  HEAP32[($21_1 + 136 | 0) >> 2] = $1_1;
  HEAP32[($21_1 + 132 | 0) >> 2] = $2_1;
  HEAP32[($21_1 + 128 | 0) >> 2] = $3_1;
  HEAP32[($21_1 + 124 | 0) >> 2] = $4_1;
  HEAP32[($21_1 + 120 | 0) >> 2] = $5_1;
  HEAP32[($21_1 + 116 | 0) >> 2] = $6_1;
  HEAP32[($21_1 + 112 | 0) >> 2] = $7_1;
  HEAP32[($21_1 + 108 | 0) >> 2] = $8_1;
  HEAP32[($21_1 + 104 | 0) >> 2] = $9_1;
  HEAP32[($21_1 + 100 | 0) >> 2] = $10_1;
  HEAP32[($21_1 + 96 | 0) >> 2] = $11_1;
  HEAP32[($21_1 + 92 | 0) >> 2] = $12_1;
  HEAP32[($21_1 + 88 | 0) >> 2] = $13_1;
  HEAP32[($21_1 + 84 | 0) >> 2] = $14_1;
  HEAP32[($21_1 + 80 | 0) >> 2] = $15_1;
  HEAP32[($21_1 + 76 | 0) >> 2] = $16_1;
  HEAP32[($21_1 + 72 | 0) >> 2] = $17_1;
  HEAP32[($21_1 + 68 | 0) >> 2] = $18_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($21_1 + 132 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[($21_1 + 136 | 0) >> 2] | 0 | 0) < ((HEAP32[($21_1 + 132 | 0) >> 2] | 0) << 1 | 0 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $875(global$3 + 6298 | 0 | 0, 0 | 0) | 0;
   fimport$0(-1 | 0);
   abort();
  }
  HEAP32[($21_1 + 4 | 0) >> 2] = 0;
  label$3 : {
   label$4 : {
    if ($739(HEAP32[($21_1 + 128 | 0) >> 2] | 0 | 0, global$3 + 2660 | 0 | 0) | 0) {
     break label$4
    }
    HEAP32[($21_1 + 4 | 0) >> 2] = 1;
    HEAP32[($21_1 + 48 | 0) >> 2] = Math_imul(HEAP32[($21_1 + 136 | 0) >> 2] | 0, 10) + 1 | 0;
    HEAP32[($21_1 + 44 | 0) >> 2] = 0;
    break label$3;
   }
   label$5 : {
    if (!((HEAP32[($21_1 + 124 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$5
    }
    $875(global$3 + 4550 | 0 | 0, 0 | 0) | 0;
    fimport$0(-1 | 0);
    abort();
   }
   HEAP32[($21_1 + 48 | 0) >> 2] = HEAP32[(HEAP32[($21_1 + 124 | 0) >> 2] | 0) >> 2] | 0;
  }
  label$6 : {
   if (!((HEAP32[($21_1 + 116 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$6
   }
   $343_1 = Math_ceil(1.5 * +(HEAP32[($21_1 + 132 | 0) >> 2] | 0 | 0) / (1.0 - 1.5 / +(HEAP32[($21_1 + 48 | 0) >> 2] | 0 | 0)));
   label$7 : {
    label$8 : {
     if (!(Math_abs($343_1) < 2147483648.0)) {
      break label$8
     }
     $82_1 = ~~$343_1;
     break label$7;
    }
    $82_1 = -2147483648;
   }
   (wasm2js_i32$0 = $21_1, wasm2js_i32$1 = $186($82_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
  }
  label$9 : {
   label$10 : {
    if (!((HEAP32[($21_1 + 120 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$10
    }
    $94_1 = 0;
    break label$9;
   }
   $94_1 = HEAP32[(HEAP32[($21_1 + 120 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($21_1 + 44 | 0) >> 2] = $94_1;
  label$11 : {
   label$12 : {
    if (!((HEAP32[($21_1 + 112 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$12
    }
    $106_1 = 1;
    break label$11;
   }
   $106_1 = HEAP32[(HEAP32[($21_1 + 112 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($21_1 + 36 | 0) >> 2] = $106_1;
  label$13 : {
   label$14 : {
    if (!((HEAP32[($21_1 + 108 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$14
    }
    $119_1 = $186(HEAP32[($21_1 + 132 | 0) >> 2] | 0 | 0) | 0;
    break label$13;
   }
   $119_1 = HEAP32[(HEAP32[($21_1 + 108 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($21_1 + 32 | 0) >> 2] = $119_1;
  label$15 : {
   label$16 : {
    if (!((HEAP32[($21_1 + 104 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$16
    }
    $131_1 = HEAP32[($21_1 + 36 | 0) >> 2] | 0;
    break label$15;
   }
   $131_1 = HEAP32[(HEAP32[($21_1 + 104 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($21_1 + 28 | 0) >> 2] = $131_1;
  label$17 : {
   label$18 : {
    if (!((HEAP32[($21_1 + 100 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$18
    }
    $350_1 = Math_ceil(+(HEAP32[($21_1 + 48 | 0) >> 2] | 0 | 0) / 10.0);
    break label$17;
   }
   $350_1 = +(HEAP32[(HEAP32[($21_1 + 100 | 0) >> 2] | 0) >> 2] | 0 | 0);
  }
  $352_1 = $350_1;
  label$19 : {
   label$20 : {
    if (!(Math_abs($352_1) < 2147483648.0)) {
     break label$20
    }
    $148_1 = ~~$352_1;
    break label$19;
   }
   $148_1 = -2147483648;
  }
  HEAP32[($21_1 + 24 | 0) >> 2] = $148_1;
  label$21 : {
   label$22 : {
    if (!((HEAP32[($21_1 + 96 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$22
    }
    $359_1 = Math_ceil(+(HEAP32[($21_1 + 40 | 0) >> 2] | 0 | 0) / 10.0);
    break label$21;
   }
   $359_1 = +(HEAP32[(HEAP32[($21_1 + 96 | 0) >> 2] | 0) >> 2] | 0 | 0);
  }
  $361_1 = $359_1;
  label$23 : {
   label$24 : {
    if (!(Math_abs($361_1) < 2147483648.0)) {
     break label$24
    }
    $164_1 = ~~$361_1;
    break label$23;
   }
   $164_1 = -2147483648;
  }
  HEAP32[($21_1 + 20 | 0) >> 2] = $164_1;
  label$25 : {
   label$26 : {
    if (!((HEAP32[($21_1 + 92 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$26
    }
    $368_1 = Math_ceil(+(HEAP32[($21_1 + 32 | 0) >> 2] | 0 | 0) / 10.0);
    break label$25;
   }
   $368_1 = +(HEAP32[(HEAP32[($21_1 + 92 | 0) >> 2] | 0) >> 2] | 0 | 0);
  }
  $370_1 = $368_1;
  label$27 : {
   label$28 : {
    if (!(Math_abs($370_1) < 2147483648.0)) {
     break label$28
    }
    $180_1 = ~~$370_1;
    break label$27;
   }
   $180_1 = -2147483648;
  }
  HEAP32[($21_1 + 16 | 0) >> 2] = $180_1;
  label$29 : {
   label$30 : {
    if (!((HEAP32[($21_1 + 88 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$30
    }
    $191_1 = 0;
    break label$29;
   }
   $191_1 = HEAP32[(HEAP32[($21_1 + 88 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[$21_1 >> 2] = $191_1;
  label$31 : {
   label$32 : {
    if (!((HEAP32[($21_1 + 84 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$32
    }
    $206_1 = HEAP32[$21_1 >> 2] | 0 ? 1 : 2;
    break label$31;
   }
   $206_1 = HEAP32[(HEAP32[($21_1 + 84 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($21_1 + 12 | 0) >> 2] = $206_1;
  label$33 : {
   label$34 : {
    if (!((HEAP32[($21_1 + 84 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$34
    }
    $221_1 = HEAP32[$21_1 >> 2] | 0 ? 15 : 0;
    break label$33;
   }
   $221_1 = HEAP32[(HEAP32[($21_1 + 80 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($21_1 + 8 | 0) >> 2] = $221_1;
  (wasm2js_i32$0 = $21_1, wasm2js_i32$1 = $187(HEAP32[($21_1 + 44 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $21_1, wasm2js_i32$1 = $187(HEAP32[($21_1 + 36 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $21_1, wasm2js_i32$1 = $187(HEAP32[($21_1 + 28 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $21_1, wasm2js_i32$1 = $864(HEAP32[($21_1 + 136 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $21_1, wasm2js_i32$1 = $864(Math_imul((HEAP32[($21_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($21_1 + 132 | 0) >> 2] | 0) << 1 | 0) | 0, 5) | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $21_1, wasm2js_i32$1 = $864(HEAP32[($21_1 + 136 | 0) >> 2] | 0 | 0, 4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
  $210(HEAP32[($21_1 + 140 | 0) >> 2] | 0 | 0, $21_1 + 136 | 0 | 0, $21_1 + 132 | 0 | 0, $21_1 + 48 | 0 | 0, $21_1 + 40 | 0 | 0, $21_1 + 32 | 0 | 0, $21_1 + 44 | 0 | 0, $21_1 + 36 | 0 | 0, $21_1 + 28 | 0 | 0, $21_1 + 24 | 0 | 0, $21_1 + 20 | 0 | 0, $21_1 + 16 | 0 | 0, $21_1 + 12 | 0 | 0, $21_1 + 8 | 0 | 0, HEAP32[($21_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($21_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($21_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($21_1 + 60 | 0) >> 2] | 0 | 0);
  label$35 : {
   if (!(HEAP32[($21_1 + 4 | 0) >> 2] | 0)) {
    break label$35
   }
   $188(HEAP32[($21_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($21_1 + 132 | 0) >> 2] | 0 | 0, HEAP32[($21_1 + 56 | 0) >> 2] | 0 | 0);
   $189(HEAP32[($21_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($21_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($21_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($21_1 + 132 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($21_1 + 52 | 0) >> 2] = 0;
  label$36 : {
   label$37 : while (1) {
    if (!((HEAP32[($21_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($21_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$36
    }
    HEAPF64[((HEAP32[($21_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($21_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($21_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($21_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($21_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($21_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($21_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($21_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($21_1 + 52 | 0) >> 2] = (HEAP32[($21_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    continue label$37;
   };
  }
  $863(HEAP32[($21_1 + 64 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($21_1 + 60 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($21_1 + 56 | 0) >> 2] | 0 | 0);
  global$0 = $21_1 + 144 | 0;
  return;
 }
 
 function $186($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) % (2 | 0) | 0) {
     break label$2
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    break label$1;
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  }
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $187($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
     break label$1
    }
   }
   $875(global$3 + 6002 | 0 | 0, 0 | 0) | 0;
   fimport$0(-1 | 0);
   abort();
  }
  $23_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $23_1 | 0;
 }
 
 function $188($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[$5_1 >> 2] | 0 | 0) < (HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + ((HEAP32[$5_1 >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[$5_1 >> 2] | 0 | 0) % (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $189($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $34_1 = 0, $52_1 = 0, $74_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $864(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $864(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($6_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $34_1 = (HEAP32[($6_1 + 4 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0;
    HEAP32[$34_1 >> 2] = (HEAP32[$34_1 >> 2] | 0) + 1 | 0;
    $52_1 = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$52_1 >> 3] = +HEAPF64[$52_1 >> 3] + +HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $74_1 = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$74_1 >> 3] = +HEAPF64[$74_1 >> 3] / +(HEAP32[((HEAP32[($6_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
    HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  $863(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $190($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $12_1 = 0, $196_1 = 0, $22_1 = 0, $34_1 = 0, $168_1 = 0, $371_1 = 0.0, $180_1 = 0, $218_1 = 0, $331_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $12_1 = global$0 - 96 | 0;
  global$0 = $12_1;
  HEAP32[($12_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($12_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($12_1 + 84 | 0) >> 2] = $2_1;
  HEAP32[($12_1 + 80 | 0) >> 2] = $3_1;
  HEAP32[($12_1 + 76 | 0) >> 2] = $4_1;
  HEAP32[($12_1 + 72 | 0) >> 2] = $5_1;
  HEAP32[($12_1 + 68 | 0) >> 2] = $6_1;
  HEAP32[($12_1 + 64 | 0) >> 2] = $7_1;
  HEAP32[($12_1 + 60 | 0) >> 2] = $8_1;
  HEAP32[($12_1 + 56 | 0) >> 2] = $9_1;
  HEAP32[($12_1 + 36 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($12_1 + 76 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    $22_1 = 13;
    break label$1;
   }
   $22_1 = HEAP32[(HEAP32[($12_1 + 76 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($12_1 + 40 | 0) >> 2] = $22_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($12_1 + 68 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$4
    }
    $34_1 = 2;
    break label$3;
   }
   $34_1 = HEAP32[(HEAP32[($12_1 + 68 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($12_1 + 32 | 0) >> 2] = $34_1;
  (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $862((HEAP32[($12_1 + 88 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  label$5 : {
   label$6 : {
    if (!((HEAP32[($12_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    +$9(HEAP32[($12_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 20 | 0) >> 2] | 0 | 0);
    break label$5;
   }
   $868(HEAP32[($12_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 92 | 0) >> 2] | 0 | 0, (HEAP32[($12_1 + 88 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  }
  (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $862((HEAP32[(HEAP32[($12_1 + 80 | 0) >> 2] | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($12_1 + 52 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($12_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($12_1 + 80 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    label$9 : {
     if (!((HEAP32[((HEAP32[($12_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) < ((HEAP32[($12_1 + 88 | 0) >> 2] | 0 | 0) / (2 | 0) | 0 | 0) & 1 | 0)) {
      break label$9
     }
     HEAPF64[((HEAP32[($12_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[((HEAP32[($12_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
     HEAP32[($12_1 + 36 | 0) >> 2] = (HEAP32[($12_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    }
    HEAP32[($12_1 + 52 | 0) >> 2] = (HEAP32[($12_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $862((HEAP32[($12_1 + 36 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $99(HEAP32[($12_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[$12_1 >> 2] | 0 | 0);
  label$10 : {
   label$11 : {
    if (!((HEAP32[($12_1 + 36 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$11
    }
    (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $864(Math_imul(HEAP32[($12_1 + 36 | 0) >> 2] | 0, HEAP32[($12_1 + 88 | 0) >> 2] | 0) | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $864(HEAP32[($12_1 + 88 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    $868(HEAP32[($12_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 20 | 0) >> 2] | 0 | 0, (HEAP32[($12_1 + 88 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    HEAP32[($12_1 + 48 | 0) >> 2] = 0;
    label$12 : {
     label$13 : while (1) {
      if (!((HEAP32[($12_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$12
      }
      HEAP32[($12_1 + 52 | 0) >> 2] = 0;
      label$14 : {
       label$15 : while (1) {
        if (!((HEAP32[($12_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$14
        }
        HEAP32[($12_1 + 28 | 0) >> 2] = Math_imul(HEAP32[($12_1 + 52 | 0) >> 2] | 0, HEAP32[($12_1 + 88 | 0) >> 2] | 0);
        HEAP32[($12_1 + 44 | 0) >> 2] = 0;
        label$16 : {
         label$17 : while (1) {
          if (!((HEAP32[($12_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$16
          }
          $168_1 = (HEAP32[($12_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0;
          HEAPF64[$168_1 >> 3] = +HEAPF64[$168_1 >> 3] + +HEAPF64[((HEAP32[($12_1 + 4 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 28 | 0) >> 2] | 0) + (HEAP32[($12_1 + 44 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
          HEAP32[($12_1 + 44 | 0) >> 2] = (HEAP32[($12_1 + 44 | 0) >> 2] | 0) + 1 | 0;
          continue label$17;
         };
        }
        $371_1 = +HEAPF64[((HEAP32[($12_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$18 : {
         label$19 : {
          if (!(Math_abs($371_1) < 2147483648.0)) {
           break label$19
          }
          $180_1 = ~~$371_1;
          break label$18;
         }
         $180_1 = -2147483648;
        }
        HEAP32[($12_1 + 24 | 0) >> 2] = $180_1;
        $196_1 = 0;
        $185(HEAP32[($12_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 24 | 0) >> 2] | 0 | 0, global$3 + 1977 | 0 | 0, $12_1 + 40 | 0 | 0, $196_1 | 0, $196_1 | 0, $196_1 | 0, $196_1 | 0, $196_1 | 0, $196_1 | 0, $196_1 | 0, $196_1 | 0, $196_1 | 0, $196_1 | 0, $196_1 | 0, (HEAP32[($12_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($12_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 56 | 0) >> 2] | 0 | 0);
        HEAP32[($12_1 + 44 | 0) >> 2] = 0;
        label$20 : {
         label$21 : while (1) {
          if (!((HEAP32[($12_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$20
          }
          $218_1 = (HEAP32[($12_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0;
          HEAPF64[$218_1 >> 3] = +HEAPF64[$218_1 >> 3] - +HEAPF64[((HEAP32[($12_1 + 4 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 28 | 0) >> 2] | 0) + (HEAP32[($12_1 + 44 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
          HEAP32[($12_1 + 44 | 0) >> 2] = (HEAP32[($12_1 + 44 | 0) >> 2] | 0) + 1 | 0;
          continue label$21;
         };
        }
        HEAP32[((HEAP32[($12_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($12_1 + 24 | 0) >> 2] | 0;
        HEAP32[($12_1 + 52 | 0) >> 2] = (HEAP32[($12_1 + 52 | 0) >> 2] | 0) + 1 | 0;
        continue label$15;
       };
      }
      HEAP32[($12_1 + 48 | 0) >> 2] = (HEAP32[($12_1 + 48 | 0) >> 2] | 0) + 1 | 0;
      continue label$13;
     };
    }
    HEAP32[($12_1 + 52 | 0) >> 2] = 0;
    label$22 : {
     label$23 : while (1) {
      if (!((HEAP32[($12_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$22
      }
      HEAPF64[((HEAP32[($12_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($12_1 + 52 | 0) >> 2] = (HEAP32[($12_1 + 52 | 0) >> 2] | 0) + 1 | 0;
      continue label$23;
     };
    }
    HEAP32[($12_1 + 52 | 0) >> 2] = 0;
    label$24 : {
     label$25 : while (1) {
      if (!((HEAP32[($12_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$24
      }
      HEAP32[($12_1 + 28 | 0) >> 2] = Math_imul(HEAP32[($12_1 + 52 | 0) >> 2] | 0, HEAP32[($12_1 + 88 | 0) >> 2] | 0);
      HEAP32[($12_1 + 48 | 0) >> 2] = 0;
      label$26 : {
       label$27 : while (1) {
        if (!((HEAP32[($12_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$26
        }
        HEAPF64[((HEAP32[((HEAP32[($12_1 + 64 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($12_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 4 | 0) >> 2] | 0) + (((HEAP32[($12_1 + 28 | 0) >> 2] | 0) + (HEAP32[($12_1 + 48 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($12_1 + 48 | 0) >> 2] = (HEAP32[($12_1 + 48 | 0) >> 2] | 0) + 1 | 0;
        continue label$27;
       };
      }
      HEAP32[($12_1 + 52 | 0) >> 2] = (HEAP32[($12_1 + 52 | 0) >> 2] | 0) + 1 | 0;
      continue label$25;
     };
    }
    HEAP32[(HEAP32[($12_1 + 80 | 0) >> 2] | 0) >> 2] = HEAP32[($12_1 + 36 | 0) >> 2] | 0;
    $863(HEAP32[($12_1 + 4 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($12_1 + 12 | 0) >> 2] | 0 | 0);
    break label$10;
   }
   (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $862((HEAP32[($12_1 + 88 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($12_1 + 52 | 0) >> 2] = 0;
   label$28 : {
    label$29 : while (1) {
     if (!((HEAP32[($12_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$28
     }
     HEAPF64[((HEAP32[($12_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($12_1 + 52 | 0) >> 2] | 0 | 0);
     HEAP32[($12_1 + 52 | 0) >> 2] = (HEAP32[($12_1 + 52 | 0) >> 2] | 0) + 1 | 0;
     continue label$29;
    };
   }
   $331_1 = 0;
   $230(HEAP32[($12_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 20 | 0) >> 2] | 0 | 0, $331_1 | 0, 1 | 0, +(+($331_1 | 0)), +(-1.0), HEAP32[($12_1 + 60 | 0) >> 2] | 0 | 0);
   HEAP32[($12_1 + 52 | 0) >> 2] = 0;
   label$30 : {
    label$31 : while (1) {
     if (!((HEAP32[($12_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$30
     }
     HEAPF64[((HEAP32[($12_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($12_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($12_1 + 52 | 0) >> 2] = (HEAP32[($12_1 + 52 | 0) >> 2] | 0) + 1 | 0;
     continue label$31;
    };
   }
   HEAP32[(HEAP32[($12_1 + 80 | 0) >> 2] | 0) >> 2] = 0;
   $863(HEAP32[($12_1 + 16 | 0) >> 2] | 0 | 0);
  }
  $863(HEAP32[($12_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[$12_1 >> 2] | 0 | 0);
  $863(HEAP32[($12_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $12_1 + 96 | 0;
  return;
 }
 
 function $191($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $105_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0)) {
     break label$2
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $864(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    HEAP32[(HEAP32[($7_1 + 12 | 0) >> 2] | 0) >> 2] = 1;
    HEAP32[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$3
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $868(HEAP32[$7_1 >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    HEAP32[(HEAP32[($7_1 + 12 | 0) >> 2] | 0) >> 2] = 1;
    HEAP32[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
    break label$1;
   }
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((((HEAP32[($7_1 + 20 | 0) >> 2] | 0) - (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + 1 | 0) << 3 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   HEAP32[($7_1 + 4 | 0) >> 2] = 0;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     $868((HEAP32[$7_1 >> 2] | 0) + (Math_imul(((HEAP32[($7_1 + 20 | 0) >> 2] | 0) - (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + 1 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) + -8 | 0) + ((0 - (HEAP32[($7_1 + 4 | 0) >> 2] | 0) | 0) << 3 | 0) | 0 | 0, (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) - (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + 1 | 0) << 3 | 0 | 0) | 0;
     HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
   HEAP32[(HEAP32[($7_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
   HEAP32[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 2] = ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) - (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) + 1 | 0;
   HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
  }
  $105_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  global$0 = $7_1 + 32 | 0;
  return $105_1 | 0;
 }
 
 function $192($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $384_1 = 0, $388_1 = 0.0, $393_1 = 0.0, $381_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 176 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 172 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 168 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 164 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 160 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 156 | 0) >> 2] = $4_1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 168 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 124 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 168 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 120 | 0) >> 2] = wasm2js_i32$1;
  i64toi32_i32$0 = 0;
  $384_1 = 0;
  i64toi32_i32$1 = $7_1;
  HEAP32[$7_1 >> 2] = $384_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $7_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $384_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $223(HEAP32[($7_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 124 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 144 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $222(HEAP32[($7_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 140 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $191(HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0, $7_1 + 136 | 0 | 0, $7_1 + 132 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 116 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   if (!((HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0) > (-1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($7_1 + 60 | 0) >> 2] = (HEAP32[($7_1 + 120 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 156 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[($7_1 + 140 | 0) >> 2] = (HEAP32[($7_1 + 140 | 0) >> 2] | 0) - (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0;
  }
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 136 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 140 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 112 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
  HEAP32[($7_1 + 152 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $868((HEAP32[($7_1 + 112 | 0) >> 2] | 0) + (Math_imul(HEAP32[($7_1 + 140 | 0) >> 2] | 0, HEAP32[($7_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($7_1 + 116 | 0) >> 2] | 0) + (Math_imul(HEAP32[($7_1 + 132 | 0) >> 2] | 0, HEAP32[($7_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($7_1 + 140 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    HEAP32[($7_1 + 152 | 0) >> 2] = (HEAP32[($7_1 + 152 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  HEAP32[($7_1 + 128 | 0) >> 2] = (HEAP32[($7_1 + 136 | 0) >> 2] | 0) + 1 | 0;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 128 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 128 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 104 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 140 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 108 | 0) >> 2] = wasm2js_i32$1;
  HEAPF64[($7_1 + 32 | 0) >> 3] = .95;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $179(HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 128 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  $182(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0, +(+HEAPF64[($7_1 + 32 | 0) >> 3]));
  HEAP32[($7_1 + 100 | 0) >> 2] = (HEAP32[($7_1 + 124 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 160 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[($7_1 + 52 | 0) >> 2] = (HEAP32[($7_1 + 144 | 0) >> 2] | 0) - (HEAP32[($7_1 + 160 | 0) >> 2] | 0) | 0;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $191(HEAP32[($7_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0, $7_1 + 136 | 0 | 0, $7_1 + 132 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 96 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 132 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 52 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 92 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 52 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 152 | 0) >> 2] = 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($7_1 + 148 | 0) >> 2] = 0;
    label$6 : {
     label$7 : while (1) {
      if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAPF64[((HEAP32[($7_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 96 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 148 | 0) >> 2] | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 152 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 148 | 0) >> 2] = (HEAP32[($7_1 + 148 | 0) >> 2] | 0) + 1 | 0;
      continue label$7;
     };
    }
    $388_1 = +$183(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0, $7_1 | 0);
    HEAPF64[((HEAP32[($7_1 + 92 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $388_1;
    HEAPF64[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($7_1 + 92 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 152 | 0) >> 2] = (HEAP32[($7_1 + 152 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  $863(HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0);
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 168 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 80 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $222(HEAP32[($7_1 + 172 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $191(HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0, $7_1 + 136 | 0 | 0, $7_1 + 132 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 76 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 56 | 0) >> 2] = (HEAP32[($7_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 160 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) - (HEAP32[($7_1 + 160 | 0) >> 2] | 0) | 0;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 132 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 48 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 48 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 152 | 0) >> 2] = 0;
  label$8 : {
   label$9 : while (1) {
    if (!((HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP32[($7_1 + 148 | 0) >> 2] = 0;
    label$10 : {
     label$11 : while (1) {
      if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      HEAPF64[((HEAP32[($7_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($7_1 + 148 | 0) >> 2] | 0, HEAP32[($7_1 + 132 | 0) >> 2] | 0) + (HEAP32[($7_1 + 152 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 148 | 0) >> 2] = (HEAP32[($7_1 + 148 | 0) >> 2] | 0) + 1 | 0;
      continue label$11;
     };
    }
    $393_1 = +$183(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0, $7_1 | 0);
    HEAPF64[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $393_1;
    HEAPF64[((HEAP32[($7_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($7_1 + 72 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 152 | 0) >> 2] = (HEAP32[($7_1 + 152 | 0) >> 2] | 0) + 1 | 0;
    continue label$9;
   };
  }
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul(((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 2 | 0) << 3 | 0, HEAP32[($7_1 + 140 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
  $868(HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 140 | 0) >> 2] | 0) | 0) | 0;
  $868((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (Math_imul(HEAP32[($7_1 + 44 | 0) >> 2] | 0, HEAP32[($7_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 140 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  $868((HEAP32[($7_1 + 64 | 0) >> 2] | 0) + (Math_imul((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0, HEAP32[($7_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 140 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  $863(HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0);
  HEAP32[($7_1 + 128 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 2 | 0;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $179(HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 128 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  $181(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, 0 | 0);
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($7_1 + 128 | 0) >> 2] | 0) << 3 | 0, HEAP32[($7_1 + 128 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 104 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862((HEAP32[($7_1 + 140 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 108 | 0) >> 2] = wasm2js_i32$1;
  $182(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0, +(+HEAPF64[($7_1 + 32 | 0) >> 3]));
  $863(HEAP32[($7_1 + 124 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0);
  $184(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 120 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0);
  $381_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
  global$0 = $7_1 + 176 | 0;
  return $381_1 | 0;
 }
 
 function $193($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $45_1 = 0, $205_1 = 0.0, $209_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $9_1 = global$0 - 64 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 36 | 0) >> 2] = $6_1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 48 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[$9_1 >> 2] = 0;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 48 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($9_1 + 20 | 0) >> 2] = HEAP32[($9_1 + 48 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($9_1 + 48 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!($739(HEAP32[($9_1 + 44 | 0) >> 2] | 0 | 0, global$3 + 2688 | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[($9_1 + 32 | 0) >> 2] = 1;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0) <= (HEAP32[($9_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     $45_1 = $192(HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 48 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[((HEAP32[($9_1 + 4 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 32 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] = $45_1;
     $205_1 = +$194(HEAP32[((HEAP32[($9_1 + 4 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 32 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 44 | 0) >> 2] | 0 | 0);
     HEAPF64[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 32 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = $205_1;
     HEAP32[($9_1 + 32 | 0) >> 2] = (HEAP32[($9_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $195(HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 48 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
   label$4 : {
    if (!((HEAP32[($9_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$4
    }
    $875(global$3 + 6730 | 0 | 0, 0 | 0) | 0;
    fimport$0(-1 | 0);
    abort();
   }
   (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $196(HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 48 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($9_1 + 20 | 0) >> 2] = (HEAP32[($9_1 + 28 | 0) >> 2] | 0) - 1 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[((HEAP32[($9_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $192(HEAP32[($9_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  label$5 : {
   if (!((HEAP32[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + 92 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$5
   }
   if (!((HEAP32[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + 92 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$5
   }
   label$6 : {
    if (!((HEAP32[$9_1 >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$6
    }
    $875(global$3 + 6812 | 0 | 0, 0 | 0) | 0;
    fimport$0(-1 | 0);
    abort();
   }
   HEAP32[($9_1 + 8 | 0) >> 2] = HEAP32[$9_1 >> 2] | 0;
  }
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($9_1 + 32 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAPF64[((HEAP32[($9_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[($9_1 + 32 | 0) >> 2] | 0) << 5 | 0) | 0) >> 3] / +HEAPF64[((((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + 176 | 0) + ((HEAP32[($9_1 + 32 | 0) >> 2] | 0) << 5 | 0) | 0) + 24 | 0) >> 3];
    HEAP32[($9_1 + 32 | 0) >> 2] = (HEAP32[($9_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  HEAP32[($9_1 + 32 | 0) >> 2] = 0;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($9_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$9
    }
    $184(HEAP32[((HEAP32[($9_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
    HEAP32[($9_1 + 32 | 0) >> 2] = (HEAP32[($9_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    continue label$10;
   };
  }
  $209_1 = +$197(HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0);
  HEAPF64[(HEAP32[($9_1 + 36 | 0) >> 2] | 0) >> 3] = $209_1;
  HEAPF64[(HEAP32[($9_1 + 40 | 0) >> 2] | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 16 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[($9_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
  $863(HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0);
  global$0 = $9_1 + 64 | 0;
  return;
 }
 
 function $194($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $53_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($739(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, global$3 + 2763 | 0 | 0) | 0)) {
      break label$3
     }
     if ($739(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, global$3 + 3003 | 0 | 0) | 0) {
      break label$2
     }
    }
    HEAPF64[$4_1 >> 3] = +HEAPF64[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 152 | 0) >> 3];
    break label$1;
   }
   label$4 : {
    label$5 : {
     label$6 : {
      if (!($739(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, global$3 + 2759 | 0 | 0) | 0)) {
       break label$6
      }
      if ($739(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, global$3 + 2999 | 0 | 0) | 0) {
       break label$5
      }
     }
     HEAPF64[$4_1 >> 3] = +HEAPF64[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 160 | 0) >> 3];
     break label$4;
    }
    label$7 : {
     label$8 : {
      label$9 : {
       if (!($739(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, global$3 + 2767 | 0 | 0) | 0)) {
        break label$9
       }
       if (!($739(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, global$3 + 2772 | 0 | 0) | 0)) {
        break label$9
       }
       if ($739(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, global$3 + 2772 | 0 | 0) | 0) {
        break label$8
       }
      }
      HEAPF64[$4_1 >> 3] = +HEAPF64[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 168 | 0) >> 3];
      break label$7;
     }
     $875(global$3 + 5545 | 0 | 0, 0 | 0) | 0;
     fimport$0(-1 | 0);
     abort();
    }
   }
  }
  $53_1 = +HEAPF64[$4_1 >> 3];
  global$0 = $4_1 + 16 | 0;
  return +$53_1;
 }
 
 function $195($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[$4_1 >> 2] | 0 | 0) < (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (!(+HEAPF64[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 3 | 0) | 0) >> 3] == +HEAPF64[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$4
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 1;
  }
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $196($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $61_1 = 0.0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 3] == +HEAPF64[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    $61_1 = +HEAPF64[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 3];
    break label$1;
   }
   $61_1 = 1797693134862315708145274.0e284;
  }
  HEAPF64[($4_1 + 8 | 0) >> 3] = $61_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = +HEAPF64[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 3] == +HEAPF64[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 3] & 1 | 0 ? 0 : -1;
  HEAP32[($4_1 + 16 | 0) >> 2] = 1;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     if (!(+HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +HEAPF64[($4_1 + 8 | 0) >> 3] & 1 | 0)) {
      break label$5
     }
     if (!(+HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
      break label$5
     }
     HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  return HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0;
 }
 
 function $197($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $29_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = +$729(+(+(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0)))), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
  (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = -.2937411 * +$730(+(-.2850853 * (+HEAPF64[($3_1 + 16 | 0) >> 3] - .7656451) + -.05983644 * ((+HEAPF64[($3_1 + 16 | 0) >> 3] - .7656451) * (+HEAPF64[($3_1 + 16 | 0) >> 3] - .7656451)))) - 1.652202), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
  $29_1 = +HEAPF64[($3_1 + 8 | 0) >> 3];
  global$0 = $3_1 + 32 | 0;
  return +$29_1;
 }
 
 function $198($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $48_1 = 0, $143_1 = 0.0, $149_1 = 0.0, $21_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $4_1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $864(HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0, 4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 40 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $21_1 = $864(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0, 8 | 0) | 0;
    HEAP32[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $21_1;
    HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $864(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $864(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $864(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  $48_1 = 0;
  $190(HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0, $7_1 + 48 | 0 | 0, $48_1 | 0, $48_1 | 0, $48_1 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0);
  (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$209(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
  HEAP32[($7_1 + 36 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($7_1 + 40 | 0) >> 2] = 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAPF64[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = 1.0 - +HEAPF64[($7_1 + 8 | 0) >> 3] / +$209(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
    label$7 : {
     label$8 : {
      if (!(+HEAPF64[$7_1 >> 3] < 1.0 & 1 | 0)) {
       break label$8
      }
      $143_1 = +HEAPF64[$7_1 >> 3];
      break label$7;
     }
     $143_1 = 1.0;
    }
    HEAPF64[$7_1 >> 3] = $143_1;
    label$9 : {
     label$10 : {
      if (!(+HEAPF64[$7_1 >> 3] > +(0 | 0) & 1 | 0)) {
       break label$10
      }
      $149_1 = +HEAPF64[$7_1 >> 3];
      break label$9;
     }
     $149_1 = +(0 | 0);
    }
    HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $149_1;
    HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($7_1 + 40 | 0) >> 2] = 0;
  label$11 : {
   label$12 : while (1) {
    if (!((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$11
    }
    $863(HEAP32[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
    HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$12;
   };
  }
  $863(HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $7_1 + 64 | 0;
  return;
 }
 
 function $199($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $48_1 = 0, $94_1 = 0, $105_1 = 0, $206_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $9_1 = global$0 - 128 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 124 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 120 | 0) >> 2] = $1_1;
  HEAPF64[($9_1 + 112 | 0) >> 3] = $2_1;
  HEAP32[($9_1 + 108 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 104 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 100 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 96 | 0) >> 2] = $6_1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 120 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 120 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862(8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862(8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 120 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 120 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $109(HEAP32[($9_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 108 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0);
  $109(HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0);
  (wasm2js_i32$0 = $9_1, wasm2js_f64$0 = +$95(HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 72 | 0) >> 3] = wasm2js_f64$0;
  (wasm2js_i32$0 = $9_1, wasm2js_f64$0 = +$95(HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 64 | 0) >> 3] = wasm2js_f64$0;
  HEAPF64[($9_1 + 56 | 0) >> 3] = Math_sqrt(+HEAPF64[($9_1 + 112 | 0) >> 3]);
  $48_1 = 1;
  $119(HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0, $48_1 | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0, $48_1 | 0);
  label$1 : {
   if (!(+HEAPF64[(HEAP32[($9_1 + 12 | 0) >> 2] | 0) >> 3] >= +HEAPF64[($9_1 + 56 | 0) >> 3] * +HEAPF64[($9_1 + 72 | 0) >> 3] * +HEAPF64[($9_1 + 64 | 0) >> 3] & 1 | 0)) {
    break label$1
   }
   HEAP32[($9_1 + 92 | 0) >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAPF64[((HEAP32[($9_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAP32[($9_1 + 88 | 0) >> 2] = HEAP32[($9_1 + 92 | 0) >> 2] | 0;
     label$4 : {
      label$5 : while (1) {
       if (!((HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$4
       }
       HEAP32[($9_1 + 80 | 0) >> 2] = Math_imul(HEAP32[($9_1 + 88 | 0) >> 2] | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0);
       $94_1 = (HEAP32[($9_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$94_1 >> 3] = +HEAPF64[$94_1 >> 3] + +HEAPF64[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 80 | 0) >> 2] | 0) + (HEAP32[($9_1 + 92 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($9_1 + 88 | 0) >> 2] = (HEAP32[($9_1 + 88 | 0) >> 2] | 0) + 1 | 0;
       continue label$5;
      };
     }
     HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   $105_1 = 1;
   $119(HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0, $105_1 | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0, $105_1 | 0);
   HEAPF64[($9_1 + 32 | 0) >> 3] = Math_sqrt(+HEAPF64[(HEAP32[($9_1 + 12 | 0) >> 2] | 0) >> 3] / +HEAPF64[(HEAP32[($9_1 + 8 | 0) >> 2] | 0) >> 3]);
   HEAP32[($9_1 + 84 | 0) >> 2] = 1;
   HEAP32[($9_1 + 92 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAPF64[($9_1 + 24 | 0) >> 3] = +(0 | 0);
     HEAP32[($9_1 + 80 | 0) >> 2] = Math_imul(HEAP32[($9_1 + 92 | 0) >> 2] | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0);
     HEAP32[($9_1 + 88 | 0) >> 2] = 0;
     label$8 : {
      label$9 : while (1) {
       if (!((HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0) < ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
        break label$8
       }
       HEAPF64[($9_1 + 24 | 0) >> 3] = +HEAPF64[($9_1 + 24 | 0) >> 3] + +HEAPF64[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 80 | 0) >> 2] | 0) + (HEAP32[($9_1 + 88 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($9_1 + 88 | 0) >> 2] = (HEAP32[($9_1 + 88 | 0) >> 2] | 0) + 1 | 0;
       continue label$9;
      };
     }
     HEAPF64[($9_1 + 48 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($9_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($9_1 + 24 | 0) >> 3]);
     label$10 : {
      label$11 : {
       if (!(+HEAPF64[((HEAP32[($9_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[((HEAP32[($9_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
        break label$11
       }
       HEAPF64[($9_1 + 40 | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       break label$10;
      }
      HEAPF64[($9_1 + 40 | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     }
     label$12 : {
      if (!(+HEAPF64[($9_1 + 48 | 0) >> 3] >= +HEAPF64[($9_1 + 56 | 0) >> 3] * +HEAPF64[($9_1 + 40 | 0) >> 3] & 1 | 0)) {
       break label$12
      }
      HEAP32[($9_1 + 84 | 0) >> 2] = 0;
     }
     HEAPF64[((HEAP32[$9_1 >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($9_1 + 32 | 0) >> 3] * +HEAPF64[($9_1 + 24 | 0) >> 3];
     HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   label$13 : {
    if (HEAP32[($9_1 + 84 | 0) >> 2] | 0) {
     break label$13
    }
    HEAPF64[($9_1 + 24 | 0) >> 3] = 1.0 / Math_sqrt(+HEAPF64[(HEAP32[($9_1 + 12 | 0) >> 2] | 0) >> 3] * +HEAPF64[(HEAP32[($9_1 + 8 | 0) >> 2] | 0) >> 3]);
    HEAP32[($9_1 + 92 | 0) >> 2] = 0;
    label$14 : {
     label$15 : while (1) {
      if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$14
      }
      $206_1 = (HEAP32[($9_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAPF64[$206_1 >> 3] = +HEAPF64[$206_1 >> 3] * +HEAPF64[($9_1 + 24 | 0) >> 3];
      HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0;
      continue label$15;
     };
    }
    HEAP32[($9_1 + 92 | 0) >> 2] = 1;
    label$16 : {
     label$17 : while (1) {
      if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$16
      }
      HEAP32[($9_1 + 80 | 0) >> 2] = Math_imul(HEAP32[($9_1 + 92 | 0) >> 2] | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0);
      HEAP32[($9_1 + 88 | 0) >> 2] = 0;
      label$18 : {
       label$19 : while (1) {
        if (!((HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$18
        }
        HEAPF64[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($9_1 + 88 | 0) >> 2] | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0) + (HEAP32[($9_1 + 92 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 80 | 0) >> 2] | 0) + (HEAP32[($9_1 + 88 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($9_1 + 88 | 0) >> 2] = (HEAP32[($9_1 + 88 | 0) >> 2] | 0) + 1 | 0;
        continue label$19;
       };
      }
      HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0;
      continue label$17;
     };
    }
    $200(HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$9_1 >> 2] | 0 | 0);
    HEAP32[($9_1 + 92 | 0) >> 2] = 1;
    label$20 : {
     label$21 : while (1) {
      if (!((HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 120 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$20
      }
      HEAP32[($9_1 + 80 | 0) >> 2] = Math_imul(HEAP32[($9_1 + 92 | 0) >> 2] | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0);
      HEAP32[($9_1 + 88 | 0) >> 2] = 0;
      label$22 : {
       label$23 : while (1) {
        if (!((HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$22
        }
        HEAPF64[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 80 | 0) >> 2] | 0) + (HEAP32[($9_1 + 88 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($9_1 + 124 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($9_1 + 88 | 0) >> 2] | 0, HEAP32[($9_1 + 120 | 0) >> 2] | 0) + (HEAP32[($9_1 + 92 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($9_1 + 88 | 0) >> 2] = (HEAP32[($9_1 + 88 | 0) >> 2] | 0) + 1 | 0;
        continue label$23;
       };
      }
      HEAP32[($9_1 + 92 | 0) >> 2] = (HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 1 | 0;
      continue label$21;
     };
    }
   }
  }
  $863(HEAP32[($9_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0);
  $863(HEAP32[$9_1 >> 2] | 0 | 0);
  global$0 = $9_1 + 128 | 0;
  return;
 }
 
 function $200($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $43_1 = 0, $151_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + (((Math_imul(HEAP32[($6_1 + 12 | 0) >> 2] | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0) + (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) - 1 | 0;
  label$3 : while (1) {
   $43_1 = 0;
   label$4 : {
    if (!(+HEAPF64[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(0 | 0) & 1 | 0)) {
     break label$4
    }
    $43_1 = (HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) > (0 | 0);
   }
   label$5 : {
    if (!($43_1 & 1 | 0)) {
     break label$5
    }
    HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[($6_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    continue label$3;
   }
   break label$3;
  };
  HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 4 | 0) >> 2] | 0) - 1 | 0;
  label$6 : {
   label$7 : while (1) {
    if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$6
    }
    $201(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]), +-+HEAPF64[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3], HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
    label$8 : {
     label$9 : {
      if (!(+HEAPF64[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAPF64[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3]);
      break label$8;
     }
     HEAPF64[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = Math_sqrt(+HEAPF64[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3]);
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + -1 | 0;
    continue label$7;
   };
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = 0;
  label$10 : {
   label$11 : while (1) {
    if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$10
    }
    $151_1 = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$151_1 >> 3] = +HEAPF64[$151_1 >> 3] + +HEAPF64[(HEAP32[($6_1 + 20 | 0) >> 2] | 0) >> 3] * +HEAPF64[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$11;
   };
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = 0;
  label$12 : {
   label$13 : while (1) {
    if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$12
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = Math_imul(HEAP32[($6_1 + 12 | 0) >> 2] | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0);
    HEAP32[$6_1 >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0;
    $201(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3]), +-+HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + (((HEAP32[$6_1 >> 2] | 0) + (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3], HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
    HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$13;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $201($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3_1 = +$3_1;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 72 | 0) >> 2] = $1_1;
  HEAPF64[($7_1 + 64 | 0) >> 3] = $2_1;
  HEAPF64[($7_1 + 56 | 0) >> 3] = $3_1;
  HEAP32[($7_1 + 52 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 52 | 0) >> 2] | 0, HEAP32[($7_1 + 72 | 0) >> 2] | 0);
  HEAP32[($7_1 + 40 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + (HEAP32[($7_1 + 72 | 0) >> 2] | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(+HEAPF64[($7_1 + 64 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[($7_1 + 32 | 0) >> 3] = +(0 | 0);
    (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$93(+(+HEAPF64[($7_1 + 56 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 24 | 0) >> 3] = wasm2js_f64$0;
    break label$1;
   }
   HEAPF64[($7_1 + 16 | 0) >> 3] = Math_sqrt(+HEAPF64[($7_1 + 64 | 0) >> 3] * +HEAPF64[($7_1 + 64 | 0) >> 3] + +HEAPF64[($7_1 + 56 | 0) >> 3] * +HEAPF64[($7_1 + 56 | 0) >> 3]);
   HEAPF64[($7_1 + 32 | 0) >> 3] = +HEAPF64[($7_1 + 64 | 0) >> 3] / +HEAPF64[($7_1 + 16 | 0) >> 3];
   HEAPF64[($7_1 + 24 | 0) >> 3] = +HEAPF64[($7_1 + 56 | 0) >> 3] / +HEAPF64[($7_1 + 16 | 0) >> 3];
  }
  HEAP32[($7_1 + 48 | 0) >> 2] = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[($7_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + (HEAP32[($7_1 + 48 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[$7_1 >> 3] = +HEAPF64[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (HEAP32[($7_1 + 48 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + (HEAP32[($7_1 + 48 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 32 | 0) >> 3] * +HEAPF64[($7_1 + 8 | 0) >> 3] - +HEAPF64[($7_1 + 24 | 0) >> 3] * +HEAPF64[$7_1 >> 3];
    HEAPF64[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (HEAP32[($7_1 + 48 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 24 | 0) >> 3] * +HEAPF64[($7_1 + 8 | 0) >> 3] + +HEAPF64[($7_1 + 32 | 0) >> 3] * +HEAPF64[$7_1 >> 3];
    HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  global$0 = $7_1 + 80 | 0;
  return;
 }
 
 function $202($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  $6_1 = +$6_1;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = +$9_1;
  $10_1 = +$10_1;
  $11_1 = +$11_1;
  $12_1 = $12_1 | 0;
  var $15_1 = 0, $70_1 = 0, $274_1 = 0, $418_1 = 0, $439_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $15_1 = global$0 - 192 | 0;
  global$0 = $15_1;
  HEAP32[($15_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($15_1 + 184 | 0) >> 2] = $1_1;
  HEAP32[($15_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($15_1 + 176 | 0) >> 2] = $3_1;
  HEAP32[($15_1 + 172 | 0) >> 2] = $4_1;
  HEAPF64[($15_1 + 160 | 0) >> 3] = $5_1;
  HEAPF64[($15_1 + 152 | 0) >> 3] = $6_1;
  HEAP32[($15_1 + 148 | 0) >> 2] = $7_1;
  HEAP32[($15_1 + 144 | 0) >> 2] = $8_1;
  HEAPF64[($15_1 + 136 | 0) >> 3] = $9_1;
  HEAPF64[($15_1 + 128 | 0) >> 3] = $10_1;
  HEAPF64[($15_1 + 120 | 0) >> 3] = $11_1;
  HEAP32[($15_1 + 116 | 0) >> 2] = $12_1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $862((HEAP32[($15_1 + 176 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($15_1 + 112 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($15_1 + 144 | 0) >> 2] | 0) >> 2] = 0;
  HEAP32[($15_1 + 100 | 0) >> 2] = HEAP32[($15_1 + 148 | 0) >> 2] | 0;
  HEAPF64[($15_1 + 32 | 0) >> 3] = Math_sqrt(+HEAPF64[($15_1 + 136 | 0) >> 3]);
  HEAP32[($15_1 + 108 | 0) >> 2] = 0;
  HEAP32[($15_1 + 104 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($15_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $70_1 = (HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$70_1 >> 3] = +HEAPF64[$70_1 >> 3] * +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 / +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($15_1 + 104 | 0) >> 2] = (HEAP32[($15_1 + 104 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  (wasm2js_i32$0 = $15_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($15_1 + 188 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($15_1 + 180 | 0) >> 2] | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0, HEAP32[((HEAP32[($15_1 + 188 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 72 | 0) >> 3] = wasm2js_f64$0;
  label$3 : {
   label$4 : {
    if (+HEAPF64[($15_1 + 72 | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
     break label$4
    }
    if (!(+HEAPF64[($15_1 + 72 | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
     break label$3
    }
   }
   $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
   HEAP32[($15_1 + 112 | 0) >> 2] = 15;
  }
  label$5 : {
   if (!(+HEAPF64[($15_1 + 72 | 0) >> 3] != +HEAPF64[($15_1 + 72 | 0) >> 3] & 1 | 0)) {
    break label$5
   }
   $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
   HEAP32[($15_1 + 112 | 0) >> 2] = 15;
  }
  (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $80(HEAP32[($15_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 172 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 32 | 0) >> 3]), HEAP32[($15_1 + 28 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 108 | 0) >> 2] = wasm2js_i32$1;
  label$6 : {
   if (!((HEAP32[($15_1 + 108 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[($15_1 + 112 | 0) >> 2] = 15;
  }
  label$7 : {
   if (!(+HEAPF64[($15_1 + 152 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
    break label$7
   }
   HEAPF64[($15_1 + 152 | 0) >> 3] = 1.0e3;
   HEAPF64[($15_1 + 80 | 0) >> 3] = +(0 | 0);
   HEAPF64[($15_1 + 88 | 0) >> 3] = +(0 | 0);
   HEAP32[($15_1 + 104 | 0) >> 2] = 0;
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($15_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAPF64[($15_1 + 88 | 0) >> 3] = +HEAPF64[($15_1 + 88 | 0) >> 3] + +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[($15_1 + 80 | 0) >> 3] = +HEAPF64[($15_1 + 80 | 0) >> 3] + +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($15_1 + 104 | 0) >> 2] = (HEAP32[($15_1 + 104 | 0) >> 2] | 0) + 1 | 0;
     continue label$9;
    };
   }
   HEAPF64[($15_1 + 88 | 0) >> 3] = Math_sqrt(+HEAPF64[($15_1 + 88 | 0) >> 3]);
   HEAPF64[($15_1 + 80 | 0) >> 3] = Math_sqrt(+HEAPF64[($15_1 + 80 | 0) >> 3]);
   label$10 : {
    label$11 : {
     if (!(+HEAPF64[($15_1 + 88 | 0) >> 3] > +HEAPF64[($15_1 + 80 | 0) >> 3] & 1 | 0)) {
      break label$11
     }
     HEAPF64[($15_1 + 152 | 0) >> 3] = +HEAPF64[($15_1 + 152 | 0) >> 3] * +HEAPF64[($15_1 + 88 | 0) >> 3];
     break label$10;
    }
    HEAPF64[($15_1 + 152 | 0) >> 3] = +HEAPF64[($15_1 + 152 | 0) >> 3] * +HEAPF64[($15_1 + 80 | 0) >> 3];
   }
  }
  label$12 : {
   label$13 : {
    if (!(Math_abs(+HEAPF64[($15_1 + 72 | 0) >> 3]) > Math_abs(+HEAPF64[($15_1 + 160 | 0) >> 3]) & 1 | 0)) {
     break label$13
    }
    HEAPF64[($15_1 + 56 | 0) >> 3] = Math_abs(+HEAPF64[($15_1 + 72 | 0) >> 3]);
    break label$12;
   }
   HEAPF64[($15_1 + 56 | 0) >> 3] = Math_abs(+HEAPF64[($15_1 + 160 | 0) >> 3]);
  }
  HEAP32[($15_1 + 104 | 0) >> 2] = 0;
  label$14 : {
   label$15 : while (1) {
    if (!((HEAP32[($15_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$14
    }
    label$16 : {
     label$17 : {
      if (!(Math_abs(+HEAPF64[((HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) > 1.0 / Math_abs(+HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
       break label$17
      }
      HEAPF64[($15_1 + 64 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      break label$16;
     }
     HEAPF64[($15_1 + 64 | 0) >> 3] = 1.0 / Math_abs(+HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
    }
    HEAPF64[((HEAP32[($15_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($15_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) * +HEAPF64[($15_1 + 64 | 0) >> 3] / +HEAPF64[($15_1 + 56 | 0) >> 3];
    HEAP32[($15_1 + 104 | 0) >> 2] = (HEAP32[($15_1 + 104 | 0) >> 2] | 0) + 1 | 0;
    continue label$15;
   };
  }
  (wasm2js_i32$0 = $15_1, wasm2js_f64$0 = +$100(HEAP32[($15_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
  label$18 : {
   if (!(+HEAPF64[($15_1 + 48 | 0) >> 3] <= +HEAPF64[($15_1 + 128 | 0) >> 3] * .001 & 1 | 0)) {
    break label$18
   }
   HEAP32[($15_1 + 112 | 0) >> 2] = 1;
   HEAP32[($15_1 + 104 | 0) >> 2] = 0;
   label$19 : {
    label$20 : while (1) {
     if (!((HEAP32[($15_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$19
     }
     HEAPF64[((HEAP32[($15_1 + 116 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($15_1 + 104 | 0) >> 2] = (HEAP32[($15_1 + 104 | 0) >> 2] | 0) + 1 | 0;
     continue label$20;
    };
   }
  }
  $203(HEAP32[($15_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 72 | 0) >> 3]), +(+HEAPF64[($15_1 + 160 | 0) >> 3]), HEAP32[($15_1 + 172 | 0) >> 2] | 0 | 0);
  HEAP32[($15_1 + 104 | 0) >> 2] = 0;
  label$21 : {
   label$22 : while (1) {
    if (!((HEAP32[($15_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$21
    }
    HEAPF64[((HEAP32[($15_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($15_1 + 104 | 0) >> 2] = (HEAP32[($15_1 + 104 | 0) >> 2] | 0) + 1 | 0;
    continue label$22;
   };
  }
  label$23 : while (1) {
   $274_1 = 0;
   label$24 : {
    if (HEAP32[($15_1 + 112 | 0) >> 2] | 0) {
     break label$24
    }
    $274_1 = (HEAP32[(HEAP32[($15_1 + 144 | 0) >> 2] | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 100 | 0) >> 2] | 0 | 0);
   }
   label$25 : {
    if (!($274_1 & 1 | 0)) {
     break label$25
    }
    HEAP32[(HEAP32[($15_1 + 144 | 0) >> 2] | 0) >> 2] = (HEAP32[(HEAP32[($15_1 + 144 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0;
    $110(HEAP32[($15_1 + 28 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, +(-1.0));
    $140(HEAP32[($15_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 8 | 0) >> 2] | 0 | 0);
    $110(HEAP32[($15_1 + 28 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, +(-1.0));
    (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $145(HEAP32[($15_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 172 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 152 | 0) >> 3]), +(+HEAPF64[($15_1 + 120 | 0) >> 3]), HEAP32[($15_1 + 116 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 96 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $15_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($15_1 + 188 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($15_1 + 116 | 0) >> 2] | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0, HEAP32[((HEAP32[($15_1 + 188 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
    label$26 : {
     label$27 : {
      if (+HEAPF64[($15_1 + 40 | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
       break label$27
      }
      if (!(+HEAPF64[($15_1 + 40 | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
       break label$26
      }
     }
     $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
     HEAP32[($15_1 + 112 | 0) >> 2] = 15;
     break label$25;
    }
    label$28 : {
     if (!(+HEAPF64[($15_1 + 40 | 0) >> 3] != +HEAPF64[($15_1 + 40 | 0) >> 3] & 1 | 0)) {
      break label$28
     }
     $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
     HEAP32[($15_1 + 112 | 0) >> 2] = 15;
     break label$25;
    }
    (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $80(HEAP32[($15_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 172 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 32 | 0) >> 3]), HEAP32[($15_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 108 | 0) >> 2] = wasm2js_i32$1;
    label$29 : {
     if (!((HEAP32[($15_1 + 108 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
      break label$29
     }
     HEAP32[($15_1 + 112 | 0) >> 2] = 15;
     break label$25;
    }
    (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $146(+(+HEAPF64[($15_1 + 40 | 0) >> 3]), HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 172 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 160 | 0) >> 3]), +(+HEAPF64[($15_1 + 128 | 0) >> 3]), +(+HEAPF64[($15_1 + 120 | 0) >> 3]), HEAP32[($15_1 + 96 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 112 | 0) >> 2] = wasm2js_i32$1;
    $199(HEAP32[($15_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0, +(+HEAPF64[($15_1 + 136 | 0) >> 3]), HEAP32[($15_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 4 | 0) >> 2] | 0 | 0);
    HEAP32[($15_1 + 104 | 0) >> 2] = 0;
    label$30 : {
     label$31 : while (1) {
      if (!((HEAP32[($15_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$30
      }
      HEAPF64[((HEAP32[($15_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 116 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[((HEAP32[($15_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($15_1 + 104 | 0) >> 2] = (HEAP32[($15_1 + 104 | 0) >> 2] | 0) + 1 | 0;
      continue label$31;
     };
    }
    continue label$23;
   }
   break label$23;
  };
  label$32 : {
   if (HEAP32[($15_1 + 112 | 0) >> 2] | 0) {
    break label$32
   }
   if (!((HEAP32[(HEAP32[($15_1 + 144 | 0) >> 2] | 0) >> 2] | 0 | 0) >= (HEAP32[($15_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$32
   }
   HEAP32[($15_1 + 112 | 0) >> 2] = 4;
  }
  HEAP32[($15_1 + 104 | 0) >> 2] = 0;
  label$33 : {
   label$34 : while (1) {
    if (!((HEAP32[($15_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($15_1 + 176 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$33
    }
    $418_1 = (HEAP32[($15_1 + 180 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$418_1 >> 3] = +HEAPF64[$418_1 >> 3] * +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 / +HEAPF64[((HEAP32[($15_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($15_1 + 104 | 0) >> 2] = (HEAP32[($15_1 + 104 | 0) >> 2] | 0) + 1 | 0;
    continue label$34;
   };
  }
  $863(HEAP32[($15_1 + 28 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 24 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 8 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($15_1 + 4 | 0) >> 2] | 0 | 0);
  $439_1 = HEAP32[($15_1 + 112 | 0) >> 2] | 0;
  global$0 = $15_1 + 192 | 0;
  return $439_1 | 0;
 }
 
 function $203($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3_1 = +$3_1;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 48 | 0;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAPF64[($7_1 + 32 | 0) >> 3] = $2_1;
  HEAPF64[($7_1 + 24 | 0) >> 3] = $3_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (!(Math_abs(+HEAPF64[($7_1 + 32 | 0) >> 3]) > +HEAPF64[($7_1 + 24 | 0) >> 3] & 1 | 0)) {
     break label$2
    }
    HEAPF64[$7_1 >> 3] = Math_abs(+HEAPF64[($7_1 + 32 | 0) >> 3]);
    break label$1;
   }
   HEAPF64[$7_1 >> 3] = +HEAPF64[($7_1 + 24 | 0) >> 3];
  }
  HEAPF64[$7_1 >> 3] = Math_sqrt(+HEAPF64[$7_1 >> 3]);
  HEAP32[($7_1 + 16 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($7_1 + 8 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 16 | 0) >> 2] | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0);
    HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[$7_1 >> 3] * +HEAPF64[((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 12 | 0) >> 2] = 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + (HEAP32[($7_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      HEAP32[($7_1 + 12 | 0) >> 2] = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  return;
 }
 
 function $204($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = +$6_1;
  $7_1 = +$7_1;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = +$10_1;
  $11_1 = +$11_1;
  $12_1 = +$12_1;
  $13_1 = +$13_1;
  $14_1 = $14_1 | 0;
  var $17_1 = 0, $72_1 = 0, $276_1 = 0, $397_1 = 0, $418_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $17_1 = global$0 - 224 | 0;
  global$0 = $17_1;
  HEAP32[($17_1 + 220 | 0) >> 2] = $0_1;
  HEAP32[($17_1 + 216 | 0) >> 2] = $1_1;
  HEAP32[($17_1 + 212 | 0) >> 2] = $2_1;
  HEAP32[($17_1 + 208 | 0) >> 2] = $3_1;
  HEAP32[($17_1 + 204 | 0) >> 2] = $4_1;
  HEAP32[($17_1 + 200 | 0) >> 2] = $5_1;
  HEAPF64[($17_1 + 192 | 0) >> 3] = $6_1;
  HEAPF64[($17_1 + 184 | 0) >> 3] = $7_1;
  HEAP32[($17_1 + 180 | 0) >> 2] = $8_1;
  HEAP32[($17_1 + 176 | 0) >> 2] = $9_1;
  HEAPF64[($17_1 + 168 | 0) >> 3] = $10_1;
  HEAPF64[($17_1 + 160 | 0) >> 3] = $11_1;
  HEAPF64[($17_1 + 152 | 0) >> 3] = $12_1;
  HEAPF64[($17_1 + 144 | 0) >> 3] = $13_1;
  HEAP32[($17_1 + 140 | 0) >> 2] = $14_1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862((HEAP32[($17_1 + 208 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862((HEAP32[($17_1 + 208 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862((HEAP32[($17_1 + 208 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862((HEAP32[($17_1 + 208 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($17_1 + 208 | 0) >> 2] | 0) << 3 | 0, HEAP32[($17_1 + 208 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($17_1 + 208 | 0) >> 2] | 0) << 3 | 0, HEAP32[($17_1 + 208 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862((HEAP32[($17_1 + 208 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($17_1 + 136 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($17_1 + 176 | 0) >> 2] | 0) >> 2] = 0;
  HEAP32[($17_1 + 124 | 0) >> 2] = HEAP32[($17_1 + 180 | 0) >> 2] | 0;
  HEAPF64[($17_1 + 56 | 0) >> 3] = Math_sqrt(+HEAPF64[($17_1 + 168 | 0) >> 3]);
  HEAPF64[($17_1 + 40 | 0) >> 3] = 1.0;
  HEAP32[($17_1 + 132 | 0) >> 2] = 0;
  HEAP32[($17_1 + 128 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($17_1 + 128 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $72_1 = (HEAP32[($17_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$72_1 >> 3] = +HEAPF64[$72_1 >> 3] * +HEAPF64[((HEAP32[($17_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($17_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 / +HEAPF64[((HEAP32[($17_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($17_1 + 128 | 0) >> 2] = (HEAP32[($17_1 + 128 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  (wasm2js_i32$0 = $17_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($17_1 + 220 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($17_1 + 212 | 0) >> 2] | 0, HEAP32[($17_1 + 208 | 0) >> 2] | 0, HEAP32[((HEAP32[($17_1 + 220 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 96 | 0) >> 3] = wasm2js_f64$0;
  label$3 : {
   label$4 : {
    if (+HEAPF64[($17_1 + 96 | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
     break label$4
    }
    if (!(+HEAPF64[($17_1 + 96 | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
     break label$3
    }
   }
   $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
   HEAP32[($17_1 + 136 | 0) >> 2] = 15;
  }
  label$5 : {
   if (!(+HEAPF64[($17_1 + 96 | 0) >> 3] != +HEAPF64[($17_1 + 96 | 0) >> 3] & 1 | 0)) {
    break label$5
   }
   $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
   HEAP32[($17_1 + 136 | 0) >> 2] = 15;
  }
  HEAPF64[($17_1 + 48 | 0) >> 3] = +HEAPF64[($17_1 + 96 | 0) >> 3];
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $80(HEAP32[($17_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 200 | 0) >> 2] | 0 | 0, +(+HEAPF64[($17_1 + 56 | 0) >> 3]), HEAP32[($17_1 + 36 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 132 | 0) >> 2] = wasm2js_i32$1;
  label$6 : {
   if (!((HEAP32[($17_1 + 132 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[($17_1 + 136 | 0) >> 2] = 15;
  }
  label$7 : {
   if (!(+HEAPF64[($17_1 + 184 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
    break label$7
   }
   HEAPF64[($17_1 + 184 | 0) >> 3] = 1.0e3;
   HEAPF64[($17_1 + 104 | 0) >> 3] = +(0 | 0);
   HEAPF64[($17_1 + 112 | 0) >> 3] = +(0 | 0);
   HEAP32[($17_1 + 128 | 0) >> 2] = 0;
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($17_1 + 128 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAPF64[($17_1 + 112 | 0) >> 3] = +HEAPF64[($17_1 + 112 | 0) >> 3] + +HEAPF64[((HEAP32[($17_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($17_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[($17_1 + 104 | 0) >> 3] = +HEAPF64[($17_1 + 104 | 0) >> 3] + +HEAPF64[((HEAP32[($17_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($17_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($17_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($17_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($17_1 + 128 | 0) >> 2] = (HEAP32[($17_1 + 128 | 0) >> 2] | 0) + 1 | 0;
     continue label$9;
    };
   }
   HEAPF64[($17_1 + 112 | 0) >> 3] = Math_sqrt(+HEAPF64[($17_1 + 112 | 0) >> 3]);
   HEAPF64[($17_1 + 104 | 0) >> 3] = Math_sqrt(+HEAPF64[($17_1 + 104 | 0) >> 3]);
   label$10 : {
    label$11 : {
     if (!(+HEAPF64[($17_1 + 112 | 0) >> 3] > +HEAPF64[($17_1 + 104 | 0) >> 3] & 1 | 0)) {
      break label$11
     }
     HEAPF64[($17_1 + 184 | 0) >> 3] = +HEAPF64[($17_1 + 184 | 0) >> 3] * +HEAPF64[($17_1 + 112 | 0) >> 3];
     break label$10;
    }
    HEAPF64[($17_1 + 184 | 0) >> 3] = +HEAPF64[($17_1 + 184 | 0) >> 3] * +HEAPF64[($17_1 + 104 | 0) >> 3];
   }
  }
  label$12 : {
   label$13 : {
    if (!(Math_abs(+HEAPF64[($17_1 + 96 | 0) >> 3]) > Math_abs(+HEAPF64[($17_1 + 192 | 0) >> 3]) & 1 | 0)) {
     break label$13
    }
    HEAPF64[($17_1 + 80 | 0) >> 3] = Math_abs(+HEAPF64[($17_1 + 96 | 0) >> 3]);
    break label$12;
   }
   HEAPF64[($17_1 + 80 | 0) >> 3] = Math_abs(+HEAPF64[($17_1 + 192 | 0) >> 3]);
  }
  HEAP32[($17_1 + 128 | 0) >> 2] = 0;
  label$14 : {
   label$15 : while (1) {
    if (!((HEAP32[($17_1 + 128 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$14
    }
    label$16 : {
     label$17 : {
      if (!(Math_abs(+HEAPF64[((HEAP32[($17_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) > 1.0 / Math_abs(+HEAPF64[((HEAP32[($17_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
       break label$17
      }
      HEAPF64[($17_1 + 88 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($17_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      break label$16;
     }
     HEAPF64[($17_1 + 88 | 0) >> 3] = 1.0 / Math_abs(+HEAPF64[((HEAP32[($17_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
    }
    HEAPF64[((HEAP32[($17_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($17_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) * +HEAPF64[($17_1 + 88 | 0) >> 3] / +HEAPF64[($17_1 + 80 | 0) >> 3];
    HEAP32[($17_1 + 128 | 0) >> 2] = (HEAP32[($17_1 + 128 | 0) >> 2] | 0) + 1 | 0;
    continue label$15;
   };
  }
  (wasm2js_i32$0 = $17_1, wasm2js_f64$0 = +$100(HEAP32[($17_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 72 | 0) >> 3] = wasm2js_f64$0;
  label$18 : {
   if (!(+HEAPF64[($17_1 + 72 | 0) >> 3] <= +HEAPF64[($17_1 + 160 | 0) >> 3] * .001 & 1 | 0)) {
    break label$18
   }
   HEAP32[($17_1 + 136 | 0) >> 2] = 1;
   HEAP32[($17_1 + 128 | 0) >> 2] = 0;
   label$19 : {
    label$20 : while (1) {
     if (!((HEAP32[($17_1 + 128 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$19
     }
     HEAPF64[((HEAP32[($17_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($17_1 + 128 | 0) >> 2] = (HEAP32[($17_1 + 128 | 0) >> 2] | 0) + 1 | 0;
     continue label$20;
    };
   }
  }
  $203(HEAP32[($17_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0, +(+HEAPF64[($17_1 + 96 | 0) >> 3]), +(+HEAPF64[($17_1 + 192 | 0) >> 3]), HEAP32[($17_1 + 200 | 0) >> 2] | 0 | 0);
  HEAP32[($17_1 + 128 | 0) >> 2] = 0;
  label$21 : {
   label$22 : while (1) {
    if (!((HEAP32[($17_1 + 128 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$21
    }
    HEAPF64[((HEAP32[($17_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($17_1 + 128 | 0) >> 2] = (HEAP32[($17_1 + 128 | 0) >> 2] | 0) + 1 | 0;
    continue label$22;
   };
  }
  HEAPF64[($17_1 + 64 | 0) >> 3] = +HEAPF64[($17_1 + 96 | 0) >> 3];
  label$23 : while (1) {
   $276_1 = 0;
   label$24 : {
    if (HEAP32[($17_1 + 136 | 0) >> 2] | 0) {
     break label$24
    }
    $276_1 = (HEAP32[(HEAP32[($17_1 + 176 | 0) >> 2] | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 124 | 0) >> 2] | 0 | 0);
   }
   label$25 : {
    if (!($276_1 & 1 | 0)) {
     break label$25
    }
    HEAP32[(HEAP32[($17_1 + 176 | 0) >> 2] | 0) >> 2] = (HEAP32[(HEAP32[($17_1 + 176 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0;
    $110(HEAP32[($17_1 + 36 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0, +(-1.0));
    $140(HEAP32[($17_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 16 | 0) >> 2] | 0 | 0);
    $110(HEAP32[($17_1 + 36 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0, +(-1.0));
    HEAP32[($17_1 + 128 | 0) >> 2] = 0;
    label$26 : {
     label$27 : while (1) {
      if (!((HEAP32[($17_1 + 128 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$26
      }
      HEAPF64[((HEAP32[($17_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($17_1 + 128 | 0) >> 2] = (HEAP32[($17_1 + 128 | 0) >> 2] | 0) + 1 | 0;
      continue label$27;
     };
    }
    (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $87(HEAP32[($17_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 216 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 24 | 0) >> 2] | 0 | 0, $17_1 + 64 | 0 | 0, HEAP32[($17_1 + 36 | 0) >> 2] | 0 | 0, $17_1 + 40 | 0 | 0, HEAP32[($17_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 200 | 0) >> 2] | 0 | 0, +(+HEAPF64[($17_1 + 184 | 0) >> 3]), HEAP32[($17_1 + 180 | 0) >> 2] | 0 | 0, +(+HEAPF64[($17_1 + 56 | 0) >> 3]), +(+HEAPF64[($17_1 + 152 | 0) >> 3]), +(+HEAPF64[($17_1 + 160 | 0) >> 3]), +(+HEAPF64[($17_1 + 144 | 0) >> 3]), HEAP32[($17_1 + 140 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 120 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $84(+(+HEAPF64[($17_1 + 64 | 0) >> 3]), HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0, +(+HEAPF64[($17_1 + 48 | 0) >> 3]), HEAP32[($17_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 200 | 0) >> 2] | 0 | 0, +(+HEAPF64[($17_1 + 168 | 0) >> 3]), +(+HEAPF64[($17_1 + 160 | 0) >> 3]), +(+HEAPF64[($17_1 + 152 | 0) >> 3]), HEAP32[($17_1 + 120 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 136 | 0) >> 2] = wasm2js_i32$1;
    HEAPF64[($17_1 + 48 | 0) >> 3] = +HEAPF64[($17_1 + 64 | 0) >> 3];
    $199(HEAP32[($17_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0, +(+HEAPF64[($17_1 + 168 | 0) >> 3]), HEAP32[($17_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 36 | 0) >> 2] | 0 | 0);
    HEAP32[($17_1 + 128 | 0) >> 2] = 0;
    label$28 : {
     label$29 : while (1) {
      if (!((HEAP32[($17_1 + 128 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$28
      }
      HEAPF64[((HEAP32[($17_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($17_1 + 128 | 0) >> 2] = (HEAP32[($17_1 + 128 | 0) >> 2] | 0) + 1 | 0;
      continue label$29;
     };
    }
    continue label$23;
   }
   break label$23;
  };
  label$30 : {
   if (HEAP32[($17_1 + 136 | 0) >> 2] | 0) {
    break label$30
   }
   if (!((HEAP32[(HEAP32[($17_1 + 176 | 0) >> 2] | 0) >> 2] | 0 | 0) >= (HEAP32[($17_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$30
   }
   HEAP32[($17_1 + 136 | 0) >> 2] = 4;
  }
  HEAP32[($17_1 + 128 | 0) >> 2] = 0;
  label$31 : {
   label$32 : while (1) {
    if (!((HEAP32[($17_1 + 128 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$31
    }
    $397_1 = (HEAP32[($17_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$397_1 >> 3] = +HEAPF64[$397_1 >> 3] * +HEAPF64[((HEAP32[($17_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($17_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 / +HEAPF64[((HEAP32[($17_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($17_1 + 128 | 0) >> 2] = (HEAP32[($17_1 + 128 | 0) >> 2] | 0) + 1 | 0;
    continue label$32;
   };
  }
  $863(HEAP32[($17_1 + 36 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($17_1 + 32 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($17_1 + 28 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($17_1 + 24 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($17_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($17_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($17_1 + 12 | 0) >> 2] | 0 | 0);
  $418_1 = HEAP32[($17_1 + 136 | 0) >> 2] | 0;
  global$0 = $17_1 + 224 | 0;
  return $418_1 | 0;
 }
 
 function $205($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $185_1 = 0, $200_1 = 0, $210_1 = 0, $295_1 = 0, $305_1 = 0, $335_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10_1 = global$0 - 80 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($10_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($10_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 60 | 0) >> 2] = $4_1;
  HEAP32[($10_1 + 56 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 52 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 48 | 0) >> 2] = $7_1;
  (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $862((HEAP32[($10_1 + 72 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $862(8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $862((HEAP32[($10_1 + 72 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $862((HEAP32[($10_1 + 72 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $862((HEAP32[($10_1 + 64 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $862((HEAP32[($10_1 + 64 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $862((HEAP32[($10_1 + 64 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $862((HEAP32[($10_1 + 64 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($10_1 + 36 | 0) >> 2] = 0;
  HEAP32[($10_1 + 40 | 0) >> 2] = 0;
  HEAP32[($10_1 + 44 | 0) >> 2] = 0;
  HEAP32[($10_1 + 32 | 0) >> 2] = 0;
  HEAP32[($10_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($10_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($10_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($10_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAPF64[((HEAP32[($10_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($10_1 + 44 | 0) >> 2] = (HEAP32[($10_1 + 44 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$3 : {
   label$4 : {
    if (!((HEAP32[($10_1 + 68 | 0) >> 2] | 0 | 0) <= (HEAP32[($10_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($10_1 + 32 | 0) >> 2] = HEAP32[($10_1 + 68 | 0) >> 2] | 0;
    break label$3;
   }
   HEAP32[($10_1 + 32 | 0) >> 2] = HEAP32[($10_1 + 64 | 0) >> 2] | 0;
  }
  HEAP32[($10_1 + 44 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF64[((HEAP32[$10_1 >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAPF64[((HEAP32[($10_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($10_1 + 44 | 0) >> 2] = (HEAP32[($10_1 + 44 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[($10_1 + 44 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAPF64[((HEAP32[($10_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAPF64[((HEAP32[($10_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($10_1 + 44 | 0) >> 2] = (HEAP32[($10_1 + 44 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  HEAP32[($10_1 + 44 | 0) >> 2] = (HEAP32[($10_1 + 32 | 0) >> 2] | 0) - 1 | 0;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$9
    }
    HEAP32[($10_1 + 40 | 0) >> 2] = Math_imul(HEAP32[($10_1 + 44 | 0) >> 2] | 0, HEAP32[($10_1 + 72 | 0) >> 2] | 0);
    HEAP32[($10_1 + 36 | 0) >> 2] = 0;
    label$11 : {
     label$12 : while (1) {
      if (!((HEAP32[($10_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      HEAPF64[((HEAP32[($10_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($10_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[((HEAP32[($10_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$12;
     };
    }
    $185_1 = 1;
    $119(HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 24 | 0) >> 2] | 0 | 0, $185_1 | 0, HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0, $185_1 | 0);
    HEAPF64[((HEAP32[($10_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 / +HEAPF64[(HEAP32[($10_1 + 24 | 0) >> 2] | 0) >> 3];
    $200_1 = 1;
    $119(HEAP32[($10_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0, (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, $200_1 | 0, HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0, $200_1 | 0);
    $210_1 = (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$210_1 >> 3] = +HEAPF64[$210_1 >> 3] * +HEAPF64[((HEAP32[($10_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($10_1 + 36 | 0) >> 2] = 0;
    label$13 : {
     label$14 : while (1) {
      if (!((HEAP32[($10_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$13
      }
      HEAPF64[((HEAP32[($10_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($10_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($10_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($10_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$14;
     };
    }
    HEAP32[($10_1 + 44 | 0) >> 2] = (HEAP32[($10_1 + 44 | 0) >> 2] | 0) + -1 | 0;
    continue label$10;
   };
  }
  $119(HEAP32[($10_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0, 1 | 0);
  HEAP32[($10_1 + 44 | 0) >> 2] = 0;
  label$15 : {
   label$16 : while (1) {
    if (!((HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$15
    }
    HEAP32[($10_1 + 40 | 0) >> 2] = Math_imul(HEAP32[($10_1 + 44 | 0) >> 2] | 0, HEAP32[($10_1 + 72 | 0) >> 2] | 0);
    HEAP32[($10_1 + 36 | 0) >> 2] = 0;
    label$17 : {
     label$18 : while (1) {
      if (!((HEAP32[($10_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$17
      }
      HEAPF64[((HEAP32[($10_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($10_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$18;
     };
    }
    $295_1 = 1;
    $119(HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0, (HEAP32[$10_1 >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, $295_1 | 0, HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0, $295_1 | 0);
    $305_1 = (HEAP32[$10_1 >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$305_1 >> 3] = +HEAPF64[$305_1 >> 3] * +HEAPF64[((HEAP32[($10_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($10_1 + 36 | 0) >> 2] = 0;
    label$19 : {
     label$20 : while (1) {
      if (!((HEAP32[($10_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$19
      }
      $335_1 = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAPF64[$335_1 >> 3] = +HEAPF64[$335_1 >> 3] + +HEAPF64[((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 40 | 0) >> 2] | 0) + (HEAP32[($10_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * (+HEAPF64[((HEAP32[($10_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[$10_1 >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      HEAP32[($10_1 + 36 | 0) >> 2] = (HEAP32[($10_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$20;
     };
    }
    HEAP32[($10_1 + 44 | 0) >> 2] = (HEAP32[($10_1 + 44 | 0) >> 2] | 0) + 1 | 0;
    continue label$16;
   };
  }
  $863(HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($10_1 + 24 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($10_1 + 8 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0);
  $863(HEAP32[$10_1 >> 2] | 0 | 0);
  global$0 = $10_1 + 80 | 0;
  return;
 }
 
 function $206($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $17_1 = 0, $22_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $5_1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862(8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862(8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $17_1 = 1;
  $119(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, $17_1 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, $17_1 | 0);
  $22_1 = 1;
  $119(HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0, $22_1 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, $22_1 | 0);
  label$1 : {
   label$2 : {
    if (!((HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[($8_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($8_1 + 12 | 0) >> 2] | 0) >> 3] / +HEAPF64[(HEAP32[($8_1 + 8 | 0) >> 2] | 0) >> 3];
    break label$1;
   }
   HEAPF64[($8_1 + 16 | 0) >> 3] = 1.0;
  }
  HEAP32[($8_1 + 36 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($8_1 + 28 | 0) >> 2] = Math_imul(HEAP32[($8_1 + 36 | 0) >> 2] | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0);
    HEAP32[($8_1 + 32 | 0) >> 2] = 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      label$7 : {
       label$8 : {
        if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) == (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$8
        }
        HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($8_1 + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($8_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($8_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        break label$7;
       }
       HEAPF64[((HEAP32[($8_1 + 60 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      }
      HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 32 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $863(HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $8_1 + 64 | 0;
  return;
 }
 
 function $207($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = +$6_1;
  $7_1 = +$7_1;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = +$10_1;
  $11_1 = +$11_1;
  $12_1 = +$12_1;
  $13_1 = +$13_1;
  $14_1 = $14_1 | 0;
  var $17_1 = 0, $86_1 = 0, $310_1 = 0, $608_1 = 0, $632_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $17_1 = global$0 - 240 | 0;
  global$0 = $17_1;
  HEAP32[($17_1 + 236 | 0) >> 2] = $0_1;
  HEAP32[($17_1 + 232 | 0) >> 2] = $1_1;
  HEAP32[($17_1 + 228 | 0) >> 2] = $2_1;
  HEAP32[($17_1 + 224 | 0) >> 2] = $3_1;
  HEAP32[($17_1 + 220 | 0) >> 2] = $4_1;
  HEAP32[($17_1 + 216 | 0) >> 2] = $5_1;
  HEAPF64[($17_1 + 208 | 0) >> 3] = $6_1;
  HEAPF64[($17_1 + 200 | 0) >> 3] = $7_1;
  HEAP32[($17_1 + 196 | 0) >> 2] = $8_1;
  HEAP32[($17_1 + 192 | 0) >> 2] = $9_1;
  HEAPF64[($17_1 + 184 | 0) >> 3] = $10_1;
  HEAPF64[($17_1 + 176 | 0) >> 3] = $11_1;
  HEAPF64[($17_1 + 168 | 0) >> 3] = $12_1;
  HEAPF64[($17_1 + 160 | 0) >> 3] = $13_1;
  HEAP32[($17_1 + 156 | 0) >> 2] = $14_1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862((HEAP32[($17_1 + 224 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862((HEAP32[($17_1 + 224 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862((HEAP32[($17_1 + 224 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862((HEAP32[($17_1 + 224 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($17_1 + 224 | 0) >> 2] | 0) << 3 | 0, HEAP32[($17_1 + 224 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862((HEAP32[($17_1 + 224 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($17_1 + 220 | 0) >> 2] | 0) << 3 | 0, HEAP32[($17_1 + 224 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($17_1 + 220 | 0) >> 2] | 0) << 3 | 0, HEAP32[($17_1 + 224 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862((HEAP32[($17_1 + 224 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862((HEAP32[($17_1 + 224 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[($17_1 + 152 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($17_1 + 192 | 0) >> 2] | 0) >> 2] = 0;
  HEAP32[($17_1 + 136 | 0) >> 2] = HEAP32[($17_1 + 196 | 0) >> 2] | 0;
  HEAPF64[($17_1 + 40 | 0) >> 3] = Math_sqrt(+HEAPF64[($17_1 + 184 | 0) >> 3]);
  HEAPF64[($17_1 + 96 | 0) >> 3] = 1.0;
  HEAP32[($17_1 + 148 | 0) >> 2] = 0;
  HEAP32[($17_1 + 144 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($17_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $86_1 = (HEAP32[($17_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$86_1 >> 3] = +HEAPF64[$86_1 >> 3] * +HEAPF64[((HEAP32[($17_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($17_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 / +HEAPF64[((HEAP32[($17_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($17_1 + 144 | 0) >> 2] = (HEAP32[($17_1 + 144 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  (wasm2js_i32$0 = $17_1, wasm2js_f64$0 = +FUNCTION_TABLE[HEAP32[(HEAP32[($17_1 + 236 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[($17_1 + 228 | 0) >> 2] | 0, HEAP32[($17_1 + 224 | 0) >> 2] | 0, HEAP32[((HEAP32[($17_1 + 236 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)), HEAPF64[(wasm2js_i32$0 + 80 | 0) >> 3] = wasm2js_f64$0;
  label$3 : {
   label$4 : {
    if (+HEAPF64[($17_1 + 80 | 0) >> 3] >= 1797693134862315708145274.0e284 & 1 | 0) {
     break label$4
    }
    if (!(+HEAPF64[($17_1 + 80 | 0) >> 3] <= -1797693134862315708145274.0e284 & 1 | 0)) {
     break label$3
    }
   }
   $875(global$3 + 2489 | 0 | 0, 0 | 0) | 0;
   HEAP32[($17_1 + 152 | 0) >> 2] = 15;
  }
  label$5 : {
   if (!(+HEAPF64[($17_1 + 80 | 0) >> 3] != +HEAPF64[($17_1 + 80 | 0) >> 3] & 1 | 0)) {
    break label$5
   }
   $875(global$3 + 2845 | 0 | 0, 0 | 0) | 0;
   HEAP32[($17_1 + 152 | 0) >> 2] = 15;
  }
  HEAPF64[($17_1 + 88 | 0) >> 3] = +HEAPF64[($17_1 + 80 | 0) >> 3];
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $80(HEAP32[($17_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 216 | 0) >> 2] | 0 | 0, +(+HEAPF64[($17_1 + 40 | 0) >> 3]), HEAP32[($17_1 + 36 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 148 | 0) >> 2] = wasm2js_i32$1;
  label$6 : {
   if (!((HEAP32[($17_1 + 148 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[($17_1 + 152 | 0) >> 2] = 15;
  }
  label$7 : {
   if (!(+HEAPF64[($17_1 + 200 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
    break label$7
   }
   HEAPF64[($17_1 + 200 | 0) >> 3] = 1.0e3;
   HEAPF64[($17_1 + 104 | 0) >> 3] = +(0 | 0);
   HEAPF64[($17_1 + 112 | 0) >> 3] = +(0 | 0);
   HEAP32[($17_1 + 144 | 0) >> 2] = 0;
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($17_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAPF64[($17_1 + 112 | 0) >> 3] = +HEAPF64[($17_1 + 112 | 0) >> 3] + +HEAPF64[((HEAP32[($17_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($17_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[($17_1 + 104 | 0) >> 3] = +HEAPF64[($17_1 + 104 | 0) >> 3] + +HEAPF64[((HEAP32[($17_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($17_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($17_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($17_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($17_1 + 144 | 0) >> 2] = (HEAP32[($17_1 + 144 | 0) >> 2] | 0) + 1 | 0;
     continue label$9;
    };
   }
   HEAPF64[($17_1 + 112 | 0) >> 3] = Math_sqrt(+HEAPF64[($17_1 + 112 | 0) >> 3]);
   HEAPF64[($17_1 + 104 | 0) >> 3] = Math_sqrt(+HEAPF64[($17_1 + 104 | 0) >> 3]);
   label$10 : {
    label$11 : {
     if (!(+HEAPF64[($17_1 + 112 | 0) >> 3] > +HEAPF64[($17_1 + 104 | 0) >> 3] & 1 | 0)) {
      break label$11
     }
     HEAPF64[($17_1 + 200 | 0) >> 3] = +HEAPF64[($17_1 + 200 | 0) >> 3] * +HEAPF64[($17_1 + 112 | 0) >> 3];
     break label$10;
    }
    HEAPF64[($17_1 + 200 | 0) >> 3] = +HEAPF64[($17_1 + 200 | 0) >> 3] * +HEAPF64[($17_1 + 104 | 0) >> 3];
   }
  }
  label$12 : {
   label$13 : {
    if (!(Math_abs(+HEAPF64[($17_1 + 80 | 0) >> 3]) > Math_abs(+HEAPF64[($17_1 + 208 | 0) >> 3]) & 1 | 0)) {
     break label$13
    }
    HEAPF64[($17_1 + 64 | 0) >> 3] = Math_abs(+HEAPF64[($17_1 + 80 | 0) >> 3]);
    break label$12;
   }
   HEAPF64[($17_1 + 64 | 0) >> 3] = Math_abs(+HEAPF64[($17_1 + 208 | 0) >> 3]);
  }
  HEAP32[($17_1 + 144 | 0) >> 2] = 0;
  label$14 : {
   label$15 : while (1) {
    if (!((HEAP32[($17_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$14
    }
    label$16 : {
     label$17 : {
      if (!(Math_abs(+HEAPF64[((HEAP32[($17_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) > 1.0 / Math_abs(+HEAPF64[((HEAP32[($17_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) & 1 | 0)) {
       break label$17
      }
      HEAPF64[($17_1 + 72 | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($17_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
      break label$16;
     }
     HEAPF64[($17_1 + 72 | 0) >> 3] = 1.0 / Math_abs(+HEAPF64[((HEAP32[($17_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
    }
    HEAPF64[((HEAP32[($17_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = Math_abs(+HEAPF64[((HEAP32[($17_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) * +HEAPF64[($17_1 + 72 | 0) >> 3] / +HEAPF64[($17_1 + 64 | 0) >> 3];
    HEAP32[($17_1 + 144 | 0) >> 2] = (HEAP32[($17_1 + 144 | 0) >> 2] | 0) + 1 | 0;
    continue label$15;
   };
  }
  (wasm2js_i32$0 = $17_1, wasm2js_f64$0 = +$100(HEAP32[($17_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 56 | 0) >> 3] = wasm2js_f64$0;
  label$18 : {
   if (!(+HEAPF64[($17_1 + 56 | 0) >> 3] <= +HEAPF64[($17_1 + 176 | 0) >> 3] * .001 & 1 | 0)) {
    break label$18
   }
   HEAP32[($17_1 + 152 | 0) >> 2] = 1;
   HEAP32[($17_1 + 144 | 0) >> 2] = 0;
   label$19 : {
    label$20 : while (1) {
     if (!((HEAP32[($17_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$19
     }
     HEAPF64[((HEAP32[($17_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($17_1 + 144 | 0) >> 2] = (HEAP32[($17_1 + 144 | 0) >> 2] | 0) + 1 | 0;
     continue label$20;
    };
   }
  }
  HEAP32[($17_1 + 144 | 0) >> 2] = 0;
  label$21 : {
   label$22 : while (1) {
    if (!((HEAP32[($17_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$21
    }
    HEAPF64[((HEAP32[($17_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($17_1 + 144 | 0) >> 2] = (HEAP32[($17_1 + 144 | 0) >> 2] | 0) + 1 | 0;
    continue label$22;
   };
  }
  HEAPF64[($17_1 + 48 | 0) >> 3] = +HEAPF64[($17_1 + 80 | 0) >> 3];
  HEAP32[($17_1 + 144 | 0) >> 2] = 0;
  label$23 : {
   label$24 : while (1) {
    if (!((HEAP32[($17_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$23
    }
    HEAPF64[((HEAP32[($17_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAPF64[((HEAP32[$17_1 >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($17_1 + 144 | 0) >> 2] = (HEAP32[($17_1 + 144 | 0) >> 2] | 0) + 1 | 0;
    continue label$24;
   };
  }
  label$25 : while (1) {
   $310_1 = 0;
   label$26 : {
    if (HEAP32[($17_1 + 152 | 0) >> 2] | 0) {
     break label$26
    }
    $310_1 = (HEAP32[(HEAP32[($17_1 + 192 | 0) >> 2] | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 136 | 0) >> 2] | 0 | 0);
   }
   label$27 : {
    if (!($310_1 & 1 | 0)) {
     break label$27
    }
    HEAP32[($17_1 + 124 | 0) >> 2] = HEAP32[(HEAP32[($17_1 + 192 | 0) >> 2] | 0) >> 2] | 0;
    $206(HEAP32[($17_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$17_1 >> 2] | 0 | 0, HEAP32[($17_1 + 216 | 0) >> 2] | 0 | 0);
    $205(HEAP32[($17_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 20 | 0) >> 2] | 0 | 0);
    $110(HEAP32[($17_1 + 20 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0, +(-1.0));
    HEAP32[($17_1 + 144 | 0) >> 2] = 0;
    label$28 : {
     label$29 : while (1) {
      if (!((HEAP32[($17_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$28
      }
      HEAPF64[((HEAP32[($17_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($17_1 + 144 | 0) >> 2] = (HEAP32[($17_1 + 144 | 0) >> 2] | 0) + 1 | 0;
      continue label$29;
     };
    }
    (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $87(HEAP32[($17_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 28 | 0) >> 2] | 0 | 0, $17_1 + 48 | 0 | 0, HEAP32[($17_1 + 36 | 0) >> 2] | 0 | 0, $17_1 + 96 | 0 | 0, HEAP32[($17_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 216 | 0) >> 2] | 0 | 0, +(+HEAPF64[($17_1 + 200 | 0) >> 3]), HEAP32[($17_1 + 196 | 0) >> 2] | 0 | 0, +(+HEAPF64[($17_1 + 40 | 0) >> 3]), +(+HEAPF64[($17_1 + 168 | 0) >> 3]), +(+HEAPF64[($17_1 + 176 | 0) >> 3]), +(+HEAPF64[($17_1 + 160 | 0) >> 3]), HEAP32[($17_1 + 156 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 132 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $84(+(+HEAPF64[($17_1 + 48 | 0) >> 3]), HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0, +(+HEAPF64[($17_1 + 88 | 0) >> 3]), HEAP32[($17_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 216 | 0) >> 2] | 0 | 0, +(+HEAPF64[($17_1 + 184 | 0) >> 3]), +(+HEAPF64[($17_1 + 176 | 0) >> 3]), +(+HEAPF64[($17_1 + 168 | 0) >> 3]), HEAP32[($17_1 + 132 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 152 | 0) >> 2] = wasm2js_i32$1;
    HEAPF64[($17_1 + 88 | 0) >> 3] = +HEAPF64[($17_1 + 48 | 0) >> 3];
    HEAP32[($17_1 + 144 | 0) >> 2] = 0;
    label$30 : {
     label$31 : while (1) {
      if (!((HEAP32[($17_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$30
      }
      HEAPF64[((HEAP32[($17_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($17_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[((HEAP32[$17_1 >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($17_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($17_1 + 144 | 0) >> 2] = (HEAP32[($17_1 + 144 | 0) >> 2] | 0) + 1 | 0;
      continue label$31;
     };
    }
    label$32 : {
     label$33 : {
      if (!((HEAP32[(HEAP32[($17_1 + 192 | 0) >> 2] | 0) >> 2] | 0 | 0) >= (HEAP32[($17_1 + 220 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$33
      }
      HEAP32[($17_1 + 144 | 0) >> 2] = 0;
      label$34 : {
       label$35 : while (1) {
        if (!((HEAP32[($17_1 + 144 | 0) >> 2] | 0 | 0) < (Math_imul((HEAP32[($17_1 + 220 | 0) >> 2] | 0) - 1 | 0, HEAP32[($17_1 + 224 | 0) >> 2] | 0) | 0) & 1 | 0)) {
         break label$34
        }
        HEAPF64[((HEAP32[($17_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($17_1 + 224 | 0) >> 2] | 0) + (HEAP32[($17_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAPF64[((HEAP32[($17_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 8 | 0) >> 2] | 0) + (((HEAP32[($17_1 + 224 | 0) >> 2] | 0) + (HEAP32[($17_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($17_1 + 144 | 0) >> 2] = (HEAP32[($17_1 + 144 | 0) >> 2] | 0) + 1 | 0;
        continue label$35;
       };
      }
      HEAP32[($17_1 + 140 | 0) >> 2] = 0;
      HEAP32[($17_1 + 144 | 0) >> 2] = Math_imul((HEAP32[($17_1 + 220 | 0) >> 2] | 0) - 1 | 0, HEAP32[($17_1 + 224 | 0) >> 2] | 0);
      label$36 : {
       label$37 : while (1) {
        if (!((HEAP32[($17_1 + 144 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($17_1 + 220 | 0) >> 2] | 0, HEAP32[($17_1 + 224 | 0) >> 2] | 0) | 0) & 1 | 0)) {
         break label$36
        }
        HEAPF64[((HEAP32[($17_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAPF64[((HEAP32[($17_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[$17_1 >> 2] | 0) + ((HEAP32[($17_1 + 140 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($17_1 + 140 | 0) >> 2] = (HEAP32[($17_1 + 140 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($17_1 + 144 | 0) >> 2] = (HEAP32[($17_1 + 144 | 0) >> 2] | 0) + 1 | 0;
        continue label$37;
       };
      }
      break label$32;
     }
     HEAP32[($17_1 + 128 | 0) >> 2] = Math_imul(HEAP32[(HEAP32[($17_1 + 192 | 0) >> 2] | 0) >> 2] | 0, HEAP32[($17_1 + 224 | 0) >> 2] | 0);
     HEAP32[($17_1 + 144 | 0) >> 2] = 0;
     label$38 : {
      label$39 : while (1) {
       if (!((HEAP32[($17_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$38
       }
       HEAPF64[((HEAP32[($17_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($17_1 + 128 | 0) >> 2] | 0) + (HEAP32[($17_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[((HEAP32[($17_1 + 8 | 0) >> 2] | 0) + (((HEAP32[($17_1 + 128 | 0) >> 2] | 0) + (HEAP32[($17_1 + 144 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[$17_1 >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($17_1 + 144 | 0) >> 2] = (HEAP32[($17_1 + 144 | 0) >> 2] | 0) + 1 | 0;
       continue label$39;
      };
     }
    }
    HEAP32[($17_1 + 144 | 0) >> 2] = 0;
    label$40 : {
     label$41 : while (1) {
      if (!((HEAP32[($17_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$40
      }
      HEAPF64[((HEAP32[($17_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($17_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[((HEAP32[($17_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      HEAP32[($17_1 + 144 | 0) >> 2] = (HEAP32[($17_1 + 144 | 0) >> 2] | 0) + 1 | 0;
      continue label$41;
     };
    }
    HEAP32[(HEAP32[($17_1 + 192 | 0) >> 2] | 0) >> 2] = (HEAP32[(HEAP32[($17_1 + 192 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0;
    continue label$25;
   }
   break label$25;
  };
  label$42 : {
   if (HEAP32[($17_1 + 152 | 0) >> 2] | 0) {
    break label$42
   }
   if (!((HEAP32[(HEAP32[($17_1 + 192 | 0) >> 2] | 0) >> 2] | 0 | 0) >= (HEAP32[($17_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$42
   }
   HEAP32[($17_1 + 152 | 0) >> 2] = 4;
  }
  HEAP32[($17_1 + 144 | 0) >> 2] = 0;
  label$43 : {
   label$44 : while (1) {
    if (!((HEAP32[($17_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$43
    }
    $608_1 = (HEAP32[($17_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$608_1 >> 3] = +HEAPF64[$608_1 >> 3] * +HEAPF64[((HEAP32[($17_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($17_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 / +HEAPF64[((HEAP32[($17_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($17_1 + 144 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($17_1 + 144 | 0) >> 2] = (HEAP32[($17_1 + 144 | 0) >> 2] | 0) + 1 | 0;
    continue label$44;
   };
  }
  $863(HEAP32[($17_1 + 36 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($17_1 + 32 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($17_1 + 28 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($17_1 + 24 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($17_1 + 20 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($17_1 + 16 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($17_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($17_1 + 8 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($17_1 + 4 | 0) >> 2] | 0 | 0);
  $863(HEAP32[$17_1 >> 2] | 0 | 0);
  $632_1 = HEAP32[($17_1 + 152 | 0) >> 2] | 0;
  global$0 = $17_1 + 240 | 0;
  return $632_1 | 0;
 }
 
 function $208($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = +(0 | 0);
  HEAP32[($4_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[($4_1 + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[($4_1 + 8 | 0) >> 3] / +(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  return +(+HEAPF64[($4_1 + 8 | 0) >> 3]);
 }
 
 function $209($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $40_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  HEAPF64[($4_1 + 32 | 0) >> 3] = +(0 | 0);
  (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +$208(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($4_1 + 16 | 0) >> 3];
    HEAPF64[($4_1 + 32 | 0) >> 3] = +HEAPF64[($4_1 + 32 | 0) >> 3] + +HEAPF64[($4_1 + 24 | 0) >> 3] * +HEAPF64[($4_1 + 24 | 0) >> 3];
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[($4_1 + 32 | 0) >> 3] = +HEAPF64[($4_1 + 32 | 0) >> 3] / +(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
  $40_1 = +HEAPF64[($4_1 + 32 | 0) >> 3];
  global$0 = $4_1 + 48 | 0;
  return +$40_1;
 }
 
 function $210($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1, $16_1, $17_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  $15_1 = $15_1 | 0;
  $16_1 = $16_1 | 0;
  $17_1 = $17_1 | 0;
  var $20_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $20_1 = global$0 - 112 | 0;
  global$0 = $20_1;
  HEAP32[($20_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($20_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($20_1 + 100 | 0) >> 2] = $2_1;
  HEAP32[($20_1 + 96 | 0) >> 2] = $3_1;
  HEAP32[($20_1 + 92 | 0) >> 2] = $4_1;
  HEAP32[($20_1 + 88 | 0) >> 2] = $5_1;
  HEAP32[($20_1 + 84 | 0) >> 2] = $6_1;
  HEAP32[($20_1 + 80 | 0) >> 2] = $7_1;
  HEAP32[($20_1 + 76 | 0) >> 2] = $8_1;
  HEAP32[($20_1 + 72 | 0) >> 2] = $9_1;
  HEAP32[($20_1 + 68 | 0) >> 2] = $10_1;
  HEAP32[($20_1 + 64 | 0) >> 2] = $11_1;
  HEAP32[($20_1 + 60 | 0) >> 2] = $12_1;
  HEAP32[($20_1 + 56 | 0) >> 2] = $13_1;
  HEAP32[($20_1 + 52 | 0) >> 2] = $14_1;
  HEAP32[($20_1 + 48 | 0) >> 2] = $15_1;
  HEAP32[($20_1 + 44 | 0) >> 2] = $16_1;
  HEAP32[($20_1 + 40 | 0) >> 2] = $17_1;
  HEAP32[($20_1 + 44 | 0) >> 2] = (HEAP32[($20_1 + 44 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($20_1 + 48 | 0) >> 2] = (HEAP32[($20_1 + 48 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($20_1 + 52 | 0) >> 2] = (HEAP32[($20_1 + 52 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($20_1 + 108 | 0) >> 2] = (HEAP32[($20_1 + 108 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($20_1 + 36 | 0) >> 2] = (HEAP32[(HEAP32[($20_1 + 104 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($20_1 + 100 | 0) >> 2] | 0) >> 2] | 0) << 1 | 0) | 0;
  HEAP32[($20_1 + 32 | 0) >> 2] = (HEAP32[($20_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($20_1 + 40 | 0) >> 2] = (HEAP32[($20_1 + 40 | 0) >> 2] | 0) + ((0 - (HEAP32[($20_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[$20_1 >> 2] = 0;
  HEAP32[($20_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[($20_1 + 104 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($20_1 + 24 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($20_1 + 24 | 0) >> 2] | 0 | 0) <= (HEAP32[($20_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($20_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($20_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($20_1 + 24 | 0) >> 2] = (HEAP32[($20_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  (wasm2js_i32$0 = $20_1, wasm2js_i32$1 = $91(3 | 0, HEAP32[(HEAP32[($20_1 + 96 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $20_1, wasm2js_i32$1 = $91(3 | 0, HEAP32[(HEAP32[($20_1 + 92 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $20_1, wasm2js_i32$1 = $91(3 | 0, HEAP32[(HEAP32[($20_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   if ((HEAP32[($20_1 + 8 | 0) >> 2] | 0 | 0) % (2 | 0) | 0) {
    break label$3
   }
   HEAP32[($20_1 + 8 | 0) >> 2] = (HEAP32[($20_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  }
  label$4 : {
   if ((HEAP32[($20_1 + 4 | 0) >> 2] | 0 | 0) % (2 | 0) | 0) {
    break label$4
   }
   HEAP32[($20_1 + 4 | 0) >> 2] = (HEAP32[($20_1 + 4 | 0) >> 2] | 0) + 1 | 0;
  }
  label$5 : {
   if ((HEAP32[($20_1 + 16 | 0) >> 2] | 0 | 0) % (2 | 0) | 0) {
    break label$5
   }
   HEAP32[($20_1 + 16 | 0) >> 2] = (HEAP32[($20_1 + 16 | 0) >> 2] | 0) + 1 | 0;
  }
  (wasm2js_i32$0 = $20_1, wasm2js_i32$1 = $91(2 | 0, HEAP32[(HEAP32[($20_1 + 100 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($20_1 + 20 | 0) >> 2] = 0;
  label$6 : {
   label$7 : while (1) {
    $211((HEAP32[($20_1 + 108 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($20_1 + 104 | 0) >> 2] | 0 | 0, $20_1 + 12 | 0 | 0, $20_1 + 8 | 0 | 0, $20_1 + 4 | 0 | 0, $20_1 + 16 | 0 | 0, HEAP32[($20_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 60 | 0) >> 2] | 0 | 0, $20_1 | 0, (HEAP32[($20_1 + 52 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($20_1 + 48 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($20_1 + 44 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($20_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($20_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
    HEAP32[($20_1 + 20 | 0) >> 2] = (HEAP32[($20_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    label$8 : {
     if (!((HEAP32[($20_1 + 20 | 0) >> 2] | 0 | 0) > (HEAP32[(HEAP32[($20_1 + 56 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     break label$6;
    }
    HEAP32[($20_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[($20_1 + 104 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($20_1 + 24 | 0) >> 2] = 1;
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($20_1 + 24 | 0) >> 2] | 0 | 0) <= (HEAP32[($20_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAPF64[((HEAP32[($20_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($20_1 + 24 | 0) >> 2] | 0) + (HEAP32[($20_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($20_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($20_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($20_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($20_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($20_1 + 24 | 0) >> 2] = (HEAP32[($20_1 + 24 | 0) >> 2] | 0) + 1 | 0;
      continue label$10;
     };
    }
    $212((HEAP32[($20_1 + 108 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($20_1 + 104 | 0) >> 2] | 0 | 0, (HEAP32[($20_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($20_1 + 36 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($20_1 + 52 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
    HEAP32[$20_1 >> 2] = 1;
    continue label$7;
   };
  }
  label$11 : {
   if (!((HEAP32[(HEAP32[($20_1 + 56 | 0) >> 2] | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0)) {
    break label$11
   }
   HEAP32[($20_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[($20_1 + 104 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($20_1 + 24 | 0) >> 2] = 1;
   label$12 : {
    label$13 : while (1) {
     if (!((HEAP32[($20_1 + 24 | 0) >> 2] | 0 | 0) <= (HEAP32[($20_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$12
     }
     HEAPF64[((HEAP32[($20_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($20_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
     HEAP32[($20_1 + 24 | 0) >> 2] = (HEAP32[($20_1 + 24 | 0) >> 2] | 0) + 1 | 0;
     continue label$13;
    };
   }
  }
  global$0 = $20_1 + 112 | 0;
  return;
 }
 
 function $211($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1, $16_1, $17_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  $15_1 = $15_1 | 0;
  $16_1 = $16_1 | 0;
  $17_1 = $17_1 | 0;
  var $20_1 = 0;
  $20_1 = global$0 - 112 | 0;
  global$0 = $20_1;
  HEAP32[($20_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($20_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($20_1 + 100 | 0) >> 2] = $2_1;
  HEAP32[($20_1 + 96 | 0) >> 2] = $3_1;
  HEAP32[($20_1 + 92 | 0) >> 2] = $4_1;
  HEAP32[($20_1 + 88 | 0) >> 2] = $5_1;
  HEAP32[($20_1 + 84 | 0) >> 2] = $6_1;
  HEAP32[($20_1 + 80 | 0) >> 2] = $7_1;
  HEAP32[($20_1 + 76 | 0) >> 2] = $8_1;
  HEAP32[($20_1 + 72 | 0) >> 2] = $9_1;
  HEAP32[($20_1 + 68 | 0) >> 2] = $10_1;
  HEAP32[($20_1 + 64 | 0) >> 2] = $11_1;
  HEAP32[($20_1 + 60 | 0) >> 2] = $12_1;
  HEAP32[($20_1 + 56 | 0) >> 2] = $13_1;
  HEAP32[($20_1 + 52 | 0) >> 2] = $14_1;
  HEAP32[($20_1 + 48 | 0) >> 2] = $15_1;
  HEAP32[($20_1 + 44 | 0) >> 2] = $16_1;
  HEAP32[($20_1 + 40 | 0) >> 2] = $17_1;
  HEAP32[($20_1 + 12 | 0) >> 2] = 0;
  HEAP32[($20_1 + 44 | 0) >> 2] = (HEAP32[($20_1 + 44 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($20_1 + 48 | 0) >> 2] = (HEAP32[($20_1 + 48 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($20_1 + 52 | 0) >> 2] = (HEAP32[($20_1 + 52 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($20_1 + 108 | 0) >> 2] = (HEAP32[($20_1 + 108 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($20_1 + 36 | 0) >> 2] = (HEAP32[(HEAP32[($20_1 + 104 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($20_1 + 100 | 0) >> 2] | 0) >> 2] | 0) << 1 | 0) | 0;
  HEAP32[($20_1 + 32 | 0) >> 2] = (HEAP32[($20_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($20_1 + 40 | 0) >> 2] = (HEAP32[($20_1 + 40 | 0) >> 2] | 0) + ((0 - (HEAP32[($20_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[($20_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[($20_1 + 60 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($20_1 + 16 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($20_1 + 16 | 0) >> 2] | 0 | 0) <= (HEAP32[($20_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($20_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[($20_1 + 104 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($20_1 + 20 | 0) >> 2] = 1;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($20_1 + 20 | 0) >> 2] | 0 | 0) <= (HEAP32[($20_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[((HEAP32[($20_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($20_1 + 20 | 0) >> 2] | 0) + (HEAP32[($20_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($20_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($20_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($20_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($20_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($20_1 + 20 | 0) >> 2] = (HEAP32[($20_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    $213((HEAP32[($20_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($20_1 + 36 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0 | 0, HEAP32[($20_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 56 | 0) >> 2] | 0 | 0, (HEAP32[($20_1 + 52 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($20_1 + 40 | 0) >> 2] | 0) + ((((HEAP32[($20_1 + 36 | 0) >> 2] | 0) << 1 | 0) + 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($20_1 + 40 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($20_1 + 36 | 0) >> 2] | 0, 3) + 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($20_1 + 40 | 0) >> 2] | 0) + ((((HEAP32[($20_1 + 36 | 0) >> 2] | 0) << 2 | 0) + 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($20_1 + 40 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($20_1 + 36 | 0) >> 2] | 0, 5) + 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($20_1 + 48 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
    HEAP32[($20_1 + 24 | 0) >> 2] = (HEAP32[(HEAP32[($20_1 + 104 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($20_1 + 100 | 0) >> 2] | 0) >> 2] | 0) << 1 | 0) | 0;
    $214((HEAP32[($20_1 + 40 | 0) >> 2] | 0) + ((((HEAP32[($20_1 + 36 | 0) >> 2] | 0) << 1 | 0) + 1 | 0) << 3 | 0) | 0 | 0, $20_1 + 24 | 0 | 0, HEAP32[($20_1 + 100 | 0) >> 2] | 0 | 0, (HEAP32[($20_1 + 40 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($20_1 + 36 | 0) >> 2] | 0, 3) + 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($20_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($20_1 + 36 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0 | 0) | 0;
    $215((HEAP32[($20_1 + 40 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($20_1 + 36 | 0) >> 2] | 0, 3) + 1 | 0) << 3 | 0) | 0 | 0, HEAP32[($20_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 64 | 0) >> 2] | 0 | 0, $20_1 + 12 | 0 | 0, (HEAP32[($20_1 + 40 | 0) >> 2] | 0) + ((((HEAP32[($20_1 + 36 | 0) >> 2] | 0) << 2 | 0) + 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($20_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($20_1 + 36 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($20_1 + 40 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($20_1 + 36 | 0) >> 2] | 0, 5) + 1 | 0) << 3 | 0) | 0 | 0) | 0;
    HEAP32[($20_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[($20_1 + 104 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($20_1 + 20 | 0) >> 2] = 1;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($20_1 + 20 | 0) >> 2] | 0 | 0) <= (HEAP32[($20_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAPF64[((HEAP32[($20_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($20_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($20_1 + 40 | 0) >> 2] | 0) + ((((HEAP32[(HEAP32[($20_1 + 100 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($20_1 + 20 | 0) >> 2] | 0) | 0) + ((HEAP32[($20_1 + 36 | 0) >> 2] | 0) << 1 | 0) | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($20_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($20_1 + 20 | 0) >> 2] | 0) + (HEAP32[($20_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($20_1 + 20 | 0) >> 2] = (HEAP32[($20_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    HEAP32[($20_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[($20_1 + 104 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($20_1 + 20 | 0) >> 2] = 1;
    label$7 : {
     label$8 : while (1) {
      if (!((HEAP32[($20_1 + 20 | 0) >> 2] | 0 | 0) <= (HEAP32[($20_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAPF64[((HEAP32[($20_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($20_1 + 20 | 0) >> 2] | 0) + (HEAP32[($20_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($20_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($20_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($20_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($20_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($20_1 + 20 | 0) >> 2] = (HEAP32[($20_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$8;
     };
    }
    $215((HEAP32[($20_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($20_1 + 36 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0 | 0, HEAP32[($20_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($20_1 + 56 | 0) >> 2] | 0 | 0, (HEAP32[($20_1 + 52 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($20_1 + 44 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($20_1 + 40 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($20_1 + 36 | 0) >> 2] | 0, 3) + 1 | 0) << 3 | 0) | 0 | 0) | 0;
    HEAP32[($20_1 + 16 | 0) >> 2] = (HEAP32[($20_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $20_1 + 112 | 0;
  return 0 | 0;
 }
 
 function $212($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 84 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 80 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = 2;
  HEAP32[($6_1 + 80 | 0) >> 2] = (HEAP32[($6_1 + 80 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($6_1 + 84 | 0) >> 2] = (HEAP32[($6_1 + 84 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($6_1 + 92 | 0) >> 2] = (HEAP32[($6_1 + 92 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($6_1 + 76 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 88 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 52 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) <= (HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($6_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($6_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = Math_abs(+HEAPF64[($6_1 + 64 | 0) >> 3]);
    HEAP32[($6_1 + 52 | 0) >> 2] = (HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($6_1 + 16 | 0) >> 2] = ((HEAP32[(HEAP32[($6_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0) / (2 | 0) | 0) + 1 | 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = ((HEAP32[(HEAP32[($6_1 + 88 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[($6_1 + 16 | 0) >> 2] | 0) | 0) + 1 | 0;
  $216((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[(HEAP32[($6_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAPF64[($6_1 + 8 | 0) >> 3] = (+HEAPF64[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) * 3.0;
  HEAPF64[($6_1 + 24 | 0) >> 3] = +HEAPF64[($6_1 + 8 | 0) >> 3] * .999;
  HEAPF64[($6_1 + 32 | 0) >> 3] = +HEAPF64[($6_1 + 8 | 0) >> 3] * .001;
  HEAP32[($6_1 + 76 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 88 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 52 | 0) >> 2] = 1;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) <= (HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[($6_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 92 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($6_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[($6_1 + 40 | 0) >> 3] = Math_abs(+HEAPF64[($6_1 + 64 | 0) >> 3]);
    label$5 : {
     label$6 : {
      if (!(+HEAPF64[($6_1 + 40 | 0) >> 3] <= +HEAPF64[($6_1 + 32 | 0) >> 3] & 1 | 0)) {
       break label$6
      }
      HEAPF64[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
      break label$5;
     }
     label$7 : {
      label$8 : {
       if (!(+HEAPF64[($6_1 + 40 | 0) >> 3] <= +HEAPF64[($6_1 + 24 | 0) >> 3] & 1 | 0)) {
        break label$8
       }
       HEAPF64[($6_1 + 56 | 0) >> 3] = +HEAPF64[($6_1 + 40 | 0) >> 3] / +HEAPF64[($6_1 + 8 | 0) >> 3];
       HEAPF64[($6_1 + 64 | 0) >> 3] = 1.0 - +HEAPF64[($6_1 + 56 | 0) >> 3] * +HEAPF64[($6_1 + 56 | 0) >> 3];
       HEAPF64[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[($6_1 + 64 | 0) >> 3];
       break label$7;
      }
      HEAPF64[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     }
    }
    HEAP32[($6_1 + 52 | 0) >> 2] = (HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  global$0 = $6_1 + 96 | 0;
  return 0 | 0;
 }
 
 function $213($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  var $15_1 = 0, $215_1 = 0, $275_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $15_1 = global$0 - 112 | 0;
  global$0 = $15_1;
  HEAP32[($15_1 + 104 | 0) >> 2] = $0_1;
  HEAP32[($15_1 + 100 | 0) >> 2] = $1_1;
  HEAP32[($15_1 + 96 | 0) >> 2] = $2_1;
  HEAP32[($15_1 + 92 | 0) >> 2] = $3_1;
  HEAP32[($15_1 + 88 | 0) >> 2] = $4_1;
  HEAP32[($15_1 + 84 | 0) >> 2] = $5_1;
  HEAP32[($15_1 + 80 | 0) >> 2] = $6_1;
  HEAP32[($15_1 + 76 | 0) >> 2] = $7_1;
  HEAP32[($15_1 + 72 | 0) >> 2] = $8_1;
  HEAP32[($15_1 + 68 | 0) >> 2] = $9_1;
  HEAP32[($15_1 + 64 | 0) >> 2] = $10_1;
  HEAP32[($15_1 + 60 | 0) >> 2] = $11_1;
  HEAP32[($15_1 + 56 | 0) >> 2] = $12_1;
  HEAP32[($15_1 + 40 | 0) >> 2] = 1;
  HEAP32[($15_1 + 56 | 0) >> 2] = (HEAP32[($15_1 + 56 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($15_1 + 60 | 0) >> 2] = (HEAP32[($15_1 + 60 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($15_1 + 64 | 0) >> 2] = (HEAP32[($15_1 + 64 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($15_1 + 68 | 0) >> 2] = (HEAP32[($15_1 + 68 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($15_1 + 76 | 0) >> 2] = (HEAP32[($15_1 + 76 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($15_1 + 104 | 0) >> 2] = (HEAP32[($15_1 + 104 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($15_1 + 72 | 0) >> 2] = (HEAP32[($15_1 + 72 | 0) >> 2] | 0) + -8 | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(HEAP32[($15_1 + 96 | 0) >> 2] | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($15_1 + 108 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($15_1 + 52 | 0) >> 2] = HEAP32[(HEAP32[($15_1 + 96 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($15_1 + 32 | 0) >> 2] = 1;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($15_1 + 32 | 0) >> 2] | 0 | 0) <= (HEAP32[($15_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($15_1 + 28 | 0) >> 2] = (((HEAP32[(HEAP32[($15_1 + 100 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[($15_1 + 32 | 0) >> 2] | 0) | 0 | 0) / (HEAP32[(HEAP32[($15_1 + 96 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
     HEAP32[($15_1 + 48 | 0) >> 2] = HEAP32[($15_1 + 28 | 0) >> 2] | 0;
     HEAP32[($15_1 + 36 | 0) >> 2] = 1;
     label$5 : {
      label$6 : while (1) {
       if (!((HEAP32[($15_1 + 36 | 0) >> 2] | 0 | 0) <= (HEAP32[($15_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$5
       }
       HEAPF64[((HEAP32[($15_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 104 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($15_1 + 36 | 0) >> 2] | 0) - 1 | 0, HEAP32[(HEAP32[($15_1 + 96 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($15_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($15_1 + 36 | 0) >> 2] = (HEAP32[($15_1 + 36 | 0) >> 2] | 0) + 1 | 0;
       continue label$6;
      };
     }
     label$7 : {
      if (!(HEAP32[(HEAP32[($15_1 + 80 | 0) >> 2] | 0) >> 2] | 0)) {
       break label$7
      }
      HEAP32[($15_1 + 48 | 0) >> 2] = HEAP32[($15_1 + 28 | 0) >> 2] | 0;
      HEAP32[($15_1 + 36 | 0) >> 2] = 1;
      label$8 : {
       label$9 : while (1) {
        if (!((HEAP32[($15_1 + 36 | 0) >> 2] | 0 | 0) <= (HEAP32[($15_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$8
        }
        HEAPF64[((HEAP32[($15_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 76 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($15_1 + 36 | 0) >> 2] | 0) - 1 | 0, HEAP32[(HEAP32[($15_1 + 96 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($15_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($15_1 + 36 | 0) >> 2] = (HEAP32[($15_1 + 36 | 0) >> 2] | 0) + 1 | 0;
        continue label$9;
       };
      }
     }
     $215((HEAP32[($15_1 + 68 | 0) >> 2] | 0) + 8 | 0 | 0, $15_1 + 28 | 0 | 0, HEAP32[($15_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 80 | 0) >> 2] | 0 | 0, (HEAP32[($15_1 + 60 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($15_1 + 64 | 0) >> 2] | 0) + 16 | 0 | 0, (HEAP32[($15_1 + 56 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
     HEAPF64[($15_1 + 8 | 0) >> 3] = +(0 | 0);
     (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $92(HEAP32[(HEAP32[($15_1 + 92 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 28 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $217((HEAP32[($15_1 + 68 | 0) >> 2] | 0) + 8 | 0 | 0, $15_1 + 28 | 0 | 0, HEAP32[($15_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 88 | 0) >> 2] | 0 | 0, $15_1 + 8 | 0 | 0, (HEAP32[($15_1 + 64 | 0) >> 2] | 0) + 8 | 0 | 0, $15_1 + 40 | 0 | 0, $15_1 | 0, (HEAP32[($15_1 + 56 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($15_1 + 80 | 0) >> 2] | 0 | 0, (HEAP32[($15_1 + 60 | 0) >> 2] | 0) + 8 | 0 | 0, $15_1 + 20 | 0 | 0) | 0;
     label$10 : {
      if (HEAP32[($15_1 + 20 | 0) >> 2] | 0) {
       break label$10
      }
      HEAPF64[((HEAP32[($15_1 + 64 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 64 | 0) >> 2] | 0) + 16 | 0) >> 3];
     }
     HEAPF64[($15_1 + 8 | 0) >> 3] = +((HEAP32[($15_1 + 28 | 0) >> 2] | 0) + 1 | 0 | 0);
     HEAP32[($15_1 + 48 | 0) >> 2] = 1;
     HEAP32[($15_1 + 44 | 0) >> 2] = ((HEAP32[($15_1 + 28 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($15_1 + 92 | 0) >> 2] | 0) >> 2] | 0) | 0) + 1 | 0;
     (wasm2js_i32$0 = $15_1, wasm2js_i32$1 = $91(HEAP32[($15_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 44 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
     $215_1 = $15_1 + 28 | 0;
     $217((HEAP32[($15_1 + 68 | 0) >> 2] | 0) + 8 | 0 | 0, $215_1 | 0, HEAP32[($15_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($15_1 + 88 | 0) >> 2] | 0 | 0, $15_1 + 8 | 0 | 0, (HEAP32[($15_1 + 64 | 0) >> 2] | 0) + (((HEAP32[($15_1 + 28 | 0) >> 2] | 0) + 2 | 0) << 3 | 0) | 0 | 0, $15_1 + 4 | 0 | 0, $215_1 | 0, (HEAP32[($15_1 + 56 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($15_1 + 80 | 0) >> 2] | 0 | 0, (HEAP32[($15_1 + 60 | 0) >> 2] | 0) + 8 | 0 | 0, $15_1 + 20 | 0 | 0) | 0;
     label$11 : {
      if (HEAP32[($15_1 + 20 | 0) >> 2] | 0) {
       break label$11
      }
      HEAPF64[((HEAP32[($15_1 + 64 | 0) >> 2] | 0) + (((HEAP32[($15_1 + 28 | 0) >> 2] | 0) + 2 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 64 | 0) >> 2] | 0) + (((HEAP32[($15_1 + 28 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
     }
     HEAP32[($15_1 + 48 | 0) >> 2] = (HEAP32[($15_1 + 28 | 0) >> 2] | 0) + 2 | 0;
     HEAP32[($15_1 + 24 | 0) >> 2] = 1;
     label$12 : {
      label$13 : while (1) {
       if (!((HEAP32[($15_1 + 24 | 0) >> 2] | 0 | 0) <= (HEAP32[($15_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$12
       }
       HEAPF64[((HEAP32[($15_1 + 72 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($15_1 + 24 | 0) >> 2] | 0) - 1 | 0, HEAP32[(HEAP32[($15_1 + 96 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($15_1 + 32 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($15_1 + 64 | 0) >> 2] | 0) + ((HEAP32[($15_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($15_1 + 24 | 0) >> 2] = (HEAP32[($15_1 + 24 | 0) >> 2] | 0) + 1 | 0;
       continue label$13;
      };
     }
     HEAP32[($15_1 + 32 | 0) >> 2] = (HEAP32[($15_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($15_1 + 108 | 0) >> 2] = 0;
  }
  $275_1 = HEAP32[($15_1 + 108 | 0) >> 2] | 0;
  global$0 = $15_1 + 112 | 0;
  return $275_1 | 0;
 }
 
 function $214($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = 3;
  HEAP32[($7_1 + 12 | 0) >> 2] = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) + -8 | 0;
  $218((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = ((HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[(HEAP32[($7_1 + 20 | 0) >> 2] | 0) >> 2] | 0) | 0) + 1 | 0;
  $218((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 8 | 0 | 0, $7_1 + 8 | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = ((HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0) - ((HEAP32[(HEAP32[($7_1 + 20 | 0) >> 2] | 0) >> 2] | 0) << 1 | 0) | 0) + 2 | 0;
  $218((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0, $7_1 + 8 | 0 | 0, $7_1 + 4 | 0 | 0, (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $7_1 + 32 | 0;
  return 0 | 0;
 }
 
 function $215($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, $74_1 = 0, $244_1 = 0, $367_1 = 0, $543_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 112 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 104 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 100 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 96 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 92 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 88 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 84 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 80 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 76 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 72 | 0) >> 2] = $8_1;
  HEAP32[($11_1 + 72 | 0) >> 2] = (HEAP32[($11_1 + 72 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($11_1 + 76 | 0) >> 2] = (HEAP32[($11_1 + 76 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($11_1 + 80 | 0) >> 2] = (HEAP32[($11_1 + 80 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($11_1 + 104 | 0) >> 2] = (HEAP32[($11_1 + 104 | 0) >> 2] | 0) + -8 | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 104 | 0) >> 2] | 0) + 8 | 0) >> 3];
    HEAP32[($11_1 + 108 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($11_1 + 68 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 88 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($11_1 + 64 | 0) >> 2] = (HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0;
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $92(HEAP32[($11_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 64 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
   label$3 : {
    label$4 : {
     if (!((HEAP32[(HEAP32[($11_1 + 96 | 0) >> 2] | 0) >> 2] | 0 | 0) >= (HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($11_1 + 12 | 0) >> 2] = 1;
     HEAP32[($11_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0;
     HEAP32[($11_1 + 68 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0;
     HEAP32[($11_1 + 64 | 0) >> 2] = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
     HEAP32[($11_1 + 44 | 0) >> 2] = 1;
     label$5 : while (1) {
      label$6 : {
       label$7 : {
        if (!((HEAP32[($11_1 + 64 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
         break label$7
        }
        $74_1 = (HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0) >= (HEAP32[($11_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0;
        break label$6;
       }
       $74_1 = (HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0;
      }
      label$8 : {
       if (!$74_1) {
        break label$8
       }
       HEAPF64[($11_1 + 48 | 0) >> 3] = +(HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0);
       $217((HEAP32[($11_1 + 104 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 92 | 0) >> 2] | 0 | 0, $11_1 + 48 | 0 | 0, (HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, $11_1 + 12 | 0 | 0, $11_1 + 4 | 0 | 0, (HEAP32[($11_1 + 72 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($11_1 + 84 | 0) >> 2] | 0 | 0, (HEAP32[($11_1 + 80 | 0) >> 2] | 0) + 8 | 0 | 0, $11_1 + 32 | 0 | 0) | 0;
       label$9 : {
        if (HEAP32[($11_1 + 32 | 0) >> 2] | 0) {
         break label$9
        }
        HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       }
       HEAP32[($11_1 + 44 | 0) >> 2] = (HEAP32[($11_1 + 44 | 0) >> 2] | 0) + (HEAP32[($11_1 + 64 | 0) >> 2] | 0) | 0;
       continue label$5;
      }
      break label$5;
     };
     break label$3;
    }
    label$10 : {
     label$11 : {
      if (!((HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[($11_1 + 28 | 0) >> 2] = ((HEAP32[(HEAP32[($11_1 + 96 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0 | 0) / (2 | 0) | 0;
      HEAP32[($11_1 + 12 | 0) >> 2] = 1;
      HEAP32[($11_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 96 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($11_1 + 64 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($11_1 + 44 | 0) >> 2] = 1;
      label$12 : {
       label$13 : while (1) {
        if (!((HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$12
        }
        label$14 : {
         if (!((HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0) > (HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$14
         }
         if (!((HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$14
         }
         HEAP32[($11_1 + 12 | 0) >> 2] = (HEAP32[($11_1 + 12 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[($11_1 + 4 | 0) >> 2] = (HEAP32[($11_1 + 4 | 0) >> 2] | 0) + 1 | 0;
        }
        HEAPF64[($11_1 + 48 | 0) >> 3] = +(HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0);
        $217((HEAP32[($11_1 + 104 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 92 | 0) >> 2] | 0 | 0, $11_1 + 48 | 0 | 0, (HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, $11_1 + 12 | 0 | 0, $11_1 + 4 | 0 | 0, (HEAP32[($11_1 + 72 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($11_1 + 84 | 0) >> 2] | 0 | 0, (HEAP32[($11_1 + 80 | 0) >> 2] | 0) + 8 | 0 | 0, $11_1 + 32 | 0 | 0) | 0;
        label$15 : {
         if (HEAP32[($11_1 + 32 | 0) >> 2] | 0) {
          break label$15
         }
         HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        }
        HEAP32[($11_1 + 44 | 0) >> 2] = (HEAP32[($11_1 + 44 | 0) >> 2] | 0) + 1 | 0;
        continue label$13;
       };
      }
      break label$10;
     }
     HEAP32[($11_1 + 28 | 0) >> 2] = ((HEAP32[(HEAP32[($11_1 + 96 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0 | 0) / (2 | 0) | 0;
     HEAP32[($11_1 + 64 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0;
     HEAP32[($11_1 + 68 | 0) >> 2] = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
     HEAP32[($11_1 + 44 | 0) >> 2] = 1;
     label$16 : while (1) {
      label$17 : {
       label$18 : {
        if (!((HEAP32[($11_1 + 68 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
         break label$18
        }
        $244_1 = (HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0) >= (HEAP32[($11_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0;
        break label$17;
       }
       $244_1 = (HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0;
      }
      label$19 : {
       if (!$244_1) {
        break label$19
       }
       label$20 : {
        label$21 : {
         if (!((HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$21
         }
         HEAP32[($11_1 + 12 | 0) >> 2] = 1;
         HEAP32[($11_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 96 | 0) >> 2] | 0) >> 2] | 0;
         break label$20;
        }
        label$22 : {
         label$23 : {
          if (!((HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0) >= (((HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[($11_1 + 28 | 0) >> 2] | 0) | 0) + 1 | 0 | 0) & 1 | 0)) {
           break label$23
          }
          HEAP32[($11_1 + 12 | 0) >> 2] = ((HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[(HEAP32[($11_1 + 96 | 0) >> 2] | 0) >> 2] | 0) | 0) + 1 | 0;
          HEAP32[($11_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0;
          break label$22;
         }
         HEAP32[($11_1 + 12 | 0) >> 2] = ((HEAP32[($11_1 + 44 | 0) >> 2] | 0) - (HEAP32[($11_1 + 28 | 0) >> 2] | 0) | 0) + 1 | 0;
         HEAP32[($11_1 + 4 | 0) >> 2] = ((HEAP32[(HEAP32[($11_1 + 96 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($11_1 + 44 | 0) >> 2] | 0) | 0) - (HEAP32[($11_1 + 28 | 0) >> 2] | 0) | 0;
        }
       }
       HEAPF64[($11_1 + 48 | 0) >> 3] = +(HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0);
       $217((HEAP32[($11_1 + 104 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 92 | 0) >> 2] | 0 | 0, $11_1 + 48 | 0 | 0, (HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, $11_1 + 12 | 0 | 0, $11_1 + 4 | 0 | 0, (HEAP32[($11_1 + 72 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($11_1 + 84 | 0) >> 2] | 0 | 0, (HEAP32[($11_1 + 80 | 0) >> 2] | 0) + 8 | 0 | 0, $11_1 + 32 | 0 | 0) | 0;
       label$24 : {
        if (HEAP32[($11_1 + 32 | 0) >> 2] | 0) {
         break label$24
        }
        HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       }
       HEAP32[($11_1 + 44 | 0) >> 2] = (HEAP32[($11_1 + 44 | 0) >> 2] | 0) + (HEAP32[($11_1 + 68 | 0) >> 2] | 0) | 0;
       continue label$16;
      }
      break label$16;
     };
    }
   }
   label$25 : {
    if (!((HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$25
    }
    HEAP32[($11_1 + 68 | 0) >> 2] = (HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[($11_1 + 8 | 0) >> 2] | 0) | 0;
    HEAP32[($11_1 + 64 | 0) >> 2] = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
    HEAP32[($11_1 + 44 | 0) >> 2] = 1;
    label$26 : while (1) {
     label$27 : {
      label$28 : {
       if (!((HEAP32[($11_1 + 64 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
        break label$28
       }
       $367_1 = (HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0) >= (HEAP32[($11_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0;
       break label$27;
      }
      $367_1 = (HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0;
     }
     label$29 : {
      if (!$367_1) {
       break label$29
      }
      HEAPF64[($11_1 + 16 | 0) >> 3] = (+HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 44 | 0) >> 2] | 0) + (HEAP32[($11_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) / +(HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0);
      HEAP32[($11_1 + 60 | 0) >> 2] = ((HEAP32[($11_1 + 44 | 0) >> 2] | 0) + (HEAP32[($11_1 + 8 | 0) >> 2] | 0) | 0) - 1 | 0;
      HEAP32[($11_1 + 40 | 0) >> 2] = (HEAP32[($11_1 + 44 | 0) >> 2] | 0) + 1 | 0;
      label$30 : {
       label$31 : while (1) {
        if (!((HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$30
        }
        HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[($11_1 + 16 | 0) >> 3] * +((HEAP32[($11_1 + 40 | 0) >> 2] | 0) - (HEAP32[($11_1 + 44 | 0) >> 2] | 0) | 0 | 0);
        HEAP32[($11_1 + 40 | 0) >> 2] = (HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 1 | 0;
        continue label$31;
       };
      }
      HEAP32[($11_1 + 44 | 0) >> 2] = (HEAP32[($11_1 + 44 | 0) >> 2] | 0) + (HEAP32[($11_1 + 64 | 0) >> 2] | 0) | 0;
      continue label$26;
     }
     break label$26;
    };
    HEAP32[($11_1 + 36 | 0) >> 2] = Math_imul(((HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0 | 0) / (HEAP32[($11_1 + 8 | 0) >> 2] | 0 | 0) | 0, HEAP32[($11_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    label$32 : {
     if (!((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) != (HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$32
     }
     HEAPF64[($11_1 + 48 | 0) >> 3] = +(HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0 | 0);
     $217((HEAP32[($11_1 + 104 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 92 | 0) >> 2] | 0 | 0, $11_1 + 48 | 0 | 0, (HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0) << 3 | 0) | 0 | 0, $11_1 + 12 | 0 | 0, $11_1 + 4 | 0 | 0, (HEAP32[($11_1 + 72 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($11_1 + 84 | 0) >> 2] | 0 | 0, (HEAP32[($11_1 + 80 | 0) >> 2] | 0) + 8 | 0 | 0, $11_1 + 32 | 0 | 0) | 0;
     label$33 : {
      if (HEAP32[($11_1 + 32 | 0) >> 2] | 0) {
       break label$33
      }
      HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 104 | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     }
     label$34 : {
      if (!((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) != ((HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
       break label$34
      }
      HEAPF64[($11_1 + 16 | 0) >> 3] = (+HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) / +((HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0 | 0);
      HEAP32[($11_1 + 64 | 0) >> 2] = (HEAP32[(HEAP32[($11_1 + 100 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0;
      HEAP32[($11_1 + 40 | 0) >> 2] = (HEAP32[($11_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      label$35 : {
       label$36 : while (1) {
        if (!((HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$35
        }
        HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 76 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[($11_1 + 16 | 0) >> 3] * +((HEAP32[($11_1 + 40 | 0) >> 2] | 0) - (HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0 | 0);
        HEAP32[($11_1 + 40 | 0) >> 2] = (HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 1 | 0;
        continue label$36;
       };
      }
     }
    }
   }
   HEAP32[($11_1 + 108 | 0) >> 2] = 0;
  }
  $543_1 = HEAP32[($11_1 + 108 | 0) >> 2] | 0;
  global$0 = $11_1 + 112 | 0;
  return $543_1 | 0;
 }
 
 function $216($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $51_1 = 0, $491_1 = 0.0, $217_1 = 0, $470_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 340 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = (HEAP32[($6_1 + 344 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($6_1 + 336 | 0) >> 2] = (HEAP32[($6_1 + 336 | 0) >> 2] | 0) + -4 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($6_1 + 340 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$3
     }
     if (!((HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[($6_1 + 348 | 0) >> 2] = 0;
    break label$1;
   }
   label$4 : {
    label$5 : {
     if ((HEAP32[($6_1 + 340 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0) {
      break label$5
     }
     if (HEAP32[($6_1 + 332 | 0) >> 2] | 0) {
      break label$4
     }
    }
    HEAP32[($6_1 + 348 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($6_1 + 220 | 0) >> 2] = 1;
   HEAP32[($6_1 + 140 | 0) >> 2] = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
   HEAP32[($6_1 + 64 | 0) >> 2] = 1;
   HEAP32[$6_1 >> 2] = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
   HEAP32[($6_1 + 328 | 0) >> 2] = 1;
   HEAP32[($6_1 + 324 | 0) >> 2] = HEAP32[($6_1 + 340 | 0) >> 2] | 0;
   HEAP32[($6_1 + 312 | 0) >> 2] = 1;
   label$6 : while (1) {
    label$7 : {
     label$8 : {
      label$9 : {
       if (!((HEAP32[($6_1 + 328 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       break label$8;
      }
      $51_1 = 0;
      break label$7;
     }
     $51_1 = 1;
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       label$13 : {
        switch ($51_1 | 0) {
        case 0:
         HEAP32[($6_1 + 312 | 0) >> 2] = (HEAP32[($6_1 + 312 | 0) >> 2] | 0) + -1 | 0;
         label$15 : {
          if (HEAP32[($6_1 + 312 | 0) >> 2] | 0) {
           break label$15
          }
          HEAP32[($6_1 + 348 | 0) >> 2] = 0;
          break label$1;
         }
         HEAP32[($6_1 + 328 | 0) >> 2] = HEAP32[(($6_1 + 224 | 0) + (((HEAP32[($6_1 + 312 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
         HEAP32[($6_1 + 324 | 0) >> 2] = HEAP32[(($6_1 + 144 | 0) + (((HEAP32[($6_1 + 312 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
         HEAP32[($6_1 + 220 | 0) >> 2] = HEAP32[(($6_1 + 64 | 0) + (((HEAP32[($6_1 + 312 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
         HEAP32[($6_1 + 140 | 0) >> 2] = HEAP32[($6_1 + (((HEAP32[($6_1 + 312 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
         label$16 : {
          if ((HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0) <= (HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0) {
           break label$16
          }
          break label$11;
         }
         break label$12;
        default:
         break label$13;
        };
       }
       HEAP32[($6_1 + 320 | 0) >> 2] = HEAP32[($6_1 + 328 | 0) >> 2] | 0;
       HEAP32[($6_1 + 292 | 0) >> 2] = ((HEAP32[($6_1 + 328 | 0) >> 2] | 0) + (HEAP32[($6_1 + 324 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0;
       HEAPF64[($6_1 + 296 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 292 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$17 : {
        if (!(+HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 328 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[($6_1 + 296 | 0) >> 3] & 1 | 0)) {
         break label$17
        }
        HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 292 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 328 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 328 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($6_1 + 296 | 0) >> 3];
        HEAPF64[($6_1 + 296 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 292 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       }
       HEAP32[($6_1 + 316 | 0) >> 2] = HEAP32[($6_1 + 324 | 0) >> 2] | 0;
       label$18 : {
        if (!(+HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 324 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +HEAPF64[($6_1 + 296 | 0) >> 3] & 1 | 0)) {
         break label$18
        }
        HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 292 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 324 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 324 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($6_1 + 296 | 0) >> 3];
        HEAPF64[($6_1 + 296 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 292 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$19 : {
         if (!(+HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 328 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[($6_1 + 296 | 0) >> 3] & 1 | 0)) {
          break label$19
         }
         HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 292 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 328 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 328 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($6_1 + 296 | 0) >> 3];
         HEAPF64[($6_1 + 296 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 292 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        }
       }
       label$20 : {
        label$21 : while (1) {
         HEAP32[($6_1 + 316 | 0) >> 2] = (HEAP32[($6_1 + 316 | 0) >> 2] | 0) + -1 | 0;
         label$22 : {
          if (!(+HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 316 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] <= +HEAPF64[($6_1 + 296 | 0) >> 3] & 1 | 0)) {
           break label$22
          }
          $491_1 = +HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 316 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          label$23 : {
           label$24 : {
            if (!(Math_abs($491_1) < 2147483648.0)) {
             break label$24
            }
            $217_1 = ~~$491_1;
            break label$23;
           }
           $217_1 = -2147483648;
          }
          HEAP32[($6_1 + 136 | 0) >> 2] = $217_1;
          label$25 : {
           label$26 : while (1) {
            HEAP32[($6_1 + 320 | 0) >> 2] = (HEAP32[($6_1 + 320 | 0) >> 2] | 0) + 1 | 0;
            if (+HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 320 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] >= +HEAPF64[($6_1 + 296 | 0) >> 3] & 1 | 0) {
             break label$25
            }
            continue label$26;
           };
          }
          label$27 : {
           if (!((HEAP32[($6_1 + 320 | 0) >> 2] | 0 | 0) > (HEAP32[($6_1 + 316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$27
           }
           break label$20;
          }
          HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 316 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 320 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 320 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($6_1 + 136 | 0) >> 2] | 0 | 0);
         }
         continue label$21;
        };
       }
       HEAP32[(($6_1 + 64 | 0) + (((HEAP32[($6_1 + 312 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 220 | 0) >> 2] | 0;
       HEAP32[($6_1 + (((HEAP32[($6_1 + 312 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 140 | 0) >> 2] | 0;
       HEAP32[($6_1 + 308 | 0) >> 2] = HEAP32[($6_1 + 312 | 0) >> 2] | 0;
       HEAP32[($6_1 + 312 | 0) >> 2] = (HEAP32[($6_1 + 312 | 0) >> 2] | 0) + 1 | 0;
       label$28 : {
        label$29 : {
         if (!(((HEAP32[($6_1 + 316 | 0) >> 2] | 0) - (HEAP32[($6_1 + 328 | 0) >> 2] | 0) | 0 | 0) <= ((HEAP32[($6_1 + 324 | 0) >> 2] | 0) - (HEAP32[($6_1 + 320 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
          break label$29
         }
         HEAP32[(($6_1 + 224 | 0) + (((HEAP32[($6_1 + 308 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 320 | 0) >> 2] | 0;
         HEAP32[(($6_1 + 144 | 0) + (((HEAP32[($6_1 + 308 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 324 | 0) >> 2] | 0;
         HEAP32[($6_1 + 324 | 0) >> 2] = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
         label$30 : while (1) {
          label$31 : {
           if (!((HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0) > (HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$31
           }
           break label$11;
          }
          label$32 : {
           if (!((HEAP32[((HEAP32[($6_1 + 336 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 140 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) > (HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$32
           }
           HEAP32[($6_1 + 140 | 0) >> 2] = (HEAP32[($6_1 + 140 | 0) >> 2] | 0) + -1 | 0;
           continue label$30;
          }
          break label$30;
         };
         HEAP32[(($6_1 + 64 | 0) + (((HEAP32[($6_1 + 308 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         break label$28;
        }
        HEAP32[(($6_1 + 224 | 0) + (((HEAP32[($6_1 + 308 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 328 | 0) >> 2] | 0;
        HEAP32[(($6_1 + 144 | 0) + (((HEAP32[($6_1 + 308 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
        HEAP32[($6_1 + 328 | 0) >> 2] = HEAP32[($6_1 + 320 | 0) >> 2] | 0;
        label$33 : while (1) {
         label$34 : {
          if (!((HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0) > (HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$34
          }
          break label$11;
         }
         label$35 : {
          if (!((HEAP32[((HEAP32[($6_1 + 336 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 220 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 328 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$35
          }
          HEAP32[($6_1 + 220 | 0) >> 2] = (HEAP32[($6_1 + 220 | 0) >> 2] | 0) + 1 | 0;
          continue label$33;
         }
         break label$33;
        };
        HEAP32[($6_1 + (((HEAP32[($6_1 + 308 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($6_1 + 220 | 0) >> 2] | 0) - 1 | 0;
       }
      }
      label$36 : {
       label$37 : {
        if (((HEAP32[($6_1 + 324 | 0) >> 2] | 0) - (HEAP32[($6_1 + 328 | 0) >> 2] | 0) | 0 | 0) > (10 | 0) & 1 | 0) {
         break label$37
        }
        break label$36;
       }
       $51_1 = 1;
       continue label$10;
      }
      label$38 : {
       if (!((HEAP32[($6_1 + 328 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
        break label$38
       }
       HEAP32[($6_1 + 328 | 0) >> 2] = (HEAP32[($6_1 + 328 | 0) >> 2] | 0) + -1 | 0;
       label$39 : while (1) {
        HEAP32[($6_1 + 328 | 0) >> 2] = (HEAP32[($6_1 + 328 | 0) >> 2] | 0) + 1 | 0;
        label$40 : {
         if (!((HEAP32[($6_1 + 328 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$40
         }
         break label$11;
        }
        HEAPF64[($6_1 + 296 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 328 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
        label$41 : {
         if (!(+HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 328 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[($6_1 + 296 | 0) >> 3] & 1 | 0)) {
          break label$41
         }
         HEAP32[($6_1 + 320 | 0) >> 2] = HEAP32[($6_1 + 328 | 0) >> 2] | 0;
         label$42 : {
          label$43 : while (1) {
           HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 320 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 320 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           HEAP32[($6_1 + 320 | 0) >> 2] = (HEAP32[($6_1 + 320 | 0) >> 2] | 0) + -1 | 0;
           if (+HEAPF64[($6_1 + 296 | 0) >> 3] >= +HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 320 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0) {
            break label$42
           }
           continue label$43;
          };
         }
         HEAPF64[((HEAP32[($6_1 + 344 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 320 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($6_1 + 296 | 0) >> 3];
        }
        continue label$39;
       };
      }
      continue label$6;
     }
     $51_1 = 0;
     continue label$10;
    };
   };
  }
  $470_1 = HEAP32[($6_1 + 348 | 0) >> 2] | 0;
  global$0 = $6_1 + 352 | 0;
  return $470_1 | 0;
 }
 
 function $217($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $14_1 = 0, $132_1 = 0, $210_1 = 0, $237_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $14_1 = global$0 - 144 | 0;
  global$0 = $14_1;
  HEAP32[($14_1 + 140 | 0) >> 2] = $0_1;
  HEAP32[($14_1 + 136 | 0) >> 2] = $1_1;
  HEAP32[($14_1 + 132 | 0) >> 2] = $2_1;
  HEAP32[($14_1 + 128 | 0) >> 2] = $3_1;
  HEAP32[($14_1 + 124 | 0) >> 2] = $4_1;
  HEAP32[($14_1 + 120 | 0) >> 2] = $5_1;
  HEAP32[($14_1 + 116 | 0) >> 2] = $6_1;
  HEAP32[($14_1 + 112 | 0) >> 2] = $7_1;
  HEAP32[($14_1 + 108 | 0) >> 2] = $8_1;
  HEAP32[($14_1 + 104 | 0) >> 2] = $9_1;
  HEAP32[($14_1 + 100 | 0) >> 2] = $10_1;
  HEAP32[($14_1 + 96 | 0) >> 2] = $11_1;
  HEAP32[($14_1 + 100 | 0) >> 2] = (HEAP32[($14_1 + 100 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($14_1 + 108 | 0) >> 2] = (HEAP32[($14_1 + 108 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($14_1 + 140 | 0) >> 2] = (HEAP32[($14_1 + 140 | 0) >> 2] | 0) + -8 | 0;
  HEAPF64[$14_1 >> 3] = +(HEAP32[(HEAP32[($14_1 + 136 | 0) >> 2] | 0) >> 2] | 0 | 0) - 1.0;
  HEAPF64[($14_1 + 80 | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 124 | 0) >> 2] | 0) >> 3] - +(HEAP32[(HEAP32[($14_1 + 116 | 0) >> 2] | 0) >> 2] | 0 | 0);
  HEAPF64[($14_1 + 72 | 0) >> 3] = +(HEAP32[(HEAP32[($14_1 + 112 | 0) >> 2] | 0) >> 2] | 0 | 0) - +HEAPF64[(HEAP32[($14_1 + 124 | 0) >> 2] | 0) >> 3];
  (wasm2js_i32$0 = $14_1, wasm2js_f64$0 = +$89(+(+HEAPF64[($14_1 + 80 | 0) >> 3]), +(+HEAPF64[($14_1 + 72 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
  label$1 : {
   if (!((HEAP32[(HEAP32[($14_1 + 132 | 0) >> 2] | 0) >> 2] | 0 | 0) > (HEAP32[(HEAP32[($14_1 + 136 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[($14_1 + 40 | 0) >> 3] = +HEAPF64[($14_1 + 40 | 0) >> 3] + +(((HEAP32[(HEAP32[($14_1 + 132 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[(HEAP32[($14_1 + 136 | 0) >> 2] | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0 | 0);
  }
  HEAPF64[($14_1 + 8 | 0) >> 3] = +HEAPF64[($14_1 + 40 | 0) >> 3] * .999;
  HEAPF64[($14_1 + 16 | 0) >> 3] = +HEAPF64[($14_1 + 40 | 0) >> 3] * .001;
  HEAPF64[($14_1 + 64 | 0) >> 3] = +(0 | 0);
  HEAP32[($14_1 + 92 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 112 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($14_1 + 36 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 116 | 0) >> 2] | 0) >> 2] | 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($14_1 + 36 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[($14_1 + 80 | 0) >> 3] = +(HEAP32[($14_1 + 36 | 0) >> 2] | 0 | 0) - +HEAPF64[(HEAP32[($14_1 + 124 | 0) >> 2] | 0) >> 3];
    HEAPF64[($14_1 + 24 | 0) >> 3] = Math_abs(+HEAPF64[($14_1 + 80 | 0) >> 3]);
    label$4 : {
     label$5 : {
      if (!(+HEAPF64[($14_1 + 24 | 0) >> 3] <= +HEAPF64[($14_1 + 8 | 0) >> 3] & 1 | 0)) {
       break label$5
      }
      label$6 : {
       label$7 : {
        if (!(+HEAPF64[($14_1 + 24 | 0) >> 3] <= +HEAPF64[($14_1 + 16 | 0) >> 3] & 1 | 0)) {
         break label$7
        }
        HEAPF64[((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
        break label$6;
       }
       HEAPF64[($14_1 + 72 | 0) >> 3] = +HEAPF64[($14_1 + 24 | 0) >> 3] / +HEAPF64[($14_1 + 40 | 0) >> 3];
       HEAPF64[($14_1 + 80 | 0) >> 3] = 1.0 - +HEAPF64[($14_1 + 72 | 0) >> 3] * (+HEAPF64[($14_1 + 72 | 0) >> 3] * +HEAPF64[($14_1 + 72 | 0) >> 3]);
       HEAPF64[((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($14_1 + 80 | 0) >> 3] * (+HEAPF64[($14_1 + 80 | 0) >> 3] * +HEAPF64[($14_1 + 80 | 0) >> 3]);
      }
      label$8 : {
       if (!(HEAP32[(HEAP32[($14_1 + 104 | 0) >> 2] | 0) >> 2] | 0)) {
        break label$8
       }
       HEAPF64[((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($14_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      }
      HEAPF64[($14_1 + 64 | 0) >> 3] = +HEAPF64[($14_1 + 64 | 0) >> 3] + +HEAPF64[((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      break label$4;
     }
     HEAPF64[((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    }
    HEAP32[($14_1 + 36 | 0) >> 2] = (HEAP32[($14_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  label$9 : {
   label$10 : {
    if (!(+HEAPF64[($14_1 + 64 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
     break label$10
    }
    HEAP32[(HEAP32[($14_1 + 96 | 0) >> 2] | 0) >> 2] = 0;
    break label$9;
   }
   HEAP32[(HEAP32[($14_1 + 96 | 0) >> 2] | 0) >> 2] = 1;
   HEAP32[($14_1 + 92 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 112 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($14_1 + 36 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 116 | 0) >> 2] | 0) >> 2] | 0;
   label$11 : {
    label$12 : while (1) {
     if (!((HEAP32[($14_1 + 36 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$11
     }
     $132_1 = (HEAP32[($14_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAPF64[$132_1 >> 3] = +HEAPF64[$132_1 >> 3] / +HEAPF64[($14_1 + 64 | 0) >> 3];
     HEAP32[($14_1 + 36 | 0) >> 2] = (HEAP32[($14_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$12;
    };
   }
   label$13 : {
    if (!(+HEAPF64[($14_1 + 40 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
     break label$13
    }
    if (!((HEAP32[(HEAP32[($14_1 + 128 | 0) >> 2] | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$13
    }
    HEAPF64[($14_1 + 64 | 0) >> 3] = +(0 | 0);
    HEAP32[($14_1 + 92 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 112 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($14_1 + 36 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 116 | 0) >> 2] | 0) >> 2] | 0;
    label$14 : {
     label$15 : while (1) {
      if (!((HEAP32[($14_1 + 36 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$14
      }
      HEAPF64[($14_1 + 64 | 0) >> 3] = +HEAPF64[($14_1 + 64 | 0) >> 3] + +HEAPF64[((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +(HEAP32[($14_1 + 36 | 0) >> 2] | 0 | 0);
      HEAP32[($14_1 + 36 | 0) >> 2] = (HEAP32[($14_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$15;
     };
    }
    HEAPF64[($14_1 + 56 | 0) >> 3] = +HEAPF64[(HEAP32[($14_1 + 124 | 0) >> 2] | 0) >> 3] - +HEAPF64[($14_1 + 64 | 0) >> 3];
    HEAPF64[($14_1 + 48 | 0) >> 3] = +(0 | 0);
    HEAP32[($14_1 + 92 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 112 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($14_1 + 36 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 116 | 0) >> 2] | 0) >> 2] | 0;
    label$16 : {
     label$17 : while (1) {
      if (!((HEAP32[($14_1 + 36 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$16
      }
      HEAPF64[($14_1 + 80 | 0) >> 3] = +(HEAP32[($14_1 + 36 | 0) >> 2] | 0 | 0) - +HEAPF64[($14_1 + 64 | 0) >> 3];
      HEAPF64[($14_1 + 48 | 0) >> 3] = +HEAPF64[($14_1 + 48 | 0) >> 3] + +HEAPF64[((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * (+HEAPF64[($14_1 + 80 | 0) >> 3] * +HEAPF64[($14_1 + 80 | 0) >> 3]);
      HEAP32[($14_1 + 36 | 0) >> 2] = (HEAP32[($14_1 + 36 | 0) >> 2] | 0) + 1 | 0;
      continue label$17;
     };
    }
    label$18 : {
     if (!(Math_sqrt(+HEAPF64[($14_1 + 48 | 0) >> 3]) > +HEAPF64[$14_1 >> 3] * .001 & 1 | 0)) {
      break label$18
     }
     HEAPF64[($14_1 + 56 | 0) >> 3] = +HEAPF64[($14_1 + 56 | 0) >> 3] / +HEAPF64[($14_1 + 48 | 0) >> 3];
     HEAP32[($14_1 + 92 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 112 | 0) >> 2] | 0) >> 2] | 0;
     HEAP32[($14_1 + 36 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 116 | 0) >> 2] | 0) >> 2] | 0;
     label$19 : {
      label$20 : while (1) {
       if (!((HEAP32[($14_1 + 36 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$19
       }
       $210_1 = (HEAP32[($14_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$210_1 >> 3] = +HEAPF64[$210_1 >> 3] * (+HEAPF64[($14_1 + 56 | 0) >> 3] * (+(HEAP32[($14_1 + 36 | 0) >> 2] | 0 | 0) - +HEAPF64[($14_1 + 64 | 0) >> 3]) + 1.0);
       HEAP32[($14_1 + 36 | 0) >> 2] = (HEAP32[($14_1 + 36 | 0) >> 2] | 0) + 1 | 0;
       continue label$20;
      };
     }
    }
   }
   HEAPF64[(HEAP32[($14_1 + 120 | 0) >> 2] | 0) >> 3] = +(0 | 0);
   HEAP32[($14_1 + 92 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 112 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($14_1 + 36 | 0) >> 2] = HEAP32[(HEAP32[($14_1 + 116 | 0) >> 2] | 0) >> 2] | 0;
   label$21 : {
    label$22 : while (1) {
     if (!((HEAP32[($14_1 + 36 | 0) >> 2] | 0 | 0) <= (HEAP32[($14_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$21
     }
     $237_1 = HEAP32[($14_1 + 120 | 0) >> 2] | 0;
     HEAPF64[$237_1 >> 3] = +HEAPF64[$237_1 >> 3] + +HEAPF64[((HEAP32[($14_1 + 108 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($14_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($14_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($14_1 + 36 | 0) >> 2] = (HEAP32[($14_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$22;
    };
   }
  }
  global$0 = $14_1 + 144 | 0;
  return 0 | 0;
 }
 
 function $218($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 64 | 0;
  HEAP32[($6_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = (HEAP32[($6_1 + 48 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($6_1 + 60 | 0) >> 2] = (HEAP32[($6_1 + 60 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = ((HEAP32[(HEAP32[($6_1 + 56 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] | 0) | 0) + 1 | 0;
  HEAPF64[($6_1 + 8 | 0) >> 3] = +(HEAP32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] | 0 | 0);
  HEAPF64[($6_1 + 16 | 0) >> 3] = +(0 | 0);
  HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 40 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) <= (HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3] + +HEAPF64[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($6_1 + 40 | 0) >> 2] = (HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3] / +HEAPF64[($6_1 + 8 | 0) >> 3];
  label$3 : {
   if (!((HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 52 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($6_1 + 28 | 0) >> 2] = 0;
   HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
   HEAP32[($6_1 + 36 | 0) >> 2] = 2;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) <= (HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($6_1 + 32 | 0) >> 2] = (HEAP32[($6_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($6_1 + 28 | 0) >> 2] = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3] - +HEAPF64[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[((HEAP32[($6_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3] / +HEAPF64[($6_1 + 8 | 0) >> 3];
     HEAP32[($6_1 + 36 | 0) >> 2] = (HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
  }
  return 0 | 0;
 }
 
 function $219($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 48 | 0;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = ((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0) - 1 | 0;
  HEAP32[($7_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($7_1 + 20 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[$7_1 >> 3] = +(0 | 0);
    HEAP32[($7_1 + 16 | 0) >> 2] = 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($7_1 + 12 | 0) >> 2] = 0;
      label$7 : {
       label$8 : while (1) {
        if (!((HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$7
        }
        label$9 : {
         if (!(((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + (HEAP32[($7_1 + 12 | 0) >> 2] | 0) | 0 | 0) == (HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$9
         }
         HEAPF64[$7_1 >> 3] = +HEAPF64[$7_1 >> 3] + +HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        }
        HEAP32[($7_1 + 12 | 0) >> 2] = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 1 | 0;
        continue label$8;
       };
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    HEAPF64[((HEAP32[($7_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[$7_1 >> 3];
    HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  return HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $220($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862(16 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862(((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  HEAPF64[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 3] = 1.0;
  HEAPF64[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 3] = -1.0;
  HEAPF64[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 3] = 1.0;
  HEAP32[($4_1 + 20 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $219(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0 | 0, 2 | 0) | 0;
    HEAP32[($4_1 + 16 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) < ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 2 | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $863(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $221($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862(((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $862((Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) < ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 3] = 1.0;
  HEAPF64[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -1.0;
  HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3] = 1.0;
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $219(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 16 | 0) >> 2] | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 1 | 0 | 0, (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($5_1 + 24 | 0) >> 2] | 0, (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0) + 1 | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAPF64[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $863(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $222($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $69_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862(((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  $220(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 28 | 0) >> 2] = (HEAP32[($6_1 + 40 | 0) >> 2] | 0) - (HEAP32[($6_1 + 36 | 0) >> 2] | 0) | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($6_1 + 8 | 0) >> 3] = +(0 | 0);
    HEAP32[($6_1 + 20 | 0) >> 2] = 1;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[($6_1 + 8 | 0) >> 3] = +HEAPF64[($6_1 + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 24 | 0) >> 2] | 0) - (HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($6_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAPF64[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 24 | 0) >> 2] | 0) - (HEAP32[($6_1 + 36 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($6_1 + 8 | 0) >> 3] + +HEAPF64[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 3] * +HEAPF64[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $863(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
  $69_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 48 | 0;
  return $69_1 | 0;
 }
 
 function $223($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $74_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = Math_imul(HEAP32[($7_1 + 36 | 0) >> 2] | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0);
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $221(HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 40 | 0) >> 2] | 0) - (HEAP32[($7_1 + 12 | 0) >> 2] | 0) | 0;
  HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[$7_1 >> 3] = +(0 | 0);
    HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) < ((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[$7_1 >> 3] = +HEAPF64[$7_1 >> 3] + +HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) - (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 16 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + (HEAP32[($7_1 + 32 | 0) >> 2] | 0) | 0;
      continue label$4;
     };
    }
    HEAPF64[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) - (HEAP32[($7_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[$7_1 >> 3] + +HEAPF64[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $863(HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
  $74_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
  global$0 = $7_1 + 48 | 0;
  return $74_1 | 0;
 }
 
 function $224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $155_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = (HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($4_1 + 48 | 0) >> 2] = 1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862((HEAP32[($4_1 + 44 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862((HEAP32[($4_1 + 56 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862((HEAP32[($4_1 + 56 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862((HEAP32[($4_1 + 44 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAPF64[(HEAP32[($4_1 + 36 | 0) >> 2] | 0) >> 3] = 1.0;
  HEAP32[($4_1 + 40 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($4_1 + 40 | 0) >> 2] = (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 40 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     label$6 : {
      if (!(+HEAPF64[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] != +(0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
      break label$5;
     }
     HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = -1;
    }
    HEAP32[($4_1 + 40 | 0) >> 2] = (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[$4_1 >> 2] = -1;
  HEAP32[($4_1 + 40 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    label$9 : {
     if (!((HEAP32[$4_1 >> 2] | 0 | 0) < (HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$9
     }
     HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 40 | 0) >> 2] = (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  label$10 : {
   label$11 : {
    if (HEAP32[$4_1 >> 2] | 0) {
     break label$11
    }
    $863(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 60 | 0) >> 2] = 1;
    break label$10;
   }
   $177(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($4_1 + 40 | 0) >> 2] = 0;
   label$12 : {
    label$13 : while (1) {
     if (!((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$12
     }
     (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = Math_sqrt(+$734(+(+HEAPF64[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]), +(2.0)) + +$734(+(+HEAPF64[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]), +(2.0)))), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
     label$14 : {
      if (!(+HEAPF64[($4_1 + 16 | 0) >> 3] < 1.0 & 1 | 0)) {
       break label$14
      }
      $863(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0);
      $863(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0);
      $863(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
      $863(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
      HEAP32[($4_1 + 60 | 0) >> 2] = 0;
      break label$10;
     }
     HEAP32[($4_1 + 40 | 0) >> 2] = (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 1 | 0;
     continue label$13;
    };
   }
   $863(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
  }
  $155_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
  global$0 = $4_1 + 64 | 0;
  return $155_1 | 0;
 }
 
 function $225($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $508_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 112 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 104 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 100 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 88 | 0) >> 2] = 0;
  HEAP32[($4_1 + 92 | 0) >> 2] = -1;
  HEAP32[($4_1 + 96 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     if (!(+HEAPF64[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] != +(0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 92 | 0) >> 2] = HEAP32[($4_1 + 96 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 96 | 0) >> 2] = (HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$4 : {
   label$5 : {
    if (!((HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 108 | 0) >> 2] = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
    break label$4;
   }
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862(((HEAP32[($4_1 + 104 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862((HEAP32[($4_1 + 104 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862((HEAP32[($4_1 + 104 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862((HEAP32[($4_1 + 104 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($4_1 + 92 | 0) >> 2] = (HEAP32[($4_1 + 92 | 0) >> 2] | 0) + 1 | 0;
   HEAPF64[(HEAP32[($4_1 + 64 | 0) >> 2] | 0) >> 3] = 1.0;
   HEAP32[($4_1 + 96 | 0) >> 2] = 1;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0) <= (HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAPF64[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 96 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($4_1 + 96 | 0) >> 2] = (HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862(((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 52 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862(((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862(((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $862(((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $177(HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
   label$8 : {
    if (!((HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$8
    }
    $863(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 108 | 0) >> 2] = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
    break label$4;
   }
   HEAP32[($4_1 + 80 | 0) >> 2] = 0;
   HEAP32[($4_1 + 96 | 0) >> 2] = 0;
   label$9 : {
    label$10 : while (1) {
     if (!((HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$9
     }
     HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
     label$11 : {
      if (!(+HEAPF64[($4_1 + 24 | 0) >> 3] < 1.0 & 1 | 0)) {
       break label$11
      }
      HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 1;
      HEAP32[($4_1 + 80 | 0) >> 2] = (HEAP32[($4_1 + 80 | 0) >> 2] | 0) + 1 | 0;
     }
     HEAP32[($4_1 + 96 | 0) >> 2] = (HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 1 | 0;
     continue label$10;
    };
   }
   label$12 : {
    if (HEAP32[($4_1 + 80 | 0) >> 2] | 0) {
     break label$12
    }
    $863(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 108 | 0) >> 2] = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
    break label$4;
   }
   HEAP32[($4_1 + 88 | 0) >> 2] = 1;
   label$13 : {
    if (!((HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$13
    }
    HEAPF64[(HEAP32[($4_1 + 100 | 0) >> 2] | 0) >> 3] = 1.0 / +HEAPF64[(HEAP32[($4_1 + 100 | 0) >> 2] | 0) >> 3];
    HEAP32[($4_1 + 96 | 0) >> 2] = 1;
    label$14 : {
     label$15 : while (1) {
      if (!((HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$14
      }
      HEAPF64[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      HEAP32[($4_1 + 96 | 0) >> 2] = (HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 1 | 0;
      continue label$15;
     };
    }
    $863(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 108 | 0) >> 2] = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
    break label$4;
   }
   HEAP32[($4_1 + 96 | 0) >> 2] = 0;
   label$16 : {
    label$17 : while (1) {
     if (!((HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$16
     }
     label$18 : {
      if (!((HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$18
      }
      HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[($4_1 + 24 | 0) >> 3];
      HEAPF64[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = -+HEAPF64[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[($4_1 + 24 | 0) >> 3];
     }
     HEAP32[($4_1 + 96 | 0) >> 2] = (HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 1 | 0;
     continue label$17;
    };
   }
   HEAPF64[(HEAP32[($4_1 + 52 | 0) >> 2] | 0) >> 3] = 1.0;
   HEAPF64[(HEAP32[($4_1 + 48 | 0) >> 2] | 0) >> 3] = +(0 | 0);
   HEAPF64[(HEAP32[($4_1 + 44 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($4_1 + 52 | 0) >> 2] | 0) >> 3];
   HEAPF64[(HEAP32[($4_1 + 40 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($4_1 + 48 | 0) >> 2] | 0) >> 3];
   HEAP32[($4_1 + 96 | 0) >> 2] = 0;
   label$19 : {
    label$20 : while (1) {
     if (!((HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$19
     }
     HEAP32[($4_1 + 72 | 0) >> 2] = (HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 1 | 0;
     HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[($4_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[($4_1 + 24 | 0) >> 3];
     HEAPF64[($4_1 + 8 | 0) >> 3] = -+HEAPF64[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / +HEAPF64[($4_1 + 24 | 0) >> 3];
     HEAPF64[((HEAP32[($4_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 72 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAPF64[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 72 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAP32[($4_1 + 68 | 0) >> 2] = 1;
     label$21 : {
      label$22 : while (1) {
       if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) <= (HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$21
       }
       HEAPF64[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 68 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($4_1 + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($4_1 + 48 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 68 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3] * +HEAPF64[((HEAP32[($4_1 + 48 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 68 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[($4_1 + 8 | 0) >> 3] * +HEAPF64[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 68 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 1 | 0;
       continue label$22;
      };
     }
     HEAP32[($4_1 + 68 | 0) >> 2] = 1;
     label$23 : {
      label$24 : while (1) {
       if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) <= (HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$23
       }
       HEAPF64[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAPF64[((HEAP32[($4_1 + 48 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 1 | 0;
       continue label$24;
      };
     }
     HEAP32[($4_1 + 96 | 0) >> 2] = (HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 1 | 0;
     continue label$20;
    };
   }
   HEAP32[($4_1 + 96 | 0) >> 2] = 0;
   label$25 : {
    label$26 : while (1) {
     if (!((HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$25
     }
     HEAPF64[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 52 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($4_1 + 96 | 0) >> 2] = (HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 1 | 0;
     continue label$26;
    };
   }
   HEAP32[($4_1 + 96 | 0) >> 2] = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
   label$27 : {
    label$28 : while (1) {
     if (!((HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$27
     }
     HEAPF64[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAP32[($4_1 + 96 | 0) >> 2] = (HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 1 | 0;
     continue label$28;
    };
   }
   $863(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 108 | 0) >> 2] = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
  }
  $508_1 = HEAP32[($4_1 + 108 | 0) >> 2] | 0;
  global$0 = $4_1 + 112 | 0;
  return $508_1 | 0;
 }
 
 function $226($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = +$3_1;
  var $6_1 = 0, $218_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 64 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $2_1;
  HEAPF64[($6_1 + 48 | 0) >> 3] = $3_1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862((HEAP32[($6_1 + 60 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862((HEAP32[($6_1 + 60 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $862((HEAP32[($6_1 + 60 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  $99(HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 64 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($6_1 + 44 | 0) >> 2] = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[($6_1 + 8 | 0) >> 3] = +HEAPF64[(HEAP32[($6_1 + 28 | 0) >> 2] | 0) >> 3];
  HEAPF64[$6_1 >> 3] = +HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 60 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  HEAP32[($6_1 + 40 | 0) >> 2] = (HEAP32[($6_1 + 60 | 0) >> 2] | 0) - 1 | 0;
  label$3 : {
   label$4 : {
    if (!(+HEAPF64[($6_1 + 48 | 0) >> 3] < +HEAPF64[(HEAP32[($6_1 + 32 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
     break label$4
    }
    $863(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
    HEAPF64[($6_1 + 72 | 0) >> 3] = +HEAPF64[($6_1 + 8 | 0) >> 3];
    break label$3;
   }
   label$5 : {
    if (!(+HEAPF64[($6_1 + 48 | 0) >> 3] > +HEAPF64[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
     break label$5
    }
    $863(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
    HEAPF64[($6_1 + 72 | 0) >> 3] = +HEAPF64[$6_1 >> 3];
    break label$3;
   }
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($6_1 + 36 | 0) >> 2] = ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + (HEAP32[($6_1 + 40 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0;
     label$8 : {
      label$9 : {
       if (!(+HEAPF64[($6_1 + 48 | 0) >> 3] < +HEAPF64[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
        break label$9
       }
       HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
       break label$8;
      }
      HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
     }
     continue label$7;
    };
   }
   label$10 : {
    if (!(+HEAPF64[($6_1 + 48 | 0) >> 3] == +HEAPF64[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
     break label$10
    }
    HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    $863(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
    HEAPF64[($6_1 + 72 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3];
    break label$3;
   }
   label$11 : {
    if (!(+HEAPF64[($6_1 + 48 | 0) >> 3] == +HEAPF64[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
     break label$11
    }
    HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    $863(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
    HEAPF64[($6_1 + 72 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3];
    break label$3;
   }
   HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + (+HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) * ((+HEAPF64[($6_1 + 48 | 0) >> 3] - +HEAPF64[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) / (+HEAPF64[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]));
   $863(HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
   HEAPF64[($6_1 + 72 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3];
  }
  $218_1 = +HEAPF64[($6_1 + 72 | 0) >> 3];
  global$0 = $6_1 + 80 | 0;
  return +$218_1;
 }
 
 function $227($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $57_1 = 0.0, $63_1 = 0.0;
  $6_1 = global$0 - 32 | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAPF64[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 3] = -1797693134862315708145274.0e284;
  HEAPF64[(HEAP32[($6_1 + 20 | 0) >> 2] | 0) >> 3] = 1797693134862315708145274.0e284;
  HEAP32[($6_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (!(+HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
       break label$4
      }
      $57_1 = +HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      break label$3;
     }
     $57_1 = +HEAPF64[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 3];
    }
    HEAPF64[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 3] = $57_1;
    label$5 : {
     label$6 : {
      if (!(+HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +HEAPF64[(HEAP32[($6_1 + 20 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
       break label$6
      }
      $63_1 = +HEAPF64[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      break label$5;
     }
     $63_1 = +HEAPF64[(HEAP32[($6_1 + 20 | 0) >> 2] | 0) >> 3];
    }
    HEAPF64[(HEAP32[($6_1 + 20 | 0) >> 2] | 0) >> 3] = $63_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $228($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = +(0 | 0);
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($5_1 + 8 | 0) >> 3];
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $229($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $46_1 = 0;
  $6_1 = global$0 - 48 | 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  HEAPF64[($6_1 + 16 | 0) >> 3] = +(0 | 0);
  HEAP32[($6_1 + 28 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) <= (HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[($6_1 + 8 | 0) >> 3] = +(0 | 0);
    HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF64[($6_1 + 8 | 0) >> 3] = +HEAPF64[($6_1 + 8 | 0) >> 3] + +HEAPF64[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 24 | 0) >> 2] | 0) - (HEAP32[($6_1 + 28 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAPF64[($6_1 + 8 | 0) >> 3] = +HEAPF64[($6_1 + 8 | 0) >> 3] * (1.0 - +(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) / (+(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) + 1.0));
    HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3] + +HEAPF64[($6_1 + 8 | 0) >> 3];
    HEAP32[($6_1 + 28 | 0) >> 2] = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3] / +(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0);
  HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3] * 2.0;
  $46_1 = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
  HEAPF64[$46_1 >> 3] = +HEAPF64[$46_1 >> 3] + +HEAPF64[($6_1 + 16 | 0) >> 3];
  return;
 }
 
 function $230($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  $6_1 = +$6_1;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10_1 = global$0 - 64 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($10_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($10_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 44 | 0) >> 2] = $4_1;
  HEAPF64[($10_1 + 32 | 0) >> 3] = $5_1;
  HEAPF64[($10_1 + 24 | 0) >> 3] = $6_1;
  HEAP32[($10_1 + 20 | 0) >> 2] = $7_1;
  (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $864(Math_imul(HEAP32[($10_1 + 56 | 0) >> 2] | 0, 7) | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
      break label$3
     }
     if (!((HEAP32[($10_1 + 44 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[($10_1 + 8 | 0) >> 2] = HEAP32[($10_1 + 44 | 0) >> 2] | 0;
    break label$1;
   }
   $875(global$3 + 5960 | 0 | 0, 0 | 0) | 0;
   $875(global$3 + 5281 | 0 | 0, 0 | 0) | 0;
   $875(global$3 + 4469 | 0 | 0, 0 | 0) | 0;
   fimport$0(-1 | 0);
   abort();
  }
  label$4 : {
   label$5 : {
    if (+HEAPF64[($10_1 + 32 | 0) >> 3] < +(0 | 0) & 1 | 0) {
     break label$5
    }
    if (!(+HEAPF64[($10_1 + 32 | 0) >> 3] > 1.0 & 1 | 0)) {
     break label$4
    }
   }
   $875(global$3 + 4375 | 0 | 0, 0 | 0) | 0;
   $875(global$3 + 4323 | 0 | 0, 0 | 0) | 0;
   fimport$0(-1 | 0);
   abort();
  }
  label$6 : {
   label$7 : {
    if (!((HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$7
    }
    (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $864(HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    HEAP32[($10_1 + 4 | 0) >> 2] = 0;
    label$8 : {
     label$9 : while (1) {
      if (!((HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$8
      }
      HEAPF64[((HEAP32[($10_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
      HEAP32[($10_1 + 4 | 0) >> 2] = (HEAP32[($10_1 + 4 | 0) >> 2] | 0) + 1 | 0;
      continue label$9;
     };
    }
    $231($10_1 + 56 | 0 | 0, HEAP32[($10_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0, $10_1 + 8 | 0 | 0, $10_1 + 32 | 0 | 0, $10_1 + 24 | 0 | 0, HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    $863(HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0);
    break label$6;
   }
   $231($10_1 + 56 | 0 | 0, HEAP32[($10_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0, $10_1 + 8 | 0 | 0, $10_1 + 32 | 0 | 0, $10_1 + 24 | 0 | 0, HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  }
  $863(HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0);
  global$0 = $10_1 + 64 | 0;
  return;
 }
 
 function $231($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, $235_1 = 0, $365_1 = 0, $414_1 = 0, $445_1 = 0, $570_1 = 0, $598_1 = 0, $732_1 = 0.0, $661_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $11_1 = global$0 - 176 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 168 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 164 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 160 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 156 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 152 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 148 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 144 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 140 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 136 | 0) >> 2] = $8_1;
  HEAP32[($11_1 + 132 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 168 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($11_1 + 128 | 0) >> 2] = (HEAP32[($11_1 + 132 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($11_1 + 136 | 0) >> 2] = (HEAP32[($11_1 + 136 | 0) >> 2] | 0) + ((0 - (HEAP32[($11_1 + 128 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  HEAP32[($11_1 + 140 | 0) >> 2] = (HEAP32[($11_1 + 140 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($11_1 + 156 | 0) >> 2] = (HEAP32[($11_1 + 156 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($11_1 + 160 | 0) >> 2] = (HEAP32[($11_1 + 160 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($11_1 + 164 | 0) >> 2] = (HEAP32[($11_1 + 164 | 0) >> 2] | 0) + -8 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(+HEAPF64[((HEAP32[($11_1 + 164 | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($11_1 + 168 | 0) >> 2] | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[((HEAP32[($11_1 + 164 | 0) >> 2] | 0) + 8 | 0) >> 3] & 1 | 0)) {
      break label$3
     }
     break label$2;
    }
    HEAPF64[($11_1 + 40 | 0) >> 3] = +(0 | 0);
    HEAPF64[($11_1 + 48 | 0) >> 3] = +HEAPF64[($11_1 + 40 | 0) >> 3];
    HEAP32[($11_1 + 124 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 168 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($11_1 + 56 | 0) >> 2] = 1;
    label$4 : {
     label$5 : while (1) {
      if (!((HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAPF64[($11_1 + 40 | 0) >> 3] = +HEAPF64[($11_1 + 40 | 0) >> 3] + +HEAPF64[((HEAP32[($11_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 160 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[($11_1 + 48 | 0) >> 3] = +HEAPF64[($11_1 + 48 | 0) >> 3] + +HEAPF64[((HEAP32[($11_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($11_1 + 56 | 0) >> 2] = (HEAP32[($11_1 + 56 | 0) >> 2] | 0) + 1 | 0;
      continue label$5;
     };
    }
    HEAPF64[($11_1 + 80 | 0) >> 3] = +(0 | 0);
    label$6 : {
     if (!(+HEAPF64[($11_1 + 48 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAPF64[($11_1 + 80 | 0) >> 3] = +HEAPF64[($11_1 + 40 | 0) >> 3] / +HEAPF64[($11_1 + 48 | 0) >> 3];
    }
    HEAP32[($11_1 + 124 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 168 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($11_1 + 56 | 0) >> 2] = 1;
    label$7 : {
     label$8 : while (1) {
      if (!((HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAPF64[((HEAP32[($11_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 80 | 0) >> 3];
      HEAP32[($11_1 + 56 | 0) >> 2] = (HEAP32[($11_1 + 56 | 0) >> 2] | 0) + 1 | 0;
      continue label$8;
     };
    }
    HEAP32[($11_1 + 172 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($11_1 + 60 | 0) >> 2] = (HEAP32[(HEAP32[($11_1 + 168 | 0) >> 2] | 0) >> 2] | 0 | 0) / (4 | 0) | 0;
   HEAP32[($11_1 + 56 | 0) >> 2] = Math_imul(HEAP32[($11_1 + 60 | 0) >> 2] | 0, 3);
   HEAPF64[($11_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 164 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($11_1 + 164 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
   label$9 : {
    label$10 : while (1) {
     label$11 : {
      if (!(+HEAPF64[($11_1 + 24 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$11
      }
      break label$9;
     }
     label$12 : {
      if (!((HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($11_1 + 168 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$12
      }
      HEAP32[($11_1 + 56 | 0) >> 2] = (HEAP32[($11_1 + 56 | 0) >> 2] | 0) + 1 | 0;
     }
     label$13 : {
      if (!((HEAP32[($11_1 + 60 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
       break label$13
      }
      HEAP32[($11_1 + 60 | 0) >> 2] = (HEAP32[($11_1 + 60 | 0) >> 2] | 0) + -1 | 0;
     }
     HEAPF64[($11_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 164 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($11_1 + 164 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     continue label$10;
    };
   }
   HEAPF64[($11_1 + 112 | 0) >> 3] = +HEAPF64[((global$3 + 12440 | 0) + 16 | 0) >> 3] * +HEAPF64[($11_1 + 24 | 0) >> 3];
   HEAPF64[($11_1 + 8 | 0) >> 3] = +HEAPF64[($11_1 + 112 | 0) >> 3] * +HEAPF64[($11_1 + 112 | 0) >> 3];
   HEAP32[($11_1 + 36 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 152 | 0) >> 2] | 0) >> 2] | 0;
   label$14 : {
    if (!((HEAP32[(HEAP32[($11_1 + 152 | 0) >> 2] | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$14
    }
    label$15 : {
     if (+HEAPF64[((HEAP32[($11_1 + 164 | 0) >> 2] | 0) + 8 | 0) >> 3] < +(0 | 0) & 1 | 0) {
      break label$15
     }
     if (!(+HEAPF64[((HEAP32[($11_1 + 164 | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($11_1 + 168 | 0) >> 2] | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > 1.0 & 1 | 0)) {
      break label$14
     }
    }
    HEAP32[($11_1 + 36 | 0) >> 2] = 1;
   }
   label$16 : {
    label$17 : {
     if ((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0) {
      break label$17
     }
     if (!((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) > (2 | 0) & 1 | 0)) {
      break label$16
     }
    }
    HEAP32[($11_1 + 36 | 0) >> 2] = 1;
   }
   label$18 : {
    label$19 : {
     if (!(+HEAPF64[(HEAP32[($11_1 + 148 | 0) >> 2] | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
      break label$19
     }
     break label$18;
    }
    $232(HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, (HEAP32[($11_1 + 164 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($11_1 + 160 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($11_1 + 156 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($11_1 + 148 | 0) >> 2] | 0 | 0, $11_1 + 36 | 0 | 0, $11_1 + 8 | 0 | 0, (HEAP32[($11_1 + 140 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($11_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
    HEAP32[($11_1 + 172 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($11_1 + 60 | 0) >> 2] = 1;
   label$20 : {
    label$21 : while (1) {
     if (!((HEAP32[($11_1 + 60 | 0) >> 2] | 0 | 0) <= (3 | 0) & 1 | 0)) {
      break label$20
     }
     $235_1 = 8;
     $232(HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, (HEAP32[($11_1 + 164 | 0) >> 2] | 0) + $235_1 | 0 | 0, (HEAP32[($11_1 + 160 | 0) >> 2] | 0) + $235_1 | 0 | 0, (HEAP32[($11_1 + 156 | 0) >> 2] | 0) + $235_1 | 0 | 0, (((HEAP32[($11_1 + 60 | 0) >> 2] | 0) << 3 | 0) + (global$3 + 12416 | 0) | 0) + -8 | 0 | 0, $11_1 + 36 | 0 | 0, $11_1 + 8 | 0 | 0, (HEAP32[($11_1 + 136 | 0) >> 2] | 0) + ((Math_imul(((HEAP32[($11_1 + 60 | 0) >> 2] | 0) << 1 | 0) - 1 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($11_1 + 136 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($11_1 + 132 | 0) >> 2] | 0, 7) + 1 | 0) << 3 | 0) | 0 | 0) | 0;
     HEAP32[($11_1 + 124 | 0) >> 2] = 0 - (HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0;
     $232(HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, (HEAP32[($11_1 + 164 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($11_1 + 136 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($11_1 + 132 | 0) >> 2] | 0, 7) + 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($11_1 + 156 | 0) >> 2] | 0) + 8 | 0 | 0, (global$3 + 12416 | 0) + 8 | 0 | 0, $11_1 + 124 | 0 | 0, $11_1 + 8 | 0 | 0, (HEAP32[($11_1 + 136 | 0) >> 2] | 0) + ((Math_imul((HEAP32[($11_1 + 60 | 0) >> 2] | 0) << 1 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0 | 0, $11_1 + 64 | 0 | 0) | 0;
     HEAP32[($11_1 + 60 | 0) >> 2] = (HEAP32[($11_1 + 60 | 0) >> 2] | 0) + 1 | 0;
     continue label$21;
    };
   }
   HEAP32[($11_1 + 124 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 168 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($11_1 + 56 | 0) >> 2] = 1;
   label$22 : {
    label$23 : while (1) {
     if (!((HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$22
     }
     HEAPF64[($11_1 + 16 | 0) >> 3] = +HEAPF64[(global$3 + 12440 | 0) >> 3];
     HEAP32[($11_1 + 60 | 0) >> 2] = 1;
     label$24 : {
      label$25 : while (1) {
       if (!((HEAP32[($11_1 + 60 | 0) >> 2] | 0 | 0) <= (3 | 0) & 1 | 0)) {
        break label$24
       }
       label$26 : {
        label$27 : {
         if (!(+HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + Math_imul((HEAP32[($11_1 + 60 | 0) >> 2] | 0) << 1 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] >= +HEAPF64[($11_1 + 16 | 0) >> 3] & 1 | 0)) {
          break label$27
         }
         break label$26;
        }
        $365_1 = 3;
        HEAPF64[($11_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + (Math_imul(HEAP32[($11_1 + 60 | 0) >> 2] | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0) << 1 | 0) | 0) << $365_1 | 0) | 0) >> 3];
        HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 132 | 0) >> 2] | 0, 7) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((((HEAP32[($11_1 + 60 | 0) >> 2] | 0) << $365_1 | 0) + (global$3 + 12416 | 0) | 0) + -8 | 0) >> 3];
       }
       HEAP32[($11_1 + 60 | 0) >> 2] = (HEAP32[($11_1 + 60 | 0) >> 2] | 0) + 1 | 0;
       continue label$25;
      };
     }
     label$28 : {
      if (!(+HEAPF64[(HEAP32[($11_1 + 144 | 0) >> 2] | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$28
      }
      if (!(+HEAPF64[(HEAP32[($11_1 + 144 | 0) >> 2] | 0) >> 3] <= 10.0 & 1 | 0)) {
       break label$28
      }
      if (!(+HEAPF64[($11_1 + 16 | 0) >> 3] < +HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 132 | 0) >> 2] | 0, 6) | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$28
      }
      if (!(+HEAPF64[($11_1 + 16 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$28
      }
      $414_1 = global$3;
      HEAPF64[($11_1 + 112 | 0) >> 3] = +HEAPF64[(($414_1 + 12440 | 0) + 8 | 0) >> 3];
      HEAPF64[($11_1 + 104 | 0) >> 3] = +HEAPF64[($11_1 + 16 | 0) >> 3] / +HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 132 | 0) >> 2] | 0, 6) | 0) << 3 | 0) | 0) >> 3];
      (wasm2js_i32$0 = $11_1, wasm2js_f64$0 = +$89(+(+HEAPF64[($11_1 + 112 | 0) >> 3]), +(+HEAPF64[($11_1 + 104 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 96 | 0) >> 3] = wasm2js_f64$0;
      HEAPF64[($11_1 + 88 | 0) >> 3] = 10.0 - +HEAPF64[(HEAP32[($11_1 + 144 | 0) >> 2] | 0) >> 3];
      $732_1 = (+HEAPF64[(($414_1 + 12416 | 0) + 16 | 0) >> 3] - +HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 132 | 0) >> 2] | 0, 7) | 0) << 3 | 0) | 0) >> 3]) * +$734(+(+HEAPF64[($11_1 + 96 | 0) >> 3]), +(+HEAPF64[($11_1 + 88 | 0) >> 3]));
      $445_1 = (HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 132 | 0) >> 2] | 0, 7) | 0) << 3 | 0) | 0;
      HEAPF64[$445_1 >> 3] = +HEAPF64[$445_1 >> 3] + $732_1;
     }
     HEAP32[($11_1 + 56 | 0) >> 2] = (HEAP32[($11_1 + 56 | 0) >> 2] | 0) + 1 | 0;
     continue label$23;
    };
   }
   HEAP32[($11_1 + 124 | 0) >> 2] = 0 - (HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0;
   $232(HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, (HEAP32[($11_1 + 164 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($11_1 + 136 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($11_1 + 132 | 0) >> 2] | 0, 7) + 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($11_1 + 156 | 0) >> 2] | 0) + 8 | 0 | 0, (global$3 + 12416 | 0) + 8 | 0 | 0, $11_1 + 124 | 0 | 0, $11_1 + 8 | 0 | 0, (HEAP32[($11_1 + 136 | 0) >> 2] | 0) + ((((HEAP32[($11_1 + 132 | 0) >> 2] | 0) << 1 | 0) + 1 | 0) << 3 | 0) | 0 | 0, $11_1 + 64 | 0 | 0) | 0;
   HEAP32[($11_1 + 124 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 168 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($11_1 + 56 | 0) >> 2] = 1;
   label$29 : {
    label$30 : while (1) {
     if (!((HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$29
     }
     label$31 : {
      if (!(+HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 132 | 0) >> 2] | 0) << 1 | 0) | 0) << 3 | 0) | 0) >> 3] <= +HEAPF64[(global$3 + 12416 | 0) >> 3] & 1 | 0)) {
       break label$31
      }
      HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 132 | 0) >> 2] | 0) << 1 | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[(global$3 + 12416 | 0) >> 3];
     }
     label$32 : {
      if (!(+HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 132 | 0) >> 2] | 0) << 1 | 0) | 0) << 3 | 0) | 0) >> 3] >= +HEAPF64[((global$3 + 12416 | 0) + 16 | 0) >> 3] & 1 | 0)) {
       break label$32
      }
      HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 132 | 0) >> 2] | 0) << 1 | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((global$3 + 12416 | 0) + 16 | 0) >> 3];
     }
     HEAPF64[($11_1 + 72 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 132 | 0) >> 2] | 0) << 1 | 0) | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((global$3 + 12416 | 0) + 8 | 0) >> 3];
     label$33 : {
      label$34 : {
       label$35 : {
        if (!(+HEAPF64[($11_1 + 72 | 0) >> 3] >= +(0 | 0) & 1 | 0)) {
         break label$35
        }
        break label$34;
       }
       $570_1 = global$3 + 12416 | 0;
       HEAPF64[($11_1 + 72 | 0) >> 3] = -+HEAPF64[($11_1 + 72 | 0) >> 3] / (+HEAPF64[($570_1 + 8 | 0) >> 3] - +HEAPF64[$570_1 >> 3]);
       HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 132 | 0) >> 2] | 0) << 2 | 0) | 0) << 3 | 0) | 0) >> 3] = (1.0 - +HEAPF64[($11_1 + 72 | 0) >> 3]) * +HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 132 | 0) >> 2] | 0, 3) | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[($11_1 + 72 | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + (HEAP32[($11_1 + 132 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       break label$33;
      }
      $598_1 = global$3 + 12416 | 0;
      HEAPF64[($11_1 + 72 | 0) >> 3] = +HEAPF64[($11_1 + 72 | 0) >> 3] / (+HEAPF64[($598_1 + 16 | 0) >> 3] - +HEAPF64[($598_1 + 8 | 0) >> 3]);
      HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 132 | 0) >> 2] | 0) << 2 | 0) | 0) << 3 | 0) | 0) >> 3] = (1.0 - +HEAPF64[($11_1 + 72 | 0) >> 3]) * +HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 132 | 0) >> 2] | 0, 3) | 0) << 3 | 0) | 0) >> 3] + +HEAPF64[($11_1 + 72 | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 56 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 132 | 0) >> 2] | 0, 5) | 0) << 3 | 0) | 0) >> 3];
     }
     HEAP32[($11_1 + 56 | 0) >> 2] = (HEAP32[($11_1 + 56 | 0) >> 2] | 0) + 1 | 0;
     continue label$30;
    };
   }
   HEAP32[($11_1 + 124 | 0) >> 2] = 0 - (HEAP32[($11_1 + 36 | 0) >> 2] | 0) | 0;
   $232(HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0, (HEAP32[($11_1 + 164 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($11_1 + 136 | 0) >> 2] | 0) + ((((HEAP32[($11_1 + 132 | 0) >> 2] | 0) << 2 | 0) + 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($11_1 + 156 | 0) >> 2] | 0) + 8 | 0 | 0, global$3 + 12416 | 0 | 0, $11_1 + 124 | 0 | 0, $11_1 + 8 | 0 | 0, (HEAP32[($11_1 + 140 | 0) >> 2] | 0) + 8 | 0 | 0, $11_1 + 64 | 0 | 0) | 0;
   HEAP32[($11_1 + 172 | 0) >> 2] = 0;
  }
  $661_1 = HEAP32[($11_1 + 172 | 0) >> 2] | 0;
  global$0 = $11_1 + 176 | 0;
  return $661_1 | 0;
 }
 
 function $232($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, $485_1 = 0.0, $37_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 208 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 204 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 200 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 196 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 192 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 188 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 184 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 180 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 176 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 172 | 0) >> 2] = $8_1;
  HEAP32[($11_1 + 172 | 0) >> 2] = (HEAP32[($11_1 + 172 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($11_1 + 176 | 0) >> 2] = (HEAP32[($11_1 + 176 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($11_1 + 192 | 0) >> 2] = (HEAP32[($11_1 + 192 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($11_1 + 196 | 0) >> 2] = (HEAP32[($11_1 + 196 | 0) >> 2] | 0) + -8 | 0;
  HEAP32[($11_1 + 200 | 0) >> 2] = (HEAP32[($11_1 + 200 | 0) >> 2] | 0) + -8 | 0;
  HEAPF64[($11_1 + 104 | 0) >> 3] = +(0 | 0);
  HEAPF64[($11_1 + 96 | 0) >> 3] = +HEAPF64[($11_1 + 104 | 0) >> 3];
  HEAPF64[($11_1 + 48 | 0) >> 3] = +HEAPF64[($11_1 + 96 | 0) >> 3];
  HEAPF64[($11_1 + 8 | 0) >> 3] = +HEAPF64[($11_1 + 48 | 0) >> 3];
  HEAPF64[($11_1 + 64 | 0) >> 3] = +HEAPF64[($11_1 + 8 | 0) >> 3];
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $94(HEAP32[(HEAP32[($11_1 + 184 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $485_1 = +HEAPF64[(HEAP32[($11_1 + 188 | 0) >> 2] | 0) >> 3] * .5 * +(HEAP32[(HEAP32[($11_1 + 204 | 0) >> 2] | 0) >> 2] | 0 | 0) + .5;
  label$1 : {
   label$2 : {
    if (!(Math_abs($485_1) < 2147483648.0)) {
     break label$2
    }
    $37_1 = ~~$485_1;
    break label$1;
   }
   $37_1 = -2147483648;
  }
  HEAP32[($11_1 + 60 | 0) >> 2] = $37_1;
  label$3 : {
   if (!((HEAP32[($11_1 + 60 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($11_1 + 60 | 0) >> 2] = 2;
  }
  HEAP32[($11_1 + 116 | 0) >> 2] = ((HEAP32[($11_1 + 60 | 0) >> 2] | 0) << 1 | 0) + 1 | 0;
  HEAP32[($11_1 + 168 | 0) >> 2] = HEAP32[($11_1 + 116 | 0) >> 2] | 0;
  HEAP32[($11_1 + 132 | 0) >> 2] = 1;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($11_1 + 128 | 0) >> 2] = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
    label$6 : {
     if (!((HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($11_1 + 128 | 0) >> 2] = ((HEAP32[($11_1 + 132 | 0) >> 2] | 0) - (HEAP32[($11_1 + 60 | 0) >> 2] | 0) | 0) - 1 | 0;
    }
    HEAPF64[($11_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$7 : {
     label$8 : {
      if (!((HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
       break label$8
      }
      break label$7;
     }
     HEAP32[($11_1 + 128 | 0) >> 2] = (HEAP32[(HEAP32[($11_1 + 204 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($11_1 + 128 | 0) >> 2] | 0) | 0;
     HEAPF64[($11_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - 1.0;
    }
    HEAPF64[($11_1 + 88 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[($11_1 + 72 | 0) >> 3] = +HEAPF64[($11_1 + 64 | 0) >> 3];
    HEAPF64[($11_1 + 64 | 0) >> 3] = +HEAPF64[($11_1 + 64 | 0) >> 3] + +HEAPF64[($11_1 + 88 | 0) >> 3];
    label$9 : {
     if (!(+HEAPF64[($11_1 + 64 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
      break label$9
     }
     HEAPF64[($11_1 + 104 | 0) >> 3] = (+HEAPF64[($11_1 + 72 | 0) >> 3] * +HEAPF64[($11_1 + 104 | 0) >> 3] + +HEAPF64[($11_1 + 88 | 0) >> 3] * +HEAPF64[($11_1 + 32 | 0) >> 3]) / +HEAPF64[($11_1 + 64 | 0) >> 3];
    }
    label$10 : {
     if (!(+HEAPF64[($11_1 + 64 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
      break label$10
     }
     HEAPF64[($11_1 + 96 | 0) >> 3] = (+HEAPF64[($11_1 + 72 | 0) >> 3] * +HEAPF64[($11_1 + 96 | 0) >> 3] + +HEAPF64[($11_1 + 88 | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) / +HEAPF64[($11_1 + 64 | 0) >> 3];
    }
    HEAPF64[($11_1 + 40 | 0) >> 3] = +(0 | 0);
    label$11 : {
     if (!(+HEAPF64[($11_1 + 72 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
      break label$11
     }
     HEAPF64[($11_1 + 40 | 0) >> 3] = +HEAPF64[($11_1 + 64 | 0) >> 3] * +HEAPF64[($11_1 + 88 | 0) >> 3] * (+HEAPF64[($11_1 + 32 | 0) >> 3] - +HEAPF64[($11_1 + 104 | 0) >> 3]) / +HEAPF64[($11_1 + 72 | 0) >> 3];
    }
    HEAPF64[($11_1 + 48 | 0) >> 3] = +HEAPF64[($11_1 + 48 | 0) >> 3] + +HEAPF64[($11_1 + 40 | 0) >> 3] * (+HEAPF64[($11_1 + 32 | 0) >> 3] - +HEAPF64[($11_1 + 104 | 0) >> 3]);
    HEAPF64[($11_1 + 8 | 0) >> 3] = +HEAPF64[($11_1 + 8 | 0) >> 3] + +HEAPF64[($11_1 + 40 | 0) >> 3] * (+HEAPF64[((HEAP32[($11_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($11_1 + 96 | 0) >> 3]);
    HEAP32[($11_1 + 132 | 0) >> 2] = (HEAP32[($11_1 + 132 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  HEAP32[($11_1 + 168 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 204 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($11_1 + 128 | 0) >> 2] = 1;
  label$12 : {
   label$13 : while (1) {
    if (!((HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$12
    }
    HEAP32[($11_1 + 28 | 0) >> 2] = ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) - (HEAP32[($11_1 + 60 | 0) >> 2] | 0) | 0) - 1 | 0;
    HEAP32[($11_1 + 120 | 0) >> 2] = (HEAP32[($11_1 + 128 | 0) >> 2] | 0) + (HEAP32[($11_1 + 60 | 0) >> 2] | 0) | 0;
    label$14 : {
     label$15 : {
      if (!((HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0) != (2 | 0) & 1 | 0)) {
       break label$15
      }
      label$16 : {
       if ((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0) {
        break label$16
       }
       if (!((HEAP32[($11_1 + 120 | 0) >> 2] | 0 | 0) > (HEAP32[(HEAP32[($11_1 + 204 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
      }
      break label$14;
     }
     label$17 : {
      label$18 : {
       label$19 : {
        if (!((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) >= (1 | 0) & 1 | 0)) {
         break label$19
        }
        break label$18;
       }
       HEAP32[($11_1 + 28 | 0) >> 2] = (HEAP32[(HEAP32[($11_1 + 204 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($11_1 + 28 | 0) >> 2] | 0) | 0;
       HEAPF64[($11_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - 1.0;
       HEAPF64[($11_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       break label$17;
      }
      label$20 : {
       label$21 : {
        if (!((HEAP32[($11_1 + 120 | 0) >> 2] | 0 | 0) <= (HEAP32[(HEAP32[($11_1 + 204 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$21
        }
        break label$20;
       }
       HEAP32[($11_1 + 120 | 0) >> 2] = (HEAP32[($11_1 + 120 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($11_1 + 204 | 0) >> 2] | 0) >> 2] | 0) | 0;
       HEAPF64[($11_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + 1.0;
       HEAPF64[($11_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       break label$17;
      }
      HEAPF64[($11_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[($11_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     }
     HEAPF64[($11_1 + 88 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[($11_1 + 72 | 0) >> 3] = +HEAPF64[($11_1 + 64 | 0) >> 3];
     HEAPF64[($11_1 + 64 | 0) >> 3] = +HEAPF64[($11_1 + 64 | 0) >> 3] - +HEAPF64[($11_1 + 88 | 0) >> 3];
     HEAPF64[($11_1 + 40 | 0) >> 3] = +(0 | 0);
     label$22 : {
      if (!(+HEAPF64[($11_1 + 64 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$22
      }
      HEAPF64[($11_1 + 40 | 0) >> 3] = +HEAPF64[($11_1 + 72 | 0) >> 3] * +HEAPF64[($11_1 + 88 | 0) >> 3] * (+HEAPF64[($11_1 + 16 | 0) >> 3] - +HEAPF64[($11_1 + 104 | 0) >> 3]) / +HEAPF64[($11_1 + 64 | 0) >> 3];
     }
     HEAPF64[($11_1 + 48 | 0) >> 3] = +HEAPF64[($11_1 + 48 | 0) >> 3] - +HEAPF64[($11_1 + 40 | 0) >> 3] * (+HEAPF64[($11_1 + 16 | 0) >> 3] - +HEAPF64[($11_1 + 104 | 0) >> 3]);
     HEAPF64[($11_1 + 8 | 0) >> 3] = +HEAPF64[($11_1 + 8 | 0) >> 3] - +HEAPF64[($11_1 + 40 | 0) >> 3] * (+HEAPF64[((HEAP32[($11_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($11_1 + 96 | 0) >> 3]);
     label$23 : {
      if (!(+HEAPF64[($11_1 + 64 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$23
      }
      HEAPF64[($11_1 + 104 | 0) >> 3] = (+HEAPF64[($11_1 + 72 | 0) >> 3] * +HEAPF64[($11_1 + 104 | 0) >> 3] - +HEAPF64[($11_1 + 88 | 0) >> 3] * +HEAPF64[($11_1 + 16 | 0) >> 3]) / +HEAPF64[($11_1 + 64 | 0) >> 3];
     }
     label$24 : {
      if (!(+HEAPF64[($11_1 + 64 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$24
      }
      HEAPF64[($11_1 + 96 | 0) >> 3] = (+HEAPF64[($11_1 + 72 | 0) >> 3] * +HEAPF64[($11_1 + 96 | 0) >> 3] - +HEAPF64[($11_1 + 88 | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) / +HEAPF64[($11_1 + 64 | 0) >> 3];
     }
     HEAPF64[($11_1 + 88 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[($11_1 + 72 | 0) >> 3] = +HEAPF64[($11_1 + 64 | 0) >> 3];
     HEAPF64[($11_1 + 64 | 0) >> 3] = +HEAPF64[($11_1 + 64 | 0) >> 3] + +HEAPF64[($11_1 + 88 | 0) >> 3];
     label$25 : {
      if (!(+HEAPF64[($11_1 + 64 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$25
      }
      HEAPF64[($11_1 + 104 | 0) >> 3] = (+HEAPF64[($11_1 + 72 | 0) >> 3] * +HEAPF64[($11_1 + 104 | 0) >> 3] + +HEAPF64[($11_1 + 88 | 0) >> 3] * +HEAPF64[($11_1 + 32 | 0) >> 3]) / +HEAPF64[($11_1 + 64 | 0) >> 3];
     }
     label$26 : {
      if (!(+HEAPF64[($11_1 + 64 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$26
      }
      HEAPF64[($11_1 + 96 | 0) >> 3] = (+HEAPF64[($11_1 + 72 | 0) >> 3] * +HEAPF64[($11_1 + 96 | 0) >> 3] + +HEAPF64[($11_1 + 88 | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) / +HEAPF64[($11_1 + 64 | 0) >> 3];
     }
     HEAPF64[($11_1 + 40 | 0) >> 3] = +(0 | 0);
     label$27 : {
      if (!(+HEAPF64[($11_1 + 72 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$27
      }
      HEAPF64[($11_1 + 40 | 0) >> 3] = +HEAPF64[($11_1 + 64 | 0) >> 3] * +HEAPF64[($11_1 + 88 | 0) >> 3] * (+HEAPF64[($11_1 + 32 | 0) >> 3] - +HEAPF64[($11_1 + 104 | 0) >> 3]) / +HEAPF64[($11_1 + 72 | 0) >> 3];
     }
     HEAPF64[($11_1 + 48 | 0) >> 3] = +HEAPF64[($11_1 + 48 | 0) >> 3] + +HEAPF64[($11_1 + 40 | 0) >> 3] * (+HEAPF64[($11_1 + 32 | 0) >> 3] - +HEAPF64[($11_1 + 104 | 0) >> 3]);
     HEAPF64[($11_1 + 8 | 0) >> 3] = +HEAPF64[($11_1 + 8 | 0) >> 3] + +HEAPF64[($11_1 + 40 | 0) >> 3] * (+HEAPF64[((HEAP32[($11_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($11_1 + 96 | 0) >> 3]);
    }
    HEAPF64[($11_1 + 144 | 0) >> 3] = +(0 | 0);
    label$28 : {
     if (!(+HEAPF64[($11_1 + 48 | 0) >> 3] > +HEAPF64[(HEAP32[($11_1 + 180 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
      break label$28
     }
     HEAPF64[($11_1 + 144 | 0) >> 3] = +HEAPF64[($11_1 + 8 | 0) >> 3] / +HEAPF64[($11_1 + 48 | 0) >> 3];
    }
    HEAPF64[((HEAP32[($11_1 + 176 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 144 | 0) >> 3] * (+HEAPF64[((HEAP32[($11_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($11_1 + 104 | 0) >> 3]) + +HEAPF64[($11_1 + 96 | 0) >> 3];
    label$29 : {
     label$30 : {
      if (!((HEAP32[(HEAP32[($11_1 + 184 | 0) >> 2] | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0)) {
       break label$30
      }
      break label$29;
     }
     HEAPF64[($11_1 + 136 | 0) >> 3] = +(0 | 0);
     label$31 : {
      if (!(+HEAPF64[($11_1 + 64 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$31
      }
      HEAPF64[($11_1 + 136 | 0) >> 3] = 1.0 / +HEAPF64[($11_1 + 64 | 0) >> 3];
     }
     label$32 : {
      if (!(+HEAPF64[($11_1 + 48 | 0) >> 3] > +HEAPF64[(HEAP32[($11_1 + 180 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
       break label$32
      }
      HEAPF64[($11_1 + 152 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($11_1 + 104 | 0) >> 3];
      HEAPF64[($11_1 + 136 | 0) >> 3] = +HEAPF64[($11_1 + 136 | 0) >> 3] + +HEAPF64[($11_1 + 152 | 0) >> 3] * +HEAPF64[($11_1 + 152 | 0) >> 3] / +HEAPF64[($11_1 + 48 | 0) >> 3];
     }
     HEAPF64[((HEAP32[($11_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAPF64[($11_1 + 144 | 0) >> 3] = 1.0 - +HEAPF64[((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[($11_1 + 136 | 0) >> 3];
     label$33 : {
      label$34 : {
       if (!(+HEAPF64[($11_1 + 144 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
        break label$34
       }
       break label$33;
      }
      HEAPF64[($11_1 + 160 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[($11_1 + 176 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[((HEAP32[($11_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = Math_abs(+HEAPF64[($11_1 + 160 | 0) >> 3]) / +HEAPF64[($11_1 + 144 | 0) >> 3];
      break label$29;
     }
     label$35 : {
      if (!((HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0) <= (1 | 0) & 1 | 0)) {
       break label$35
      }
      break label$29;
     }
     HEAPF64[((HEAP32[($11_1 + 172 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 172 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 128 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
    }
    HEAP32[($11_1 + 128 | 0) >> 2] = (HEAP32[($11_1 + 128 | 0) >> 2] | 0) + 1 | 0;
    continue label$13;
   };
  }
  HEAP32[($11_1 + 128 | 0) >> 2] = 1;
  label$36 : while (1) {
   HEAP32[($11_1 + 124 | 0) >> 2] = HEAP32[($11_1 + 128 | 0) >> 2] | 0;
   HEAPF64[($11_1 + 80 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 176 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
   HEAPF64[($11_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
   label$37 : {
    label$38 : {
     if (!((HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0) >= (HEAP32[(HEAP32[($11_1 + 204 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$38
     }
     break label$37;
    }
    label$39 : while (1) {
     label$40 : {
      if (!(+HEAPF64[((HEAP32[($11_1 + 200 | 0) >> 2] | 0) + (((HEAP32[($11_1 + 128 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[((HEAP32[($11_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$40
      }
      break label$37;
     }
     HEAP32[($11_1 + 128 | 0) >> 2] = (HEAP32[($11_1 + 128 | 0) >> 2] | 0) + 1 | 0;
     HEAPF64[($11_1 + 80 | 0) >> 3] = +HEAPF64[($11_1 + 80 | 0) >> 3] + +HEAPF64[((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($11_1 + 176 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[($11_1 + 64 | 0) >> 3] = +HEAPF64[($11_1 + 64 | 0) >> 3] + +HEAPF64[((HEAP32[($11_1 + 192 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$41 : {
      if (!((HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($11_1 + 204 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$41
      }
      continue label$39;
     }
     break label$39;
    };
   }
   label$42 : {
    label$43 : {
     if (!((HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$43
     }
     break label$42;
    }
    HEAPF64[($11_1 + 144 | 0) >> 3] = +(0 | 0);
    label$44 : {
     if (!(+HEAPF64[($11_1 + 64 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
      break label$44
     }
     HEAPF64[($11_1 + 144 | 0) >> 3] = +HEAPF64[($11_1 + 80 | 0) >> 3] / +HEAPF64[($11_1 + 64 | 0) >> 3];
    }
    HEAP32[($11_1 + 168 | 0) >> 2] = HEAP32[($11_1 + 128 | 0) >> 2] | 0;
    HEAP32[($11_1 + 132 | 0) >> 2] = HEAP32[($11_1 + 124 | 0) >> 2] | 0;
    label$45 : {
     label$46 : while (1) {
      if (!((HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0) <= (HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$45
      }
      HEAPF64[((HEAP32[($11_1 + 176 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 144 | 0) >> 3];
      HEAP32[($11_1 + 132 | 0) >> 2] = (HEAP32[($11_1 + 132 | 0) >> 2] | 0) + 1 | 0;
      continue label$46;
     };
    }
   }
   HEAP32[($11_1 + 128 | 0) >> 2] = (HEAP32[($11_1 + 128 | 0) >> 2] | 0) + 1 | 0;
   label$47 : {
    if (!((HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0) <= (HEAP32[(HEAP32[($11_1 + 204 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$47
    }
    continue label$36;
   }
   break label$36;
  };
  global$0 = $11_1 + 208 | 0;
  return 0 | 0;
 }
 
 function $233($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $13_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $946 = 0, $971 = 0, $989 = 0, $1014 = 0, $1032 = 0, $1050 = 0, $62_1 = 0, $955 = 0, $956 = 0, $959 = 0, $980 = 0, $981 = 0, $984 = 0, $998 = 0, $999 = 0, $1002 = 0, $1023 = 0, $1024 = 0, $1027 = 0, $1041 = 0, $1042 = 0, $1045 = 0, $1057 = 0, $1058 = 0, $1061 = 0, $3732 = 0, $3742 = 0, $3752 = 0, $3791 = 0, $3801 = 0, $3811 = 0, $3835 = 0, $3845 = 0, $3855 = 0, $3894 = 0, $3904 = 0, $3914 = 0, $3938 = 0, $3948 = 0, $3958 = 0, $3979 = 0, $3989 = 0, $3999 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $13_1 = global$0 - 1104 | 0;
  global$0 = $13_1;
  HEAP32[($13_1 + 1100 | 0) >> 2] = $0_1;
  HEAP32[($13_1 + 1096 | 0) >> 2] = $1_1;
  HEAP32[($13_1 + 1092 | 0) >> 2] = $2_1;
  HEAP32[($13_1 + 1088 | 0) >> 2] = $3_1;
  HEAP32[($13_1 + 1084 | 0) >> 2] = $4_1;
  HEAP32[($13_1 + 1080 | 0) >> 2] = $5_1;
  HEAP32[($13_1 + 1076 | 0) >> 2] = $6_1;
  HEAP32[($13_1 + 1072 | 0) >> 2] = $7_1;
  HEAP32[($13_1 + 1068 | 0) >> 2] = $8_1;
  HEAP32[($13_1 + 1064 | 0) >> 2] = $9_1;
  HEAP32[($13_1 + 1060 | 0) >> 2] = $10_1;
  HEAPF64[($13_1 + 928 | 0) >> 3] = .95;
  $868($13_1 + 720 | 0 | 0, global$3 + 8672 | 0 | 0, 144 | 0) | 0;
  $868($13_1 + 576 | 0 | 0, global$3 + 8816 | 0 | 0, 144 | 0) | 0;
  $868($13_1 + 432 | 0 | 0, global$3 + 8960 | 0 | 0, 144 | 0) | 0;
  $868($13_1 + 288 | 0 | 0, global$3 + 9104 | 0 | 0, 144 | 0) | 0;
  $868($13_1 + 144 | 0 | 0, global$3 + 9248 | 0 | 0, 144 | 0) | 0;
  $868($13_1 | 0, global$3 + 9392 | 0 | 0, 144 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($13_1 + 1088 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    $62_1 = 1;
    break label$1;
   }
   $62_1 = HEAP32[(HEAP32[($13_1 + 1088 | 0) >> 2] | 0) >> 2] | 0;
  }
  HEAP32[($13_1 + 1056 | 0) >> 2] = $62_1;
  HEAP32[($13_1 + 1052 | 0) >> 2] = HEAP32[($13_1 + 1056 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[($13_1 + 1052 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$3
   }
   $875(global$3 + 7333 | 0 | 0, 0 | 0) | 0;
   fimport$0(-1 | 0);
   abort();
  }
  HEAP32[($13_1 + 1056 | 0) >> 2] = (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($13_1 + 1048 | 0) >> 2] = (HEAP32[($13_1 + 1096 | 0) >> 2] | 0) - 1 | 0;
  HEAP32[($13_1 + 1044 | 0) >> 2] = ((HEAP32[($13_1 + 1048 | 0) >> 2] | 0) - (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) | 0) + 1 | 0;
  (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 1048 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 1e3 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0, HEAP32[($13_1 + 1056 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 996 | 0) >> 2] = wasm2js_i32$1;
  $222(HEAP32[($13_1 + 1100 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1096 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($13_1 + 1e3 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($13_1 + 1040 | 0) >> 2] = 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($13_1 + 1040 | 0) >> 2] | 0 | 0) < (HEAP32[($13_1 + 1056 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($13_1 + 1036 | 0) >> 2] = 0;
    label$6 : {
     label$7 : while (1) {
      if (!((HEAP32[($13_1 + 1036 | 0) >> 2] | 0 | 0) < (HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAPF64[((HEAP32[($13_1 + 996 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($13_1 + 1040 | 0) >> 2] | 0, HEAP32[($13_1 + 1044 | 0) >> 2] | 0) + (HEAP32[($13_1 + 1036 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 1e3 | 0) >> 2] | 0) + (((((HEAP32[($13_1 + 1056 | 0) >> 2] | 0) + (HEAP32[($13_1 + 1036 | 0) >> 2] | 0) | 0) - (HEAP32[($13_1 + 1040 | 0) >> 2] | 0) | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($13_1 + 1036 | 0) >> 2] = (HEAP32[($13_1 + 1036 | 0) >> 2] | 0) + 1 | 0;
      continue label$7;
     };
    }
    HEAP32[($13_1 + 1040 | 0) >> 2] = (HEAP32[($13_1 + 1040 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  HEAP32[($13_1 + 992 | 0) >> 2] = HEAP32[($13_1 + 996 | 0) >> 2] | 0;
  HEAP32[($13_1 + 988 | 0) >> 2] = (HEAP32[($13_1 + 1100 | 0) >> 2] | 0) + (((HEAP32[($13_1 + 1056 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
  (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 984 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 964 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($13_1 + 1040 | 0) >> 2] = (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) - 1 | 0;
  label$8 : {
   label$9 : while (1) {
    if (!((HEAP32[($13_1 + 1040 | 0) >> 2] | 0 | 0) < (HEAP32[($13_1 + 1048 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAPF64[((HEAP32[($13_1 + 984 | 0) >> 2] | 0) + ((((HEAP32[($13_1 + 1040 | 0) >> 2] | 0) - (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) | 0) + 1 | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($13_1 + 1040 | 0) >> 2] | 0) + 1 | 0 | 0);
    HEAP32[($13_1 + 1040 | 0) >> 2] = (HEAP32[($13_1 + 1040 | 0) >> 2] | 0) + 1 | 0;
    continue label$9;
   };
  }
  label$10 : {
   label$11 : {
    if (!((HEAP32[($13_1 + 1056 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
     break label$11
    }
    label$12 : {
     if (!($739(HEAP32[($13_1 + 1084 | 0) >> 2] | 0 | 0, global$3 + 2688 | 0 | 0) | 0)) {
      break label$12
     }
     (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 1056 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 980 | 0) >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0, (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) + 1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 972 | 0) >> 2] = wasm2js_i32$1;
     HEAP32[($13_1 + 1040 | 0) >> 2] = 0;
     label$13 : {
      label$14 : while (1) {
       if (!((HEAP32[($13_1 + 1040 | 0) >> 2] | 0 | 0) < (HEAP32[($13_1 + 1056 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$13
       }
       HEAPF64[((HEAP32[($13_1 + 980 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1040 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = nan;
       HEAP32[($13_1 + 1040 | 0) >> 2] = (HEAP32[($13_1 + 1040 | 0) >> 2] | 0) + 1 | 0;
       continue label$14;
      };
     }
     HEAP32[($13_1 + 1040 | 0) >> 2] = 1;
     label$15 : {
      label$16 : while (1) {
       if (!((HEAP32[($13_1 + 1040 | 0) >> 2] | 0 | 0) < (HEAP32[($13_1 + 1056 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       HEAP32[($13_1 + 1032 | 0) >> 2] = Math_imul(HEAP32[($13_1 + 1040 | 0) >> 2] | 0, HEAP32[($13_1 + 1044 | 0) >> 2] | 0);
       $868(HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 988 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
       label$17 : {
        label$18 : {
         if ($739(HEAP32[($13_1 + 1092 | 0) >> 2] | 0 | 0, global$3 + 2566 | 0 | 0) | 0) {
          break label$18
         }
         HEAP32[($13_1 + 1028 | 0) >> 2] = (HEAP32[($13_1 + 1040 | 0) >> 2] | 0) + 1 | 0;
         (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 1028 | 0) >> 2] | 0) << 3 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 968 | 0) >> 2] = wasm2js_i32$1;
         (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 952 | 0) >> 2] = wasm2js_i32$1;
         $181(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, 0 | 0);
         $868((HEAP32[($13_1 + 972 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($13_1 + 996 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($13_1 + 1032 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
         $182(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 992 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 928 | 0) >> 3]));
         break label$17;
        }
        label$19 : {
         label$20 : {
          if ($739(HEAP32[($13_1 + 1092 | 0) >> 2] | 0 | 0, global$3 + 1255 | 0 | 0) | 0) {
           break label$20
          }
          HEAP32[($13_1 + 1028 | 0) >> 2] = (HEAP32[($13_1 + 1040 | 0) >> 2] | 0) + 2 | 0;
          (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 1028 | 0) >> 2] | 0) << 3 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 968 | 0) >> 2] = wasm2js_i32$1;
          (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 952 | 0) >> 2] = wasm2js_i32$1;
          $181(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, 1 | 0);
          $868((HEAP32[($13_1 + 972 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($13_1 + 996 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($13_1 + 1032 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
          $182(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 992 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 928 | 0) >> 3]));
          break label$19;
         }
         label$21 : {
          label$22 : {
           if ($739(HEAP32[($13_1 + 1092 | 0) >> 2] | 0 | 0, global$3 + 2677 | 0 | 0) | 0) {
            break label$22
           }
           HEAP32[($13_1 + 1028 | 0) >> 2] = (HEAP32[($13_1 + 1040 | 0) >> 2] | 0) + 3 | 0;
           (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 1028 | 0) >> 2] | 0) << 3 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 968 | 0) >> 2] = wasm2js_i32$1;
           (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 952 | 0) >> 2] = wasm2js_i32$1;
           $181(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, 1 | 0);
           $868((HEAP32[($13_1 + 972 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($13_1 + 984 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
           $868((HEAP32[($13_1 + 972 | 0) >> 2] | 0) + (((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($13_1 + 996 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($13_1 + 1032 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
           $182(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 992 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 928 | 0) >> 3]));
           break label$21;
          }
          $875(global$3 + 5319 | 0 | 0, 0 | 0) | 0;
          fimport$0(-1 | 0);
          abort();
         }
        }
       }
       label$23 : {
        label$24 : {
         if ($739(HEAP32[($13_1 + 1084 | 0) >> 2] | 0 | 0, global$3 + 2763 | 0 | 0) | 0) {
          break label$24
         }
         HEAPF64[((HEAP32[($13_1 + 980 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1040 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 152 | 0) >> 3];
         break label$23;
        }
        label$25 : {
         if ($739(HEAP32[($13_1 + 1084 | 0) >> 2] | 0 | 0, global$3 + 2759 | 0 | 0) | 0) {
          break label$25
         }
         HEAPF64[((HEAP32[($13_1 + 980 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1040 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 160 | 0) >> 3];
        }
       }
       $184(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0);
       HEAP32[($13_1 + 1040 | 0) >> 2] = (HEAP32[($13_1 + 1040 | 0) >> 2] | 0) + 1 | 0;
       continue label$16;
      };
     }
     HEAPF64[($13_1 + 920 | 0) >> 3] = 1797693134862315708145274.0e284;
     HEAP32[($13_1 + 1024 | 0) >> 2] = 0;
     HEAP32[($13_1 + 1040 | 0) >> 2] = 1;
     label$26 : {
      label$27 : while (1) {
       if (!((HEAP32[($13_1 + 1040 | 0) >> 2] | 0 | 0) < (HEAP32[($13_1 + 1056 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$26
       }
       label$28 : {
        if (!(+HEAPF64[((HEAP32[($13_1 + 980 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1040 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +HEAPF64[($13_1 + 920 | 0) >> 3] & 1 | 0)) {
         break label$28
        }
        HEAPF64[($13_1 + 920 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 980 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1040 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        HEAP32[($13_1 + 1024 | 0) >> 2] = HEAP32[($13_1 + 1040 | 0) >> 2] | 0;
       }
       HEAP32[($13_1 + 1040 | 0) >> 2] = (HEAP32[($13_1 + 1040 | 0) >> 2] | 0) + 1 | 0;
       continue label$27;
      };
     }
     HEAP32[($13_1 + 1056 | 0) >> 2] = (HEAP32[($13_1 + 1024 | 0) >> 2] | 0) + 1 | 0;
     $863(HEAP32[($13_1 + 980 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0);
     $863(HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0);
    }
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0, (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) + 1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 972 | 0) >> 2] = wasm2js_i32$1;
    $868(HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 988 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    HEAP32[($13_1 + 1032 | 0) >> 2] = Math_imul((HEAP32[($13_1 + 1056 | 0) >> 2] | 0) - 1 | 0, HEAP32[($13_1 + 1044 | 0) >> 2] | 0);
    label$29 : {
     label$30 : {
      if ($739(HEAP32[($13_1 + 1092 | 0) >> 2] | 0 | 0, global$3 + 2566 | 0 | 0) | 0) {
       break label$30
      }
      HEAP32[($13_1 + 1028 | 0) >> 2] = HEAP32[($13_1 + 1056 | 0) >> 2] | 0;
      (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 1028 | 0) >> 2] | 0) << 3 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 968 | 0) >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 952 | 0) >> 2] = wasm2js_i32$1;
      $181(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, 0 | 0);
      $868((HEAP32[($13_1 + 972 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($13_1 + 996 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($13_1 + 1032 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
      $182(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 992 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 928 | 0) >> 3]));
      HEAPF64[($13_1 + 912 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 176 | 0) >> 3] / +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 200 | 0) >> 3];
      HEAPF64[(HEAP32[($13_1 + 1064 | 0) >> 2] | 0) >> 3] = +HEAPF64[($13_1 + 912 | 0) >> 3];
      HEAP32[(HEAP32[($13_1 + 1060 | 0) >> 2] | 0) >> 2] = 1;
      break label$29;
     }
     label$31 : {
      label$32 : {
       if ($739(HEAP32[($13_1 + 1092 | 0) >> 2] | 0 | 0, global$3 + 1255 | 0 | 0) | 0) {
        break label$32
       }
       HEAP32[($13_1 + 1028 | 0) >> 2] = (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) + 1 | 0;
       (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 1028 | 0) >> 2] | 0) << 3 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 968 | 0) >> 2] = wasm2js_i32$1;
       (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 952 | 0) >> 2] = wasm2js_i32$1;
       $181(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, 1 | 0);
       $868((HEAP32[($13_1 + 972 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($13_1 + 996 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($13_1 + 1032 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
       $182(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 992 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 928 | 0) >> 3]));
       HEAPF64[($13_1 + 912 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 208 | 0) >> 3] / +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 232 | 0) >> 3];
       HEAPF64[($13_1 + 904 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 112 | 0) >> 3] / +(HEAP32[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0 | 0);
       (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0, (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) - 1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 960 | 0) >> 2] = wasm2js_i32$1;
       $868(HEAP32[($13_1 + 960 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 996 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, Math_imul((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0, (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) - 1 | 0) | 0) | 0;
       HEAP32[($13_1 + 1020 | 0) >> 2] = (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) - 1 | 0;
       (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1020 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 948 | 0) >> 2] = wasm2js_i32$1;
       $181(HEAP32[($13_1 + 948 | 0) >> 2] | 0 | 0, 0 | 0);
       $182(HEAP32[($13_1 + 948 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 960 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 992 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 928 | 0) >> 3]));
       HEAPF64[($13_1 + 896 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 948 | 0) >> 2] | 0) + 112 | 0) >> 3] - +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 112 | 0) >> 3];
       HEAPF64[($13_1 + 888 | 0) >> 3] = +((HEAP32[((HEAP32[($13_1 + 948 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0) | 0 | 0);
       HEAPF64[($13_1 + 880 | 0) >> 3] = +HEAPF64[($13_1 + 896 | 0) >> 3] / +HEAPF64[($13_1 + 888 | 0) >> 3] / +HEAPF64[($13_1 + 904 | 0) >> 3];
       HEAPF64[(HEAP32[($13_1 + 1064 | 0) >> 2] | 0) >> 3] = +HEAPF64[($13_1 + 912 | 0) >> 3];
       HEAPF64[((HEAP32[($13_1 + 1064 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($13_1 + 880 | 0) >> 3];
       HEAP32[(HEAP32[($13_1 + 1060 | 0) >> 2] | 0) >> 2] = 2;
       $863(HEAP32[($13_1 + 960 | 0) >> 2] | 0 | 0);
       $863(HEAP32[($13_1 + 948 | 0) >> 2] | 0 | 0);
       break label$31;
      }
      label$33 : {
       label$34 : {
        if ($739(HEAP32[($13_1 + 1092 | 0) >> 2] | 0 | 0, global$3 + 2677 | 0 | 0) | 0) {
         break label$34
        }
        HEAP32[($13_1 + 1028 | 0) >> 2] = (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) + 2 | 0;
        (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 1028 | 0) >> 2] | 0) << 3 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 968 | 0) >> 2] = wasm2js_i32$1;
        (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 952 | 0) >> 2] = wasm2js_i32$1;
        $181(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, 1 | 0);
        $868((HEAP32[($13_1 + 972 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($13_1 + 984 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
        $868((HEAP32[($13_1 + 972 | 0) >> 2] | 0) + (((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 1 | 0) << 3 | 0) | 0 | 0, (HEAP32[($13_1 + 996 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[($13_1 + 1032 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
        $182(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 992 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 928 | 0) >> 3]));
        HEAPF64[($13_1 + 912 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 208 | 0) >> 3] / +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 232 | 0) >> 3];
        HEAPF64[($13_1 + 904 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 112 | 0) >> 3] / +(HEAP32[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0 | 0);
        (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0, (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) - 1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 960 | 0) >> 2] = wasm2js_i32$1;
        $868(HEAP32[($13_1 + 960 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 996 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, Math_imul((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0, (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) - 1 | 0) | 0) | 0;
        HEAP32[($13_1 + 1016 | 0) >> 2] = (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) - 1 | 0;
        (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1016 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 944 | 0) >> 2] = wasm2js_i32$1;
        $181(HEAP32[($13_1 + 944 | 0) >> 2] | 0 | 0, 0 | 0);
        $182(HEAP32[($13_1 + 944 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 960 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 992 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 928 | 0) >> 3]));
        HEAPF64[($13_1 + 896 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 944 | 0) >> 2] | 0) + 112 | 0) >> 3] - +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 112 | 0) >> 3];
        HEAPF64[($13_1 + 888 | 0) >> 3] = +((HEAP32[((HEAP32[($13_1 + 944 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0) | 0 | 0);
        HEAPF64[($13_1 + 872 | 0) >> 3] = +HEAPF64[($13_1 + 896 | 0) >> 3] / +HEAPF64[($13_1 + 888 | 0) >> 3] / +HEAPF64[($13_1 + 904 | 0) >> 3];
        $863(HEAP32[($13_1 + 960 | 0) >> 2] | 0 | 0);
        $863(HEAP32[($13_1 + 944 | 0) >> 2] | 0 | 0);
        (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0, (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) - 1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 956 | 0) >> 2] = wasm2js_i32$1;
        $868(HEAP32[($13_1 + 956 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 996 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, Math_imul((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0, (HEAP32[($13_1 + 1056 | 0) >> 2] | 0) - 1 | 0) | 0) | 0;
        HEAP32[($13_1 + 1012 | 0) >> 2] = HEAP32[($13_1 + 1056 | 0) >> 2] | 0;
        (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1012 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 940 | 0) >> 2] = wasm2js_i32$1;
        $181(HEAP32[($13_1 + 940 | 0) >> 2] | 0 | 0, 1 | 0);
        $182(HEAP32[($13_1 + 940 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 956 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 992 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 928 | 0) >> 3]));
        HEAPF64[($13_1 + 896 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 940 | 0) >> 2] | 0) + 112 | 0) >> 3] - +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 112 | 0) >> 3];
        HEAPF64[($13_1 + 888 | 0) >> 3] = +((HEAP32[((HEAP32[($13_1 + 940 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0) | 0 | 0);
        HEAPF64[($13_1 + 864 | 0) >> 3] = +HEAPF64[($13_1 + 896 | 0) >> 3] / +HEAPF64[($13_1 + 888 | 0) >> 3] / +HEAPF64[($13_1 + 904 | 0) >> 3];
        HEAPF64[(HEAP32[($13_1 + 1064 | 0) >> 2] | 0) >> 3] = +HEAPF64[($13_1 + 912 | 0) >> 3];
        HEAPF64[((HEAP32[($13_1 + 1064 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($13_1 + 872 | 0) >> 3];
        HEAPF64[((HEAP32[($13_1 + 1064 | 0) >> 2] | 0) + 16 | 0) >> 3] = +HEAPF64[($13_1 + 864 | 0) >> 3];
        HEAP32[(HEAP32[($13_1 + 1060 | 0) >> 2] | 0) >> 2] = 3;
        $863(HEAP32[($13_1 + 956 | 0) >> 2] | 0 | 0);
        $863(HEAP32[($13_1 + 940 | 0) >> 2] | 0 | 0);
        break label$33;
       }
       $875(global$3 + 5319 | 0 | 0, 0 | 0) | 0;
       fimport$0(-1 | 0);
       abort();
      }
     }
    }
    $863(HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0);
    break label$10;
   }
   (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 4 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 972 | 0) >> 2] = wasm2js_i32$1;
   label$35 : {
    label$36 : {
     if ($739(HEAP32[($13_1 + 1092 | 0) >> 2] | 0 | 0, global$3 + 2566 | 0 | 0) | 0) {
      break label$36
     }
     HEAP32[($13_1 + 1028 | 0) >> 2] = 1;
     (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 1028 | 0) >> 2] | 0) << 3 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 968 | 0) >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 952 | 0) >> 2] = wasm2js_i32$1;
     $181(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, 0 | 0);
     $868(HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 988 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
     $182(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 992 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 928 | 0) >> 3]));
     HEAPF64[($13_1 + 912 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 176 | 0) >> 3] / +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 200 | 0) >> 3];
     HEAPF64[(HEAP32[($13_1 + 1064 | 0) >> 2] | 0) >> 3] = +HEAPF64[($13_1 + 912 | 0) >> 3];
     HEAP32[(HEAP32[($13_1 + 1060 | 0) >> 2] | 0) >> 2] = 1;
     break label$35;
    }
    label$37 : {
     label$38 : {
      if ($739(HEAP32[($13_1 + 1092 | 0) >> 2] | 0 | 0, global$3 + 1255 | 0 | 0) | 0) {
       break label$38
      }
      HEAP32[($13_1 + 1028 | 0) >> 2] = 2;
      (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 1028 | 0) >> 2] | 0) << 3 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 968 | 0) >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 952 | 0) >> 2] = wasm2js_i32$1;
      $181(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, 1 | 0);
      $868(HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 988 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
      $182(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 992 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 928 | 0) >> 3]));
      HEAPF64[($13_1 + 912 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 208 | 0) >> 3] / +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 232 | 0) >> 3];
      HEAPF64[($13_1 + 904 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 112 | 0) >> 3] / +(HEAP32[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0 | 0);
      HEAP32[($13_1 + 1020 | 0) >> 2] = 0;
      (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1020 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 948 | 0) >> 2] = wasm2js_i32$1;
      $182(HEAP32[($13_1 + 948 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($13_1 + 992 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 928 | 0) >> 3]));
      HEAPF64[($13_1 + 896 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 948 | 0) >> 2] | 0) + 112 | 0) >> 3] - +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 112 | 0) >> 3];
      HEAPF64[($13_1 + 888 | 0) >> 3] = +((HEAP32[((HEAP32[($13_1 + 948 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0) | 0 | 0);
      HEAPF64[($13_1 + 880 | 0) >> 3] = +HEAPF64[($13_1 + 896 | 0) >> 3] / +HEAPF64[($13_1 + 888 | 0) >> 3] / +HEAPF64[($13_1 + 904 | 0) >> 3];
      HEAPF64[(HEAP32[($13_1 + 1064 | 0) >> 2] | 0) >> 3] = +HEAPF64[($13_1 + 912 | 0) >> 3];
      HEAPF64[((HEAP32[($13_1 + 1064 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($13_1 + 880 | 0) >> 3];
      HEAP32[(HEAP32[($13_1 + 1060 | 0) >> 2] | 0) >> 2] = 2;
      $863(HEAP32[($13_1 + 948 | 0) >> 2] | 0 | 0);
      break label$37;
     }
     label$39 : {
      if ($739(HEAP32[($13_1 + 1092 | 0) >> 2] | 0 | 0, global$3 + 2677 | 0 | 0) | 0) {
       break label$39
      }
      HEAP32[($13_1 + 1028 | 0) >> 2] = 3;
      (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 1028 | 0) >> 2] | 0) << 3 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 968 | 0) >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1028 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 952 | 0) >> 2] = wasm2js_i32$1;
      $181(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, 1 | 0);
      $868(HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 988 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
      $868((HEAP32[($13_1 + 972 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($13_1 + 984 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 1044 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
      $182(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 992 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 928 | 0) >> 3]));
      HEAPF64[($13_1 + 912 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 208 | 0) >> 3] / +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 232 | 0) >> 3];
      HEAPF64[($13_1 + 904 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 112 | 0) >> 3] / +(HEAP32[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0 | 0);
      HEAP32[($13_1 + 1016 | 0) >> 2] = 0;
      (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1016 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 944 | 0) >> 2] = wasm2js_i32$1;
      $182(HEAP32[($13_1 + 944 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($13_1 + 992 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 928 | 0) >> 3]));
      HEAPF64[($13_1 + 896 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 944 | 0) >> 2] | 0) + 112 | 0) >> 3] - +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 112 | 0) >> 3];
      HEAPF64[($13_1 + 888 | 0) >> 3] = +((HEAP32[((HEAP32[($13_1 + 944 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0) | 0 | 0);
      HEAPF64[($13_1 + 872 | 0) >> 3] = +HEAPF64[($13_1 + 896 | 0) >> 3] / +HEAPF64[($13_1 + 888 | 0) >> 3] / +HEAPF64[($13_1 + 904 | 0) >> 3];
      $863(HEAP32[($13_1 + 944 | 0) >> 2] | 0 | 0);
      HEAP32[($13_1 + 1012 | 0) >> 2] = 1;
      (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 1044 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 1012 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 940 | 0) >> 2] = wasm2js_i32$1;
      $181(HEAP32[($13_1 + 940 | 0) >> 2] | 0 | 0, 1 | 0);
      $182(HEAP32[($13_1 + 940 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($13_1 + 992 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 928 | 0) >> 3]));
      HEAPF64[($13_1 + 896 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 940 | 0) >> 2] | 0) + 112 | 0) >> 3] - +HEAPF64[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 112 | 0) >> 3];
      HEAPF64[($13_1 + 888 | 0) >> 3] = +((HEAP32[((HEAP32[($13_1 + 940 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($13_1 + 952 | 0) >> 2] | 0) + 124 | 0) >> 2] | 0) | 0 | 0);
      HEAPF64[($13_1 + 864 | 0) >> 3] = +HEAPF64[($13_1 + 896 | 0) >> 3] / +HEAPF64[($13_1 + 888 | 0) >> 3] / +HEAPF64[($13_1 + 904 | 0) >> 3];
      HEAPF64[(HEAP32[($13_1 + 1064 | 0) >> 2] | 0) >> 3] = +HEAPF64[($13_1 + 912 | 0) >> 3];
      HEAPF64[((HEAP32[($13_1 + 1064 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($13_1 + 872 | 0) >> 3];
      HEAPF64[((HEAP32[($13_1 + 1064 | 0) >> 2] | 0) + 16 | 0) >> 3] = +HEAPF64[($13_1 + 864 | 0) >> 3];
      HEAP32[(HEAP32[($13_1 + 1060 | 0) >> 2] | 0) >> 2] = 3;
      $863(HEAP32[($13_1 + 940 | 0) >> 2] | 0 | 0);
     }
    }
   }
   $863(HEAP32[($13_1 + 972 | 0) >> 2] | 0 | 0);
   $863(HEAP32[($13_1 + 968 | 0) >> 2] | 0 | 0);
  }
  label$40 : {
   label$41 : {
    if (!((HEAP32[($13_1 + 1048 | 0) >> 2] | 0 | 0) < (25 | 0) & 1 | 0)) {
     break label$41
    }
    HEAP32[($13_1 + 1008 | 0) >> 2] = 1;
    break label$40;
   }
   label$42 : {
    label$43 : {
     if (!((HEAP32[($13_1 + 1048 | 0) >> 2] | 0 | 0) < (50 | 0) & 1 | 0)) {
      break label$43
     }
     HEAP32[($13_1 + 1008 | 0) >> 2] = 2;
     break label$42;
    }
    label$44 : {
     label$45 : {
      if (!((HEAP32[($13_1 + 1048 | 0) >> 2] | 0 | 0) < (100 | 0) & 1 | 0)) {
       break label$45
      }
      HEAP32[($13_1 + 1008 | 0) >> 2] = 3;
      break label$44;
     }
     label$46 : {
      label$47 : {
       if (!((HEAP32[($13_1 + 1048 | 0) >> 2] | 0 | 0) < (250 | 0) & 1 | 0)) {
        break label$47
       }
       HEAP32[($13_1 + 1008 | 0) >> 2] = 4;
       break label$46;
      }
      label$48 : {
       label$49 : {
        if (!((HEAP32[($13_1 + 1048 | 0) >> 2] | 0 | 0) < (500 | 0) & 1 | 0)) {
         break label$49
        }
        HEAP32[($13_1 + 1008 | 0) >> 2] = 5;
        break label$48;
       }
       HEAP32[($13_1 + 1008 | 0) >> 2] = 6;
      }
     }
    }
   }
  }
  HEAP32[($13_1 + 1004 | 0) >> 2] = (HEAP32[($13_1 + 1008 | 0) >> 2] | 0) - 1 | 0;
  label$50 : {
   label$51 : {
    if ($739(HEAP32[($13_1 + 1092 | 0) >> 2] | 0 | 0, global$3 + 2566 | 0 | 0) | 0) {
     break label$51
    }
    $946 = HEAP32[($13_1 + 1080 | 0) >> 2] | 0;
    $955 = ($13_1 + 720 | 0) + (Math_imul(HEAP32[($13_1 + 1004 | 0) >> 2] | 0, 3) << 3 | 0) | 0;
    i64toi32_i32$2 = $955;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $3732 = i64toi32_i32$0;
    i64toi32_i32$0 = $946;
    HEAP32[i64toi32_i32$0 >> 2] = $3732;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $956 = 16;
    i64toi32_i32$2 = i64toi32_i32$2 + $956 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $3742 = i64toi32_i32$1;
    i64toi32_i32$1 = $946 + $956 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $3742;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $959 = 8;
    i64toi32_i32$2 = $955 + $959 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $3752 = i64toi32_i32$0;
    i64toi32_i32$0 = $946 + $959 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $3752;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(HEAP32[($13_1 + 1076 | 0) >> 2] | 0) >> 2] = 1;
    HEAP32[(HEAP32[($13_1 + 1072 | 0) >> 2] | 0) >> 2] = 3;
    break label$50;
   }
   label$52 : {
    label$53 : {
     if ($739(HEAP32[($13_1 + 1092 | 0) >> 2] | 0 | 0, global$3 + 1255 | 0 | 0) | 0) {
      break label$53
     }
     $971 = HEAP32[($13_1 + 1080 | 0) >> 2] | 0;
     $980 = ($13_1 + 576 | 0) + (Math_imul(HEAP32[($13_1 + 1004 | 0) >> 2] | 0, 3) << 3 | 0) | 0;
     i64toi32_i32$2 = $980;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3791 = i64toi32_i32$1;
     i64toi32_i32$1 = $971;
     HEAP32[i64toi32_i32$1 >> 2] = $3791;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $981 = 16;
     i64toi32_i32$2 = i64toi32_i32$2 + $981 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3801 = i64toi32_i32$0;
     i64toi32_i32$0 = $971 + $981 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $3801;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $984 = 8;
     i64toi32_i32$2 = $980 + $984 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3811 = i64toi32_i32$1;
     i64toi32_i32$1 = $971 + $984 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $3811;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $989 = (HEAP32[($13_1 + 1080 | 0) >> 2] | 0) + 24 | 0;
     $998 = ($13_1 + 288 | 0) + (Math_imul(HEAP32[($13_1 + 1004 | 0) >> 2] | 0, 3) << 3 | 0) | 0;
     i64toi32_i32$2 = $998;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3835 = i64toi32_i32$0;
     i64toi32_i32$0 = $989;
     HEAP32[i64toi32_i32$0 >> 2] = $3835;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $999 = 16;
     i64toi32_i32$2 = i64toi32_i32$2 + $999 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3845 = i64toi32_i32$1;
     i64toi32_i32$1 = $989 + $999 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $3845;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $1002 = 8;
     i64toi32_i32$2 = $998 + $1002 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3855 = i64toi32_i32$0;
     i64toi32_i32$0 = $989 + $1002 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $3855;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[(HEAP32[($13_1 + 1076 | 0) >> 2] | 0) >> 2] = 2;
     HEAP32[(HEAP32[($13_1 + 1072 | 0) >> 2] | 0) >> 2] = 3;
     break label$52;
    }
    label$54 : {
     if ($739(HEAP32[($13_1 + 1092 | 0) >> 2] | 0 | 0, global$3 + 2677 | 0 | 0) | 0) {
      break label$54
     }
     $1014 = HEAP32[($13_1 + 1080 | 0) >> 2] | 0;
     $1023 = ($13_1 + 432 | 0) + (Math_imul(HEAP32[($13_1 + 1004 | 0) >> 2] | 0, 3) << 3 | 0) | 0;
     i64toi32_i32$2 = $1023;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3894 = i64toi32_i32$1;
     i64toi32_i32$1 = $1014;
     HEAP32[i64toi32_i32$1 >> 2] = $3894;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $1024 = 16;
     i64toi32_i32$2 = i64toi32_i32$2 + $1024 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3904 = i64toi32_i32$0;
     i64toi32_i32$0 = $1014 + $1024 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $3904;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $1027 = 8;
     i64toi32_i32$2 = $1023 + $1027 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3914 = i64toi32_i32$1;
     i64toi32_i32$1 = $1014 + $1027 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $3914;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $1032 = (HEAP32[($13_1 + 1080 | 0) >> 2] | 0) + 24 | 0;
     $1041 = ($13_1 + 144 | 0) + (Math_imul(HEAP32[($13_1 + 1004 | 0) >> 2] | 0, 3) << 3 | 0) | 0;
     i64toi32_i32$2 = $1041;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3938 = i64toi32_i32$0;
     i64toi32_i32$0 = $1032;
     HEAP32[i64toi32_i32$0 >> 2] = $3938;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $1042 = 16;
     i64toi32_i32$2 = i64toi32_i32$2 + $1042 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3948 = i64toi32_i32$1;
     i64toi32_i32$1 = $1032 + $1042 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $3948;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $1045 = 8;
     i64toi32_i32$2 = $1041 + $1045 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3958 = i64toi32_i32$0;
     i64toi32_i32$0 = $1032 + $1045 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $3958;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $1050 = (HEAP32[($13_1 + 1080 | 0) >> 2] | 0) + 48 | 0;
     $1057 = $13_1 + (Math_imul(HEAP32[($13_1 + 1004 | 0) >> 2] | 0, 3) << 3 | 0) | 0;
     i64toi32_i32$2 = $1057;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3979 = i64toi32_i32$1;
     i64toi32_i32$1 = $1050;
     HEAP32[i64toi32_i32$1 >> 2] = $3979;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $1058 = 16;
     i64toi32_i32$2 = i64toi32_i32$2 + $1058 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3989 = i64toi32_i32$0;
     i64toi32_i32$0 = $1050 + $1058 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $3989;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $1061 = 8;
     i64toi32_i32$2 = $1057 + $1061 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3999 = i64toi32_i32$1;
     i64toi32_i32$1 = $1050 + $1061 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $3999;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[(HEAP32[($13_1 + 1076 | 0) >> 2] | 0) >> 2] = 3;
     HEAP32[(HEAP32[($13_1 + 1072 | 0) >> 2] | 0) >> 2] = 3;
    }
   }
  }
  HEAPF64[(HEAP32[($13_1 + 1068 | 0) >> 2] | 0) >> 3] = .01;
  HEAPF64[((HEAP32[($13_1 + 1068 | 0) >> 2] | 0) + 8 | 0) >> 3] = .05;
  HEAPF64[((HEAP32[($13_1 + 1068 | 0) >> 2] | 0) + 16 | 0) >> 3] = .1;
  $863(HEAP32[($13_1 + 996 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($13_1 + 1e3 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($13_1 + 984 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($13_1 + 964 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($13_1 + 952 | 0) >> 2] | 0 | 0);
  global$0 = $13_1 + 1104 | 0;
  return;
 }
 
 function $234($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $13_1 = 0, $14_1 = 0, $17_1 = 0, $20_1 = 0, $264_1 = 0.0, $160_1 = 0, $273_1 = 0.0, $167_1 = 0, $308_1 = 0, $318_1 = 0, $328_1 = 0, $338_1 = 0, $280_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $9_1 = global$0 - 144 | 0;
  global$0 = $9_1;
  HEAP32[($9_1 + 140 | 0) >> 2] = $0_1;
  HEAP32[($9_1 + 136 | 0) >> 2] = $1_1;
  HEAP32[($9_1 + 132 | 0) >> 2] = $2_1;
  HEAP32[($9_1 + 128 | 0) >> 2] = $3_1;
  HEAP32[($9_1 + 124 | 0) >> 2] = $4_1;
  HEAP32[($9_1 + 120 | 0) >> 2] = $5_1;
  HEAP32[($9_1 + 116 | 0) >> 2] = $6_1;
  $13_1 = global$3 + 9536 | 0;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $308_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $9_1;
  HEAP32[$9_1 >> 2] = $308_1;
  HEAP32[($9_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $14_1 = 24;
  i64toi32_i32$2 = i64toi32_i32$2 + $14_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $318_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $9_1 + $14_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $318_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $17_1 = 16;
  i64toi32_i32$2 = $13_1 + $17_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $328_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $9_1 + $17_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $328_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $20_1 = 8;
  i64toi32_i32$2 = $13_1 + $20_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $338_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $9_1 + $20_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $338_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 136 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 100 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 136 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 96 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862(32 | 0) | 0), HEAP32[(wasm2js_i32$0 + 92 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862((HEAP32[($9_1 + 136 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($9_1 + 112 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($9_1 + 112 | 0) >> 2] | 0 | 0) <= (HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAPF64[((HEAP32[($9_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($9_1 + 112 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($9_1 + 112 | 0) >> 2] | 0 | 0);
    HEAP32[($9_1 + 112 | 0) >> 2] = (HEAP32[($9_1 + 112 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAPF64[($9_1 + 72 | 0) >> 3] = .95;
  label$3 : {
   label$4 : {
    if ($739(HEAP32[($9_1 + 132 | 0) >> 2] | 0 | 0, global$3 + 2677 | 0 | 0) | 0) {
     break label$4
    }
    HEAPF64[(HEAP32[($9_1 + 92 | 0) >> 2] | 0) >> 3] = .216;
    HEAPF64[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 8 | 0) >> 3] = .176;
    HEAPF64[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 16 | 0) >> 3] = .146;
    HEAPF64[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 24 | 0) >> 3] = .119;
    HEAP32[($9_1 + 108 | 0) >> 2] = 2;
    (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0, HEAP32[($9_1 + 108 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $179(HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 108 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
    $182(HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0, +(+HEAPF64[($9_1 + 72 | 0) >> 3]));
    break label$3;
   }
   label$5 : {
    label$6 : {
     if ($739(HEAP32[($9_1 + 132 | 0) >> 2] | 0 | 0, global$3 + 1982 | 0 | 0) | 0) {
      break label$6
     }
     HEAPF64[(HEAP32[($9_1 + 92 | 0) >> 2] | 0) >> 3] = .739;
     HEAPF64[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 8 | 0) >> 3] = .574;
     HEAPF64[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 16 | 0) >> 3] = .463;
     HEAPF64[((HEAP32[($9_1 + 92 | 0) >> 2] | 0) + 24 | 0) >> 3] = .347;
     HEAP32[($9_1 + 108 | 0) >> 2] = 1;
     (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($9_1 + 108 | 0) >> 2] | 0) << 3 | 0, HEAP32[($9_1 + 108 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $9_1, wasm2js_i32$1 = $179(HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 108 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
     $182(HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($9_1 + 140 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0, +(+HEAPF64[($9_1 + 72 | 0) >> 3]));
     break label$5;
    }
    $875(global$3 + 6986 | 0 | 0, 0 | 0) | 0;
    fimport$0(-1 | 0);
    abort();
   }
  }
  $228(HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0);
  HEAPF64[($9_1 + 56 | 0) >> 3] = +(0 | 0);
  HEAPF64[($9_1 + 64 | 0) >> 3] = +(0 | 0);
  HEAP32[($9_1 + 112 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($9_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAPF64[($9_1 + 64 | 0) >> 3] = +HEAPF64[($9_1 + 64 | 0) >> 3] + +HEAPF64[((HEAP32[($9_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[($9_1 + 56 | 0) >> 3] = +HEAPF64[($9_1 + 56 | 0) >> 3] + +HEAPF64[((HEAP32[($9_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($9_1 + 96 | 0) >> 2] | 0) + ((HEAP32[($9_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAP32[($9_1 + 112 | 0) >> 2] = (HEAP32[($9_1 + 112 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  HEAPF64[($9_1 + 64 | 0) >> 3] = +HEAPF64[($9_1 + 64 | 0) >> 3] / +(Math_imul(HEAP32[($9_1 + 136 | 0) >> 2] | 0, HEAP32[($9_1 + 136 | 0) >> 2] | 0) | 0);
  HEAPF64[($9_1 + 56 | 0) >> 3] = +HEAPF64[($9_1 + 56 | 0) >> 3] / +(HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0);
  label$9 : {
   label$10 : {
    if (!((HEAP32[($9_1 + 128 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$10
    }
    $264_1 = 4.0 * +$734(+(+(HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0) / 100.0), +(.25));
    label$11 : {
     label$12 : {
      if (!(Math_abs($264_1) < 2147483648.0)) {
       break label$12
      }
      $160_1 = ~~$264_1;
      break label$11;
     }
     $160_1 = -2147483648;
    }
    HEAP32[($9_1 + 104 | 0) >> 2] = $160_1;
    break label$9;
   }
   $273_1 = 12.0 * +$734(+(+(HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0) / 100.0), +(.25));
   label$13 : {
    label$14 : {
     if (!(Math_abs($273_1) < 2147483648.0)) {
      break label$14
     }
     $167_1 = ~~$273_1;
     break label$13;
    }
    $167_1 = -2147483648;
   }
   HEAP32[($9_1 + 104 | 0) >> 2] = $167_1;
  }
  label$15 : {
   if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$15
   }
   if (!((HEAP32[(HEAP32[($9_1 + 124 | 0) >> 2] | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$15
   }
   HEAP32[($9_1 + 104 | 0) >> 2] = HEAP32[(HEAP32[($9_1 + 124 | 0) >> 2] | 0) >> 2] | 0;
  }
  $229(HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($9_1 + 104 | 0) >> 2] | 0 | 0, $9_1 + 56 | 0 | 0);
  HEAPF64[(HEAP32[($9_1 + 120 | 0) >> 2] | 0) >> 3] = +HEAPF64[($9_1 + 64 | 0) >> 3] / +HEAPF64[($9_1 + 56 | 0) >> 3];
  $227(HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0, 4 | 0, $9_1 + 48 | 0 | 0, $9_1 + 40 | 0 | 0);
  $280_1 = +$226(HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0, $9_1 | 0, 4 | 0, +(+HEAPF64[(HEAP32[($9_1 + 120 | 0) >> 2] | 0) >> 3]));
  HEAPF64[(HEAP32[($9_1 + 116 | 0) >> 2] | 0) >> 3] = $280_1;
  label$16 : {
   if (!((HEAP32[($9_1 + 124 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$16
   }
   HEAP32[(HEAP32[($9_1 + 124 | 0) >> 2] | 0) >> 2] = HEAP32[($9_1 + 104 | 0) >> 2] | 0;
  }
  $863(HEAP32[($9_1 + 92 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 84 | 0) >> 2] | 0 | 0);
  $863(HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0);
  $184(HEAP32[($9_1 + 36 | 0) >> 2] | 0 | 0);
  global$0 = $9_1 + 144 | 0;
  return;
 }
 
 function $235($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $13_1 = 0, $611_1 = 0.0, $32_1 = 0, $620_1 = 0.0, $39_1 = 0, $290_1 = 0, $325_1 = 0, $537_1 = 0, $572_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $13_1 = global$0 - 288 | 0;
  global$0 = $13_1;
  HEAP32[($13_1 + 284 | 0) >> 2] = $0_1;
  HEAP32[($13_1 + 280 | 0) >> 2] = $1_1;
  HEAP32[($13_1 + 276 | 0) >> 2] = $2_1;
  HEAP32[($13_1 + 272 | 0) >> 2] = $3_1;
  HEAP32[($13_1 + 268 | 0) >> 2] = $4_1;
  HEAP32[($13_1 + 264 | 0) >> 2] = $5_1;
  HEAP32[($13_1 + 260 | 0) >> 2] = $6_1;
  HEAP32[($13_1 + 256 | 0) >> 2] = $7_1;
  HEAP32[($13_1 + 252 | 0) >> 2] = $8_1;
  HEAP32[($13_1 + 248 | 0) >> 2] = $9_1;
  HEAP32[($13_1 + 244 | 0) >> 2] = $10_1;
  HEAP32[($13_1 + 200 | 0) >> 2] = (HEAP32[($13_1 + 280 | 0) >> 2] | 0) - 1 | 0;
  HEAP32[($13_1 + 240 | 0) >> 2] = (HEAP32[($13_1 + 284 | 0) >> 2] | 0) + 8 | 0;
  HEAP32[($13_1 + 236 | 0) >> 2] = HEAP32[($13_1 + 284 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($13_1 + 268 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    $611_1 = 4.0 * +$734(+(+(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) / 100.0), +(.25));
    label$3 : {
     label$4 : {
      if (!(Math_abs($611_1) < 2147483648.0)) {
       break label$4
      }
      $32_1 = ~~$611_1;
      break label$3;
     }
     $32_1 = -2147483648;
    }
    HEAP32[($13_1 + 196 | 0) >> 2] = $32_1;
    break label$1;
   }
   $620_1 = 12.0 * +$734(+(+(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) / 100.0), +(.25));
   label$5 : {
    label$6 : {
     if (!(Math_abs($620_1) < 2147483648.0)) {
      break label$6
     }
     $39_1 = ~~$620_1;
     break label$5;
    }
    $39_1 = -2147483648;
   }
   HEAP32[($13_1 + 196 | 0) >> 2] = $39_1;
  }
  label$7 : {
   if (!((HEAP32[($13_1 + 264 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$7
   }
   if (!((HEAP32[(HEAP32[($13_1 + 264 | 0) >> 2] | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$7
   }
   HEAP32[($13_1 + 196 | 0) >> 2] = HEAP32[(HEAP32[($13_1 + 264 | 0) >> 2] | 0) >> 2] | 0;
  }
  label$8 : {
   label$9 : {
    if ($739(HEAP32[($13_1 + 272 | 0) >> 2] | 0 | 0, global$3 + 2677 | 0 | 0) | 0) {
     break label$9
    }
    HEAPF64[(HEAP32[($13_1 + 260 | 0) >> 2] | 0) >> 3] = -3.9638 - 8.353 / +(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) - 47.44 / +(Math_imul(HEAP32[($13_1 + 200 | 0) >> 2] | 0, HEAP32[($13_1 + 200 | 0) >> 2] | 0) | 0);
    HEAPF64[((HEAP32[($13_1 + 260 | 0) >> 2] | 0) + 8 | 0) >> 3] = -3.4126 - 4.039 / +(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) - 17.83 / +(Math_imul(HEAP32[($13_1 + 200 | 0) >> 2] | 0, HEAP32[($13_1 + 200 | 0) >> 2] | 0) | 0);
    HEAPF64[((HEAP32[($13_1 + 260 | 0) >> 2] | 0) + 16 | 0) >> 3] = -3.1279 - 2.418 / +(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) - 7.58 / +(Math_imul(HEAP32[($13_1 + 200 | 0) >> 2] | 0, HEAP32[($13_1 + 200 | 0) >> 2] | 0) | 0);
    HEAPF64[(HEAP32[($13_1 + 256 | 0) >> 2] | 0) >> 3] = .01;
    HEAPF64[((HEAP32[($13_1 + 256 | 0) >> 2] | 0) + 8 | 0) >> 3] = .05;
    HEAPF64[((HEAP32[($13_1 + 256 | 0) >> 2] | 0) + 16 | 0) >> 3] = .1;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 200 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 232 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 200 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 216 | 0) >> 2] = wasm2js_i32$1;
    HEAPF64[($13_1 + 168 | 0) >> 3] = +(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) / 2.0;
    HEAP32[($13_1 + 192 | 0) >> 2] = 1;
    label$10 : {
     label$11 : while (1) {
      if (!((HEAP32[($13_1 + 192 | 0) >> 2] | 0 | 0) <= (HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      HEAPF64[((HEAP32[($13_1 + 232 | 0) >> 2] | 0) + (((HEAP32[($13_1 + 192 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($13_1 + 192 | 0) >> 2] | 0 | 0) - +HEAPF64[($13_1 + 168 | 0) >> 3];
      HEAPF64[((HEAP32[($13_1 + 216 | 0) >> 2] | 0) + (((HEAP32[($13_1 + 192 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($13_1 + 192 | 0) >> 2] | 0 | 0);
      HEAP32[($13_1 + 192 | 0) >> 2] = (HEAP32[($13_1 + 192 | 0) >> 2] | 0) + 1 | 0;
      continue label$11;
     };
    }
    HEAP32[($13_1 + 188 | 0) >> 2] = 3;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 188 | 0) >> 2] | 0) << 3 | 0, HEAP32[($13_1 + 188 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 224 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 200 | 0) >> 2] | 0) << 4 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 228 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 200 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 220 | 0) >> 2] = wasm2js_i32$1;
    $868(HEAP32[($13_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 236 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 200 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    $868((HEAP32[($13_1 + 228 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($13_1 + 232 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 200 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    HEAPF64[($13_1 + 160 | 0) >> 3] = .95;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 188 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
    $182(HEAP32[($13_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 240 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 224 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 160 | 0) >> 3]));
    HEAPF64[($13_1 + 152 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 4 | 0) >> 2] | 0) + 176 | 0) >> 3] / +HEAPF64[((HEAP32[($13_1 + 4 | 0) >> 2] | 0) + 200 | 0) >> 3];
    HEAPF64[($13_1 + 144 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 4 | 0) >> 2] | 0) + 240 | 0) >> 3] / +HEAPF64[((HEAP32[($13_1 + 4 | 0) >> 2] | 0) + 264 | 0) >> 3];
    HEAPF64[($13_1 + 128 | 0) >> 3] = +(0 | 0);
    HEAPF64[($13_1 + 120 | 0) >> 3] = +(0 | 0);
    HEAPF64[($13_1 + 112 | 0) >> 3] = +(0 | 0);
    HEAPF64[($13_1 + 56 | 0) >> 3] = +(0 | 0);
    HEAPF64[($13_1 + 72 | 0) >> 3] = +(0 | 0);
    (wasm2js_i32$0 = $13_1, wasm2js_f64$0 = +$208(HEAP32[($13_1 + 240 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 104 | 0) >> 3] = wasm2js_f64$0;
    HEAP32[($13_1 + 184 | 0) >> 2] = Math_imul(HEAP32[($13_1 + 200 | 0) >> 2] | 0, HEAP32[($13_1 + 200 | 0) >> 2] | 0);
    HEAP32[($13_1 + 192 | 0) >> 2] = 0;
    label$12 : {
     label$13 : while (1) {
      if (!((HEAP32[($13_1 + 192 | 0) >> 2] | 0 | 0) < (HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$12
      }
      HEAPF64[($13_1 + 128 | 0) >> 3] = +HEAPF64[($13_1 + 128 | 0) >> 3] + +HEAPF64[((HEAP32[($13_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($13_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[($13_1 + 120 | 0) >> 3] = +HEAPF64[($13_1 + 120 | 0) >> 3] + (+HEAPF64[((HEAP32[($13_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($13_1 + 104 | 0) >> 3]) * (+HEAPF64[((HEAP32[($13_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($13_1 + 104 | 0) >> 3]);
      HEAPF64[($13_1 + 112 | 0) >> 3] = +HEAPF64[($13_1 + 112 | 0) >> 3] + +HEAPF64[((HEAP32[($13_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($13_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[($13_1 + 72 | 0) >> 3] = +HEAPF64[($13_1 + 72 | 0) >> 3] + +HEAPF64[((HEAP32[($13_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($13_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[($13_1 + 56 | 0) >> 3] = +HEAPF64[($13_1 + 56 | 0) >> 3] + +HEAPF64[((HEAP32[($13_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($13_1 + 192 | 0) >> 2] = (HEAP32[($13_1 + 192 | 0) >> 2] | 0) + 1 | 0;
      continue label$13;
     };
    }
    HEAPF64[($13_1 + 136 | 0) >> 3] = 1.0 / +(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) * +HEAPF64[($13_1 + 128 | 0) >> 3];
    HEAPF64[($13_1 + 88 | 0) >> 3] = 1.0 / +(HEAP32[($13_1 + 184 | 0) >> 2] | 0 | 0) * +HEAPF64[($13_1 + 120 | 0) >> 3];
    HEAPF64[($13_1 + 80 | 0) >> 3] = 1.0 / +(HEAP32[($13_1 + 184 | 0) >> 2] | 0 | 0) * +HEAPF64[($13_1 + 112 | 0) >> 3];
    (wasm2js_i32$0 = $13_1, wasm2js_f64$0 = +$734(+(+(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0)), +(-2.5)) * +HEAPF64[($13_1 + 72 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 72 | 0) >> 3] = wasm2js_f64$0;
    (wasm2js_i32$0 = $13_1, wasm2js_f64$0 = +$734(+(+(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0)), +(-1.5)) * +HEAPF64[($13_1 + 56 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 64 | 0) >> 3] = wasm2js_f64$0;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 196 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 204 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 196 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 212 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 196 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 208 | 0) >> 2] = wasm2js_i32$1;
    HEAP32[($13_1 + 192 | 0) >> 2] = 0;
    label$14 : {
     label$15 : while (1) {
      if (!((HEAP32[($13_1 + 192 | 0) >> 2] | 0 | 0) < (HEAP32[($13_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$14
      }
      HEAP32[((HEAP32[($13_1 + 204 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($13_1 + 192 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($13_1 + 192 | 0) >> 2] = (HEAP32[($13_1 + 192 | 0) >> 2] | 0) + 1 | 0;
      continue label$15;
     };
    }
    HEAP32[($13_1 + 192 | 0) >> 2] = 0;
    label$16 : {
     label$17 : while (1) {
      if (!((HEAP32[($13_1 + 192 | 0) >> 2] | 0 | 0) < (HEAP32[($13_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$16
      }
      HEAP32[($13_1 + 176 | 0) >> 2] = HEAP32[((HEAP32[($13_1 + 204 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[($13_1 + 180 | 0) >> 2] = (HEAP32[($13_1 + 200 | 0) >> 2] | 0) - (HEAP32[($13_1 + 176 | 0) >> 2] | 0) | 0;
      $290_1 = 1;
      $119((HEAP32[($13_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 176 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($13_1 + 220 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, $290_1 | 0, HEAP32[($13_1 + 180 | 0) >> 2] | 0 | 0, $290_1 | 0);
      HEAP32[($13_1 + 192 | 0) >> 2] = (HEAP32[($13_1 + 192 | 0) >> 2] | 0) + 1 | 0;
      continue label$17;
     };
    }
    HEAP32[($13_1 + 192 | 0) >> 2] = 0;
    label$18 : {
     label$19 : while (1) {
      if (!((HEAP32[($13_1 + 192 | 0) >> 2] | 0 | 0) < (HEAP32[($13_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$18
      }
      HEAPF64[((HEAP32[($13_1 + 208 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 - +(HEAP32[((HEAP32[($13_1 + 204 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) / +((HEAP32[($13_1 + 196 | 0) >> 2] | 0) + 1 | 0 | 0);
      HEAP32[($13_1 + 192 | 0) >> 2] = (HEAP32[($13_1 + 192 | 0) >> 2] | 0) + 1 | 0;
      continue label$19;
     };
    }
    $325_1 = 1;
    $119(HEAP32[($13_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 212 | 0) >> 2] | 0 | 0, $13_1 + 48 | 0 | 0, $325_1 | 0, HEAP32[($13_1 + 196 | 0) >> 2] | 0 | 0, $325_1 | 0);
    HEAPF64[($13_1 + 48 | 0) >> 3] = +HEAPF64[($13_1 + 136 | 0) >> 3] + 2.0 * +HEAPF64[($13_1 + 48 | 0) >> 3] / +(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0);
    HEAPF64[($13_1 + 40 | 0) >> 3] = .5 * (+HEAPF64[($13_1 + 48 | 0) >> 3] - +HEAPF64[($13_1 + 136 | 0) >> 3]);
    HEAPF64[($13_1 + 32 | 0) >> 3] = +HEAPF64[($13_1 + 40 | 0) >> 3] / +HEAPF64[($13_1 + 48 | 0) >> 3];
    (wasm2js_i32$0 = $13_1, wasm2js_f64$0 = (1.0 - +$734(+(+(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0)), +(-2.0))) * +HEAPF64[($13_1 + 80 | 0) >> 3] - 12.0 * +HEAPF64[($13_1 + 72 | 0) >> 3] * +HEAPF64[($13_1 + 72 | 0) >> 3] + 12.0 * (1.0 + 1.0 / +(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0)) * +HEAPF64[($13_1 + 72 | 0) >> 3] * +HEAPF64[($13_1 + 64 | 0) >> 3] - (4.0 + 6.0 / +(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) + 2.0 / +(Math_imul(HEAP32[($13_1 + 200 | 0) >> 2] | 0, HEAP32[($13_1 + 200 | 0) >> 2] | 0) | 0)) * +HEAPF64[($13_1 + 64 | 0) >> 3] * +HEAPF64[($13_1 + 64 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 24 | 0) >> 3] = wasm2js_f64$0;
    HEAPF64[($13_1 + 16 | 0) >> 3] = Math_sqrt(+HEAPF64[($13_1 + 136 | 0) >> 3] / +HEAPF64[($13_1 + 48 | 0) >> 3]) * +HEAPF64[($13_1 + 152 | 0) >> 3] - +HEAPF64[($13_1 + 32 | 0) >> 3] * Math_sqrt(+HEAPF64[($13_1 + 48 | 0) >> 3]) * +HEAPF64[($13_1 + 64 | 0) >> 3] / (Math_sqrt(+HEAPF64[($13_1 + 24 | 0) >> 3]) * Math_sqrt(+HEAPF64[($13_1 + 24 | 0) >> 3] + +HEAPF64[($13_1 + 64 | 0) >> 3] * +HEAPF64[($13_1 + 64 | 0) >> 3]));
    HEAPF64[($13_1 + 8 | 0) >> 3] = Math_sqrt(+HEAPF64[($13_1 + 136 | 0) >> 3] / +HEAPF64[($13_1 + 48 | 0) >> 3]) * +HEAPF64[($13_1 + 144 | 0) >> 3] - +HEAPF64[($13_1 + 32 | 0) >> 3] * Math_sqrt(+HEAPF64[($13_1 + 48 | 0) >> 3]) * (.5 * +HEAPF64[($13_1 + 64 | 0) >> 3] - +HEAPF64[($13_1 + 72 | 0) >> 3]) / (Math_sqrt(+HEAPF64[($13_1 + 24 | 0) >> 3] / 12.0) * Math_sqrt(+HEAPF64[($13_1 + 88 | 0) >> 3]));
    HEAPF64[(HEAP32[($13_1 + 252 | 0) >> 2] | 0) >> 3] = +HEAPF64[($13_1 + 16 | 0) >> 3];
    HEAPF64[((HEAP32[($13_1 + 252 | 0) >> 2] | 0) + 8 | 0) >> 3] = +HEAPF64[($13_1 + 8 | 0) >> 3];
    HEAP32[(HEAP32[($13_1 + 248 | 0) >> 2] | 0) >> 2] = 2;
    label$20 : {
     label$21 : {
      if ($739(HEAP32[($13_1 + 276 | 0) >> 2] | 0 | 0, global$3 + 1134 | 0 | 0) | 0) {
       break label$21
      }
      HEAPF64[($13_1 + 96 | 0) >> 3] = (+HEAPF64[((HEAP32[($13_1 + 4 | 0) >> 2] | 0) + 208 | 0) >> 3] - 1.0) / +HEAPF64[((HEAP32[($13_1 + 4 | 0) >> 2] | 0) + 232 | 0) >> 3];
      HEAPF64[(HEAP32[($13_1 + 244 | 0) >> 2] | 0) >> 3] = Math_sqrt(+HEAPF64[($13_1 + 136 | 0) >> 3] / +HEAPF64[($13_1 + 48 | 0) >> 3]) * +HEAPF64[($13_1 + 96 | 0) >> 3] - +HEAPF64[($13_1 + 32 | 0) >> 3] * Math_sqrt(+HEAPF64[($13_1 + 48 | 0) >> 3]) / Math_sqrt(+HEAPF64[($13_1 + 24 | 0) >> 3]);
      break label$20;
     }
     label$22 : {
      if ($739(HEAP32[($13_1 + 276 | 0) >> 2] | 0 | 0, global$3 + 2820 | 0 | 0) | 0) {
       break label$22
      }
      HEAPF64[(HEAP32[($13_1 + 244 | 0) >> 2] | 0) >> 3] = +(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) * (+HEAPF64[((HEAP32[($13_1 + 4 | 0) >> 2] | 0) + 208 | 0) >> 3] - 1.0) - +HEAPF64[($13_1 + 40 | 0) >> 3] / +HEAPF64[($13_1 + 24 | 0) >> 3];
      HEAPF64[((HEAP32[($13_1 + 260 | 0) >> 2] | 0) + 16 | 0) >> 3] = nan;
      HEAPF64[((HEAP32[($13_1 + 260 | 0) >> 2] | 0) + 8 | 0) >> 3] = nan;
      HEAPF64[(HEAP32[($13_1 + 260 | 0) >> 2] | 0) >> 3] = nan;
     }
    }
    $863(HEAP32[($13_1 + 232 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($13_1 + 224 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($13_1 + 228 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($13_1 + 220 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($13_1 + 216 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($13_1 + 204 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($13_1 + 212 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($13_1 + 208 | 0) >> 2] | 0 | 0);
    $184(HEAP32[($13_1 + 4 | 0) >> 2] | 0 | 0);
    break label$8;
   }
   label$23 : {
    if ($739(HEAP32[($13_1 + 272 | 0) >> 2] | 0 | 0, global$3 + 1246 | 0 | 0) | 0) {
     break label$23
    }
    HEAPF64[(HEAP32[($13_1 + 260 | 0) >> 2] | 0) >> 3] = -3.4335 - 5.999 / +(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) - 29.25 / +(Math_imul(HEAP32[($13_1 + 200 | 0) >> 2] | 0, HEAP32[($13_1 + 200 | 0) >> 2] | 0) | 0);
    HEAPF64[((HEAP32[($13_1 + 260 | 0) >> 2] | 0) + 8 | 0) >> 3] = -2.8621 - 2.738 / +(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) - 8.36 / +(Math_imul(HEAP32[($13_1 + 200 | 0) >> 2] | 0, HEAP32[($13_1 + 200 | 0) >> 2] | 0) | 0);
    HEAPF64[((HEAP32[($13_1 + 260 | 0) >> 2] | 0) + 16 | 0) >> 3] = -2.5671 - 1.438 / +(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) - 4.48 / +(Math_imul(HEAP32[($13_1 + 200 | 0) >> 2] | 0, HEAP32[($13_1 + 200 | 0) >> 2] | 0) | 0);
    HEAPF64[(HEAP32[($13_1 + 256 | 0) >> 2] | 0) >> 3] = .01;
    HEAPF64[((HEAP32[($13_1 + 256 | 0) >> 2] | 0) + 8 | 0) >> 3] = .05;
    HEAPF64[((HEAP32[($13_1 + 256 | 0) >> 2] | 0) + 16 | 0) >> 3] = .1;
    HEAP32[($13_1 + 188 | 0) >> 2] = 2;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862(Math_imul((HEAP32[($13_1 + 188 | 0) >> 2] | 0) << 3 | 0, HEAP32[($13_1 + 188 | 0) >> 2] | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 224 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 200 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 228 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 200 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 220 | 0) >> 2] = wasm2js_i32$1;
    $868(HEAP32[($13_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 236 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 200 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
    HEAPF64[($13_1 + 160 | 0) >> 3] = .95;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $179(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 188 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
    $182(HEAP32[($13_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 240 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 224 | 0) >> 2] | 0 | 0, +(+HEAPF64[($13_1 + 160 | 0) >> 3]));
    HEAPF64[($13_1 + 152 | 0) >> 3] = +HEAPF64[((HEAP32[($13_1 + 4 | 0) >> 2] | 0) + 176 | 0) >> 3] / +HEAPF64[((HEAP32[($13_1 + 4 | 0) >> 2] | 0) + 200 | 0) >> 3];
    HEAPF64[($13_1 + 128 | 0) >> 3] = +(0 | 0);
    HEAPF64[($13_1 + 120 | 0) >> 3] = +(0 | 0);
    HEAPF64[($13_1 + 112 | 0) >> 3] = +(0 | 0);
    HEAPF64[($13_1 + 56 | 0) >> 3] = +(0 | 0);
    (wasm2js_i32$0 = $13_1, wasm2js_f64$0 = +$208(HEAP32[($13_1 + 240 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 104 | 0) >> 3] = wasm2js_f64$0;
    HEAP32[($13_1 + 184 | 0) >> 2] = Math_imul(HEAP32[($13_1 + 200 | 0) >> 2] | 0, HEAP32[($13_1 + 200 | 0) >> 2] | 0);
    HEAP32[($13_1 + 192 | 0) >> 2] = 0;
    label$24 : {
     label$25 : while (1) {
      if (!((HEAP32[($13_1 + 192 | 0) >> 2] | 0 | 0) < (HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$24
      }
      HEAPF64[($13_1 + 128 | 0) >> 3] = +HEAPF64[($13_1 + 128 | 0) >> 3] + +HEAPF64[((HEAP32[($13_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($13_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[($13_1 + 120 | 0) >> 3] = +HEAPF64[($13_1 + 120 | 0) >> 3] + (+HEAPF64[((HEAP32[($13_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($13_1 + 104 | 0) >> 3]) * (+HEAPF64[((HEAP32[($13_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[($13_1 + 104 | 0) >> 3]);
      HEAPF64[($13_1 + 112 | 0) >> 3] = +HEAPF64[($13_1 + 112 | 0) >> 3] + +HEAPF64[((HEAP32[($13_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($13_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAPF64[($13_1 + 56 | 0) >> 3] = +HEAPF64[($13_1 + 56 | 0) >> 3] + +HEAPF64[((HEAP32[($13_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($13_1 + 192 | 0) >> 2] = (HEAP32[($13_1 + 192 | 0) >> 2] | 0) + 1 | 0;
      continue label$25;
     };
    }
    HEAPF64[($13_1 + 136 | 0) >> 3] = 1.0 / +(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) * +HEAPF64[($13_1 + 128 | 0) >> 3];
    HEAPF64[($13_1 + 88 | 0) >> 3] = 1.0 / +(HEAP32[($13_1 + 184 | 0) >> 2] | 0 | 0) * +HEAPF64[($13_1 + 120 | 0) >> 3];
    HEAPF64[($13_1 + 80 | 0) >> 3] = 1.0 / +(HEAP32[($13_1 + 184 | 0) >> 2] | 0 | 0) * +HEAPF64[($13_1 + 112 | 0) >> 3];
    (wasm2js_i32$0 = $13_1, wasm2js_f64$0 = +$734(+(+(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0)), +(-1.5)) * +HEAPF64[($13_1 + 56 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 64 | 0) >> 3] = wasm2js_f64$0;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 196 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 204 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 196 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 212 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $13_1, wasm2js_i32$1 = $862((HEAP32[($13_1 + 196 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 208 | 0) >> 2] = wasm2js_i32$1;
    HEAP32[($13_1 + 192 | 0) >> 2] = 0;
    label$26 : {
     label$27 : while (1) {
      if (!((HEAP32[($13_1 + 192 | 0) >> 2] | 0 | 0) < (HEAP32[($13_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$26
      }
      HEAP32[((HEAP32[($13_1 + 204 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($13_1 + 192 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($13_1 + 192 | 0) >> 2] = (HEAP32[($13_1 + 192 | 0) >> 2] | 0) + 1 | 0;
      continue label$27;
     };
    }
    HEAP32[($13_1 + 192 | 0) >> 2] = 0;
    label$28 : {
     label$29 : while (1) {
      if (!((HEAP32[($13_1 + 192 | 0) >> 2] | 0 | 0) < (HEAP32[($13_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$28
      }
      HEAP32[($13_1 + 176 | 0) >> 2] = HEAP32[((HEAP32[($13_1 + 204 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[($13_1 + 180 | 0) >> 2] = (HEAP32[($13_1 + 200 | 0) >> 2] | 0) - (HEAP32[($13_1 + 176 | 0) >> 2] | 0) | 0;
      $537_1 = 1;
      $119((HEAP32[($13_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 176 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[($13_1 + 220 | 0) >> 2] | 0 | 0, (HEAP32[($13_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, $537_1 | 0, HEAP32[($13_1 + 180 | 0) >> 2] | 0 | 0, $537_1 | 0);
      HEAP32[($13_1 + 192 | 0) >> 2] = (HEAP32[($13_1 + 192 | 0) >> 2] | 0) + 1 | 0;
      continue label$29;
     };
    }
    HEAP32[($13_1 + 192 | 0) >> 2] = 0;
    label$30 : {
     label$31 : while (1) {
      if (!((HEAP32[($13_1 + 192 | 0) >> 2] | 0 | 0) < (HEAP32[($13_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$30
      }
      HEAPF64[((HEAP32[($13_1 + 208 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0 - +(HEAP32[((HEAP32[($13_1 + 204 | 0) >> 2] | 0) + ((HEAP32[($13_1 + 192 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) / +((HEAP32[($13_1 + 196 | 0) >> 2] | 0) + 1 | 0 | 0);
      HEAP32[($13_1 + 192 | 0) >> 2] = (HEAP32[($13_1 + 192 | 0) >> 2] | 0) + 1 | 0;
      continue label$31;
     };
    }
    $572_1 = 1;
    $119(HEAP32[($13_1 + 208 | 0) >> 2] | 0 | 0, HEAP32[($13_1 + 212 | 0) >> 2] | 0 | 0, $13_1 + 48 | 0 | 0, $572_1 | 0, HEAP32[($13_1 + 196 | 0) >> 2] | 0 | 0, $572_1 | 0);
    HEAPF64[($13_1 + 48 | 0) >> 3] = +HEAPF64[($13_1 + 136 | 0) >> 3] + 2.0 * +HEAPF64[($13_1 + 48 | 0) >> 3] / +(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0);
    HEAPF64[($13_1 + 40 | 0) >> 3] = .5 * (+HEAPF64[($13_1 + 48 | 0) >> 3] - +HEAPF64[($13_1 + 136 | 0) >> 3]);
    HEAPF64[($13_1 + 32 | 0) >> 3] = +HEAPF64[($13_1 + 40 | 0) >> 3] / +HEAPF64[($13_1 + 48 | 0) >> 3];
    HEAPF64[($13_1 + 16 | 0) >> 3] = Math_sqrt(+HEAPF64[($13_1 + 136 | 0) >> 3] / +HEAPF64[($13_1 + 48 | 0) >> 3]) * +HEAPF64[($13_1 + 152 | 0) >> 3] - +HEAPF64[($13_1 + 32 | 0) >> 3] * Math_sqrt(+HEAPF64[($13_1 + 48 | 0) >> 3]) * +HEAPF64[($13_1 + 64 | 0) >> 3] / (Math_sqrt(+HEAPF64[($13_1 + 80 | 0) >> 3]) * Math_sqrt(+HEAPF64[($13_1 + 88 | 0) >> 3]));
    HEAPF64[(HEAP32[($13_1 + 252 | 0) >> 2] | 0) >> 3] = +HEAPF64[($13_1 + 16 | 0) >> 3];
    HEAP32[(HEAP32[($13_1 + 248 | 0) >> 2] | 0) >> 2] = 1;
    label$32 : {
     label$33 : {
      if ($739(HEAP32[($13_1 + 276 | 0) >> 2] | 0 | 0, global$3 + 1134 | 0 | 0) | 0) {
       break label$33
      }
      HEAPF64[($13_1 + 96 | 0) >> 3] = (+HEAPF64[((HEAP32[($13_1 + 4 | 0) >> 2] | 0) + 208 | 0) >> 3] - 1.0) / +HEAPF64[((HEAP32[($13_1 + 4 | 0) >> 2] | 0) + 232 | 0) >> 3];
      HEAPF64[(HEAP32[($13_1 + 244 | 0) >> 2] | 0) >> 3] = Math_sqrt(+HEAPF64[($13_1 + 136 | 0) >> 3] / +HEAPF64[($13_1 + 48 | 0) >> 3]) * +HEAPF64[($13_1 + 96 | 0) >> 3] - +HEAPF64[($13_1 + 32 | 0) >> 3] * Math_sqrt(+HEAPF64[($13_1 + 48 | 0) >> 3]) / Math_sqrt(+HEAPF64[($13_1 + 88 | 0) >> 3]);
      break label$32;
     }
     label$34 : {
      if ($739(HEAP32[($13_1 + 276 | 0) >> 2] | 0 | 0, global$3 + 2820 | 0 | 0) | 0) {
       break label$34
      }
      HEAPF64[(HEAP32[($13_1 + 244 | 0) >> 2] | 0) >> 3] = +(HEAP32[($13_1 + 200 | 0) >> 2] | 0 | 0) * (+HEAPF64[((HEAP32[($13_1 + 4 | 0) >> 2] | 0) + 208 | 0) >> 3] - 1.0) - +HEAPF64[($13_1 + 40 | 0) >> 3] / +HEAPF64[($13_1 + 88 | 0) >> 3];
      HEAPF64[((HEAP32[($13_1 + 260 | 0) >> 2] | 0) + 16 | 0) >> 3] = nan;
      HEAPF64[((HEAP32[($13_1 + 260 | 0) >> 2] | 0) + 8 | 0) >> 3] = nan;
      HEAPF64[(HEAP32[($13_1 + 260 | 0) >> 2] | 0) >> 3] = nan;
     }
    }
    $863(HEAP32[($13_1 + 224 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($13_1 + 228 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($13_1 + 220 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($13_1 + 204 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($13_1 + 212 | 0) >> 2] | 0 | 0);
    $863(HEAP32[($13_1 + 208 | 0) >> 2] | 0 | 0);
    $184(HEAP32[($13_1 + 4 | 0) >> 2] | 0 | 0);
   }
  }
  global$0 = $13_1 + 288 | 0;
  return;
 }
 
 function $236($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 224 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 220 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 216 | 0) >> 2] = $1_1;
  $868($4_1 + 80 | 0 | 0, HEAP32[(HEAP32[($4_1 + 216 | 0) >> 2] | 0) >> 2] | 0 | 0, 136 | 0) | 0;
  HEAP8[($4_1 + 79 | 0) >> 0] = 0 & 1 | 0;
  $237($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 84 | 0) >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 96 | 0) >> 2] | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 100 | 0) >> 2] | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 104 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 108 | 0) >> 2] | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = HEAP32[($4_1 + 112 | 0) >> 2] | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 116 | 0) >> 2] | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = HEAP32[($4_1 + 128 | 0) >> 2] | 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($4_1 + 132 | 0) >> 2] | 0;
  $238($4_1 + 64 | 0 | 0, HEAP32[($4_1 + 136 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
  $239($0_1 + 56 | 0 | 0, $4_1 + 64 | 0 | 0) | 0;
  $238($4_1 + 48 | 0 | 0, HEAP32[($4_1 + 140 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 140 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
  $239($0_1 + 68 | 0 | 0, $4_1 + 48 | 0 | 0) | 0;
  $238($4_1 + 32 | 0 | 0, HEAP32[($4_1 + 144 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 144 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
  $239($0_1 + 80 | 0 | 0, $4_1 + 32 | 0 | 0) | 0;
  $238($4_1 + 16 | 0 | 0, HEAP32[($4_1 + 148 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 148 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
  $239($0_1 + 92 | 0 | 0, $4_1 + 16 | 0 | 0) | 0;
  HEAP32[($0_1 + 104 | 0) >> 2] = HEAP32[($4_1 + 160 | 0) >> 2] | 0;
  $238($4_1 | 0, HEAP32[($4_1 + 164 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 164 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
  $239($0_1 + 108 | 0 | 0, $4_1 | 0) | 0;
  HEAPF64[($0_1 + 120 | 0) >> 3] = +HEAPF64[($4_1 + 168 | 0) >> 3];
  HEAPF64[($0_1 + 128 | 0) >> 3] = +HEAPF64[($4_1 + 176 | 0) >> 3];
  HEAPF64[($0_1 + 136 | 0) >> 3] = +HEAPF64[($4_1 + 184 | 0) >> 3];
  HEAPF64[($0_1 + 144 | 0) >> 3] = +HEAPF64[($4_1 + 192 | 0) >> 3];
  HEAP32[($0_1 + 152 | 0) >> 2] = HEAP32[($4_1 + 200 | 0) >> 2] | 0;
  HEAP32[($0_1 + 156 | 0) >> 2] = HEAP32[($4_1 + 204 | 0) >> 2] | 0;
  HEAP32[($0_1 + 160 | 0) >> 2] = HEAP32[($4_1 + 208 | 0) >> 2] | 0;
  HEAP8[($4_1 + 79 | 0) >> 0] = 1 & 1 | 0;
  $240($4_1 | 0) | 0;
  $240($4_1 + 16 | 0 | 0) | 0;
  $240($4_1 + 32 | 0 | 0) | 0;
  $240($4_1 + 48 | 0 | 0) | 0;
  $240($4_1 + 64 | 0 | 0) | 0;
  label$1 : {
   if ((HEAPU8[($4_1 + 79 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $241($0_1 | 0) | 0;
  }
  global$0 = $4_1 + 224 | 0;
  return;
 }
 
 function $237($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $242($4_1 + 56 | 0 | 0) | 0;
  $242($4_1 + 68 | 0 | 0) | 0;
  $242($4_1 + 80 | 0 | 0) | 0;
  $242($4_1 + 92 | 0 | 0) | 0;
  $242($4_1 + 108 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $238($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $21_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $6_1;
  $243($6_1 | 0) | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $244(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   $245($6_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
   $246($6_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  }
  $21_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $21_1 | 0;
 }
 
 function $239($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!(($5_1 | 0) != (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   $247($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
   $248($5_1 | 0, HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $240($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $249($4_1 | 0);
  $250($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $241($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $240($4_1 + 108 | 0 | 0) | 0;
  $240($4_1 + 92 | 0 | 0) | 0;
  $240($4_1 + 80 | 0 | 0) | 0;
  $240($4_1 + 68 | 0 | 0) | 0;
  $240($4_1 + 56 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $242($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $243($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $243($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $373($4_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $374($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $244($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $445(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $245($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0, $20_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($391($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $752($5_1 | 0);
   abort();
  }
  $15_1 = $393($392($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $15_1;
  HEAP32[$5_1 >> 2] = $15_1;
  $20_1 = (HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0;
  (wasm2js_i32$0 = $394($5_1 | 0) | 0, wasm2js_i32$1 = $20_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $395($5_1 | 0, 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $246($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  $396($6_1 | 0, $7_1 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  $397($392($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, $6_1 + 4 | 0 | 0);
  $398($6_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $247($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $446(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $248($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $244(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 <= ($409($6_1 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    HEAP8[($5_1 + 11 | 0) >> 0] = 0;
    label$3 : {
     if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 > ($338($6_1 | 0) | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP8[($5_1 + 11 | 0) >> 0] = 1;
     HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     $447($5_1 + 12 | 0 | 0, $338($6_1 | 0) | 0 | 0);
    }
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $448(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
    label$4 : {
     label$5 : {
      if (!((HEAPU8[($5_1 + 11 | 0) >> 0] | 0) & 1 | 0)) {
       break label$5
      }
      $246($6_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 16 | 0) >> 2] | 0) - ($338($6_1 | 0) | 0) | 0 | 0);
      break label$4;
     }
     $449($6_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
    }
    break label$1;
   }
   $450($6_1 | 0);
   $245($6_1 | 0, $451($6_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0);
   $246($6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0);
  }
  $452($6_1 | 0);
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $249($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $410($4_1 | 0, $408($4_1 | 0) | 0 | 0, ($408($4_1 | 0) | 0) + (($409($4_1 | 0) | 0) << 3 | 0) | 0 | 0, ($408($4_1 | 0) | 0) + (($338($4_1 | 0) | 0) << 3 | 0) | 0 | 0, ($408($4_1 | 0) | 0) + (($409($4_1 | 0) | 0) << 3 | 0) | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $250($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $436($4_1 | 0);
   $437($392($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $421($4_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $251($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0, $193_1 = 0.0, $194_1 = 0.0, $195_1 = 0.0, $196_1 = 0.0, $197_1 = 0.0, $190_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $862(4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  $16_1 = $14(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 160 | 0) >> 2] | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] = $16_1;
  HEAP32[(HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 36 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 40 | 0) >> 2] = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 44 | 0) >> 2] = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 48 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 52 | 0) >> 2] = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  HEAP32[($3_1 + 24 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $193_1 = +HEAPF64[($252($0_1 + 56 | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $193_1;
    HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($3_1 + 20 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $194_1 = +HEAPF64[($252($0_1 + 68 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $194_1;
    HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($3_1 + 16 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    $195_1 = +HEAPF64[($252($0_1 + 80 | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $195_1;
    HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    $196_1 = +HEAPF64[($252($0_1 + 92 | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $196_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 80 | 0) >> 2] = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$9
    }
    $197_1 = +HEAPF64[($252($0_1 + 108 | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 84 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $197_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$10;
   };
  }
  HEAPF64[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 88 | 0) >> 3] = +HEAPF64[($0_1 + 120 | 0) >> 3];
  HEAPF64[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 96 | 0) >> 3] = +HEAPF64[($0_1 + 128 | 0) >> 3];
  HEAPF64[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 104 | 0) >> 3] = +HEAPF64[($0_1 + 136 | 0) >> 3];
  HEAPF64[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 112 | 0) >> 3] = +HEAPF64[($0_1 + 144 | 0) >> 3];
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 120 | 0) >> 2] = HEAP32[($0_1 + 152 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 124 | 0) >> 2] = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 128 | 0) >> 2] = HEAP32[($0_1 + 160 | 0) >> 2] | 0;
  $190_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $190_1 | 0;
 }
 
 function $252($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0;
 }
 
 function $253($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 464 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 460 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 456 | 0) >> 2] = $1_1;
  $868($4_1 + 152 | 0 | 0, HEAP32[(HEAP32[($4_1 + 456 | 0) >> 2] | 0) >> 2] | 0 | 0, 304 | 0) | 0;
  HEAP8[($4_1 + 151 | 0) >> 0] = 0 & 1 | 0;
  $254($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($4_1 + 152 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 156 | 0) >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 160 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 164 | 0) >> 2] | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = HEAP32[($4_1 + 192 | 0) >> 2] | 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 196 | 0) >> 2] | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = HEAP32[($4_1 + 200 | 0) >> 2] | 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($4_1 + 204 | 0) >> 2] | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = HEAP32[($4_1 + 208 | 0) >> 2] | 0;
  HEAP32[($0_1 + 60 | 0) >> 2] = HEAP32[($4_1 + 212 | 0) >> 2] | 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = HEAP32[($4_1 + 216 | 0) >> 2] | 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = HEAP32[($4_1 + 220 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = HEAP32[($4_1 + 224 | 0) >> 2] | 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = HEAP32[($4_1 + 228 | 0) >> 2] | 0;
  $238($4_1 + 136 | 0 | 0, HEAP32[($4_1 + 232 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 232 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
  $239($0_1 + 80 | 0 | 0, $4_1 + 136 | 0 | 0) | 0;
  $238($4_1 + 120 | 0 | 0, HEAP32[($4_1 + 236 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 236 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
  $239($0_1 + 92 | 0 | 0, $4_1 + 120 | 0 | 0) | 0;
  $238($4_1 + 104 | 0 | 0, HEAP32[($4_1 + 240 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 240 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 208 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
  $239($0_1 + 104 | 0 | 0, $4_1 + 104 | 0 | 0) | 0;
  $238($4_1 + 88 | 0 | 0, HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 244 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 216 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
  $239($0_1 + 116 | 0 | 0, $4_1 + 88 | 0 | 0) | 0;
  HEAP32[($0_1 + 128 | 0) >> 2] = HEAP32[($4_1 + 256 | 0) >> 2] | 0;
  $238($4_1 + 72 | 0 | 0, HEAP32[($4_1 + 260 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 260 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 156 | 0) >> 2] | 0) << 3 | 0) | 0 | 0) | 0;
  $239($0_1 + 132 | 0 | 0, $4_1 + 72 | 0 | 0) | 0;
  HEAPF64[($0_1 + 144 | 0) >> 3] = +HEAPF64[($4_1 + 264 | 0) >> 3];
  HEAPF64[($0_1 + 152 | 0) >> 3] = +HEAPF64[($4_1 + 272 | 0) >> 3];
  HEAPF64[($0_1 + 160 | 0) >> 3] = +HEAPF64[($4_1 + 280 | 0) >> 3];
  HEAPF64[($0_1 + 320 | 0) >> 3] = +HEAPF64[($4_1 + 432 | 0) >> 3];
  HEAP32[($0_1 + 176 | 0) >> 2] = HEAP32[($4_1 + 296 | 0) >> 2] | 0;
  HEAP32[($0_1 + 180 | 0) >> 2] = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
  HEAP32[($0_1 + 184 | 0) >> 2] = HEAP32[($4_1 + 304 | 0) >> 2] | 0;
  HEAP32[($0_1 + 188 | 0) >> 2] = HEAP32[($4_1 + 308 | 0) >> 2] | 0;
  HEAP32[($0_1 + 176 | 0) >> 2] = HEAP32[($4_1 + 296 | 0) >> 2] | 0;
  HEAP32[($0_1 + 180 | 0) >> 2] = HEAP32[($4_1 + 300 | 0) >> 2] | 0;
  HEAP32[($0_1 + 184 | 0) >> 2] = HEAP32[($4_1 + 304 | 0) >> 2] | 0;
  HEAP32[($0_1 + 188 | 0) >> 2] = HEAP32[($4_1 + 308 | 0) >> 2] | 0;
  HEAP32[($0_1 + 192 | 0) >> 2] = HEAP32[($4_1 + 312 | 0) >> 2] | 0;
  HEAP32[($0_1 + 196 | 0) >> 2] = HEAP32[($4_1 + 316 | 0) >> 2] | 0;
  HEAP32[($0_1 + 200 | 0) >> 2] = HEAP32[($4_1 + 320 | 0) >> 2] | 0;
  HEAP32[($0_1 + 204 | 0) >> 2] = HEAP32[($4_1 + 324 | 0) >> 2] | 0;
  HEAP32[($0_1 + 208 | 0) >> 2] = HEAP32[($4_1 + 328 | 0) >> 2] | 0;
  HEAP32[($0_1 + 212 | 0) >> 2] = HEAP32[($4_1 + 332 | 0) >> 2] | 0;
  HEAP32[($0_1 + 216 | 0) >> 2] = HEAP32[($4_1 + 336 | 0) >> 2] | 0;
  $255($4_1 + 56 | 0 | 0, ($4_1 + 152 | 0) + 188 | 0 | 0) | 0;
  $256($0_1 + 220 | 0 | 0, $4_1 + 56 | 0 | 0) | 0;
  HEAP32[($0_1 + 232 | 0) >> 2] = HEAP32[($4_1 + 352 | 0) >> 2] | 0;
  HEAP32[($0_1 + 236 | 0) >> 2] = HEAP32[($4_1 + 356 | 0) >> 2] | 0;
  HEAP32[($0_1 + 240 | 0) >> 2] = HEAP32[($4_1 + 360 | 0) >> 2] | 0;
  HEAP32[($0_1 + 244 | 0) >> 2] = HEAP32[($4_1 + 364 | 0) >> 2] | 0;
  $255($4_1 + 40 | 0 | 0, ($4_1 + 152 | 0) + 216 | 0 | 0) | 0;
  $256($0_1 + 248 | 0 | 0, $4_1 + 40 | 0 | 0) | 0;
  $255($4_1 + 24 | 0 | 0, ($4_1 + 152 | 0) + 226 | 0 | 0) | 0;
  $256($0_1 + 260 | 0 | 0, $4_1 + 24 | 0 | 0) | 0;
  $255($4_1 + 8 | 0 | 0, ($4_1 + 152 | 0) + 236 | 0 | 0) | 0;
  $256($0_1 + 272 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
  HEAPF64[($0_1 + 288 | 0) >> 3] = +HEAPF64[($4_1 + 400 | 0) >> 3];
  HEAPF64[($0_1 + 296 | 0) >> 3] = +HEAPF64[($4_1 + 408 | 0) >> 3];
  HEAPF64[($0_1 + 304 | 0) >> 3] = +HEAPF64[($4_1 + 416 | 0) >> 3];
  HEAPF64[($0_1 + 312 | 0) >> 3] = +HEAPF64[($4_1 + 424 | 0) >> 3];
  HEAPF64[($0_1 + 320 | 0) >> 3] = +HEAPF64[($4_1 + 432 | 0) >> 3];
  HEAPF64[($0_1 + 328 | 0) >> 3] = +HEAPF64[($4_1 + 440 | 0) >> 3];
  HEAPF64[($0_1 + 336 | 0) >> 3] = +HEAPF64[($4_1 + 448 | 0) >> 3];
  HEAP8[($4_1 + 151 | 0) >> 0] = 1 & 1 | 0;
  $803($4_1 + 8 | 0 | 0) | 0;
  $803($4_1 + 24 | 0 | 0) | 0;
  $803($4_1 + 40 | 0 | 0) | 0;
  $803($4_1 + 56 | 0 | 0) | 0;
  $240($4_1 + 72 | 0 | 0) | 0;
  $240($4_1 + 88 | 0 | 0) | 0;
  $240($4_1 + 104 | 0 | 0) | 0;
  $240($4_1 + 120 | 0 | 0) | 0;
  $240($4_1 + 136 | 0 | 0) | 0;
  label$1 : {
   if ((HEAPU8[($4_1 + 151 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $257($0_1 | 0) | 0;
  }
  global$0 = $4_1 + 464 | 0;
  return;
 }
 
 function $254($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $242($4_1 + 80 | 0 | 0) | 0;
  $242($4_1 + 92 | 0 | 0) | 0;
  $242($4_1 + 104 | 0 | 0) | 0;
  $242($4_1 + 116 | 0 | 0) | 0;
  $242($4_1 + 132 | 0 | 0) | 0;
  $258($4_1 + 220 | 0 | 0) | 0;
  $258($4_1 + 248 | 0 | 0) | 0;
  $258($4_1 + 260 | 0 | 0) | 0;
  $258($4_1 + 272 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $255($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $259($5_1 | 0, $4_1 + 16 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
  $805($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $260(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $256($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $21_1 = 0, $23_1 = 0, $22_1 = 0, i64toi32_i32$1 = 0, $91_1 = 0, $37_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($5_1 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $261($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
    label$3 : {
     label$4 : {
      if (($262($5_1 | 0) | 0) & 1 | 0) {
       break label$4
      }
      label$5 : {
       label$6 : {
        if (($262(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
         break label$6
        }
        $21_1 = $263(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
        $22_1 = $264($5_1 | 0) | 0;
        i64toi32_i32$0 = HEAP32[$21_1 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($21_1 + 4 | 0) >> 2] | 0;
        $91_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $22_1;
        HEAP32[i64toi32_i32$0 >> 2] = $91_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        $23_1 = 8;
        HEAP32[(i64toi32_i32$0 + $23_1 | 0) >> 2] = HEAP32[($21_1 + $23_1 | 0) >> 2] | 0;
        break label$5;
       }
       (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $808($5_1 | 0, $265(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, $266(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
       break label$1;
      }
      break label$3;
     }
     (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $807($5_1 | 0, $265(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, $266(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
     break label$1;
    }
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  }
  $37_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $37_1 | 0;
 }
 
 function $257($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $803($4_1 + 272 | 0 | 0) | 0;
  $803($4_1 + 260 | 0 | 0) | 0;
  $803($4_1 + 248 | 0 | 0) | 0;
  $803($4_1 + 220 | 0 | 0) | 0;
  $240($4_1 + 132 | 0 | 0) | 0;
  $240($4_1 + 116 | 0 | 0) | 0;
  $240($4_1 + 104 | 0 | 0) | 0;
  $240($4_1 + 92 | 0 | 0) | 0;
  $240($4_1 + 80 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $258($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $259($4_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $380($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $259($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $377(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $381($6_1 | 0) | 0;
  $377(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $382($6_1 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $260($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $878(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $261($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $461(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $262($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $16_1 = (((HEAPU8[(($263(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 255 | 0) & 128 | 0 | 0) != (0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $263($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $434(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $264($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $384(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $265($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $429($462(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $266($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($262($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $430($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $463($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $267($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $319_1 = 0.0, $320_1 = 0.0, $321_1 = 0.0, $322_1 = 0.0, $323_1 = 0.0, $214_1 = 0, $248_1 = 0, $270_1 = 0, $292_1 = 0, $316_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $862(4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[(HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 40 | 0) >> 2] = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 44 | 0) >> 2] = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 48 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 52 | 0) >> 2] = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 56 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 60 | 0) >> 2] = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 64 | 0) >> 2] = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 68 | 0) >> 2] = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 76 | 0) >> 2] = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
  HEAP32[($3_1 + 40 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) < (HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $319_1 = +HEAPF64[($252($0_1 + 80 | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 80 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $319_1;
    HEAP32[($3_1 + 40 | 0) >> 2] = (HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($3_1 + 36 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $320_1 = +HEAPF64[($252($0_1 + 92 | 0 | 0, HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 84 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $320_1;
    HEAP32[($3_1 + 36 | 0) >> 2] = (HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($3_1 + 32 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    $321_1 = +HEAPF64[($252($0_1 + 104 | 0 | 0, HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 88 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $321_1;
    HEAP32[($3_1 + 32 | 0) >> 2] = (HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[($3_1 + 28 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    $322_1 = +HEAPF64[($252($0_1 + 116 | 0 | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 92 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $322_1;
    HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 104 | 0) >> 2] = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
  HEAP32[($3_1 + 24 | 0) >> 2] = 0;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$9
    }
    $323_1 = +HEAPF64[($252($0_1 + 132 | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 108 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $323_1;
    HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0;
    continue label$10;
   };
  }
  HEAPF64[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 112 | 0) >> 3] = +HEAPF64[($0_1 + 144 | 0) >> 3];
  HEAPF64[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 120 | 0) >> 3] = +HEAPF64[($0_1 + 152 | 0) >> 3];
  HEAPF64[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 128 | 0) >> 3] = +HEAPF64[($0_1 + 160 | 0) >> 3];
  HEAPF64[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 280 | 0) >> 3] = +HEAPF64[($0_1 + 320 | 0) >> 3];
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 144 | 0) >> 2] = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 148 | 0) >> 2] = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 152 | 0) >> 2] = HEAP32[($0_1 + 184 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 156 | 0) >> 2] = HEAP32[($0_1 + 188 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 160 | 0) >> 2] = HEAP32[($0_1 + 192 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 164 | 0) >> 2] = HEAP32[($0_1 + 196 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 168 | 0) >> 2] = HEAP32[($0_1 + 200 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 172 | 0) >> 2] = HEAP32[($0_1 + 204 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 176 | 0) >> 2] = HEAP32[($0_1 + 208 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 180 | 0) >> 2] = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 184 | 0) >> 2] = HEAP32[($0_1 + 216 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = 0;
  label$11 : {
   label$12 : while (1) {
    if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) < (10 | 0) & 1 | 0)) {
     break label$11
    }
    $214_1 = HEAPU8[($268($0_1 + 220 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 0] | 0;
    HEAP8[(((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 188 | 0) + (HEAP32[($3_1 + 20 | 0) >> 2] | 0) | 0) >> 0] = $214_1;
    HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    continue label$12;
   };
  }
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 200 | 0) >> 2] = HEAP32[($0_1 + 232 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 204 | 0) >> 2] = HEAP32[($0_1 + 236 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 208 | 0) >> 2] = HEAP32[($0_1 + 240 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 212 | 0) >> 2] = HEAP32[($0_1 + 244 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = 0;
  label$13 : {
   label$14 : while (1) {
    if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) < (10 | 0) & 1 | 0)) {
     break label$13
    }
    $248_1 = HEAPU8[($268($0_1 + 248 | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 0] | 0;
    HEAP8[(((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 216 | 0) + (HEAP32[($3_1 + 16 | 0) >> 2] | 0) | 0) >> 0] = $248_1;
    HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$14;
   };
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  label$15 : {
   label$16 : while (1) {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) < (10 | 0) & 1 | 0)) {
     break label$15
    }
    $270_1 = HEAPU8[($268($0_1 + 260 | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 0] | 0;
    HEAP8[(((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 226 | 0) + (HEAP32[($3_1 + 12 | 0) >> 2] | 0) | 0) >> 0] = $270_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$16;
   };
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$17 : {
   label$18 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (10 | 0) & 1 | 0)) {
     break label$17
    }
    $292_1 = HEAPU8[($268($0_1 + 272 | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 0] | 0;
    HEAP8[(((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 236 | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] = $292_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$18;
   };
  }
  HEAPF64[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 248 | 0) >> 3] = +HEAPF64[($0_1 + 288 | 0) >> 3];
  HEAPF64[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 256 | 0) >> 3] = +HEAPF64[($0_1 + 296 | 0) >> 3];
  HEAPF64[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 264 | 0) >> 3] = +HEAPF64[($0_1 + 304 | 0) >> 3];
  HEAPF64[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 272 | 0) >> 3] = +HEAPF64[($0_1 + 312 | 0) >> 3];
  HEAPF64[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 280 | 0) >> 3] = +HEAPF64[($0_1 + 320 | 0) >> 3];
  HEAPF64[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 288 | 0) >> 3] = +HEAPF64[($0_1 + 328 | 0) >> 3];
  HEAPF64[((HEAP32[(HEAP32[($3_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + 296 | 0) >> 3] = +HEAPF64[($0_1 + 336 | 0) >> 3];
  $316_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
  global$0 = $3_1 + 48 | 0;
  return $316_1 | 0;
 }
 
 function $268($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = ($269(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $269($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($262($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $467($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $468($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $270($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $17_1 = 0, $35_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $17_1 = global$0 - 64 | 0;
  global$0 = $17_1;
  HEAP32[($17_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($17_1 + 56 | 0) >> 2] = $3_1;
  HEAP32[($17_1 + 52 | 0) >> 2] = $4_1;
  HEAP32[($17_1 + 48 | 0) >> 2] = $5_1;
  HEAP32[($17_1 + 44 | 0) >> 2] = $6_1;
  HEAP32[($17_1 + 40 | 0) >> 2] = $7_1;
  HEAP32[($17_1 + 36 | 0) >> 2] = $8_1;
  HEAP32[($17_1 + 32 | 0) >> 2] = $9_1;
  HEAP32[($17_1 + 28 | 0) >> 2] = $10_1;
  HEAP32[($17_1 + 24 | 0) >> 2] = $11_1;
  HEAP32[($17_1 + 20 | 0) >> 2] = $12_1;
  HEAP32[($17_1 + 16 | 0) >> 2] = $13_1;
  HEAP8[($17_1 + 15 | 0) >> 0] = $14_1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $271($1_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $271($2_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $17_1, wasm2js_i32$1 = $862(4 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$1 : {
   if (HEAP32[($17_1 + 28 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[($17_1 + 4 | 0) >> 2] = 0;
  }
  $35_1 = $14(HEAP32[($17_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 28 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($17_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(HEAP32[$17_1 >> 2] | 0) >> 2] = $35_1;
  $27(HEAP32[(HEAP32[$17_1 >> 2] | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 20 | 0) >> 2] | 0 | 0);
  $29(HEAP32[(HEAP32[$17_1 >> 2] | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 16 | 0) >> 2] | 0 | 0);
  $16(HEAP32[(HEAP32[$17_1 >> 2] | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($17_1 + 4 | 0) >> 2] | 0 | 0);
  label$2 : {
   if (!((HEAPU8[($17_1 + 15 | 0) >> 0] | 0) & 1 | 0)) {
    break label$2
   }
   $875(global$3 + 5870 | 0 | 0, 0 | 0) | 0;
   $36(HEAP32[(HEAP32[$17_1 >> 2] | 0) >> 2] | 0 | 0);
  }
  $236($0_1 | 0, HEAP32[$17_1 >> 2] | 0 | 0);
  global$0 = $17_1 + 64 | 0;
  return;
 }
 
 function $271($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $272(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $272($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $273($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  var $16_1 = 0, $32_1 = 0, $53_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $16_1 = global$0 - 64 | 0;
  global$0 = $16_1;
  HEAP32[($16_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($16_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($16_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($16_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($16_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($16_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($16_1 + 36 | 0) >> 2] = $6_1;
  HEAP32[($16_1 + 32 | 0) >> 2] = $7_1;
  HEAP32[($16_1 + 28 | 0) >> 2] = $8_1;
  HEAP32[($16_1 + 24 | 0) >> 2] = $9_1;
  HEAP32[($16_1 + 20 | 0) >> 2] = $10_1;
  HEAP32[($16_1 + 16 | 0) >> 2] = $11_1;
  HEAP32[($16_1 + 12 | 0) >> 2] = $12_1;
  HEAP8[($16_1 + 11 | 0) >> 0] = $13_1;
  (wasm2js_i32$0 = $16_1, wasm2js_i32$1 = $862(4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   if (HEAP32[($16_1 + 24 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[($16_1 + 56 | 0) >> 2] = 0;
  }
  $32_1 = $14(HEAP32[($16_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 24 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($16_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(HEAP32[($16_1 + 4 | 0) >> 2] | 0) >> 2] = $32_1;
  $27(HEAP32[(HEAP32[($16_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 16 | 0) >> 2] | 0 | 0);
  $29(HEAP32[(HEAP32[($16_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 12 | 0) >> 2] | 0 | 0);
  $16(HEAP32[(HEAP32[($16_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($16_1 + 56 | 0) >> 2] | 0 | 0);
  label$2 : {
   if (!((HEAPU8[($16_1 + 11 | 0) >> 0] | 0) & 1 | 0)) {
    break label$2
   }
   $875(global$3 + 5835 | 0 | 0, 0 | 0) | 0;
   $36(HEAP32[(HEAP32[($16_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0);
  }
  $53_1 = HEAP32[($16_1 + 4 | 0) >> 2] | 0;
  global$0 = $16_1 + 64 | 0;
  return $53_1 | 0;
 }
 
 function $274($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $27_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(((HEAP32[($7_1 + 12 | 0) >> 2] | 0) << 3 | 0) << 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
  $34(HEAP32[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0);
  $27_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
  global$0 = $7_1 + 32 | 0;
  return $27_1 | 0;
 }
 
 function $275($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $29_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 208 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 204 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 200 | 0) >> 2] = $5_1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $271($2_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 188 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $271($3_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 184 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $271($4_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 180 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862(((HEAP32[($8_1 + 200 | 0) >> 2] | 0) << 3 | 0) << 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 196 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($8_1 + 192 | 0) >> 2] = (HEAP32[($8_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 200 | 0) >> 2] | 0) << 3 | 0) | 0;
  $276($8_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $29_1 = $251($8_1 + 8 | 0 | 0) | 0;
  $241($8_1 + 8 | 0 | 0) | 0;
  HEAP32[($8_1 + 176 | 0) >> 2] = $29_1;
  $34(HEAP32[(HEAP32[($8_1 + 176 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 188 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 196 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 192 | 0) >> 2] | 0 | 0);
  HEAP8[($8_1 + 7 | 0) >> 0] = 0 & 1 | 0;
  $238($0_1 | 0, HEAP32[($8_1 + 196 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 196 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 200 | 0) >> 2] | 0) << 1 | 0) << 3 | 0) | 0 | 0) | 0;
  HEAP8[($8_1 + 7 | 0) >> 0] = 1 & 1 | 0;
  label$1 : {
   if ((HEAPU8[($8_1 + 7 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $240($0_1 | 0) | 0;
  }
  global$0 = $8_1 + 208 | 0;
  return;
 }
 
 function $276($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $53_1 = 0, $56_1 = 0, $7_1 = 0, $10_1 = 0, $13_1 = 0, $16_1 = 0, $19_1 = 0, $22_1 = 0, $57_1 = 0, $61_1 = 0, $64_1 = 0, $67_1 = 0, $70_1 = 0, $103_1 = 0, $113_1 = 0, $123_1 = 0, $133_1 = 0, $143_1 = 0, $153_1 = 0, $163_1 = 0, $236_1 = 0, $256_1 = 0, $266_1 = 0, $276_1 = 0, $286_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $103_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $103_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $7_1 = 48;
  i64toi32_i32$2 = i64toi32_i32$2 + $7_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $113_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $7_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = 40;
  i64toi32_i32$2 = $6_1 + $10_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $123_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $10_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $123_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $13_1 = 32;
  i64toi32_i32$2 = $6_1 + $13_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $133_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $13_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $133_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $16_1 = 24;
  i64toi32_i32$2 = $6_1 + $16_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $143_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $16_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $143_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $19_1 = 16;
  i64toi32_i32$2 = $6_1 + $19_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $153_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $19_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $153_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $22_1 = 8;
  i64toi32_i32$2 = $6_1 + $22_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $163_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $22_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $163_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $277($5_1 + 56 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 56 | 0 | 0) | 0;
  $277($5_1 + 68 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 68 | 0 | 0) | 0;
  $277($5_1 + 80 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 80 | 0 | 0) | 0;
  $277($5_1 + 92 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 92 | 0 | 0) | 0;
  HEAP32[($5_1 + 104 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 104 | 0) >> 2] | 0;
  $277($5_1 + 108 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 108 | 0 | 0) | 0;
  $53_1 = $5_1 + 120 | 0;
  $56_1 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 120 | 0;
  i64toi32_i32$2 = $56_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $236_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $53_1;
  HEAP32[i64toi32_i32$1 >> 2] = $236_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $57_1 = 40;
  HEAP32[(i64toi32_i32$1 + $57_1 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $57_1 | 0) >> 2] | 0;
  $61_1 = 32;
  i64toi32_i32$2 = i64toi32_i32$2 + $61_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $256_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $53_1 + $61_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $256_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $64_1 = 24;
  i64toi32_i32$2 = $56_1 + $64_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $266_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $53_1 + $64_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $266_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $67_1 = 16;
  i64toi32_i32$2 = $56_1 + $67_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $276_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $53_1 + $67_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $276_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $70_1 = 8;
  i64toi32_i32$2 = $56_1 + $70_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $286_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $53_1 + $70_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $286_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $277($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $26_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $5_1;
  $386($385(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  $387($5_1 | 0, $4_1 + 16 | 0 | 0) | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $338(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   $245($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
   $246($5_1 | 0, HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  $26_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $26_1 | 0;
 }
 
 function $278($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  $15_1 = $15_1 | 0;
  var $18_1 = 0, $39_1 = 0, $74_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $18_1 = global$0 - 96 | 0;
  global$0 = $18_1;
  HEAP32[($18_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($18_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($18_1 + 84 | 0) >> 2] = $2_1;
  HEAP32[($18_1 + 80 | 0) >> 2] = $3_1;
  HEAP32[($18_1 + 76 | 0) >> 2] = $4_1;
  HEAP32[($18_1 + 72 | 0) >> 2] = $5_1;
  HEAP32[($18_1 + 68 | 0) >> 2] = $6_1;
  HEAP32[($18_1 + 64 | 0) >> 2] = $7_1;
  HEAP32[($18_1 + 60 | 0) >> 2] = $8_1;
  HEAP32[($18_1 + 56 | 0) >> 2] = $9_1;
  HEAP32[($18_1 + 52 | 0) >> 2] = $10_1;
  HEAP32[($18_1 + 48 | 0) >> 2] = $11_1;
  HEAP32[($18_1 + 44 | 0) >> 2] = $12_1;
  HEAP32[($18_1 + 40 | 0) >> 2] = $13_1;
  HEAP32[($18_1 + 36 | 0) >> 2] = $14_1;
  HEAP8[($18_1 + 35 | 0) >> 0] = $15_1;
  (wasm2js_i32$0 = $18_1, wasm2js_i32$1 = $862(4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   if (HEAP32[($18_1 + 56 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[($18_1 + 88 | 0) >> 2] = 0;
  }
  HEAP32[($18_1 + 16 | 0) >> 2] = HEAP32[($18_1 + 84 | 0) >> 2] | 0;
  HEAP32[($18_1 + 20 | 0) >> 2] = HEAP32[($18_1 + 80 | 0) >> 2] | 0;
  HEAP32[($18_1 + 24 | 0) >> 2] = HEAP32[($18_1 + 76 | 0) >> 2] | 0;
  HEAP32[($18_1 + 4 | 0) >> 2] = HEAP32[($18_1 + 72 | 0) >> 2] | 0;
  HEAP32[($18_1 + 8 | 0) >> 2] = HEAP32[($18_1 + 68 | 0) >> 2] | 0;
  HEAP32[($18_1 + 12 | 0) >> 2] = HEAP32[($18_1 + 64 | 0) >> 2] | 0;
  $39_1 = $15($18_1 + 16 | 0 | 0, $18_1 + 4 | 0 | 0, HEAP32[($18_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 52 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(HEAP32[($18_1 + 28 | 0) >> 2] | 0) >> 2] = $39_1;
  $31(HEAP32[(HEAP32[($18_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 40 | 0) >> 2] | 0 | 0);
  $32(HEAP32[(HEAP32[($18_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 36 | 0) >> 2] | 0 | 0);
  $33(HEAP32[(HEAP32[($18_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0, ((HEAPU8[($18_1 + 35 | 0) >> 0] | 0) & 1 | 0 ? 1 : 0) | 0);
  $28(HEAP32[(HEAP32[($18_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 48 | 0) >> 2] | 0 | 0);
  $30(HEAP32[(HEAP32[($18_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 44 | 0) >> 2] | 0 | 0);
  $17(HEAP32[(HEAP32[($18_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($18_1 + 88 | 0) >> 2] | 0 | 0);
  label$2 : {
   if (!((HEAPU8[($18_1 + 35 | 0) >> 0] | 0) & 1 | 0)) {
    break label$2
   }
   $875(global$3 + 5812 | 0 | 0, 0 | 0) | 0;
   $37(HEAP32[(HEAP32[($18_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0);
  }
  $74_1 = HEAP32[($18_1 + 28 | 0) >> 2] | 0;
  global$0 = $18_1 + 96 | 0;
  return $74_1 | 0;
 }
 
 function $279($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $27_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $862(((HEAP32[($7_1 + 12 | 0) >> 2] | 0) << 3 | 0) << 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 4 | 0) >> 2] = (HEAP32[($7_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
  $35(HEAP32[(HEAP32[($7_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0);
  $27_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
  global$0 = $7_1 + 32 | 0;
  return $27_1 | 0;
 }
 
 function $280($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1, $16_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  $15_1 = $15_1 | 0;
  $16_1 = $16_1 | 0;
  var $19_1 = 0, $40_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $19_1 = global$0 - 96 | 0;
  global$0 = $19_1;
  HEAP32[($19_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($19_1 + 88 | 0) >> 2] = $3_1;
  HEAP32[($19_1 + 84 | 0) >> 2] = $4_1;
  HEAP32[($19_1 + 80 | 0) >> 2] = $5_1;
  HEAP32[($19_1 + 76 | 0) >> 2] = $6_1;
  HEAP32[($19_1 + 72 | 0) >> 2] = $7_1;
  HEAP32[($19_1 + 68 | 0) >> 2] = $8_1;
  HEAP32[($19_1 + 64 | 0) >> 2] = $9_1;
  HEAP32[($19_1 + 60 | 0) >> 2] = $10_1;
  HEAP32[($19_1 + 56 | 0) >> 2] = $11_1;
  HEAP32[($19_1 + 52 | 0) >> 2] = $12_1;
  HEAP32[($19_1 + 48 | 0) >> 2] = $13_1;
  HEAP32[($19_1 + 44 | 0) >> 2] = $14_1;
  HEAP32[($19_1 + 40 | 0) >> 2] = $15_1;
  HEAP8[($19_1 + 39 | 0) >> 0] = $16_1;
  (wasm2js_i32$0 = $19_1, wasm2js_i32$1 = $862(4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $19_1, wasm2js_i32$1 = $271($1_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $19_1, wasm2js_i32$1 = $271($2_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   if (HEAP32[($19_1 + 60 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[($19_1 + 24 | 0) >> 2] = 0;
  }
  HEAP32[($19_1 + 12 | 0) >> 2] = HEAP32[($19_1 + 88 | 0) >> 2] | 0;
  HEAP32[($19_1 + 16 | 0) >> 2] = HEAP32[($19_1 + 84 | 0) >> 2] | 0;
  HEAP32[($19_1 + 20 | 0) >> 2] = HEAP32[($19_1 + 80 | 0) >> 2] | 0;
  HEAP32[$19_1 >> 2] = HEAP32[($19_1 + 76 | 0) >> 2] | 0;
  HEAP32[($19_1 + 4 | 0) >> 2] = HEAP32[($19_1 + 72 | 0) >> 2] | 0;
  HEAP32[($19_1 + 8 | 0) >> 2] = HEAP32[($19_1 + 68 | 0) >> 2] | 0;
  $40_1 = $15($19_1 + 12 | 0 | 0, $19_1 | 0, HEAP32[($19_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($19_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($19_1 + 56 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(HEAP32[($19_1 + 32 | 0) >> 2] | 0) >> 2] = $40_1;
  $31(HEAP32[(HEAP32[($19_1 + 32 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($19_1 + 44 | 0) >> 2] | 0 | 0);
  $32(HEAP32[(HEAP32[($19_1 + 32 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($19_1 + 40 | 0) >> 2] | 0 | 0);
  $33(HEAP32[(HEAP32[($19_1 + 32 | 0) >> 2] | 0) >> 2] | 0 | 0, ((HEAPU8[($19_1 + 39 | 0) >> 0] | 0) & 1 | 0 ? 1 : 0) | 0);
  $28(HEAP32[(HEAP32[($19_1 + 32 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($19_1 + 52 | 0) >> 2] | 0 | 0);
  $30(HEAP32[(HEAP32[($19_1 + 32 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($19_1 + 48 | 0) >> 2] | 0 | 0);
  $17(HEAP32[(HEAP32[($19_1 + 32 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($19_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($19_1 + 24 | 0) >> 2] | 0 | 0);
  label$2 : {
   if (!((HEAPU8[($19_1 + 39 | 0) >> 0] | 0) & 1 | 0)) {
    break label$2
   }
   $875(global$3 + 5812 | 0 | 0, 0 | 0) | 0;
   $37(HEAP32[(HEAP32[($19_1 + 32 | 0) >> 2] | 0) >> 2] | 0 | 0);
  }
  $253($0_1 | 0, HEAP32[($19_1 + 32 | 0) >> 2] | 0 | 0);
  global$0 = $19_1 + 96 | 0;
  return;
 }
 
 function $281($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $29_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 384 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 380 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 376 | 0) >> 2] = $5_1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $271($2_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 364 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $271($3_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 360 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $271($4_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 356 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $862(((HEAP32[($8_1 + 376 | 0) >> 2] | 0) << 3 | 0) << 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 372 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($8_1 + 368 | 0) >> 2] = (HEAP32[($8_1 + 372 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 376 | 0) >> 2] | 0) << 3 | 0) | 0;
  $282($8_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $29_1 = $267($8_1 + 8 | 0 | 0) | 0;
  $257($8_1 + 8 | 0 | 0) | 0;
  HEAP32[($8_1 + 352 | 0) >> 2] = $29_1;
  $35(HEAP32[(HEAP32[($8_1 + 352 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 364 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 360 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 376 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 356 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 372 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 368 | 0) >> 2] | 0 | 0);
  HEAP8[($8_1 + 7 | 0) >> 0] = 0 & 1 | 0;
  $238($0_1 | 0, HEAP32[($8_1 + 372 | 0) >> 2] | 0 | 0, (HEAP32[($8_1 + 372 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 376 | 0) >> 2] | 0) << 1 | 0) << 3 | 0) | 0 | 0) | 0;
  HEAP8[($8_1 + 7 | 0) >> 0] = 1 & 1 | 0;
  label$1 : {
   if ((HEAPU8[($8_1 + 7 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $240($0_1 | 0) | 0;
  }
  global$0 = $8_1 + 384 | 0;
  return;
 }
 
 function $282($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $70_1 = 0, $73_1 = 0, $47_1 = 0, $51_1 = 0, $74_1 = 0, $77_1 = 0, $80_1 = 0, $83_1 = 0, $86_1 = 0, $89_1 = 0, $215_1 = 0, $225_1 = 0, $270_1 = 0, $280_1 = 0, $290_1 = 0, $300_1 = 0, $310_1 = 0, $320_1 = 0, $330_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $868($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 80 | 0) | 0;
  $277($5_1 + 80 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 80 | 0 | 0) | 0;
  $277($5_1 + 92 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 92 | 0 | 0) | 0;
  $277($5_1 + 104 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 104 | 0 | 0) | 0;
  $277($5_1 + 116 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 116 | 0 | 0) | 0;
  HEAP32[($5_1 + 128 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 128 | 0) >> 2] | 0;
  $277($5_1 + 132 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 132 | 0 | 0) | 0;
  $868($5_1 + 144 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 144 | 0 | 0, 76 | 0) | 0;
  $283($5_1 + 220 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 220 | 0 | 0) | 0;
  $47_1 = $5_1 + 232 | 0;
  i64toi32_i32$2 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 232 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $215_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $47_1;
  HEAP32[i64toi32_i32$0 >> 2] = $215_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $51_1 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $51_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $225_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $47_1 + $51_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $225_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $283($5_1 + 248 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 248 | 0 | 0) | 0;
  $283($5_1 + 260 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 260 | 0 | 0) | 0;
  $283($5_1 + 272 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 272 | 0 | 0) | 0;
  $70_1 = $5_1 + 288 | 0;
  $73_1 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 288 | 0;
  i64toi32_i32$2 = $73_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $270_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $70_1;
  HEAP32[i64toi32_i32$0 >> 2] = $270_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $74_1 = 48;
  i64toi32_i32$2 = i64toi32_i32$2 + $74_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $280_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $70_1 + $74_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $280_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $77_1 = 40;
  i64toi32_i32$2 = $73_1 + $77_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $290_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $70_1 + $77_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $290_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $80_1 = 32;
  i64toi32_i32$2 = $73_1 + $80_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $300_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $70_1 + $80_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $300_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $83_1 = 24;
  i64toi32_i32$2 = $73_1 + $83_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $310_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $70_1 + $83_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $310_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $86_1 = 16;
  i64toi32_i32$2 = $73_1 + $86_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $320_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $70_1 + $86_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $89_1 = 8;
  i64toi32_i32$2 = $73_1 + $89_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $330_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $70_1 + $89_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $330_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $283($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $19_1 = 0, $21_1 = 0, $20_1 = 0, i64toi32_i32$1 = 0, $81_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $5_1;
  $426($425(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  $427($5_1 | 0, $4_1 + 16 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (($262(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $19_1 = $263(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    $20_1 = $264($5_1 | 0) | 0;
    i64toi32_i32$0 = HEAP32[$19_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($19_1 + 4 | 0) >> 2] | 0;
    $81_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $20_1;
    HEAP32[i64toi32_i32$0 >> 2] = $81_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $21_1 = 8;
    HEAP32[(i64toi32_i32$0 + $21_1 | 0) >> 2] = HEAP32[($19_1 + $21_1 | 0) >> 2] | 0;
    break label$1;
   }
   $806($5_1 | 0, $429($428(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0, $430(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  }
  $30_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $30_1 | 0;
 }
 
 function $284() {
  $285(global$3 + 13248 | 0 | 0) | 0;
  return;
 }
 
 function $285($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  $286($3_1 + 24 | 0 | 0, global$3 + 1815 | 0 | 0) | 0;
  $287($287($287($289($289($289($289($288($287($288($288($288($288($287($287($287($287($287($287($287($287($287($287($287($287($287($287($3_1 + 24 | 0 | 0, global$3 + 2935 | 0 | 0, 0 | 0) | 0 | 0, global$3 + 2694 | 0 | 0, 4 | 0) | 0 | 0, global$3 + 2670 | 0 | 0, 8 | 0) | 0 | 0, global$3 + 2667 | 0 | 0, 12 | 0) | 0 | 0, global$3 + 1885 | 0 | 0, 16 | 0) | 0 | 0, global$3 + 2757 | 0 | 0, 20 | 0) | 0 | 0, global$3 + 1813 | 0 | 0, 24 | 0) | 0 | 0, global$3 + 1569 | 0 | 0, 28 | 0) | 0 | 0, global$3 + 2843 | 0 | 0, 32 | 0) | 0 | 0, global$3 + 2997 | 0 | 0, 36 | 0) | 0 | 0, global$3 + 2841 | 0 | 0, 40 | 0) | 0 | 0, global$3 + 1811 | 0 | 0, 44 | 0) | 0 | 0, global$3 + 2937 | 0 | 0, 48 | 0) | 0 | 0, global$3 + 2332 | 0 | 0, 52 | 0) | 0 | 0, global$3 + 2156 | 0 | 0, 56 | 0) | 0 | 0, global$3 + 2782 | 0 | 0, 68 | 0) | 0 | 0, global$3 + 2939 | 0 | 0, 80 | 0) | 0 | 0, global$3 + 3007 | 0 | 0, 92 | 0) | 0 | 0, global$3 + 1128 | 0 | 0, 104 | 0) | 0 | 0, global$3 + 1485 | 0 | 0, 108 | 0) | 0 | 0, global$3 + 1967 | 0 | 0, 120 | 0) | 0 | 0, global$3 + 1761 | 0 | 0, 128 | 0) | 0 | 0, global$3 + 2139 | 0 | 0, 136 | 0) | 0 | 0, global$3 + 2763 | 0 | 0, 144 | 0) | 0 | 0, global$3 + 1988 | 0 | 0, 152 | 0) | 0 | 0, global$3 + 1155 | 0 | 0, 156 | 0) | 0 | 0, global$3 + 1966 | 0 | 0, 160 | 0) | 0;
  $290($3_1 + 24 | 0 | 0) | 0;
  $291($3_1 + 16 | 0 | 0, global$3 + 1834 | 0 | 0) | 0;
  $292($292($292($294($294($294($294($293($292($293($293($293($293($292($292($292($292($292($292($292($292($292($292($292($292($292($292($3_1 + 16 | 0 | 0, global$3 + 2935 | 0 | 0, 0 | 0) | 0 | 0, global$3 + 2694 | 0 | 0, 4 | 0) | 0 | 0, global$3 + 2670 | 0 | 0, 8 | 0) | 0 | 0, global$3 + 2667 | 0 | 0, 12 | 0) | 0 | 0, global$3 + 1885 | 0 | 0, 40 | 0) | 0 | 0, global$3 + 2757 | 0 | 0, 44 | 0) | 0 | 0, global$3 + 1813 | 0 | 0, 48 | 0) | 0 | 0, global$3 + 1569 | 0 | 0, 52 | 0) | 0 | 0, global$3 + 2843 | 0 | 0, 56 | 0) | 0 | 0, global$3 + 2997 | 0 | 0, 60 | 0) | 0 | 0, global$3 + 2841 | 0 | 0, 64 | 0) | 0 | 0, global$3 + 1811 | 0 | 0, 68 | 0) | 0 | 0, global$3 + 2937 | 0 | 0, 72 | 0) | 0 | 0, global$3 + 2332 | 0 | 0, 76 | 0) | 0 | 0, global$3 + 2156 | 0 | 0, 80 | 0) | 0 | 0, global$3 + 2782 | 0 | 0, 92 | 0) | 0 | 0, global$3 + 2939 | 0 | 0, 104 | 0) | 0 | 0, global$3 + 3007 | 0 | 0, 116 | 0) | 0 | 0, global$3 + 1128 | 0 | 0, 128 | 0) | 0 | 0, global$3 + 1485 | 0 | 0, 132 | 0) | 0 | 0, global$3 + 1967 | 0 | 0, 144 | 0) | 0 | 0, global$3 + 1761 | 0 | 0, 152 | 0) | 0 | 0, global$3 + 2139 | 0 | 0, 160 | 0) | 0 | 0, global$3 + 2763 | 0 | 0, 320 | 0) | 0 | 0, global$3 + 1988 | 0 | 0, 176 | 0) | 0 | 0, global$3 + 1155 | 0 | 0, 180 | 0) | 0 | 0, global$3 + 1966 | 0 | 0, 184 | 0) | 0;
  $295($3_1 + 16 | 0 | 0) | 0;
  $296(global$3 + 1581 | 0 | 0);
  $297(global$3 + 1062 | 0 | 0, global$4 + 5 | 0 | 0);
  $298(global$3 + 1074 | 0 | 0, global$4 + 6 | 0 | 0);
  $299(global$3 + 2788 | 0 | 0, global$4 + 7 | 0 | 0);
  $300(global$3 + 2802 | 0 | 0, global$4 + 8 | 0 | 0);
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $286($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  $301($5_1 | 0) | 0;
  $7_1 = global$4;
  HEAP32[($4_1 + 12 | 0) >> 2] = $7_1 + 9 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $7_1 + 10 | 0;
  $11_1 = $304() | 0;
  $12_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $14_1 = $305() | 0;
  $15_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  fimport$1($11_1 | 0, $12_1 | 0, $14_1 | 0, $15_1 | 0, $306() | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $287($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $21_1 = 0, $22_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  $8_1 = global$4;
  HEAP32[($5_1 + 8 | 0) >> 2] = $8_1 + 11 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $8_1 + 12 | 0;
  $12_1 = $304() | 0;
  $13_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  $14_1 = $309() | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $16_1 = $310() | 0;
  $17_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $21_1 = $311($5_1 + 12 | 0 | 0) | 0;
  $22_1 = $309() | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  fimport$2($12_1 | 0, $13_1 | 0, $14_1 | 0, $16_1 | 0, $17_1 | 0, $21_1 | 0, $22_1 | 0, $312() | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $311($5_1 + 12 | 0 | 0) | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $288($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $21_1 = 0, $22_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  $8_1 = global$4;
  HEAP32[($5_1 + 8 | 0) >> 2] = $8_1 + 13 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $8_1 + 14 | 0;
  $12_1 = $304() | 0;
  $13_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  $14_1 = $315() | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $16_1 = $310() | 0;
  $17_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $21_1 = $316($5_1 + 12 | 0 | 0) | 0;
  $22_1 = $315() | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  fimport$2($12_1 | 0, $13_1 | 0, $14_1 | 0, $16_1 | 0, $17_1 | 0, $21_1 | 0, $22_1 | 0, $312() | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $316($5_1 + 12 | 0 | 0) | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $289($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $21_1 = 0, $22_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  $8_1 = global$4;
  HEAP32[($5_1 + 8 | 0) >> 2] = $8_1 + 15 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $8_1 + 16 | 0;
  $12_1 = $304() | 0;
  $13_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  $14_1 = $319() | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $16_1 = $320() | 0;
  $17_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $21_1 = $321($5_1 + 12 | 0 | 0) | 0;
  $22_1 = $319() | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  fimport$2($12_1 | 0, $13_1 | 0, $14_1 | 0, $16_1 | 0, $17_1 | 0, $21_1 | 0, $22_1 | 0, $322() | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $321($5_1 + 12 | 0 | 0) | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $290($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  fimport$3($304() | 0 | 0);
  $323($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $291($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  $301($5_1 | 0) | 0;
  $7_1 = global$4;
  HEAP32[($4_1 + 12 | 0) >> 2] = $7_1 + 17 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $7_1 + 18 | 0;
  $11_1 = $326() | 0;
  $12_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $14_1 = $305() | 0;
  $15_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  fimport$1($11_1 | 0, $12_1 | 0, $14_1 | 0, $15_1 | 0, $306() | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $292($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $21_1 = 0, $22_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  $8_1 = global$4;
  HEAP32[($5_1 + 8 | 0) >> 2] = $8_1 + 19 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $8_1 + 20 | 0;
  $12_1 = $326() | 0;
  $13_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  $14_1 = $309() | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $16_1 = $310() | 0;
  $17_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $21_1 = $329($5_1 + 12 | 0 | 0) | 0;
  $22_1 = $309() | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  fimport$2($12_1 | 0, $13_1 | 0, $14_1 | 0, $16_1 | 0, $17_1 | 0, $21_1 | 0, $22_1 | 0, $312() | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $329($5_1 + 12 | 0 | 0) | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $293($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $21_1 = 0, $22_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  $8_1 = global$4;
  HEAP32[($5_1 + 8 | 0) >> 2] = $8_1 + 21 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $8_1 + 22 | 0;
  $12_1 = $326() | 0;
  $13_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  $14_1 = $315() | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $16_1 = $310() | 0;
  $17_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $21_1 = $332($5_1 + 12 | 0 | 0) | 0;
  $22_1 = $315() | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  fimport$2($12_1 | 0, $13_1 | 0, $14_1 | 0, $16_1 | 0, $17_1 | 0, $21_1 | 0, $22_1 | 0, $312() | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $332($5_1 + 12 | 0 | 0) | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $294($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $21_1 = 0, $22_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  $8_1 = global$4;
  HEAP32[($5_1 + 8 | 0) >> 2] = $8_1 + 23 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $8_1 + 24 | 0;
  $12_1 = $326() | 0;
  $13_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  $14_1 = $319() | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $16_1 = $320() | 0;
  $17_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $21_1 = $335($5_1 + 12 | 0 | 0) | 0;
  $22_1 = $319() | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  fimport$2($12_1 | 0, $13_1 | 0, $14_1 | 0, $16_1 | 0, $17_1 | 0, $21_1 | 0, $22_1 | 0, $322() | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $335($5_1 + 12 | 0 | 0) | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $295($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  fimport$3($326() | 0 | 0);
  $323($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $296($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $50_1 = 0, $4_1 = 0, $12_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $26_1 = 0, $27_1 = 0, $29_1 = 0, $30_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $43_1 = 0, $45_1 = 0, $232_1 = 0, $47_1 = 0, $48_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $264_1 = 0, $58_1 = 0, $281_1 = 0, $60_1 = 0, $61_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $312_1 = 0, $70_1 = 0, $329_1 = 0, $72_1 = 0, $73_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $360_1 = 0, $84_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 256 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
  $4_1 = 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = $4_1;
  $6_1 = global$4;
  HEAP32[($3_1 + 72 | 0) >> 2] = $6_1 + 25 | 0;
  HEAP32[($3_1 + 68 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 64 | 0) >> 2] = $6_1 + 26 | 0;
  HEAP32[($3_1 + 60 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 56 | 0) >> 2] = $6_1 + 27 | 0;
  $12_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
  HEAP32[($3_1 + 104 | 0) >> 2] = $3_1 + 48 | 0;
  HEAP32[($3_1 + 100 | 0) >> 2] = $12_1;
  $339();
  HEAP32[($3_1 + 96 | 0) >> 2] = $6_1 + 28 | 0;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $341() | 0), HEAP32[(wasm2js_i32$0 + 92 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $342() | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($3_1 + 84 | 0) >> 2] = $6_1 + 29 | 0;
  $21_1 = $315() | 0;
  $22_1 = $344() | 0;
  $23_1 = $345() | 0;
  $24_1 = $346() | 0;
  HEAP32[($3_1 + 232 | 0) >> 2] = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
  $26_1 = $347() | 0;
  $27_1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
  HEAP32[($3_1 + 240 | 0) >> 2] = HEAP32[($3_1 + 92 | 0) >> 2] | 0;
  $29_1 = $348() | 0;
  $30_1 = HEAP32[($3_1 + 92 | 0) >> 2] | 0;
  HEAP32[($3_1 + 236 | 0) >> 2] = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
  $32_1 = $348() | 0;
  $33_1 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
  $34_1 = HEAP32[($3_1 + 100 | 0) >> 2] | 0;
  HEAP32[($3_1 + 244 | 0) >> 2] = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
  fimport$4($21_1 | 0, $22_1 | 0, $23_1 | 0, $24_1 | 0, $26_1 | 0, $27_1 | 0, $29_1 | 0, $30_1 | 0, $32_1 | 0, $33_1 | 0, $34_1 | 0, $306() | 0 | 0, HEAP32[($3_1 + 84 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 108 | 0) >> 2] = $3_1 + 48 | 0;
  HEAP32[($3_1 + 252 | 0) >> 2] = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
  HEAP32[($3_1 + 248 | 0) >> 2] = $6_1 + 30 | 0;
  $43_1 = HEAP32[($3_1 + 252 | 0) >> 2] | 0;
  $350(HEAP32[($3_1 + 248 | 0) >> 2] | 0 | 0);
  $45_1 = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
  HEAP32[($3_1 + 40 | 0) >> 2] = $45_1;
  i64toi32_i32$0 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
  $232_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 112 | 0) >> 2] = $232_1;
  HEAP32[($3_1 + 116 | 0) >> 2] = i64toi32_i32$1;
  $47_1 = HEAP32[($3_1 + 112 | 0) >> 2] | 0;
  $48_1 = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
  HEAP32[($3_1 + 140 | 0) >> 2] = $43_1;
  $50_1 = global$3;
  HEAP32[($3_1 + 136 | 0) >> 2] = $50_1 + 2146 | 0;
  HEAP32[($3_1 + 132 | 0) >> 2] = $48_1;
  HEAP32[($3_1 + 128 | 0) >> 2] = $47_1;
  $52_1 = HEAP32[($3_1 + 140 | 0) >> 2] | 0;
  $53_1 = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
  $54_1 = HEAP32[($3_1 + 128 | 0) >> 2] | 0;
  HEAP32[($3_1 + 124 | 0) >> 2] = HEAP32[($3_1 + 132 | 0) >> 2] | 0;
  HEAP32[($3_1 + 120 | 0) >> 2] = $54_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
  $264_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $264_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $351($53_1 | 0, $3_1 + 16 | 0 | 0);
  $58_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
  HEAP32[($3_1 + 32 | 0) >> 2] = $58_1;
  i64toi32_i32$0 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
  $281_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 144 | 0) >> 2] = $281_1;
  HEAP32[($3_1 + 148 | 0) >> 2] = i64toi32_i32$1;
  $60_1 = HEAP32[($3_1 + 144 | 0) >> 2] | 0;
  $61_1 = HEAP32[($3_1 + 148 | 0) >> 2] | 0;
  HEAP32[($3_1 + 172 | 0) >> 2] = $52_1;
  HEAP32[($3_1 + 168 | 0) >> 2] = $50_1 + 2343 | 0;
  HEAP32[($3_1 + 164 | 0) >> 2] = $61_1;
  HEAP32[($3_1 + 160 | 0) >> 2] = $60_1;
  $64_1 = HEAP32[($3_1 + 172 | 0) >> 2] | 0;
  $65_1 = HEAP32[($3_1 + 168 | 0) >> 2] | 0;
  $66_1 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
  HEAP32[($3_1 + 156 | 0) >> 2] = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
  HEAP32[($3_1 + 152 | 0) >> 2] = $66_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
  $312_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $312_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $352($65_1 | 0, $3_1 + 8 | 0 | 0);
  $70_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
  HEAP32[($3_1 + 24 | 0) >> 2] = $70_1;
  i64toi32_i32$0 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  $329_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 176 | 0) >> 2] = $329_1;
  HEAP32[($3_1 + 180 | 0) >> 2] = i64toi32_i32$1;
  $72_1 = HEAP32[($3_1 + 176 | 0) >> 2] | 0;
  $73_1 = HEAP32[($3_1 + 180 | 0) >> 2] | 0;
  HEAP32[($3_1 + 204 | 0) >> 2] = $64_1;
  HEAP32[($3_1 + 200 | 0) >> 2] = $50_1 + 2413 | 0;
  HEAP32[($3_1 + 196 | 0) >> 2] = $73_1;
  HEAP32[($3_1 + 192 | 0) >> 2] = $72_1;
  $76_1 = HEAP32[($3_1 + 204 | 0) >> 2] | 0;
  $77_1 = HEAP32[($3_1 + 200 | 0) >> 2] | 0;
  $78_1 = HEAP32[($3_1 + 192 | 0) >> 2] | 0;
  HEAP32[($3_1 + 188 | 0) >> 2] = HEAP32[($3_1 + 196 | 0) >> 2] | 0;
  HEAP32[($3_1 + 184 | 0) >> 2] = $78_1;
  i64toi32_i32$1 = HEAP32[($3_1 + 184 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 188 | 0) >> 2] | 0;
  $360_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[$3_1 >> 2] = $360_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $353($77_1 | 0, $3_1 | 0);
  HEAP32[($3_1 + 216 | 0) >> 2] = $76_1;
  HEAP32[($3_1 + 212 | 0) >> 2] = $50_1 + 1265 | 0;
  HEAP32[($3_1 + 208 | 0) >> 2] = $6_1 + 31 | 0;
  $84_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
  $355(HEAP32[($3_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 208 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 228 | 0) >> 2] = $84_1;
  HEAP32[($3_1 + 224 | 0) >> 2] = $50_1 + 1261 | 0;
  HEAP32[($3_1 + 220 | 0) >> 2] = $6_1 + 32 | 0;
  $357(HEAP32[($3_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 220 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 256 | 0;
  return;
 }
 
 function $297($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $12_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = global$4 + 33 | 0;
  $8_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $12_1 = $359($4_1 + 16 | 0 | 0) | 0;
  $16_1 = $360($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$5($8_1 | 0, $12_1 | 0, $16_1 | 0, $361() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $298($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $12_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = global$4 + 34 | 0;
  $8_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $12_1 = $363($4_1 + 16 | 0 | 0) | 0;
  $16_1 = $364($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$5($8_1 | 0, $12_1 | 0, $16_1 | 0, $365() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $12_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = global$4 + 35 | 0;
  $8_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $12_1 = $367($4_1 + 16 | 0 | 0) | 0;
  $16_1 = $368($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$5($8_1 | 0, $12_1 | 0, $16_1 | 0, $369() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $300($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $12_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = global$4 + 36 | 0;
  $8_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $12_1 = $371($4_1 + 16 | 0 | 0) | 0;
  $16_1 = $372($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$5($8_1 | 0, $12_1 | 0, $16_1 | 0, $365() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $301($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $302() {
  var $1_1 = 0;
  $1_1 = $753(168 | 0) | 0;
  $869($1_1 | 0, 0 | 0, 168 | 0) | 0;
  $237($1_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $303($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $241($4_1 | 0) | 0;
   $754($4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $304() {
  return $471() | 0 | 0;
 }
 
 function $305() {
  return global$3 + 9586 | 0 | 0;
 }
 
 function $306() {
  return global$3 + 9588 | 0 | 0;
 }
 
 function $307($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $472((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $308($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $7_1 = $473(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 2] = $7_1;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $309() {
  return $474() | 0 | 0;
 }
 
 function $310() {
  return global$3 + 9591 | 0 | 0;
 }
 
 function $311($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(4 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $312() {
  return global$3 + 9595 | 0 | 0;
 }
 
 function $313($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $475((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $314($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $7_1 = $476(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $239((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0 | 0, $7_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $315() {
  return $477() | 0 | 0;
 }
 
 function $316($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(4 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $317($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = +$478((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return +$11_1;
 }
 
 function $318($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, $13_1 = 0.0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAPF64[$5_1 >> 3] = $2_1;
  $13_1 = +$479(+(+HEAPF64[$5_1 >> 3]));
  HEAPF64[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 3] = $13_1;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $319() {
  return $480() | 0 | 0;
 }
 
 function $320() {
  return global$3 + 9717 | 0 | 0;
 }
 
 function $321($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(4 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $322() {
  return global$3 + 9721 | 0 | 0;
 }
 
 function $323($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $324() {
  var $1_1 = 0;
  $1_1 = $753(344 | 0) | 0;
  $869($1_1 | 0, 0 | 0, 344 | 0) | 0;
  $254($1_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $325($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $257($4_1 | 0) | 0;
   $754($4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $326() {
  return $481() | 0 | 0;
 }
 
 function $327($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $472((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $328($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $7_1 = $473(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 2] = $7_1;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $329($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(4 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $330($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $475((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $331($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $7_1 = $476(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $239((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0 | 0, $7_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $332($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(4 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $333($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = +$478((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return +$11_1;
 }
 
 function $334($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, $13_1 = 0.0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAPF64[$5_1 >> 3] = $2_1;
  $13_1 = +$479(+(+HEAPF64[$5_1 >> 3]));
  HEAPF64[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 3] = $13_1;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $335($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(4 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $336($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($394($5_1 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $482($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $483($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $337($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $338($6_1 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[$5_1 >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $484($6_1 | 0, (HEAP32[($5_1 + 8 | 0) >> 2] | 0) - (HEAP32[$5_1 >> 2] | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[$5_1 >> 2] | 0) >>> 0 > (HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    $449($6_1 | 0, (HEAP32[$6_1 >> 2] | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0);
   }
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $338($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 3 | 0 | 0;
 }
 
 function $339() {
  return;
 }
 
 function $340($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $515(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $341() {
  return 0 | 0;
 }
 
 function $342() {
  return 0 | 0;
 }
 
 function $343($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($4_1 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   $240($4_1 | 0) | 0;
   $754($4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $344() {
  return $516() | 0 | 0;
 }
 
 function $345() {
  return $517() | 0 | 0;
 }
 
 function $346() {
  return 0 | 0;
 }
 
 function $347() {
  return global$3 + 9821 | 0 | 0;
 }
 
 function $348() {
  return global$3 + 9824 | 0 | 0;
 }
 
 function $349() {
  var $1_1 = 0;
  $1_1 = $753(12 | 0) | 0;
  $242($1_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $350($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $11_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = global$4 + 37 | 0;
  $7_1 = $315() | 0;
  $11_1 = $519($3_1 + 16 | 0 | 0) | 0;
  $15_1 = $520($3_1 + 16 | 0 | 0) | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  fimport$8($7_1 | 0, $11_1 | 0, $15_1 | 0, $347() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 32 | 0;
  return;
 }
 
 function $351($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $11_1 = 0, $15_1 = 0, $19_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = global$4 + 38 | 0;
  $10_1 = $315() | 0;
  $11_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $15_1 = $524($4_1 + 8 | 0 | 0) | 0;
  $19_1 = $525($4_1 + 8 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$9($10_1 | 0, $11_1 | 0, $15_1 | 0, $19_1 | 0, $322() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $526($4_1 + 16 | 0 | 0) | 0 | 0, 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $352($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $11_1 = 0, $15_1 = 0, $19_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = global$4 + 39 | 0;
  $10_1 = $315() | 0;
  $11_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $15_1 = $530($4_1 + 8 | 0 | 0) | 0;
  $19_1 = $531($4_1 + 8 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$9($10_1 | 0, $11_1 | 0, $15_1 | 0, $19_1 | 0, $532() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $533($4_1 + 16 | 0 | 0) | 0 | 0, 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $353($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $11_1 = 0, $15_1 = 0, $19_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = global$4 + 40 | 0;
  $10_1 = $315() | 0;
  $11_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $15_1 = $537($4_1 + 8 | 0 | 0) | 0;
  $19_1 = $538($4_1 + 8 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$9($10_1 | 0, $11_1 | 0, $15_1 | 0, $19_1 | 0, $310() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $539($4_1 + 16 | 0 | 0) | 0 | 0, 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $354($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 < ($338(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $486($0_1 | 0, $485(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
    break label$1;
   }
   $487($0_1 | 0);
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $355($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = global$4 + 41 | 0;
  $8_1 = $315() | 0;
  $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $13_1 = $544($4_1 + 16 | 0 | 0) | 0;
  $17_1 = $545($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$9($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $546() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $547($4_1 + 20 | 0 | 0) | 0 | 0, 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $356($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $15_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $15_1 = +HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3];
  (wasm2js_i32$0 = $252(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $15_1), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  global$0 = $5_1 + 16 | 0;
  return 1 & 1 | 0 | 0;
 }
 
 function $357($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = global$4 + 42 | 0;
  $8_1 = $315() | 0;
  $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  $13_1 = $561($4_1 + 16 | 0 | 0) | 0;
  $17_1 = $562($4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  fimport$9($8_1 | 0, $9_1 | 0, $13_1 | 0, $17_1 | 0, $563() | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $564($4_1 + 20 | 0 | 0) | 0 | 0, 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $358($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $17_1 = 0, $19_1 = 0, $70_1 = 0;
  $17_1 = global$0 - 272 | 0;
  global$0 = $17_1;
  HEAP32[($17_1 + 268 | 0) >> 2] = $0_1;
  HEAP32[($17_1 + 264 | 0) >> 2] = $1_1;
  HEAP32[($17_1 + 260 | 0) >> 2] = $2_1;
  HEAP32[($17_1 + 256 | 0) >> 2] = $3_1;
  HEAP32[($17_1 + 252 | 0) >> 2] = $4_1;
  HEAP32[($17_1 + 248 | 0) >> 2] = $5_1;
  HEAP32[($17_1 + 244 | 0) >> 2] = $6_1;
  HEAP32[($17_1 + 240 | 0) >> 2] = $7_1;
  HEAP32[($17_1 + 236 | 0) >> 2] = $8_1;
  HEAP32[($17_1 + 232 | 0) >> 2] = $9_1;
  HEAP32[($17_1 + 228 | 0) >> 2] = $10_1;
  HEAP32[($17_1 + 224 | 0) >> 2] = $11_1;
  HEAP32[($17_1 + 220 | 0) >> 2] = $12_1;
  HEAP32[($17_1 + 216 | 0) >> 2] = $13_1;
  HEAP8[($17_1 + 215 | 0) >> 0] = $14_1;
  $19_1 = HEAP32[($17_1 + 268 | 0) >> 2] | 0;
  $277($17_1 + 24 | 0 | 0, $476(HEAP32[($17_1 + 264 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $277($17_1 + 8 | 0 | 0, $476(HEAP32[($17_1 + 260 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  FUNCTION_TABLE[$19_1 | 0]($17_1 + 40 | 0, $17_1 + 24 | 0, $17_1 + 8 | 0, $473(HEAP32[($17_1 + 256 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($17_1 + 252 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($17_1 + 248 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($17_1 + 244 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($17_1 + 240 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($17_1 + 236 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($17_1 + 232 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($17_1 + 228 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($17_1 + 224 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($17_1 + 220 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($17_1 + 216 | 0) >> 2] | 0 | 0) | 0, ($567((HEAPU8[($17_1 + 215 | 0) >> 0] | 0) & 1 | 0 | 0) | 0) & 1 | 0);
  $70_1 = $568($17_1 + 40 | 0 | 0) | 0;
  $241($17_1 + 40 | 0 | 0) | 0;
  $240($17_1 + 8 | 0 | 0) | 0;
  $240($17_1 + 24 | 0 | 0) | 0;
  global$0 = $17_1 + 272 | 0;
  return $70_1 | 0;
 }
 
 function $359($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 15 | 0;
 }
 
 function $360($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $569() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $361() {
  return global$3 + 9872 | 0 | 0;
 }
 
 function $362($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $9_1 = 0, $46_1 = 0;
  $8_1 = global$0 - 256 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 252 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 248 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 244 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 240 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 236 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 232 | 0) >> 2] = $5_1;
  $9_1 = HEAP32[($8_1 + 252 | 0) >> 2] | 0;
  $276($8_1 + 48 | 0 | 0, $573(HEAP32[($8_1 + 248 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $277($8_1 + 32 | 0 | 0, $476(HEAP32[($8_1 + 244 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $277($8_1 + 16 | 0 | 0, $476(HEAP32[($8_1 + 240 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $277($8_1 | 0, $476(HEAP32[($8_1 + 236 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  FUNCTION_TABLE[$9_1 | 0]($8_1 + 216 | 0, $8_1 + 48 | 0, $8_1 + 32 | 0, $8_1 + 16 | 0, $8_1, $473(HEAP32[($8_1 + 232 | 0) >> 2] | 0 | 0) | 0);
  $46_1 = $574($8_1 + 216 | 0 | 0) | 0;
  $240($8_1 + 216 | 0 | 0) | 0;
  $240($8_1 | 0) | 0;
  $240($8_1 + 16 | 0 | 0) | 0;
  $240($8_1 + 32 | 0 | 0) | 0;
  $241($8_1 + 48 | 0 | 0) | 0;
  global$0 = $8_1 + 256 | 0;
  return $46_1 | 0;
 }
 
 function $363($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 6 | 0;
 }
 
 function $364($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $575() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $365() {
  return global$3 + 9889 | 0 | 0;
 }
 
 function $366($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1, $16_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  $15_1 = $15_1 | 0;
  $16_1 = $16_1 | 0;
  var $19_1 = 0, $21_1 = 0, $72_1 = 0;
  $19_1 = global$0 - 448 | 0;
  global$0 = $19_1;
  HEAP32[($19_1 + 444 | 0) >> 2] = $0_1;
  HEAP32[($19_1 + 440 | 0) >> 2] = $1_1;
  HEAP32[($19_1 + 436 | 0) >> 2] = $2_1;
  HEAP32[($19_1 + 432 | 0) >> 2] = $3_1;
  HEAP32[($19_1 + 428 | 0) >> 2] = $4_1;
  HEAP32[($19_1 + 424 | 0) >> 2] = $5_1;
  HEAP32[($19_1 + 420 | 0) >> 2] = $6_1;
  HEAP32[($19_1 + 416 | 0) >> 2] = $7_1;
  HEAP32[($19_1 + 412 | 0) >> 2] = $8_1;
  HEAP32[($19_1 + 408 | 0) >> 2] = $9_1;
  HEAP32[($19_1 + 404 | 0) >> 2] = $10_1;
  HEAP32[($19_1 + 400 | 0) >> 2] = $11_1;
  HEAP32[($19_1 + 396 | 0) >> 2] = $12_1;
  HEAP32[($19_1 + 392 | 0) >> 2] = $13_1;
  HEAP32[($19_1 + 388 | 0) >> 2] = $14_1;
  HEAP32[($19_1 + 384 | 0) >> 2] = $15_1;
  HEAP8[($19_1 + 383 | 0) >> 0] = $16_1;
  $21_1 = HEAP32[($19_1 + 444 | 0) >> 2] | 0;
  $277($19_1 + 16 | 0 | 0, $476(HEAP32[($19_1 + 440 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $277($19_1 | 0, $476(HEAP32[($19_1 + 436 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  FUNCTION_TABLE[$21_1 | 0]($19_1 + 32 | 0, $19_1 + 16 | 0, $19_1, $473(HEAP32[($19_1 + 432 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($19_1 + 428 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($19_1 + 424 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($19_1 + 420 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($19_1 + 416 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($19_1 + 412 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($19_1 + 408 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($19_1 + 404 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($19_1 + 400 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($19_1 + 396 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($19_1 + 392 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($19_1 + 388 | 0) >> 2] | 0 | 0) | 0, $473(HEAP32[($19_1 + 384 | 0) >> 2] | 0 | 0) | 0, ($567((HEAPU8[($19_1 + 383 | 0) >> 0] | 0) & 1 | 0 | 0) | 0) & 1 | 0);
  $72_1 = $577($19_1 + 32 | 0 | 0) | 0;
  $257($19_1 + 32 | 0 | 0) | 0;
  $240($19_1 | 0) | 0;
  $240($19_1 + 16 | 0 | 0) | 0;
  global$0 = $19_1 + 448 | 0;
  return $72_1 | 0;
 }
 
 function $367($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 17 | 0;
 }
 
 function $368($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $578() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $369() {
  return global$3 + 9904 | 0 | 0;
 }
 
 function $370($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $9_1 = 0, $46_1 = 0;
  $8_1 = global$0 - 432 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 428 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 424 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 420 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 416 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 412 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 408 | 0) >> 2] = $5_1;
  $9_1 = HEAP32[($8_1 + 428 | 0) >> 2] | 0;
  $282($8_1 + 48 | 0 | 0, $583(HEAP32[($8_1 + 424 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $277($8_1 + 32 | 0 | 0, $476(HEAP32[($8_1 + 420 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $277($8_1 + 16 | 0 | 0, $476(HEAP32[($8_1 + 416 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $277($8_1 | 0, $476(HEAP32[($8_1 + 412 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  FUNCTION_TABLE[$9_1 | 0]($8_1 + 392 | 0, $8_1 + 48 | 0, $8_1 + 32 | 0, $8_1 + 16 | 0, $8_1, $473(HEAP32[($8_1 + 408 | 0) >> 2] | 0 | 0) | 0);
  $46_1 = $574($8_1 + 392 | 0 | 0) | 0;
  $240($8_1 + 392 | 0 | 0) | 0;
  $240($8_1 | 0) | 0;
  $240($8_1 + 16 | 0 | 0) | 0;
  $240($8_1 + 32 | 0 | 0) | 0;
  $257($8_1 + 48 | 0 | 0) | 0;
  global$0 = $8_1 + 432 | 0;
  return $46_1 | 0;
 }
 
 function $371($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 6 | 0;
 }
 
 function $372($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $584() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $373($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $374($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $376($6_1 | 0, $375(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $377(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $378($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $375($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $376($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $375(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $377($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $378($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $379($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $379($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $380($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $264(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0 < 3 >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $381($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $382($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $383($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $383($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $384($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $385($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $388((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $386($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $387($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $373($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $390($5_1 + 8 | 0 | 0, $4_1 + 4 | 0 | 0, $389(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $388($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $399(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $389($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $390($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $376($6_1 | 0, $375(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $401($6_1 | 0, $400(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $391($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $402($385(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $403() | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $15_1 = HEAP32[($404($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $392($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $406((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $393($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $405(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $394($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $407((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $395($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $410($5_1 | 0, $408($5_1 | 0) | 0 | 0, ($408($5_1 | 0) | 0) + (($409($5_1 | 0) | 0) << 3 | 0) | 0 | 0, ($408($5_1 | 0) | 0) + (($409($5_1 | 0) | 0) << 3 | 0) | 0 | 0, ($408($5_1 | 0) | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $396($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0;
  return $6_1 | 0;
 }
 
 function $397($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $26_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) - (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0) >> 3 | 0;
  label$1 : {
   if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$1
   }
   $868(HEAP32[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
   $26_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
   HEAP32[$26_1 >> 2] = (HEAP32[$26_1 >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $398($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $399($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $400($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $401($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $400(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $402($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $412(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $403() {
  return $413() | 0 | 0;
 }
 
 function $404($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $411(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $405($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($402(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $415(global$3 + 2350 | 0 | 0);
   abort();
  }
  $20_1 = $416((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0 | 0, 8 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $20_1 | 0;
 }
 
 function $406($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $419(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $407($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $420(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $408($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $272(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $409($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $421(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $410($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  return;
 }
 
 function $411($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($414($4_1 + 8 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[$4_1 >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $412($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 536870911 | 0;
 }
 
 function $413() {
  return 2147483647 | 0;
 }
 
 function $414($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0 | 0;
 }
 
 function $415($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = fimport$6(8 | 0) | 0;
  $417($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  fimport$7($5_1 | 0, global$6 | 0, global$5 | 0);
  abort();
 }
 
 function $416($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $418(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $417($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $814($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = global$7 + 8 | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $418($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $419($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $420($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $421($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($422($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 3 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $422($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $423((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $423($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $424(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $424($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $425($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $431(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $426($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $427($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $377(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $381($6_1 | 0) | 0;
  $433($6_1 | 0, $432(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $428($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($263(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $429($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $430($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[(($263(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $431($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $435(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $432($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $432(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $434($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $435($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $436($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $438($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $437($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $439(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $438($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $14_1 = $392($5_1 | 0) | 0;
    $17_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -8 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $17_1;
    $440($14_1 | 0, $272($17_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $439($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $442(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 3 | 0 | 0, 8 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $440($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $441(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $441($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $442($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $443(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $443($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $444(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $444($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $754(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $445($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  return ((HEAP32[$4_1 >> 2] | 0) - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0) >> 3 | 0 | 0;
 }
 
 function $446($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  return;
 }
 
 function $447($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $453(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $448($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $12_1 = $455($454(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, $454(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $454(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $449($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $456($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $338($5_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $438($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $457($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $450($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $458($4_1 | 0);
   $437($392($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $409($4_1 | 0) | 0 | 0);
   (wasm2js_i32$0 = $394($4_1 | 0) | 0, wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $451($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $36_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $391($5_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $752($5_1 | 0);
   abort();
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $409($5_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($459($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  }
  $36_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $36_1 | 0;
 }
 
 function $452($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $453($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 3 | 0) | 0;
  return;
 }
 
 function $454($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $455($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $27_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) - (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0) >> 3 | 0;
  label$1 : {
   if (!((HEAP32[$5_1 >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   $870(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, (HEAP32[$5_1 >> 2] | 0) << 3 | 0 | 0) | 0;
  }
  $27_1 = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + ((HEAP32[$5_1 >> 2] | 0) << 3 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $27_1 | 0;
 }
 
 function $456($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $457($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $410($5_1 | 0, $408($5_1 | 0) | 0 | 0, ($408($5_1 | 0) | 0) + (($409($5_1 | 0) | 0) << 3 | 0) | 0 | 0, ($408($5_1 | 0) | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, ($408($5_1 | 0) | 0) + (($338($5_1 | 0) | 0) << 3 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $458($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $338($4_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $436($4_1 | 0);
  $457($4_1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  $452($4_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $459($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $460(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $460($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($414($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[$4_1 >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $461($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  return;
 }
 
 function $462($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($262($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $428($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $464($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $463($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = (HEAPU8[(($263(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 255 | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $464($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $465($263(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $465($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $466(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $466($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $467($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($264(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $468($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $469($264(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $469($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $470(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $470($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $471() {
  return global$3 + 12464 | 0 | 0;
 }
 
 function $472($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $473($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $474() {
  return global$8 | 0;
 }
 
 function $475($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(12 | 0) | 0;
  $277($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $476($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $477() {
  return global$9 | 0;
 }
 
 function $478($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return +(+HEAPF64[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 3]);
 }
 
 function $479($0_1) {
  $0_1 = +$0_1;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF64[($3_1 + 8 | 0) >> 3] = $0_1;
  return +(+HEAPF64[($3_1 + 8 | 0) >> 3]);
 }
 
 function $480() {
  return global$10 | 0;
 }
 
 function $481() {
  return global$3 + 12528 | 0 | 0;
 }
 
 function $482($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $396($4_1 + 8 | 0 | 0, $5_1 | 0, 1 | 0) | 0;
  $489($392($5_1 | 0) | 0 | 0, $272(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, $488(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0;
  $398($4_1 + 8 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $483($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $392($5_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  $490($4_1 | 0, $451($5_1 | 0, ($338($5_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $338($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $489(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $272(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $488(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0;
  $491($5_1 | 0, $4_1 | 0);
  $492($4_1 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $484($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((((HEAP32[($394($6_1 | 0) | 0) >> 2] | 0) - (HEAP32[($6_1 + 4 | 0) >> 2] | 0) | 0) >> 3 | 0) >>> 0 >= (HEAP32[($5_1 + 40 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    $511($6_1 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $392($6_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
   $490($5_1 + 8 | 0 | 0, $451($6_1 | 0, ($338($6_1 | 0) | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0 | 0) | 0 | 0, $338($6_1 | 0) | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0;
   $512($5_1 + 8 | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
   $491($6_1 | 0, $5_1 + 8 | 0 | 0);
   $492($5_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $5_1 + 48 | 0;
  return;
 }
 
 function $485($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0;
 }
 
 function $486($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $551($4_1 | 0, $488(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = fimport$12($552() | 0 | 0, $553($4_1 | 0) | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $487($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $554($0_1 | 0, 1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $488($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $489($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $493(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, $488(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $490($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $19_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $494($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($6_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
    $19_1 = $393($495($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $19_1 = 0;
  }
  HEAP32[$7_1 >> 2] = $19_1;
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0;
  (wasm2js_i32$0 = $496($7_1 | 0) | 0, wasm2js_i32$1 = $31_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $491($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $249($5_1 | 0);
  $497($392($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $498($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $498($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  $498($394($5_1 | 0) | 0 | 0, $496(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $395($5_1 | 0, $338($5_1 | 0) | 0 | 0);
  $452($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $492($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $499($4_1 | 0);
  label$1 : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $437($495($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $500($4_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $493($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0, wasm2js_f64$0 = +HEAPF64[($488(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 3]), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $494($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $376($6_1 | 0, $375(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $502($6_1 + 4 | 0 | 0, $501(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $495($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $503((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $496($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $504((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $497($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $13_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) - (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0) >> 3 | 0;
  $13_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[$13_1 >> 2] = (HEAP32[$13_1 >> 2] | 0) + ((0 - (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$1
   }
   $868(HEAP32[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $498($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $16_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($506(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $10_1 = HEAP32[($506(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = $10_1;
  $16_1 = HEAP32[($506($4_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = $16_1;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $499($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $507($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $500($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($508($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 3 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $501($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $502($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $501(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $503($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $505((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $504($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $420(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $505($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $506($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $507($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $509(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $508($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $510((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $509($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $13_1 = $495($5_1 | 0) | 0;
    $16_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -8 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $16_1;
    $440($13_1 | 0, $272($16_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $510($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $424(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $511($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $396($5_1 + 8 | 0 | 0, $6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $489($392($6_1 | 0) | 0 | 0, $272(HEAP32[$5_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 8 | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
    continue label$2;
   };
  }
  $398($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $512($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $513($5_1 + 8 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $489($495($6_1 | 0) | 0 | 0, $272(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
    HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 8 | 0;
    continue label$2;
   };
  }
  $514($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $513($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  return $6_1 | 0;
 }
 
 function $514($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $515($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return global$9 | 0;
 }
 
 function $516() {
  return global$11 | 0;
 }
 
 function $517() {
  return global$12 | 0;
 }
 
 function $518($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $521(FUNCTION_TABLE[HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0]() | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $519($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 1 | 0;
 }
 
 function $520($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $522() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $521($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $522() {
  return global$3 + 12568 | 0 | 0;
 }
 
 function $523($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $13_1 = 0, $19_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = $2_1;
  $7_1 = $527(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $8_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
  $10_1 = HEAP32[$8_1 >> 2] | 0;
  $13_1 = $7_1 + ($9_1 >> 1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!($9_1 & 1 | 0)) {
     break label$2
    }
    $19_1 = HEAP32[((HEAP32[$13_1 >> 2] | 0) + $10_1 | 0) >> 2] | 0;
    break label$1;
   }
   $19_1 = $10_1;
  }
  (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +$479(+(+HEAPF64[($5_1 + 16 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
  FUNCTION_TABLE[$19_1 | 0]($13_1, $5_1 + 8 | 0);
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $524($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 3 | 0;
 }
 
 function $525($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $528() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $526($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(8 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8_1 = HEAP32[$7_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $8_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $527($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $528() {
  return global$3 + 12572 | 0 | 0;
 }
 
 function $529($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = +$3_1;
  var $6_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $14_1 = 0, $20_1 = 0, $8_1 = 0, $23_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAPF64[($6_1 + 8 | 0) >> 3] = $3_1;
  $8_1 = $527(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  $10_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
  $11_1 = HEAP32[$9_1 >> 2] | 0;
  $14_1 = $8_1 + ($10_1 >> 1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!($10_1 & 1 | 0)) {
     break label$2
    }
    $20_1 = HEAP32[((HEAP32[$14_1 >> 2] | 0) + $11_1 | 0) >> 2] | 0;
    break label$1;
   }
   $20_1 = $11_1;
  }
  $23_1 = $534(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = +$479(+(+HEAPF64[($6_1 + 8 | 0) >> 3]))), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  FUNCTION_TABLE[$20_1 | 0]($14_1, $23_1, $6_1);
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $530($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 4 | 0;
 }
 
 function $531($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $535() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $532() {
  return global$3 + 9826 | 0 | 0;
 }
 
 function $533($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(8 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8_1 = HEAP32[$7_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $8_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $534($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $535() {
  return global$3 + 12592 | 0 | 0;
 }
 
 function $536($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $18_1 = 0, $6_1 = 0, $24_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $540(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  $9_1 = HEAP32[$7_1 >> 2] | 0;
  $12_1 = $6_1 + ($8_1 >> 1 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!($8_1 & 1 | 0)) {
     break label$2
    }
    $18_1 = HEAP32[((HEAP32[$12_1 >> 2] | 0) + $9_1 | 0) >> 2] | 0;
    break label$1;
   }
   $18_1 = $9_1;
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = FUNCTION_TABLE[$18_1 | 0]($12_1) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $24_1 = $541($4_1 + 4 | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $24_1 | 0;
 }
 
 function $537($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 2 | 0;
 }
 
 function $538($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $542() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $539($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(8 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8_1 = HEAP32[$7_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $8_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $540($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $541($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $542() {
  return global$3 + 12608 | 0 | 0;
 }
 
 function $543($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $7_1 = HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  FUNCTION_TABLE[$7_1 | 0]($5_1, $476(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0, $534(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0);
  $14_1 = $548($5_1 | 0) | 0;
  $549($5_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $544($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 3 | 0;
 }
 
 function $545($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $550() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $546() {
  return global$3 + 9851 | 0 | 0;
 }
 
 function $547($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(4 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $548($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$10(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
  $7_1 = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $549($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  fimport$11(HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $550() {
  return global$3 + 12616 | 0 | 0;
 }
 
 function $551($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $555($5_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  $8_1 = $488(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $4_1 + 12 | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $8_1;
  $556(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, +(+$478($488(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0)));
  $557(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $552() {
  return $558() | 0 | 0;
 }
 
 function $553($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $559(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $554($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $555($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $556($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF64[$4_1 >> 3] = $1_1;
  HEAPF64[(HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) >> 3] = +HEAPF64[$4_1 >> 3];
  $7_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + 8 | 0;
  return;
 }
 
 function $557($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $558() {
  return global$10 | 0;
 }
 
 function $559($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $560($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = +$3_1;
  var $6_1 = 0, $8_1 = 0, $10_1 = 0, $12_1 = 0, $19_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAPF64[($6_1 + 8 | 0) >> 3] = $3_1;
  $8_1 = HEAP32[(HEAP32[($6_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
  $10_1 = $476(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $12_1 = $534(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = +$479(+(+HEAPF64[($6_1 + 8 | 0) >> 3]))), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  $19_1 = ($565((FUNCTION_TABLE[$8_1 | 0]($10_1, $12_1, $6_1) | 0) & 1 | 0 | 0) | 0) & 1 | 0;
  global$0 = $6_1 + 32 | 0;
  return $19_1 | 0;
 }
 
 function $561($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 4 | 0;
 }
 
 function $562($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $566() | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $563() {
  return global$3 + 9856 | 0 | 0;
 }
 
 function $564($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(4 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $565($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP8[($3_1 + 15 | 0) >> 0] = $0_1;
  return (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $566() {
  return global$3 + 12640 | 0 | 0;
 }
 
 function $567($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP8[($3_1 + 15 | 0) >> 0] = $0_1;
  return (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $568($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(168 | 0) | 0;
  $571($5_1 | 0, $570(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $569() {
  return global$3 + 12656 | 0 | 0;
 }
 
 function $570($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $571($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $53_1 = 0, $56_1 = 0, $7_1 = 0, $10_1 = 0, $13_1 = 0, $16_1 = 0, $19_1 = 0, $22_1 = 0, $57_1 = 0, $61_1 = 0, $64_1 = 0, $67_1 = 0, $70_1 = 0, $103_1 = 0, $113_1 = 0, $123_1 = 0, $133_1 = 0, $143_1 = 0, $153_1 = 0, $163_1 = 0, $236_1 = 0, $256_1 = 0, $266_1 = 0, $276_1 = 0, $286_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $103_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $103_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $7_1 = 48;
  i64toi32_i32$2 = i64toi32_i32$2 + $7_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $113_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $7_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = 40;
  i64toi32_i32$2 = $6_1 + $10_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $123_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $10_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $123_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $13_1 = 32;
  i64toi32_i32$2 = $6_1 + $13_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $133_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $13_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $133_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $16_1 = 24;
  i64toi32_i32$2 = $6_1 + $16_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $143_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $16_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $143_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $19_1 = 16;
  i64toi32_i32$2 = $6_1 + $19_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $153_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + $19_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $153_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $22_1 = 8;
  i64toi32_i32$2 = $6_1 + $22_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $163_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + $22_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $163_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $572($5_1 + 56 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 56 | 0 | 0) | 0;
  $572($5_1 + 68 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 68 | 0 | 0) | 0;
  $572($5_1 + 80 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 80 | 0 | 0) | 0;
  $572($5_1 + 92 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 92 | 0 | 0) | 0;
  HEAP32[($5_1 + 104 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 104 | 0) >> 2] | 0;
  $572($5_1 + 108 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 108 | 0 | 0) | 0;
  $53_1 = $5_1 + 120 | 0;
  $56_1 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 120 | 0;
  i64toi32_i32$2 = $56_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $236_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $53_1;
  HEAP32[i64toi32_i32$1 >> 2] = $236_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $57_1 = 40;
  HEAP32[(i64toi32_i32$1 + $57_1 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $57_1 | 0) >> 2] | 0;
  $61_1 = 32;
  i64toi32_i32$2 = i64toi32_i32$2 + $61_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $256_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $53_1 + $61_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $256_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $64_1 = 24;
  i64toi32_i32$2 = $56_1 + $64_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $266_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $53_1 + $64_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $266_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $67_1 = 16;
  i64toi32_i32$2 = $56_1 + $67_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $276_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $53_1 + $67_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $276_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $70_1 = 8;
  i64toi32_i32$2 = $56_1 + $70_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $286_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $53_1 + $70_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $286_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $572($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $387($5_1 | 0, $389($392(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $15_1 = HEAP32[($394(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  (wasm2js_i32$0 = $394($5_1 | 0) | 0, wasm2js_i32$1 = $15_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $394(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $573($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $574($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(12 | 0) | 0;
  $572($5_1 | 0, $576(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $575() {
  return global$3 + 12720 | 0 | 0;
 }
 
 function $576($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $577($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $753(344 | 0) | 0;
  $580($5_1 | 0, $579(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $578() {
  return global$3 + 12752 | 0 | 0;
 }
 
 function $579($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $580($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $70_1 = 0, $73_1 = 0, $47_1 = 0, $51_1 = 0, $74_1 = 0, $77_1 = 0, $80_1 = 0, $83_1 = 0, $86_1 = 0, $89_1 = 0, $215_1 = 0, $225_1 = 0, $270_1 = 0, $280_1 = 0, $290_1 = 0, $300_1 = 0, $310_1 = 0, $320_1 = 0, $330_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $868($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 80 | 0) | 0;
  $572($5_1 + 80 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 80 | 0 | 0) | 0;
  $572($5_1 + 92 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 92 | 0 | 0) | 0;
  $572($5_1 + 104 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 104 | 0 | 0) | 0;
  $572($5_1 + 116 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 116 | 0 | 0) | 0;
  HEAP32[($5_1 + 128 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 128 | 0) >> 2] | 0;
  $572($5_1 + 132 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 132 | 0 | 0) | 0;
  $868($5_1 + 144 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 144 | 0 | 0, 76 | 0) | 0;
  $581($5_1 + 220 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 220 | 0 | 0) | 0;
  $47_1 = $5_1 + 232 | 0;
  i64toi32_i32$2 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 232 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $215_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $47_1;
  HEAP32[i64toi32_i32$0 >> 2] = $215_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $51_1 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $51_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $225_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $47_1 + $51_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $225_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $581($5_1 + 248 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 248 | 0 | 0) | 0;
  $581($5_1 + 260 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 260 | 0 | 0) | 0;
  $581($5_1 + 272 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 272 | 0 | 0) | 0;
  $70_1 = $5_1 + 288 | 0;
  $73_1 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 288 | 0;
  i64toi32_i32$2 = $73_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $270_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $70_1;
  HEAP32[i64toi32_i32$0 >> 2] = $270_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $74_1 = 48;
  i64toi32_i32$2 = i64toi32_i32$2 + $74_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $280_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $70_1 + $74_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $280_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $77_1 = 40;
  i64toi32_i32$2 = $73_1 + $77_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $290_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $70_1 + $77_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $290_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $80_1 = 32;
  i64toi32_i32$2 = $73_1 + $80_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $300_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $70_1 + $80_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $300_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $83_1 = 24;
  i64toi32_i32$2 = $73_1 + $83_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $310_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $70_1 + $83_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $310_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $86_1 = 16;
  i64toi32_i32$2 = $73_1 + $86_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $320_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $70_1 + $86_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $320_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $89_1 = 8;
  i64toi32_i32$2 = $73_1 + $89_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $330_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $70_1 + $89_1 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $330_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $581($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $7_1 = $582(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $8_1 = 8;
  HEAP32[($5_1 + $8_1 | 0) >> 2] = HEAP32[($7_1 + $8_1 | 0) >> 2] | 0;
  $380(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $582($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $583($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $584() {
  return global$3 + 12832 | 0 | 0;
 }
 
 function $585() {
  $284();
  return;
 }
 
 function $586($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $743($587(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $587($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $588() {
  fimport$13($589() | 0 | 0, 2683 | 0);
  fimport$14($590() | 0 | 0, 1972 | 0, 1 | 0, 1 & 1 | 0 | 0, 0 & 1 | 0 | 0);
  $591(1774 | 0);
  $592(1767 | 0);
  $593(1765 | 0);
  $594(1149 | 0);
  $595(1140 | 0);
  $596(1223 | 0);
  $597(1214 | 0);
  $598(2218 | 0);
  $599(2209 | 0);
  $600(1276 | 0);
  $601(1275 | 0);
  $602(1269 | 0);
  $603(2571 | 0);
  fimport$15($604() | 0 | 0, 2249 | 0);
  fimport$15($605() | 0 | 0, 3450 | 0);
  fimport$16($606() | 0 | 0, 4 | 0, 2223 | 0);
  fimport$16($607() | 0 | 0, 2 | 0, 2261 | 0);
  fimport$16($608() | 0 | 0, 4 | 0, 2276 | 0);
  fimport$17($609() | 0 | 0, 1995 | 0);
  $610(3381 | 0);
  $611(3483 | 0);
  $612(3411 | 0);
  $613(3013 | 0);
  $614(3044 | 0);
  $615(3084 | 0);
  $616(3113 | 0);
  $617(3520 | 0);
  $618(3550 | 0);
  $611(3215 | 0);
  $612(3182 | 0);
  $613(3281 | 0);
  $614(3247 | 0);
  $615(3348 | 0);
  $616(3314 | 0);
  $619(3151 | 0);
  $620(3589 | 0);
  return;
 }
 
 function $589() {
  return $621() | 0 | 0;
 }
 
 function $590() {
  return $622() | 0 | 0;
 }
 
 function $591($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = 24;
  $11_1 = 24;
  fimport$18($623() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, (($624() | 0) << $7_1 | 0) >> $7_1 | 0 | 0, (($625() | 0) << $11_1 | 0) >> $11_1 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $592($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = 24;
  $11_1 = 24;
  fimport$18($626() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, (($627() | 0) << $7_1 | 0) >> $7_1 | 0 | 0, (($628() | 0) << $11_1 | 0) >> $11_1 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $593($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$18($629() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, ($630() | 0) & 255 | 0 | 0, ($631() | 0) & 255 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $594($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = 16;
  $11_1 = 16;
  fimport$18($632() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 2 | 0, (($633() | 0) << $7_1 | 0) >> $7_1 | 0 | 0, (($634() | 0) << $11_1 | 0) >> $11_1 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $595($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$18($635() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 2 | 0, ($636() | 0) & 65535 | 0 | 0, ($637() | 0) & 65535 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $596($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$18($309() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $638() | 0 | 0, $639() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $597($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$18($640() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $641() | 0 | 0, $642() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $598($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$18($643() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $644() | 0 | 0, $403() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $599($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$18($645() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $646() | 0 | 0, $647() | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $600($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $9$hi = 0, $10$hi = 0, $4_1 = 0, $5_1 = 0, $9_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $648() | 0;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = $649() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$0;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $650() | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$0 = $10$hi;
  $27_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$1 = $10$hi;
  $889($4_1 | 0, $5_1 | 0, 8 | 0, $9_1 | 0, i64toi32_i32$0 | 0, $27_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $601($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $9$hi = 0, $10$hi = 0, $4_1 = 0, $5_1 = 0, $9_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = $651() | 0;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = $652() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$0;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $653() | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$0 = $10$hi;
  $27_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$1 = $10$hi;
  $889($4_1 | 0, $5_1 | 0, 8 | 0, $9_1 | 0, i64toi32_i32$0 | 0, $27_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $602($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$19($654() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $603($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$19($319() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 8 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $604() {
  return $655() | 0 | 0;
 }
 
 function $605() {
  return $656() | 0 | 0;
 }
 
 function $606() {
  return $657() | 0 | 0;
 }
 
 function $607() {
  return $658() | 0 | 0;
 }
 
 function $608() {
  return $659() | 0 | 0;
 }
 
 function $609() {
  return $660() | 0 | 0;
 }
 
 function $610($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$20($661() | 0 | 0, $662() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $611($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$20($663() | 0 | 0, $664() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $612($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$20($665() | 0 | 0, $666() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $613($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$20($667() | 0 | 0, $668() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $614($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$20($669() | 0 | 0, $670() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $615($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$20($671() | 0 | 0, $672() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $616($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$20($673() | 0 | 0, $674() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $617($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$20($675() | 0 | 0, $676() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $618($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$20($677() | 0 | 0, $678() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $619($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$20($679() | 0 | 0, $680() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $620($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$20($681() | 0 | 0, $682() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $621() {
  return 11964 | 0;
 }
 
 function $622() {
  return 11988 | 0;
 }
 
 function $623() {
  return $685() | 0 | 0;
 }
 
 function $624() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($686() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $625() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($687() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $626() {
  return $688() | 0 | 0;
 }
 
 function $627() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($689() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $628() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($690() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $629() {
  return $691() | 0 | 0;
 }
 
 function $630() {
  return ($692() | 0) & 255 | 0 | 0;
 }
 
 function $631() {
  return ($693() | 0) & 255 | 0 | 0;
 }
 
 function $632() {
  return $694() | 0 | 0;
 }
 
 function $633() {
  var $1_1 = 0;
  $1_1 = 16;
  return (($695() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $634() {
  var $1_1 = 0;
  $1_1 = 16;
  return (($696() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $635() {
  return $697() | 0 | 0;
 }
 
 function $636() {
  return ($698() | 0) & 65535 | 0 | 0;
 }
 
 function $637() {
  return ($699() | 0) & 65535 | 0 | 0;
 }
 
 function $638() {
  return $700() | 0 | 0;
 }
 
 function $639() {
  return $701() | 0 | 0;
 }
 
 function $640() {
  return $702() | 0 | 0;
 }
 
 function $641() {
  return $703() | 0 | 0;
 }
 
 function $642() {
  return $704() | 0 | 0;
 }
 
 function $643() {
  return $705() | 0 | 0;
 }
 
 function $644() {
  return $706() | 0 | 0;
 }
 
 function $645() {
  return $707() | 0 | 0;
 }
 
 function $646() {
  return $708() | 0 | 0;
 }
 
 function $647() {
  return $709() | 0 | 0;
 }
 
 function $648() {
  return $710() | 0 | 0;
 }
 
 function $649() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $711() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $650() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $712() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $651() {
  return $713() | 0 | 0;
 }
 
 function $652() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $714() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $653() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $715() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $654() {
  return $716() | 0 | 0;
 }
 
 function $655() {
  return 10032 | 0;
 }
 
 function $656() {
  return 10120 | 0;
 }
 
 function $657() {
  return 10208 | 0;
 }
 
 function $658() {
  return 10300 | 0;
 }
 
 function $659() {
  return 10392 | 0;
 }
 
 function $660() {
  return 12628 | 0;
 }
 
 function $661() {
  return $717() | 0 | 0;
 }
 
 function $662() {
  return 0 | 0;
 }
 
 function $663() {
  return $718() | 0 | 0;
 }
 
 function $664() {
  return 0 | 0;
 }
 
 function $665() {
  return $719() | 0 | 0;
 }
 
 function $666() {
  return 1 | 0;
 }
 
 function $667() {
  return $720() | 0 | 0;
 }
 
 function $668() {
  return 2 | 0;
 }
 
 function $669() {
  return $721() | 0 | 0;
 }
 
 function $670() {
  return 3 | 0;
 }
 
 function $671() {
  return $722() | 0 | 0;
 }
 
 function $672() {
  return 4 | 0;
 }
 
 function $673() {
  return $723() | 0 | 0;
 }
 
 function $674() {
  return 5 | 0;
 }
 
 function $675() {
  return $724() | 0 | 0;
 }
 
 function $676() {
  return 4 | 0;
 }
 
 function $677() {
  return $725() | 0 | 0;
 }
 
 function $678() {
  return 5 | 0;
 }
 
 function $679() {
  return $726() | 0 | 0;
 }
 
 function $680() {
  return 6 | 0;
 }
 
 function $681() {
  return $727() | 0 | 0;
 }
 
 function $682() {
  return 7 | 0;
 }
 
 function $683() {
  FUNCTION_TABLE[45 | 0](13249) | 0;
  return;
 }
 
 function $684($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $588();
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $685() {
  return 12e3 | 0;
 }
 
 function $686() {
  var $1_1 = 0;
  $1_1 = 24;
  return (128 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $687() {
  var $1_1 = 0;
  $1_1 = 24;
  return (127 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $688() {
  return 12024 | 0;
 }
 
 function $689() {
  var $1_1 = 0;
  $1_1 = 24;
  return (128 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $690() {
  var $1_1 = 0;
  $1_1 = 24;
  return (127 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $691() {
  return 12012 | 0;
 }
 
 function $692() {
  return 0 & 255 | 0 | 0;
 }
 
 function $693() {
  return 255 & 255 | 0 | 0;
 }
 
 function $694() {
  return 12036 | 0;
 }
 
 function $695() {
  var $1_1 = 0;
  $1_1 = 16;
  return (32768 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $696() {
  var $1_1 = 0;
  $1_1 = 16;
  return (32767 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $697() {
  return 12048 | 0;
 }
 
 function $698() {
  return 0 & 65535 | 0 | 0;
 }
 
 function $699() {
  return 65535 & 65535 | 0 | 0;
 }
 
 function $700() {
  return -2147483648 | 0;
 }
 
 function $701() {
  return 2147483647 | 0;
 }
 
 function $702() {
  return 12072 | 0;
 }
 
 function $703() {
  return 0 | 0;
 }
 
 function $704() {
  return -1 | 0;
 }
 
 function $705() {
  return 12084 | 0;
 }
 
 function $706() {
  return -2147483648 | 0;
 }
 
 function $707() {
  return 12096 | 0;
 }
 
 function $708() {
  return 0 | 0;
 }
 
 function $709() {
  return -1 | 0;
 }
 
 function $710() {
  return 12108 | 0;
 }
 
 function $711() {
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return 0 | 0;
 }
 
 function $712() {
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 2147483647;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return -1 | 0;
 }
 
 function $713() {
  return 12120 | 0;
 }
 
 function $714() {
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return 0 | 0;
 }
 
 function $715() {
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return -1 | 0;
 }
 
 function $716() {
  return 12132 | 0;
 }
 
 function $717() {
  return 10448 | 0;
 }
 
 function $718() {
  return 10488 | 0;
 }
 
 function $719() {
  return 10528 | 0;
 }
 
 function $720() {
  return 10568 | 0;
 }
 
 function $721() {
  return 10608 | 0;
 }
 
 function $722() {
  return 10648 | 0;
 }
 
 function $723() {
  return 10688 | 0;
 }
 
 function $724() {
  return 10728 | 0;
 }
 
 function $725() {
  return 10768 | 0;
 }
 
 function $726() {
  return 10808 | 0;
 }
 
 function $727() {
  return 10848 | 0;
 }
 
 function $728() {
  $683();
  return;
 }
 
 function $729($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $5_1 = 0.0, $1_1 = 0, $2_1 = 0, $1$hi = 0, $3_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $4_1 = 0, $27_1 = 0, $28_1 = 0, $6_1 = 0.0, $50_1 = 0.0, $55$hi = 0, $57_1 = 0, $57$hi = 0, $61_1 = 0.0, $63_1 = 0.0, $68_1 = 0.0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       wasm2js_scratch_store_f64(+$0_1);
       i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
       $1_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
       $1$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $20_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
       }
       $2_1 = $20_1;
       if ($2_1 >>> 0 < 1048576 >>> 0) {
        break label$5
       }
       i64toi32_i32$1 = $1$hi;
       i64toi32_i32$0 = $1_1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$3 = -1;
       if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
        $21_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $22_1 = 0
         } else {
          $22_1 = 1
         }
         $23_1 = $22_1;
        } else {
         $23_1 = 0
        }
        $21_1 = $23_1;
       }
       if ($21_1) {
        break label$4
       }
      }
      label$6 : {
       i64toi32_i32$0 = $1$hi;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$1 = 2147483647;
       i64toi32_i32$2 = -1;
       i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$6
       }
       return +(-1.0 / ($0_1 * $0_1));
      }
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$3 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
       $24_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $25_1 = 0
        } else {
         $25_1 = 1
        }
        $26_1 = $25_1;
       } else {
        $26_1 = 0
       }
       $24_1 = $26_1;
      }
      if ($24_1) {
       break label$3
      }
      return +(($0_1 - $0_1) / 0.0);
     }
     if ($2_1 >>> 0 > 2146435071 >>> 0) {
      break label$1
     }
     $3_1 = 1072693248;
     $4_1 = -1023;
     label$7 : {
      if (($2_1 | 0) == (1072693248 | 0)) {
       break label$7
      }
      $3_1 = $2_1;
      break label$2;
     }
     i64toi32_i32$2 = $1$hi;
     if ($1_1) {
      break label$2
     }
     return +(0.0);
    }
    wasm2js_scratch_store_f64(+($0_1 * 18014398509481984.0));
    i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $1_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $1$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $27_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $27_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $27_1;
    $4_1 = -1077;
   }
   $2_1 = $3_1 + 614242 | 0;
   $5_1 = +($4_1 + ($2_1 >>> 20 | 0) | 0 | 0);
   $50_1 = $5_1 * .6931471803691238;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = ($2_1 & 1048575 | 0) + 1072079006 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $28_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $28_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $55$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $57_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   $57$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $55$hi;
   i64toi32_i32$3 = $28_1;
   i64toi32_i32$0 = $57$hi;
   i64toi32_i32$1 = $57_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$1 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64() + -1.0;
   $61_1 = $0_1;
   $63_1 = $5_1 * 1.9082149292705877e-10;
   $5_1 = $0_1 / ($0_1 + 2.0);
   $68_1 = $5_1;
   $6_1 = $0_1 * ($0_1 * .5);
   $5_1 = $5_1 * $5_1;
   $0_1 = $5_1 * $5_1;
   $0_1 = $50_1 + ($61_1 + ($63_1 + $68_1 * ($6_1 + ($0_1 * ($0_1 * ($0_1 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $5_1 * ($0_1 * ($0_1 * ($0_1 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735))) - $6_1));
  }
  return +$0_1;
 }
 
 function $730($0_1) {
  $0_1 = +$0_1;
  var $4_1 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $6_1 = 0.0, $2_1 = 0, $5_1 = 0.0, $1_1 = 0, $13_1 = 0, $14_1 = 0, $1$hi = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $1_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $13_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $2_1 = $13_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          i64toi32_i32$1 = $1$hi;
          i64toi32_i32$0 = $1_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
           i64toi32_i32$2 = 0;
           $14_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          } else {
           i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           $14_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
          }
          $3_1 = $14_1 & 2147483647 | 0;
          if ($3_1 >>> 0 < 1082532651 >>> 0) {
           break label$8
          }
          label$9 : {
           i64toi32_i32$2 = $731(+$0_1) | 0;
           i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
           i64toi32_i32$1 = i64toi32_i32$2;
           i64toi32_i32$2 = 2147483647;
           i64toi32_i32$3 = -1;
           i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
           i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
           i64toi32_i32$1 = 2146435072;
           i64toi32_i32$3 = 0;
           if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
            break label$9
           }
           return +$0_1;
          }
          label$10 : {
           if (!($0_1 > 709.782712893384)) {
            break label$10
           }
           return +($0_1 * 8988465674311579538646525.0e283);
          }
          if (!($0_1 < -708.3964185322641)) {
           break label$7
          }
          $4_1 = 0.0;
          if (!($0_1 < -745.1332191019411)) {
           break label$7
          }
          break label$2;
         }
         if ($3_1 >>> 0 < 1071001155 >>> 0) {
          break label$4
         }
         if ($3_1 >>> 0 < 1072734898 >>> 0) {
          break label$6
         }
        }
        label$11 : {
         $4_1 = $0_1 * 1.4426950408889634 + +HEAPF64[(($2_1 << 3 | 0) + 10864 | 0) >> 3];
         if (!(Math_abs($4_1) < 2147483648.0)) {
          break label$11
         }
         $3_1 = ~~$4_1;
         break label$5;
        }
        $3_1 = -2147483648;
        break label$5;
       }
       $3_1 = ($2_1 ^ 1 | 0) - $2_1 | 0;
      }
      $4_1 = +($3_1 | 0);
      $0_1 = $0_1 + $4_1 * -.6931471803691238;
      $5_1 = $4_1 * 1.9082149292705877e-10;
      $6_1 = $0_1 - $5_1;
      break label$3;
     }
     if ($3_1 >>> 0 <= 1043333120 >>> 0) {
      break label$1
     }
     $3_1 = 0;
     $5_1 = 0.0;
     $6_1 = $0_1;
    }
    $4_1 = $6_1 * $6_1;
    $4_1 = $6_1 - $4_1 * ($4_1 * ($4_1 * ($4_1 * ($4_1 * 4.1381367970572385e-08 + -1.6533902205465252e-06) + 6.613756321437934e-05) + -2.7777777777015593e-03) + .16666666666666602);
    $4_1 = $0_1 + ($6_1 * $4_1 / (2.0 - $4_1) - $5_1) + 1.0;
    if (!$3_1) {
     break label$2
    }
    $4_1 = +$867(+$4_1, $3_1 | 0);
   }
   return +$4_1;
  }
  return +($0_1 + 1.0);
 }
 
 function $731($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $732($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0.0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $5_1 = 0.0, $4_1 = 0.0, $1_1 = 0, $1$hi = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $6_1 = 0.0, $24_1 = 0, $25_1 = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        wasm2js_scratch_store_f64(+$0_1);
        i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
        $1_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
        $1$hi = i64toi32_i32$0;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = 0;
         $17_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        } else {
         i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         $17_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
        }
        $2_1 = $17_1 & 2147483647 | 0;
        if ($2_1 >>> 0 < 1078159482 >>> 0) {
         break label$6
        }
        i64toi32_i32$1 = $733(+$0_1) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = 2147483647;
        i64toi32_i32$3 = -1;
        i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 2146435072;
        i64toi32_i32$3 = 0;
        if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$1
        }
        label$7 : {
         i64toi32_i32$2 = $1$hi;
         i64toi32_i32$3 = $1_1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$0 = 0;
         if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
          $18_1 = 1
         } else {
          if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
           if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
            $19_1 = 0
           } else {
            $19_1 = 1
           }
           $20_1 = $19_1;
          } else {
           $20_1 = 0
          }
          $18_1 = $20_1;
         }
         if ($18_1) {
          break label$7
         }
         return +(-1.0);
        }
        if (!($0_1 > 709.782712893384)) {
         break label$5
        }
        return +($0_1 * 8988465674311579538646525.0e283);
       }
       if ($2_1 >>> 0 < 1071001155 >>> 0) {
        break label$3
       }
       if ($2_1 >>> 0 > 1072734897 >>> 0) {
        break label$5
       }
       label$8 : {
        i64toi32_i32$3 = $1$hi;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
         $21_1 = 1
        } else {
         if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
           $22_1 = 0
          } else {
           $22_1 = 1
          }
          $23_1 = $22_1;
         } else {
          $23_1 = 0
         }
         $21_1 = $23_1;
        }
        if ($21_1) {
         break label$8
        }
        $3_1 = $0_1 + -.6931471803691238;
        $2_1 = 1;
        $4_1 = 1.9082149292705877e-10;
        break label$4;
       }
       $3_1 = $0_1 + .6931471803691238;
       $2_1 = -1;
       $4_1 = -1.9082149292705877e-10;
       break label$4;
      }
      label$9 : {
       label$10 : {
        wasm2js_scratch_store_f64(+(.5));
        i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
        i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
        i64toi32_i32$3 = 2147483647;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
        $39_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
        $39$hi = i64toi32_i32$3;
        wasm2js_scratch_store_f64(+$0_1);
        i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
        i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
        i64toi32_i32$1 = -2147483648;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
        $42_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
        $42$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $39$hi;
        i64toi32_i32$3 = $39_1;
        i64toi32_i32$0 = $42$hi;
        i64toi32_i32$2 = $42_1;
        i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$2 | 0 | 0);
        wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
        $3_1 = $0_1 * 1.4426950408889634 + +wasm2js_scratch_load_f64();
        if (!(Math_abs($3_1) < 2147483648.0)) {
         break label$10
        }
        $2_1 = ~~$3_1;
        break label$9;
       }
       $2_1 = -2147483648;
      }
      $3_1 = +($2_1 | 0);
      $4_1 = $3_1 * 1.9082149292705877e-10;
      $3_1 = $0_1 + $3_1 * -.6931471803691238;
     }
     $0_1 = $3_1 - $4_1;
     $4_1 = $3_1 - $0_1 - $4_1;
     break label$2;
    }
    if ($2_1 >>> 0 < 1016070144 >>> 0) {
     break label$1
    }
    $2_1 = 0;
   }
   $5_1 = $0_1 * .5;
   $3_1 = $0_1 * $5_1;
   $6_1 = $3_1 * ($3_1 * ($3_1 * ($3_1 * ($3_1 * -2.0109921818362437e-07 + 4.008217827329362e-06) + -7.93650757867488e-05) + 1.5873015872548146e-03) + -.03333333333333313) + 1.0;
   $5_1 = 3.0 - $5_1 * $6_1;
   $5_1 = $3_1 * (($6_1 - $5_1) / (6.0 - $0_1 * $5_1));
   label$11 : {
    if ($2_1) {
     break label$11
    }
    return +($0_1 - ($0_1 * $5_1 - $3_1));
   }
   $3_1 = $0_1 * ($5_1 - $4_1) - $4_1 - $3_1;
   label$12 : {
    switch ($2_1 + 1 | 0 | 0) {
    case 0:
     return +(($0_1 - $3_1) * .5 + -.5);
    case 2:
     label$15 : {
      if (!($0_1 < -.25)) {
       break label$15
      }
      return +(($3_1 - ($0_1 + .5)) * -2.0);
     }
     $0_1 = $0_1 - $3_1;
     return +($0_1 + $0_1 + 1.0);
    default:
     break label$12;
    };
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $2_1 + 1023 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = 52;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $24_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   wasm2js_scratch_store_i32(0 | 0, $24_1 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
   $4_1 = +wasm2js_scratch_load_f64();
   label$16 : {
    if ($2_1 >>> 0 < 57 >>> 0) {
     break label$16
    }
    $0_1 = $0_1 - $3_1 + 1.0;
    return +((($2_1 | 0) == (1024 | 0) ? ($0_1 + $0_1) * 8988465674311579538646525.0e283 : $0_1 * $4_1) + -1.0);
   }
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 1023 - $2_1 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 52;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $25_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
    $25_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   wasm2js_scratch_store_i32(0 | 0, $25_1 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
   $5_1 = +wasm2js_scratch_load_f64();
   label$17 : {
    label$18 : {
     if (($2_1 | 0) > (19 | 0)) {
      break label$18
     }
     $0_1 = 1.0 - $5_1 + ($0_1 - $3_1);
     break label$17;
    }
    $0_1 = $0_1 - ($3_1 + $5_1) + 1.0;
   }
   $0_1 = $0_1 * $4_1;
  }
  return +$0_1;
 }
 
 function $733($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $734($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0.0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $4_1 = 0.0, $7_1 = 0, $7$hi = 0, $9_1 = 0, $5_1 = 0.0, $14_1 = 0, $3_1 = 0.0, $15_1 = 0, $16_1 = 0, $8_1 = 0, $6_1 = 0.0, $8$hi = 0, $13_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $17_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $87_1 = 0, $88_1 = 0, $89_1 = 0, $90_1 = 0, $91_1 = 0, $92_1 = 0, $107_1 = 0.0, $112_1 = 0.0, $142_1 = 0.0, $143_1 = 0.0, $190_1 = 0.0, $193_1 = 0.0, $273_1 = 0.0, $277_1 = 0.0, $280$hi = 0, $283_1 = 0, $283$hi = 0, $289_1 = 0.0, $293_1 = 0.0, $324_1 = 0.0, $334_1 = 0.0, $393_1 = 0.0, $403_1 = 0.0, $504_1 = 0, $505_1 = 0, $509_1 = 0.0, $510_1 = 0.0, $524_1 = 0, $567_1 = 0.0, $594$hi = 0, $596_1 = 0, $596$hi = 0;
  $2_1 = 1.0;
  label$1 : {
   wasm2js_scratch_store_f64(+$1_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $51_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $51_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $9_1 = $51_1;
   $10_1 = $9_1 & 2147483647 | 0;
   i64toi32_i32$1 = $7$hi;
   $11_1 = $7_1;
   if (!($10_1 | $11_1 | 0)) {
    break label$1
   }
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $8_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $8$hi = i64toi32_i32$1;
   $12_1 = $8_1;
   label$2 : {
    i64toi32_i32$0 = $12_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $52_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $52_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $13_1 = $52_1;
    if (($13_1 | 0) != (1072693248 | 0)) {
     break label$2
    }
    if (!$12_1) {
     break label$1
    }
   }
   label$3 : {
    label$4 : {
     $14_1 = $13_1 & 2147483647 | 0;
     if ($14_1 >>> 0 > 2146435072 >>> 0) {
      break label$4
     }
     if (($14_1 | 0) == (2146435072 | 0) & ($12_1 | 0) != (0 | 0) | 0) {
      break label$4
     }
     if ($10_1 >>> 0 > 2146435072 >>> 0) {
      break label$4
     }
     if (($10_1 | 0) != (2146435072 | 0)) {
      break label$3
     }
     if (!$11_1) {
      break label$3
     }
    }
    return +($0_1 + $1_1);
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       i64toi32_i32$2 = $8$hi;
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$3 = -1;
       if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
        $53_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $54_1 = 0
         } else {
          $54_1 = 1
         }
         $55_1 = $54_1;
        } else {
         $55_1 = 0
        }
        $53_1 = $55_1;
       }
       if ($53_1) {
        break label$8
       }
       $15_1 = 2;
       if ($10_1 >>> 0 > 1128267775 >>> 0) {
        break label$7
       }
       if ($10_1 >>> 0 < 1072693248 >>> 0) {
        break label$8
       }
       $16_1 = $10_1 >>> 20 | 0;
       label$9 : {
        if ($10_1 >>> 0 < 1094713344 >>> 0) {
         break label$9
        }
        $15_1 = 0;
        $16_1 = 1075 - $16_1 | 0;
        $17_1 = $11_1 >>> $16_1 | 0;
        if (($17_1 << $16_1 | 0 | 0) != ($11_1 | 0)) {
         break label$7
        }
        $15_1 = 2 - ($17_1 & 1 | 0) | 0;
        break label$7;
       }
       $15_1 = 0;
       if ($11_1) {
        break label$5
       }
       $15_1 = 0;
       $11_1 = 1043 - $16_1 | 0;
       $16_1 = $10_1 >>> $11_1 | 0;
       if (($16_1 << $11_1 | 0 | 0) != ($10_1 | 0)) {
        break label$6
       }
       $15_1 = 2 - ($16_1 & 1 | 0) | 0;
       break label$6;
      }
      $15_1 = 0;
     }
     if ($11_1) {
      break label$5
     }
    }
    label$10 : {
     if (($10_1 | 0) != (2146435072 | 0)) {
      break label$10
     }
     if (!($14_1 + -1072693248 | 0 | $12_1 | 0)) {
      break label$1
     }
     label$11 : {
      if ($14_1 >>> 0 < 1072693248 >>> 0) {
       break label$11
      }
      $107_1 = $1_1;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$0 = -1;
      if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
       $56_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
         $57_1 = 0
        } else {
         $57_1 = 1
        }
        $58_1 = $57_1;
       } else {
        $58_1 = 0
       }
       $56_1 = $58_1;
      }
      return +($56_1 ? $107_1 : 0.0);
     }
     $112_1 = -$1_1;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$3 | 0) > (i64toi32_i32$1 | 0)) {
      $59_1 = 1
     } else {
      if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0) {
        $60_1 = 0
       } else {
        $60_1 = 1
       }
       $61_1 = $60_1;
      } else {
       $61_1 = 0
      }
      $59_1 = $61_1;
     }
     return +($59_1 ? 0.0 : $112_1);
    }
    label$12 : {
     if (($10_1 | 0) != (1072693248 | 0)) {
      break label$12
     }
     label$13 : {
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = -1;
      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$3 | 0)) {
       $62_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
         $63_1 = 0
        } else {
         $63_1 = 1
        }
        $64_1 = $63_1;
       } else {
        $64_1 = 0
       }
       $62_1 = $64_1;
      }
      if ($62_1) {
       break label$13
      }
      return +$0_1;
     }
     return +(1.0 / $0_1);
    }
    label$14 : {
     if (($9_1 | 0) != (1073741824 | 0)) {
      break label$14
     }
     return +($0_1 * $0_1);
    }
    if (($9_1 | 0) != (1071644672 | 0)) {
     break label$5
    }
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
     $65_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $66_1 = 0
      } else {
       $66_1 = 1
      }
      $67_1 = $66_1;
     } else {
      $67_1 = 0
     }
     $65_1 = $67_1;
    }
    if ($65_1) {
     break label$5
    }
    return +(+$737(+$0_1));
   }
   $2_1 = +$738(+$0_1);
   label$15 : {
    if ($12_1) {
     break label$15
    }
    label$16 : {
     if (($13_1 & 1073741823 | 0 | 0) == (1072693248 | 0)) {
      break label$16
     }
     if ($14_1) {
      break label$15
     }
    }
    $142_1 = 1.0 / $2_1;
    $143_1 = $2_1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $68_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
       $69_1 = 0
      } else {
       $69_1 = 1
      }
      $70_1 = $69_1;
     } else {
      $70_1 = 0
     }
     $68_1 = $70_1;
    }
    $2_1 = $68_1 ? $142_1 : $143_1;
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$0 = $8_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = -1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$1 | 0)) {
     $71_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0) {
       $72_1 = 0
      } else {
       $72_1 = 1
      }
      $73_1 = $72_1;
     } else {
      $73_1 = 0
     }
     $71_1 = $73_1;
    }
    if ($71_1) {
     break label$1
    }
    label$17 : {
     if ($15_1 | ($14_1 + -1072693248 | 0) | 0) {
      break label$17
     }
     $1_1 = $2_1 - $2_1;
     return +($1_1 / $1_1);
    }
    return +(($15_1 | 0) == (1 | 0) ? -$2_1 : $2_1);
   }
   $3_1 = 1.0;
   label$18 : {
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
     $74_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $75_1 = 0
      } else {
       $75_1 = 1
      }
      $76_1 = $75_1;
     } else {
      $76_1 = 0
     }
     $74_1 = $76_1;
    }
    if ($74_1) {
     break label$18
    }
    label$19 : {
     switch ($15_1 | 0) {
     case 0:
      $1_1 = $0_1 - $0_1;
      return +($1_1 / $1_1);
     case 1:
      break label$19;
     default:
      break label$18;
     };
    }
    $3_1 = -1.0;
   }
   label$21 : {
    label$22 : {
     if ($10_1 >>> 0 < 1105199105 >>> 0) {
      break label$22
     }
     label$23 : {
      if ($10_1 >>> 0 < 1139802113 >>> 0) {
       break label$23
      }
      label$24 : {
       if ($14_1 >>> 0 > 1072693247 >>> 0) {
        break label$24
       }
       i64toi32_i32$2 = $7$hi;
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
        $77_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $78_1 = 0
         } else {
          $78_1 = 1
         }
         $79_1 = $78_1;
        } else {
         $79_1 = 0
        }
        $77_1 = $79_1;
       }
       return +($77_1 ? infinity : 0.0);
      }
      return +(($9_1 | 0) > (0 | 0) ? infinity : 0.0);
     }
     label$25 : {
      if ($14_1 >>> 0 > 1072693246 >>> 0) {
       break label$25
      }
      $190_1 = $3_1 * 1.e+300 * 1.e+300;
      $193_1 = $3_1 * 1.0e-300 * 1.0e-300;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
       $80_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $81_1 = 0
        } else {
         $81_1 = 1
        }
        $82_1 = $81_1;
       } else {
        $82_1 = 0
       }
       $80_1 = $82_1;
      }
      return +($80_1 ? $190_1 : $193_1);
     }
     label$26 : {
      if ($14_1 >>> 0 < 1072693249 >>> 0) {
       break label$26
      }
      return +(($9_1 | 0) > (0 | 0) ? $3_1 * 1.e+300 * 1.e+300 : $3_1 * 1.0e-300 * 1.0e-300);
     }
     $0_1 = $2_1 + -1.0;
     $2_1 = $0_1 * 1.9259629911266175e-08 + $0_1 * $0_1 * (.5 - $0_1 * ($0_1 * -.25 + .3333333333333333)) * -1.4426950408889634;
     $4_1 = $0_1 * 1.4426950216293335;
     wasm2js_scratch_store_f64(+($2_1 + $4_1));
     i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$2 | 0 | 0);
     wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
     $0_1 = +wasm2js_scratch_load_f64();
     $4_1 = $2_1 - ($0_1 - $4_1);
     break label$21;
    }
    $0_1 = $2_1 * 9007199254740992.0;
    $10_1 = $14_1 >>> 0 < 1048576 >>> 0;
    $2_1 = $10_1 ? $0_1 : $2_1;
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $83_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $83_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $9_1 = $10_1 ? $83_1 : $14_1;
    $11_1 = $9_1 & 1048575 | 0;
    $12_1 = $11_1 | 1072693248 | 0;
    $9_1 = ($10_1 ? -1076 : -1023) + ($9_1 >> 20 | 0) | 0;
    $10_1 = 0;
    label$27 : {
     if ($11_1 >>> 0 < 235663 >>> 0) {
      break label$27
     }
     label$28 : {
      if ($11_1 >>> 0 >= 767610 >>> 0) {
       break label$28
      }
      $10_1 = 1;
      break label$27;
     }
     $12_1 = $11_1 | 1071644672 | 0;
     $9_1 = $9_1 + 1 | 0;
    }
    $11_1 = $10_1 << 3 | 0;
    $273_1 = +HEAPF64[($11_1 + 10896 | 0) >> 3];
    $0_1 = +HEAPF64[($11_1 + 10880 | 0) >> 3];
    $277_1 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $12_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $84_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $84_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $280$hi = i64toi32_i32$3;
    wasm2js_scratch_store_f64(+$2_1);
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $283_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    $283$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $280$hi;
    i64toi32_i32$3 = $84_1;
    i64toi32_i32$0 = $283$hi;
    i64toi32_i32$2 = $283_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $5_1 = +wasm2js_scratch_load_f64();
    $2_1 = 1.0 / ($277_1 + $5_1);
    $289_1 = $2_1;
    $4_1 = $5_1 - $0_1;
    $293_1 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = (($12_1 >>> 1 | 0 | 536870912 | 0) + ($10_1 << 18 | 0) | 0) + 524288 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $85_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $85_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    wasm2js_scratch_store_i32(0 | 0, $85_1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
    $6_1 = +wasm2js_scratch_load_f64();
    $4_1 = $4_1 * $2_1;
    wasm2js_scratch_store_f64(+$4_1);
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    $2_1 = +wasm2js_scratch_load_f64();
    $0_1 = $289_1 * ($293_1 - $6_1 * $2_1 - ($5_1 - ($6_1 - $0_1)) * $2_1);
    $324_1 = $0_1;
    $5_1 = $2_1 * $2_1;
    $334_1 = $0_1 * ($4_1 + $2_1);
    $0_1 = $4_1 * $4_1;
    $6_1 = $334_1 + $0_1 * $0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * .20697501780033842 + .23066074577556175) + .272728123808534) + .33333332981837743) + .4285714285785502) + .5999999999999946);
    wasm2js_scratch_store_f64(+($5_1 + 3.0 + $6_1));
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 & i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $4_1 = $324_1 * $0_1 + $4_1 * ($6_1 - ($0_1 + -3.0 - $5_1));
    $2_1 = $2_1 * $0_1;
    wasm2js_scratch_store_f64(+($4_1 + $2_1));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $2_1 = $273_1 + (($4_1 - ($0_1 - $2_1)) * .9617966939259756 + $0_1 * -7.028461650952758e-09);
    $393_1 = $2_1;
    $4_1 = +HEAPF64[($11_1 + 10912 | 0) >> 3];
    $5_1 = $0_1 * .9617967009544373;
    $403_1 = $4_1 + ($2_1 + $5_1);
    $2_1 = +($9_1 | 0);
    wasm2js_scratch_store_f64(+($403_1 + $2_1));
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $4_1 = $393_1 - ($0_1 - $2_1 - $4_1 - $5_1);
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 & i64toi32_i32$2 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $5_1 = +wasm2js_scratch_load_f64();
   $2_1 = $0_1 * $5_1;
   $1_1 = $4_1 * $1_1 + ($1_1 - $5_1) * $0_1;
   $0_1 = $2_1 + $1_1;
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $7$hi = i64toi32_i32$0;
   $10_1 = $7_1;
   label$29 : {
    label$30 : {
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $86_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $86_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $12_1 = $86_1;
     if (($12_1 | 0) < (1083179008 | 0)) {
      break label$30
     }
     label$31 : {
      if (!($12_1 + -1083179008 | 0 | $10_1 | 0)) {
       break label$31
      }
      return +($3_1 * 1.e+300 * 1.e+300);
     }
     if (!($1_1 + 8.008566259537294e-17 > $0_1 - $2_1)) {
      break label$29
     }
     return +($3_1 * 1.e+300 * 1.e+300);
    }
    if (($12_1 & 2147482624 | 0) >>> 0 < 1083231232 >>> 0) {
     break label$29
    }
    label$32 : {
     if (!($12_1 + 1064252416 | 0 | $10_1 | 0)) {
      break label$32
     }
     return +($3_1 * 1.0e-300 * 1.0e-300);
    }
    if (!($1_1 <= $0_1 - $2_1)) {
     break label$29
    }
    return +($3_1 * 1.0e-300 * 1.0e-300);
   }
   $10_1 = 0;
   label$33 : {
    $11_1 = $12_1 & 2147483647 | 0;
    if ($11_1 >>> 0 < 1071644673 >>> 0) {
     break label$33
    }
    $12_1 = (1048576 >>> (($11_1 >>> 20 | 0) + -1022 | 0) | 0) + $12_1 | 0;
    $11_1 = ($12_1 >>> 20 | 0) & 2047 | 0;
    $10_1 = ($12_1 & 1048575 | 0 | 1048576 | 0) >>> (1043 - $11_1 | 0) | 0;
    $504_1 = 0 - $10_1 | 0;
    $505_1 = $10_1;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$1 | 0)) {
     $87_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $88_1 = 0
      } else {
       $88_1 = 1
      }
      $89_1 = $88_1;
     } else {
      $89_1 = 0
     }
     $87_1 = $89_1;
    }
    $10_1 = $87_1 ? $504_1 : $505_1;
    $509_1 = $1_1;
    $510_1 = $2_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = (-1048576 >> ($11_1 + -1023 | 0) | 0) & $12_1 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $90_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $90_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    wasm2js_scratch_store_i32(0 | 0, $90_1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
    $2_1 = $510_1 - +wasm2js_scratch_load_f64();
    wasm2js_scratch_store_f64(+($509_1 + $2_1));
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $7$hi = i64toi32_i32$3;
   }
   label$34 : {
    label$35 : {
     $524_1 = $10_1 << 20 | 0;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$1 | 0 | 0);
     wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
     $0_1 = +wasm2js_scratch_load_f64();
     $4_1 = $0_1 * .6931471824645996;
     $2_1 = ($1_1 - ($0_1 - $2_1)) * .6931471805599453 + $0_1 * -1.904654299957768e-09;
     $1_1 = $4_1 + $2_1;
     $0_1 = $1_1 * $1_1;
     $0_1 = $1_1 - $0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * 4.1381367970572385e-08 + -1.6533902205465252e-06) + 6.613756321437934e-05) + -2.7777777777015593e-03) + .16666666666666602);
     $567_1 = $1_1 * $0_1 / ($0_1 + -2.0);
     $0_1 = $2_1 - ($1_1 - $4_1);
     $1_1 = $1_1 - ($567_1 - ($0_1 + $1_1 * $0_1)) + 1.0;
     wasm2js_scratch_store_f64(+$1_1);
     i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
     $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
     $7$hi = i64toi32_i32$2;
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $91_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $91_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
     }
     $12_1 = $524_1 + $91_1 | 0;
     if (($12_1 | 0) > (1048575 | 0)) {
      break label$35
     }
     $1_1 = +$867(+$1_1, $10_1 | 0);
     break label$34;
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $92_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $92_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $594$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $596_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $596$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $594$hi;
    i64toi32_i32$3 = $92_1;
    i64toi32_i32$0 = $596$hi;
    i64toi32_i32$1 = $596_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$1 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $1_1 = +wasm2js_scratch_load_f64();
   }
   $2_1 = $3_1 * $1_1;
  }
  return +$2_1;
 }
 
 function $735($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $5$hi = 0, $5_1 = 0, $6$hi = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0.0, $6_1 = 0, $17_1 = 0, $18_1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$1;
  wasm2js_scratch_store_f64(+$1_1);
  i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$2 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $6_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$4 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$4 ? $5_1 : i64toi32_i32$3;
  i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$3;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
  $0_1 = +wasm2js_scratch_load_f64();
  label$1 : {
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 52;
   i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $17_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    $17_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
   }
   $3_1 = $17_1;
   if (($3_1 | 0) == (2047 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$4 = $6$hi;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$2 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$4 = i64toi32_i32$2 ? $5_1 : i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$2 ? i64toi32_i32$3 : i64toi32_i32$0;
   $5_1 = i64toi32_i32$4;
   $5$hi = i64toi32_i32$1;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$4 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
   $1_1 = +wasm2js_scratch_load_f64();
   label$2 : {
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $18_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $18_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
    }
    $4_1 = $18_1;
    if (($4_1 | 0) == (2047 | 0)) {
     break label$2
    }
    i64toi32_i32$4 = $7$hi;
    if (!($7_1 | i64toi32_i32$4 | 0)) {
     break label$2
    }
    label$3 : {
     if (($4_1 - $3_1 | 0 | 0) < (65 | 0)) {
      break label$3
     }
     $0_1 = $1_1 + $0_1;
     break label$1;
    }
    label$4 : {
     label$5 : {
      if ($4_1 >>> 0 < 1534 >>> 0) {
       break label$5
      }
      $0_1 = $0_1 * 1.90109156629516e-211;
      $1_1 = $1_1 * 1.90109156629516e-211;
      $8_1 = 5260135901548373507240989.0e186;
      break label$4;
     }
     $8_1 = 1.0;
     if ($3_1 >>> 0 > 572 >>> 0) {
      break label$4
     }
     $0_1 = $0_1 * 5260135901548373507240989.0e186;
     $1_1 = $1_1 * 5260135901548373507240989.0e186;
     $8_1 = 1.90109156629516e-211;
    }
    $736($2_1 + 24 | 0 | 0, $2_1 + 16 | 0 | 0, +$1_1);
    $736($2_1 + 8 | 0 | 0, $2_1 | 0, +$0_1);
    $0_1 = $8_1 * +$737(+(+HEAPF64[$2_1 >> 3] + +HEAPF64[($2_1 + 16 | 0) >> 3] + +HEAPF64[($2_1 + 8 | 0) >> 3] + +HEAPF64[($2_1 + 24 | 0) >> 3]));
    break label$1;
   }
   $0_1 = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return +$0_1;
 }
 
 function $736($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $4_1 = 0.0, $3_1 = 0.0;
  $3_1 = $2_1 * $2_1;
  HEAPF64[$0_1 >> 3] = $3_1;
  $4_1 = $2_1 * 134217729.0;
  $4_1 = $4_1 + ($2_1 - $4_1);
  $2_1 = $2_1 - $4_1;
  HEAPF64[$1_1 >> 3] = $2_1 * $2_1 + ($4_1 * $4_1 - $3_1 + ($4_1 + $4_1) * $2_1);
 }
 
 function $737($0_1) {
  $0_1 = +$0_1;
  return +Math_sqrt($0_1);
 }
 
 function $738($0_1) {
  $0_1 = +$0_1;
  return +Math_abs($0_1);
 }
 
 function $739($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $740($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     if (!$2_1) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      $0_1 = $0_1 + 1 | 0;
      if (!($0_1 & 3 | 0)) {
       break label$3
      }
      if ($2_1) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
   }
   label$5 : {
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$5
    }
    if ($2_1 >>> 0 < 4 >>> 0) {
     break label$5
    }
    $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
    label$6 : while (1) {
     $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $0_1 = $0_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $741($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $742($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $742($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$2
    }
    label$3 : {
     if (!($1_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAPU8[$1_1 >> 0] | 0;
      HEAP8[$0_1 >> 0] = $2_1;
      if (!$2_1) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      if ($1_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if ((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
     break label$2
    }
    label$5 : while (1) {
     HEAP32[$0_1 >> 2] = $2_1;
     $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $0_1 = $0_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     if (!((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $2_1 = HEAPU8[$1_1 >> 0] | 0;
   HEAP8[$0_1 >> 0] = $2_1;
   if (!$2_1) {
    break label$1
   }
   label$6 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $0_1 | 0;
 }
 
 function $743($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = ($878($0_1 | 0) | 0) + 1 | 0;
   $2_1 = $862($1_1 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $868($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $744($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $8_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $33_1 = 0;
  $4_1 = global$0 - 208 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = 1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   $5_1 = Math_imul($2_1, $1_1);
   if (!$5_1) {
    break label$1
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = $2_1;
   HEAP32[($4_1 + 20 | 0) >> 2] = $2_1;
   $6_1 = 0 - $2_1 | 0;
   $1_1 = $2_1;
   $7_1 = $1_1;
   $8_1 = 2;
   label$2 : while (1) {
    $33_1 = $7_1 + $2_1 | 0;
    $7_1 = $1_1;
    $1_1 = $33_1 + $1_1 | 0;
    HEAP32[(($4_1 + 16 | 0) + ($8_1 << 2 | 0) | 0) >> 2] = $1_1;
    $8_1 = $8_1 + 1 | 0;
    if ($1_1 >>> 0 < $5_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
   label$3 : {
    label$4 : {
     $7_1 = ($0_1 + $5_1 | 0) + $6_1 | 0;
     if ($7_1 >>> 0 > $0_1 >>> 0) {
      break label$4
     }
     $8_1 = 1;
     $1_1 = 1;
     break label$3;
    }
    $8_1 = 1;
    $1_1 = 1;
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       if (($8_1 | 0) != (3 | 0)) {
        break label$7
       }
       $745($0_1 | 0, $2_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 + 16 | 0 | 0);
       $746($4_1 + 8 | 0 | 0, 2 | 0);
       $1_1 = $1_1 + 2 | 0;
       break label$6;
      }
      label$8 : {
       label$9 : {
        $8_1 = $1_1 + -1 | 0;
        if ((HEAP32[(($4_1 + 16 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0) >>> 0 < ($7_1 - $0_1 | 0) >>> 0) {
         break label$9
        }
        $747($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $1_1 | 0, 0 | 0, $4_1 + 16 | 0 | 0);
        break label$8;
       }
       $745($0_1 | 0, $2_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 + 16 | 0 | 0);
      }
      label$10 : {
       if (($1_1 | 0) != (1 | 0)) {
        break label$10
       }
       $748($4_1 + 8 | 0 | 0, 1 | 0);
       $1_1 = 0;
       break label$6;
      }
      $748($4_1 + 8 | 0 | 0, $8_1 | 0);
      $1_1 = 1;
     }
     $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
     $0_1 = $0_1 + $2_1 | 0;
     if ($0_1 >>> 0 >= $7_1 >>> 0) {
      break label$3
     }
     $8_1 = $8_1 & 3 | 0;
     continue label$5;
    };
   }
   $747($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $1_1 | 0, 0 | 0, $4_1 + 16 | 0 | 0);
   label$11 : while (1) {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        if (($1_1 | 0) != (1 | 0)) {
         break label$15
        }
        if (($8_1 | 0) != (1 | 0)) {
         break label$15
        }
        if (HEAP32[($4_1 + 12 | 0) >> 2] | 0) {
         break label$14
        }
        break label$1;
       }
       if (($1_1 | 0) > (1 | 0)) {
        break label$13
       }
      }
      $8_1 = $749($4_1 + 8 | 0 | 0) | 0;
      $746($4_1 + 8 | 0 | 0, $8_1 | 0);
      $1_1 = $8_1 + $1_1 | 0;
      $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      break label$12;
     }
     $748($4_1 + 8 | 0 | 0, 2 | 0);
     HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) ^ 7 | 0;
     $746($4_1 + 8 | 0 | 0, 1 | 0);
     $5_1 = $0_1 + $6_1 | 0;
     $7_1 = $1_1 + -2 | 0;
     $747($5_1 - (HEAP32[(($4_1 + 16 | 0) + ($7_1 << 2 | 0) | 0) >> 2] | 0) | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $1_1 + -1 | 0 | 0, 1 | 0, $4_1 + 16 | 0 | 0);
     $748($4_1 + 8 | 0 | 0, 1 | 0);
     $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
     $747($5_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $7_1 | 0, 1 | 0, $4_1 + 16 | 0 | 0);
     $1_1 = $7_1;
    }
    $0_1 = $0_1 + $6_1 | 0;
    continue label$11;
   };
  }
  global$0 = $4_1 + 208 | 0;
 }
 
 function $745($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $8_1 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 240 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 >> 2] = $0_1;
  $6_1 = 1;
  label$1 : {
   if (($3_1 | 0) < (2 | 0)) {
    break label$1
   }
   $7_1 = 0 - $1_1 | 0;
   $8_1 = $0_1;
   label$2 : while (1) {
    label$3 : {
     $8_1 = $8_1 + $7_1 | 0;
     $9_1 = $3_1 + -2 | 0;
     $10_1 = $8_1 - (HEAP32[($4_1 + ($9_1 << 2 | 0) | 0) >> 2] | 0) | 0;
     if ((FUNCTION_TABLE[$2_1 | 0]($0_1, $10_1) | 0 | 0) < (0 | 0)) {
      break label$3
     }
     if ((FUNCTION_TABLE[$2_1 | 0]($0_1, $8_1) | 0 | 0) > (-1 | 0)) {
      break label$1
     }
    }
    $11_1 = (FUNCTION_TABLE[$2_1 | 0]($10_1, $8_1) | 0 | 0) > (-1 | 0);
    $8_1 = $11_1 ? $10_1 : $8_1;
    HEAP32[($5_1 + ($6_1 << 2 | 0) | 0) >> 2] = $8_1;
    $6_1 = $6_1 + 1 | 0;
    $3_1 = $11_1 ? $3_1 + -1 | 0 : $9_1;
    if (($3_1 | 0) > (1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $750($1_1 | 0, $5_1 | 0, $6_1 | 0);
  global$0 = $5_1 + 240 | 0;
 }
 
 function $746($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $3_1 = $0_1;
    break label$1;
   }
   $3_1 = $0_1 + 4 | 0;
   $1_1 = $1_1 + -32 | 0;
   $2_1 = 0;
  }
  $3_1 = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 >>> $1_1 | 0;
  HEAP32[$0_1 >> 2] = $2_1 << (32 - $1_1 | 0) | 0 | ($3_1 >>> $1_1 | 0) | 0;
 }
 
 function $747($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 240 | 0;
  global$0 = $7_1;
  $8_1 = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($7_1 + 232 | 0) >> 2] = $8_1;
  $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = $0_1;
  HEAP32[($7_1 + 236 | 0) >> 2] = $3_1;
  $9_1 = 0 - $1_1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($8_1 | 0) == (1 | 0)) {
        break label$5
       }
       $10_1 = $0_1;
       $8_1 = 1;
       break label$4;
      }
      $10_1 = $0_1;
      $8_1 = 1;
      if ($3_1) {
       break label$4
      }
      $8_1 = 1;
      $3_1 = $0_1;
      break label$3;
     }
     label$6 : while (1) {
      label$7 : {
       $3_1 = $10_1 - (HEAP32[($6_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0) | 0;
       if ((FUNCTION_TABLE[$2_1 | 0]($3_1, $0_1) | 0 | 0) >= (1 | 0)) {
        break label$7
       }
       $3_1 = $10_1;
       break label$3;
      }
      label$8 : {
       label$9 : {
        if ($5_1) {
         break label$9
        }
        if (($4_1 | 0) < (2 | 0)) {
         break label$9
        }
        $5_1 = HEAP32[((($4_1 << 2 | 0) + $6_1 | 0) + -8 | 0) >> 2] | 0;
        $11_1 = $10_1 + $9_1 | 0;
        if ((FUNCTION_TABLE[$2_1 | 0]($11_1, $3_1) | 0 | 0) > (-1 | 0)) {
         break label$8
        }
        if ((FUNCTION_TABLE[$2_1 | 0]($11_1 - $5_1 | 0, $3_1) | 0 | 0) > (-1 | 0)) {
         break label$8
        }
       }
       HEAP32[($7_1 + ($8_1 << 2 | 0) | 0) >> 2] = $3_1;
       $10_1 = $749($7_1 + 232 | 0 | 0) | 0;
       $746($7_1 + 232 | 0 | 0, $10_1 | 0);
       $8_1 = $8_1 + 1 | 0;
       $4_1 = $10_1 + $4_1 | 0;
       $5_1 = 0;
       $10_1 = $3_1;
       if ((HEAP32[($7_1 + 232 | 0) >> 2] | 0 | 0) != (1 | 0)) {
        continue label$6
       }
       $10_1 = $3_1;
       if (HEAP32[($7_1 + 236 | 0) >> 2] | 0) {
        continue label$6
       }
       break label$2;
      }
      break label$6;
     };
     $3_1 = $10_1;
     break label$2;
    }
    if ($5_1) {
     break label$1
    }
   }
   $750($1_1 | 0, $7_1 | 0, $8_1 | 0);
   $745($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 | 0, $6_1 | 0);
  }
  global$0 = $7_1 + 240 | 0;
 }
 
 function $748($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2_1 = $0_1 + 4 | 0;
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    break label$1;
   }
   $1_1 = $1_1 + -32 | 0;
   $3_1 = 0;
   $2_1 = $0_1;
  }
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $3_1 << $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 >>> (32 - $1_1 | 0) | 0 | ($2_1 << $1_1 | 0) | 0;
 }
 
 function $749($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = __wasm_ctz_i32((HEAP32[$0_1 >> 2] | 0) + -1 | 0 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   $0_1 = __wasm_ctz_i32(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   return ($0_1 ? $0_1 + 32 | 0 : 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $750($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $6_1 = 0, $7_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 256 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($2_1 | 0) < (2 | 0)) {
    break label$1
   }
   $4_1 = $1_1 + ($2_1 << 2 | 0) | 0;
   HEAP32[$4_1 >> 2] = $3_1;
   if (!$0_1) {
    break label$1
   }
   $5_1 = $3_1;
   label$2 : while (1) {
    $6_1 = $0_1 >>> 0 < 256 >>> 0 ? $0_1 : 256;
    $868($5_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
    $5_1 = 0;
    label$3 : while (1) {
     $7_1 = $1_1 + ($5_1 << 2 | 0) | 0;
     $5_1 = $5_1 + 1 | 0;
     $868(HEAP32[$7_1 >> 2] | 0 | 0, HEAP32[($1_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0 | 0, $6_1 | 0) | 0;
     HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + $6_1 | 0;
     if (($5_1 | 0) != ($2_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $0_1 = $0_1 - $6_1 | 0;
    if (!$0_1) {
     break label$1
    }
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 256 | 0;
 }
 
 function $751($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $752($0_1) {
  $0_1 = $0_1 | 0;
  $415(1574 | 0);
  abort();
 }
 
 function $753($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1 ? $0_1 : 1;
  label$1 : {
   label$2 : while (1) {
    $0_1 = $862($1_1 | 0) | 0;
    if ($0_1) {
     break label$1
    }
    label$3 : {
     $0_1 = $817() | 0;
     if (!$0_1) {
      break label$3
     }
     FUNCTION_TABLE[$0_1 | 0]();
     continue label$2;
    }
    break label$2;
   };
   fimport$21();
   abort();
  }
  return $0_1 | 0;
 }
 
 function $754($0_1) {
  $0_1 = $0_1 | 0;
  $863($0_1 | 0);
 }
 
 function $755() {
  return 13252 | 0;
 }
 
 function $756() {
  return 12856 | 0;
 }
 
 function $757($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($756() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      (wasm2js_i32$0 = $755() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     (wasm2js_i32$0 = $755() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $758($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $757($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $759($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $10_1 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $10_1 & 2047 | 0;
   if (($3_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $3_1 = 0;
      break label$3;
     }
     $0_1 = +$759(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $3_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $3_1 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $760($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($3_1 & 64 | 0)) {
      break label$3
     }
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$3 = $3_1 + -64 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $18_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $2_1 = $18_1;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    if (!$3_1) {
     break label$1
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = 0;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$3 = 64 - $3_1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $19_1 = $20_1;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = 0;
    $4_1 = $3_1;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $21_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $24$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $21_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $22_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $1_1 = $22_1;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $761($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $762($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $43_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $17_1 = 0, $17$hi = 0, $19$hi = 0, $34_1 = 0, $34$hi = 0, $37_1 = 0, $39_1 = 0, $44_1 = 0, $44$hi = 0, $46$hi = 0, $74_1 = 0, $74$hi = 0, $78$hi = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $100$hi = 0, $107_1 = 0, $107$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $43_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $43_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $43_1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $34_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $34$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = $34$hi;
    i64toi32_i32$2 = $34_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $37_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $39_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $37_1 : $39_1) {
     break label$4
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $46_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $44_1 = $46_1;
    $44$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $47_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $47_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $46$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$5 = $44_1;
    i64toi32_i32$2 = $46$hi;
    i64toi32_i32$4 = $47_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 2146435072;
   $5_1 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = 0;
   $5_1 = 0;
   $5$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $48_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $48_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   $760($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   $761($2_1 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $49_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $74_1 = $49_1;
   $74$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $50_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $78$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $74$hi;
   i64toi32_i32$4 = $74_1;
   i64toi32_i32$0 = $78$hi;
   i64toi32_i32$2 = $50_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $5$hi = i64toi32_i32$0;
   label$5 : {
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $81_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$5;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$0 = $83_1;
    i64toi32_i32$5 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$2 = $81_1;
    i64toi32_i32$5 = $90$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $100$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $100$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $107_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $107$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = $107$hi;
  i64toi32_i32$4 = $107_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $763($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $2_1 = 0;
  $869($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($764(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1_1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $2_1 = $876($0_1 | 0) | 0;
   }
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$4 : {
    if ((HEAP8[($0_1 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = $6_1 & -33 | 0;
   }
   $6_1 = $6_1 & 32 | 0;
   label$5 : {
    label$6 : {
     if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$6
     }
     $1_1 = $764($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
     break label$5;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1 + 80 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
    $1_1 = $764($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    if (!$7_1) {
     break label$5
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = $3_1 ? $1_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
   $1_1 = $3_1 & 32 | 0 ? -1 : $1_1;
   if (!$2_1) {
    break label$1
   }
   $877($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $1_1 | 0;
 }
 
 function $764($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $13_1 = 0, i64toi32_i32$1 = 0, $20_1 = 0, $14_1 = 0, $15_1 = 0, $12_1 = 0, $17_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $19_1 = 0, $16_1 = 0, $18_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $22_1 = 0, $22$hi = 0, $10_1 = 0, $21_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $8_1 = 0, $316_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($11_1 | 0) < (0 | 0)) {
     break label$2
    }
    label$3 : {
     if (($1_1 | 0) <= (2147483647 - $11_1 | 0 | 0)) {
      break label$3
     }
     (wasm2js_i32$0 = $755() | 0, wasm2js_i32$1 = 61), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $11_1 = -1;
     break label$2;
    }
    $11_1 = $1_1 + $11_1 | 0;
   }
   $12_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
   $1_1 = $12_1;
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              label$15 : {
               $13_1 = HEAPU8[$1_1 >> 0] | 0;
               if (!$13_1) {
                break label$15
               }
               label$16 : while (1) {
                label$17 : {
                 label$18 : {
                  label$19 : {
                   $13_1 = $13_1 & 255 | 0;
                   if ($13_1) {
                    break label$19
                   }
                   $13_1 = $1_1;
                   break label$18;
                  }
                  if (($13_1 | 0) != (37 | 0)) {
                   break label$17
                  }
                  $13_1 = $1_1;
                  label$20 : while (1) {
                   if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
                    break label$18
                   }
                   $14_1 = $1_1 + 2 | 0;
                   HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
                   $13_1 = $13_1 + 1 | 0;
                   $15_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
                   $1_1 = $14_1;
                   if (($15_1 | 0) == (37 | 0)) {
                    continue label$20
                   }
                   break label$20;
                  };
                 }
                 $1_1 = $13_1 - $12_1 | 0;
                 label$21 : {
                  if (!$0_1) {
                   break label$21
                  }
                  $765($0_1 | 0, $12_1 | 0, $1_1 | 0);
                 }
                 if ($1_1) {
                  continue label$1
                 }
                 $1_1 = $751(HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
                 $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                 if (!$1_1) {
                  break label$14
                 }
                 if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                  break label$14
                 }
                 $1_1 = $13_1 + 3 | 0;
                 $16_1 = (HEAP8[($13_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                 $10_1 = 1;
                 break label$13;
                }
                $14_1 = $1_1 + 1 | 0;
                HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
                $13_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                $1_1 = $14_1;
                continue label$16;
               };
              }
              $17_1 = $11_1;
              if ($0_1) {
               break label$6
              }
              if (!$10_1) {
               break label$12
              }
              $1_1 = 1;
              label$22 : {
               label$23 : while (1) {
                $13_1 = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
                if (!$13_1) {
                 break label$22
                }
                $766($3_1 + ($1_1 << 3 | 0) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
                $17_1 = 1;
                $1_1 = $1_1 + 1 | 0;
                if (($1_1 | 0) != (10 | 0)) {
                 continue label$23
                }
                break label$6;
               };
              }
              $17_1 = 1;
              if ($1_1 >>> 0 >= 10 >>> 0) {
               break label$6
              }
              label$24 : while (1) {
               if (HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) {
                break label$7
               }
               $17_1 = 1;
               $1_1 = $1_1 + 1 | 0;
               if (($1_1 | 0) == (10 | 0)) {
                break label$6
               }
               continue label$24;
              };
             }
             $1_1 = $13_1 + 1 | 0;
             $16_1 = -1;
            }
            HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
            $18_1 = 0;
            label$25 : {
             $15_1 = HEAP8[$1_1 >> 0] | 0;
             $13_1 = $15_1 + -32 | 0;
             if ($13_1 >>> 0 > 31 >>> 0) {
              break label$25
             }
             $13_1 = 1 << $13_1 | 0;
             if (!($13_1 & 75913 | 0)) {
              break label$25
             }
             label$26 : {
              label$27 : while (1) {
               $14_1 = $1_1 + 1 | 0;
               HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
               $15_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
               $1_1 = $15_1 + -32 | 0;
               if ($1_1 >>> 0 >= 32 >>> 0) {
                break label$26
               }
               $1_1 = 1 << $1_1 | 0;
               if (!($1_1 & 75913 | 0)) {
                break label$26
               }
               $13_1 = $1_1 | $13_1 | 0;
               $1_1 = $14_1;
               continue label$27;
              };
             }
             $1_1 = $14_1;
             $18_1 = $13_1;
            }
            label$28 : {
             label$29 : {
              if (($15_1 | 0) != (42 | 0)) {
               break label$29
              }
              label$30 : {
               label$31 : {
                if (!($751(HEAP8[($1_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                 break label$31
                }
                $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                 break label$31
                }
                HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
                $1_1 = $13_1 + 3 | 0;
                $19_1 = HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                $10_1 = 1;
                break label$30;
               }
               if ($10_1) {
                break label$7
               }
               $10_1 = 0;
               $19_1 = 0;
               label$32 : {
                if (!$0_1) {
                 break label$32
                }
                $1_1 = HEAP32[$2_1 >> 2] | 0;
                HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                $19_1 = HEAP32[$1_1 >> 2] | 0;
               }
               $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
              }
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              if (($19_1 | 0) > (-1 | 0)) {
               break label$28
              }
              $19_1 = 0 - $19_1 | 0;
              $18_1 = $18_1 | 8192 | 0;
              break label$28;
             }
             $19_1 = $767($7_1 + 76 | 0 | 0) | 0;
             if (($19_1 | 0) < (0 | 0)) {
              break label$7
             }
             $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
            }
            $20_1 = -1;
            label$33 : {
             if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
              break label$33
             }
             label$34 : {
              if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
               break label$34
              }
              label$35 : {
               if (!($751(HEAP8[($1_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
                break label$35
               }
               $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
               if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$35
               }
               HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
               $20_1 = HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
               $1_1 = $1_1 + 4 | 0;
               HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
               break label$33;
              }
              if ($10_1) {
               break label$7
              }
              label$36 : {
               label$37 : {
                if ($0_1) {
                 break label$37
                }
                $20_1 = 0;
                break label$36;
               }
               $1_1 = HEAP32[$2_1 >> 2] | 0;
               HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
               $20_1 = HEAP32[$1_1 >> 2] | 0;
              }
              $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 2 | 0;
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              break label$33;
             }
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
             $20_1 = $767($7_1 + 76 | 0 | 0) | 0;
             $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
            }
            $13_1 = 0;
            label$38 : while (1) {
             $14_1 = $13_1;
             $17_1 = -1;
             if (((HEAP8[$1_1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
              break label$6
             }
             $15_1 = $1_1 + 1 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $15_1;
             $13_1 = HEAP8[$1_1 >> 0] | 0;
             $1_1 = $15_1;
             $13_1 = HEAPU8[(($13_1 + Math_imul($14_1, 58) | 0) + 10863 | 0) >> 0] | 0;
             if (($13_1 + -1 | 0) >>> 0 < 8 >>> 0) {
              continue label$38
             }
             break label$38;
            };
            if (($13_1 | 0) == (19 | 0)) {
             break label$10
            }
            if (!$13_1) {
             break label$6
            }
            label$39 : {
             if (($16_1 | 0) < (0 | 0)) {
              break label$39
             }
             HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $13_1;
             i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
             i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $316_1 = i64toi32_i32$0;
             i64toi32_i32$0 = $7_1;
             HEAP32[($7_1 + 64 | 0) >> 2] = $316_1;
             HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
             break label$9;
            }
            if ($0_1) {
             break label$11
            }
           }
           $17_1 = 0;
           break label$6;
          }
          $766($7_1 + 64 | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
          $15_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
          break label$8;
         }
         $17_1 = -1;
         if (($16_1 | 0) > (-1 | 0)) {
          break label$6
         }
        }
        $1_1 = 0;
        if (!$0_1) {
         continue label$1
        }
       }
       $21_1 = $18_1 & -65537 | 0;
       $13_1 = $18_1 & 8192 | 0 ? $21_1 : $18_1;
       $17_1 = 0;
       $16_1 = 1090;
       $18_1 = $9_1;
       label$40 : {
        label$41 : {
         label$42 : {
          label$43 : {
           label$44 : {
            label$45 : {
             label$46 : {
              label$47 : {
               label$48 : {
                label$49 : {
                 label$50 : {
                  label$51 : {
                   label$52 : {
                    label$53 : {
                     label$54 : {
                      label$55 : {
                       $1_1 = HEAP8[($15_1 + -1 | 0) >> 0] | 0;
                       $1_1 = $14_1 ? (($1_1 & 15 | 0 | 0) == (3 | 0) ? $1_1 & -33 | 0 : $1_1) : $1_1;
                       switch ($1_1 + -88 | 0 | 0) {
                       case 1:
                       case 2:
                       case 3:
                       case 4:
                       case 5:
                       case 6:
                       case 7:
                       case 8:
                       case 10:
                       case 16:
                       case 18:
                       case 19:
                       case 20:
                       case 21:
                       case 25:
                       case 26:
                       case 28:
                       case 30:
                       case 31:
                        break label$4;
                       case 11:
                        break label$40;
                       case 9:
                       case 13:
                       case 14:
                       case 15:
                        break label$41;
                       case 27:
                        break label$46;
                       case 12:
                       case 17:
                        break label$49;
                       case 23:
                        break label$50;
                       case 0:
                       case 32:
                        break label$51;
                       case 24:
                        break label$52;
                       case 22:
                        break label$53;
                       case 29:
                        break label$54;
                       default:
                        break label$55;
                       };
                      }
                      $18_1 = $9_1;
                      label$56 : {
                       switch ($1_1 + -65 | 0 | 0) {
                       case 1:
                       case 3:
                        break label$4;
                       case 0:
                       case 4:
                       case 5:
                       case 6:
                        break label$41;
                       case 2:
                        break label$44;
                       default:
                        break label$56;
                       };
                      }
                      if (($1_1 | 0) == (83 | 0)) {
                       break label$45
                      }
                      break label$5;
                     }
                     $17_1 = 0;
                     $16_1 = 1090;
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $22_1 = i64toi32_i32$1;
                     $22$hi = i64toi32_i32$0;
                     break label$48;
                    }
                    $1_1 = 0;
                    label$57 : {
                     switch ($14_1 & 255 | 0 | 0) {
                     case 0:
                      HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                      continue label$1;
                     case 1:
                      HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                      continue label$1;
                     case 2:
                      i64toi32_i32$1 = $11_1;
                      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                      i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                      continue label$1;
                     case 3:
                      HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                      continue label$1;
                     case 4:
                      HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                      continue label$1;
                     case 6:
                      HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                      continue label$1;
                     case 7:
                      break label$57;
                     default:
                      continue label$1;
                     };
                    }
                    i64toi32_i32$1 = $11_1;
                    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                    i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                    HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                    continue label$1;
                   }
                   $20_1 = $20_1 >>> 0 > 8 >>> 0 ? $20_1 : 8;
                   $13_1 = $13_1 | 8 | 0;
                   $1_1 = 120;
                  }
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  $12_1 = $768(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $1_1 & 32 | 0 | 0) | 0;
                  $17_1 = 0;
                  $16_1 = 1090;
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                   break label$47
                  }
                  if (!($13_1 & 8 | 0)) {
                   break label$47
                  }
                  $16_1 = ($1_1 >>> 4 | 0) + 1090 | 0;
                  $17_1 = 2;
                  break label$47;
                 }
                 $17_1 = 0;
                 $16_1 = 1090;
                 i64toi32_i32$2 = $7_1;
                 i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                 $12_1 = $769(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                 if (!($13_1 & 8 | 0)) {
                  break label$47
                 }
                 $1_1 = $9_1 - $12_1 | 0;
                 $20_1 = ($20_1 | 0) > ($1_1 | 0) ? $20_1 : $1_1 + 1 | 0;
                 break label$47;
                }
                label$64 : {
                 i64toi32_i32$2 = $7_1;
                 i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                 $22_1 = i64toi32_i32$1;
                 $22$hi = i64toi32_i32$0;
                 i64toi32_i32$2 = i64toi32_i32$1;
                 i64toi32_i32$1 = -1;
                 i64toi32_i32$3 = -1;
                 if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                  $30_1 = 1
                 } else {
                  if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                   if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                    $31_1 = 0
                   } else {
                    $31_1 = 1
                   }
                   $32_1 = $31_1;
                  } else {
                   $32_1 = 0
                  }
                  $30_1 = $32_1;
                 }
                 if ($30_1) {
                  break label$64
                 }
                 i64toi32_i32$2 = $22$hi;
                 i64toi32_i32$2 = 0;
                 i64toi32_i32$3 = 0;
                 i64toi32_i32$0 = $22$hi;
                 i64toi32_i32$1 = $22_1;
                 i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                 i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                 $22_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                 $22$hi = i64toi32_i32$5;
                 i64toi32_i32$3 = $7_1;
                 HEAP32[($7_1 + 64 | 0) >> 2] = $22_1;
                 HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                 $17_1 = 1;
                 $16_1 = 1090;
                 break label$48;
                }
                label$65 : {
                 if (!($13_1 & 2048 | 0)) {
                  break label$65
                 }
                 $17_1 = 1;
                 $16_1 = 1091;
                 break label$48;
                }
                $17_1 = $13_1 & 1 | 0;
                $16_1 = $17_1 ? 1092 : 1090;
               }
               i64toi32_i32$5 = $22$hi;
               $12_1 = $770($22_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
              }
              $13_1 = ($20_1 | 0) > (-1 | 0) ? $13_1 & -65537 | 0 : $13_1;
              label$66 : {
               i64toi32_i32$2 = $7_1;
               i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               $22_1 = i64toi32_i32$5;
               $22$hi = i64toi32_i32$3;
               i64toi32_i32$2 = i64toi32_i32$5;
               i64toi32_i32$5 = 0;
               i64toi32_i32$1 = 0;
               if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
                break label$66
               }
               if ($20_1) {
                break label$66
               }
               $20_1 = 0;
               $12_1 = $9_1;
               break label$5;
              }
              i64toi32_i32$2 = $22$hi;
              $1_1 = ($9_1 - $12_1 | 0) + !($22_1 | i64toi32_i32$2 | 0) | 0;
              $20_1 = ($20_1 | 0) > ($1_1 | 0) ? $20_1 : $1_1;
              break label$5;
             }
             $17_1 = 0;
             $1_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
             $12_1 = $1_1 ? $1_1 : 4034;
             $1_1 = $740($12_1 | 0, 0 | 0, $20_1 | 0) | 0;
             $18_1 = $1_1 ? $1_1 : $12_1 + $20_1 | 0;
             $13_1 = $21_1;
             $20_1 = $1_1 ? $1_1 - $12_1 | 0 : $20_1;
             break label$4;
            }
            label$67 : {
             if (!$20_1) {
              break label$67
             }
             $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
             break label$43;
            }
            $1_1 = 0;
            $771($0_1 | 0, 32 | 0, $19_1 | 0, 0 | 0, $13_1 | 0);
            break label$42;
           }
           HEAP32[($7_1 + 12 | 0) >> 2] = 0;
           i64toi32_i32$1 = $7_1;
           i64toi32_i32$2 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$2;
           HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
           $20_1 = -1;
           $14_1 = $7_1 + 8 | 0;
          }
          $1_1 = 0;
          label$68 : {
           label$69 : while (1) {
            $15_1 = HEAP32[$14_1 >> 2] | 0;
            if (!$15_1) {
             break label$68
            }
            label$70 : {
             $15_1 = $758($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
             $12_1 = ($15_1 | 0) < (0 | 0);
             if ($12_1) {
              break label$70
             }
             if ($15_1 >>> 0 > ($20_1 - $1_1 | 0) >>> 0) {
              break label$70
             }
             $14_1 = $14_1 + 4 | 0;
             $1_1 = $15_1 + $1_1 | 0;
             if ($20_1 >>> 0 > $1_1 >>> 0) {
              continue label$69
             }
             break label$68;
            }
            break label$69;
           };
           $17_1 = -1;
           if ($12_1) {
            break label$6
           }
          }
          $771($0_1 | 0, 32 | 0, $19_1 | 0, $1_1 | 0, $13_1 | 0);
          label$71 : {
           if ($1_1) {
            break label$71
           }
           $1_1 = 0;
           break label$42;
          }
          $14_1 = 0;
          $15_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
          label$72 : while (1) {
           $12_1 = HEAP32[$15_1 >> 2] | 0;
           if (!$12_1) {
            break label$42
           }
           $12_1 = $758($7_1 + 4 | 0 | 0, $12_1 | 0) | 0;
           $14_1 = $12_1 + $14_1 | 0;
           if (($14_1 | 0) > ($1_1 | 0)) {
            break label$42
           }
           $765($0_1 | 0, $7_1 + 4 | 0 | 0, $12_1 | 0);
           $15_1 = $15_1 + 4 | 0;
           if ($14_1 >>> 0 < $1_1 >>> 0) {
            continue label$72
           }
           break label$72;
          };
         }
         $771($0_1 | 0, 32 | 0, $19_1 | 0, $1_1 | 0, $13_1 ^ 8192 | 0 | 0);
         $1_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
         continue label$1;
        }
        $1_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $19_1, $20_1, $13_1, $1_1) | 0;
        continue label$1;
       }
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
       HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$3;
       $20_1 = 1;
       $12_1 = $8_1;
       $18_1 = $9_1;
       $13_1 = $21_1;
       break label$4;
      }
      $17_1 = -1;
     }
     global$0 = $7_1 + 80 | 0;
     return $17_1 | 0;
    }
    $18_1 = $9_1;
   }
   $15_1 = $18_1 - $12_1 | 0;
   $20_1 = ($20_1 | 0) < ($15_1 | 0) ? $15_1 : $20_1;
   $14_1 = $17_1 + $20_1 | 0;
   $1_1 = ($19_1 | 0) < ($14_1 | 0) ? $14_1 : $19_1;
   $771($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
   $765($0_1 | 0, $16_1 | 0, $17_1 | 0);
   $771($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 65536 | 0 | 0);
   $771($0_1 | 0, 48 | 0, $20_1 | 0, $15_1 | 0, 0 | 0);
   $765($0_1 | 0, $12_1 | 0, $15_1 | 0);
   $771($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 8192 | 0 | 0);
   continue label$1;
  };
 }
 
 function $765($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $872($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $766($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $23_1 = 0, $31_1 = 0, $41_1 = 0, $49_1 = 0, $57_1 = 0, $65_1 = 0, $73_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + -9 | 0 | 0) {
    case 0:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $23_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $23_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $31_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $41_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $41_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $49_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $49_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $57_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $57_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $65_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $65_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $73_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $73_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
     return;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
  }
 }
 
 function $767($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ($751(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0) {
     break label$2
    }
    $1_1 = 0;
    break label$1;
   }
   $1_1 = 0;
   label$3 : while (1) {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP8[$2_1 >> 0] | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
    $1_1 = ($1_1 + $3_1 | 0) + -48 | 0;
    if (!($751(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
     break label$1
    }
    $1_1 = Math_imul($1_1, 10);
    continue label$3;
   };
  }
  return $1_1 | 0;
 }
 
 function $768($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10_1 = 0, $3_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 11392 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 15;
    $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $10_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $10_1;
    $0$hi = i64toi32_i32$0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $769($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $2_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 7;
    $2_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $9_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $770($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$5 = 0, $2$hi = 0, $4_1 = 0, $16_1 = 0, $16$hi = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $2_1 = $0_1;
    $2$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0_1 = $2_1;
    $0$hi = i64toi32_i32$2;
    if ($3_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $2$hi;
   $3_1 = $2_1;
   if (!$3_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $4_1 = ($3_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $3_1 - Math_imul($4_1, 10) | 0 | 48 | 0;
    $5_1 = $3_1 >>> 0 > 9 >>> 0;
    $3_1 = $4_1;
    if ($5_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $771($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   $2_1 = $2_1 - $3_1 | 0;
   $3_1 = $2_1 >>> 0 < 256 >>> 0;
   $869($5_1 | 0, $1_1 & 255 | 0 | 0, ($3_1 ? $2_1 : 256) | 0) | 0;
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : while (1) {
     $765($0_1 | 0, $5_1 | 0, 256 | 0);
     $2_1 = $2_1 + -256 | 0;
     if ($2_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $765($0_1 | 0, $5_1 | 0, $2_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $772($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $763($0_1 | 0, $1_1 | 0, $2_1 | 0, 46 | 0, 47 | 0) | 0 | 0;
 }
 
 function $773($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $11_1 = 0, $18_1 = 0, $17_1 = 0, $23_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $10_1 = 0, $14_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $21_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $22_1 = 0, i64toi32_i32$3 = 0, $16_1 = 0, $24_1 = 0, $24$hi = 0, $12_1 = 0, $26_1 = 0.0, $8_1 = 0, $19_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $20_1 = 0, $7_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $25$hi = 0, $46_1 = 0, $25_1 = 0, $162_1 = 0, $164$hi = 0, $166$hi = 0, $169$hi = 0, $173_1 = 0, $173$hi = 0, $377_1 = 0.0, $821_1 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $775(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $43_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $44_1 = 0
      } else {
       $44_1 = 1
      }
      $45_1 = $44_1;
     } else {
      $45_1 = 0
     }
     $43_1 = $45_1;
    }
    if ($43_1) {
     break label$2
    }
    $8_1 = 1;
    $9_1 = 1100;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $775(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $8_1 = 1;
    $9_1 = 1103;
    break label$1;
   }
   $8_1 = $4_1 & 1 | 0;
   $9_1 = $8_1 ? 1106 : 1101;
   $7_1 = !$8_1;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10_1 = $8_1 + 3 | 0;
    $771($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $765($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $765($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 1962 : 2889) : $11_1 ? 2328 : 2948) | 0, 3 | 0);
    $771($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $12_1 = $6_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1_1 = +$759(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$9
       }
       $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $11_1 + -1 | 0;
       $13_1 = $5_1 | 32 | 0;
       if (($13_1 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $13_1 = $5_1 | 32 | 0;
      if (($13_1 | 0) == (97 | 0)) {
       break label$6
      }
      $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $15_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $15_1 = $11_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $15_1;
     $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $16_1 = ($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 : $6_1 + 336 | 0;
    $17_1 = $16_1;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$12
       }
       $11_1 = ~~$1_1 >>> 0;
       break label$11;
      }
      $11_1 = 0;
     }
     HEAP32[$17_1 >> 2] = $11_1;
     $17_1 = $17_1 + 4 | 0;
     $1_1 = ($1_1 - +($11_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($15_1 | 0) >= (1 | 0)) {
       break label$14
      }
      $3_1 = $15_1;
      $11_1 = $17_1;
      $18_1 = $16_1;
      break label$13;
     }
     $18_1 = $16_1;
     $3_1 = $15_1;
     label$15 : while (1) {
      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
      label$16 : {
       $11_1 = $17_1 + -4 | 0;
       if ($11_1 >>> 0 < $18_1 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25_1 = $3_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : {
        label$18 : while (1) {
         $162_1 = $11_1;
         i64toi32_i32$0 = $11_1;
         i64toi32_i32$1 = HEAP32[$11_1 >> 2] | 0;
         i64toi32_i32$2 = 0;
         $164$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $25$hi;
         i64toi32_i32$2 = $164$hi;
         i64toi32_i32$0 = i64toi32_i32$1;
         i64toi32_i32$1 = $25$hi;
         i64toi32_i32$3 = $25_1;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
          $46_1 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
          $46_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         }
         $166$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $24$hi;
         i64toi32_i32$1 = $166$hi;
         i64toi32_i32$2 = $46_1;
         i64toi32_i32$0 = $24$hi;
         i64toi32_i32$3 = $24_1;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         $24_1 = i64toi32_i32$4;
         $24$hi = i64toi32_i32$5;
         $169$hi = i64toi32_i32$5;
         i64toi32_i32$2 = 0;
         i64toi32_i32$2 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$2 | 0) | 0;
         i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
         $24_1 = i64toi32_i32$2;
         $24$hi = i64toi32_i32$5;
         i64toi32_i32$2 = 0;
         i64toi32_i32$2 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$2 | 0) | 0;
         i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
         $173_1 = i64toi32_i32$2;
         $173$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $169$hi;
         i64toi32_i32$1 = i64toi32_i32$4;
         i64toi32_i32$2 = $173$hi;
         i64toi32_i32$3 = $173_1;
         i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
         i64toi32_i32$4 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
         i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
         HEAP32[$162_1 >> 2] = i64toi32_i32$0;
         $11_1 = $11_1 + -4 | 0;
         if ($11_1 >>> 0 < $18_1 >>> 0) {
          break label$17
         }
         i64toi32_i32$4 = $24$hi;
         i64toi32_i32$5 = $24_1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = -1;
         i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
         $24_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
         $24$hi = i64toi32_i32$1;
         continue label$18;
        };
       }
       i64toi32_i32$1 = $24$hi;
       $11_1 = $24_1;
       if (!$11_1) {
        break label$16
       }
       $18_1 = $18_1 + -4 | 0;
       HEAP32[$18_1 >> 2] = $11_1;
      }
      label$19 : {
       label$20 : while (1) {
        $11_1 = $17_1;
        if ($11_1 >>> 0 <= $18_1 >>> 0) {
         break label$19
        }
        $17_1 = $11_1 + -4 | 0;
        if (!(HEAP32[$17_1 >> 2] | 0)) {
         continue label$20
        }
        break label$20;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $11_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    $17_1 = ($14_1 + 25 | 0 | 0) / (9 | 0) | 0;
    label$21 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$21
     }
     $19_1 = $17_1 + 1 | 0;
     $20_1 = ($13_1 | 0) == (102 | 0);
     label$22 : while (1) {
      $10_1 = ($3_1 | 0) < (-9 | 0) ? 9 : 0 - $3_1 | 0;
      label$23 : {
       label$24 : {
        if ($18_1 >>> 0 >= $11_1 >>> 0) {
         break label$24
        }
        $21_1 = 1e9 >>> $10_1 | 0;
        $22_1 = (-1 << $10_1 | 0) ^ -1 | 0;
        $3_1 = 0;
        $17_1 = $18_1;
        label$25 : while (1) {
         $23_1 = HEAP32[$17_1 >> 2] | 0;
         HEAP32[$17_1 >> 2] = ($23_1 >>> $10_1 | 0) + $3_1 | 0;
         $3_1 = Math_imul($23_1 & $22_1 | 0, $21_1);
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 < $11_1 >>> 0) {
          continue label$25
         }
         break label$25;
        };
        $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
        if (!$3_1) {
         break label$23
        }
        HEAP32[$11_1 >> 2] = $3_1;
        $11_1 = $11_1 + 4 | 0;
        break label$23;
       }
       $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $10_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $20_1 ? $16_1 : $18_1;
      $11_1 = (($11_1 - $17_1 | 0) >> 2 | 0 | 0) > ($19_1 | 0) ? $17_1 + ($19_1 << 2 | 0) | 0 : $11_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$22
      }
      break label$22;
     };
    }
    $17_1 = 0;
    label$26 : {
     if ($18_1 >>> 0 >= $11_1 >>> 0) {
      break label$26
     }
     $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
     $23_1 = HEAP32[$18_1 >> 2] | 0;
     if ($23_1 >>> 0 < 10 >>> 0) {
      break label$26
     }
     $3_1 = 100;
     label$27 : while (1) {
      $17_1 = $17_1 + 1 | 0;
      if ($23_1 >>> 0 < $3_1 >>> 0) {
       break label$26
      }
      $3_1 = Math_imul($3_1, 10);
      continue label$27;
     };
    }
    label$28 : {
     $3_1 = ($14_1 - (($13_1 | 0) == (102 | 0) ? 0 : $17_1) | 0) - (($13_1 | 0) == (103 | 0) & ($14_1 | 0) != (0 | 0) | 0) | 0;
     if (($3_1 | 0) >= (Math_imul(($11_1 - $16_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$28
     }
     $23_1 = $3_1 + 9216 | 0;
     $21_1 = ($23_1 | 0) / (9 | 0) | 0;
     $10_1 = (($21_1 << 2 | 0) + (($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 | 4 | 0 : $6_1 + 340 | 0) | 0) + -4096 | 0;
     $3_1 = 10;
     label$29 : {
      $23_1 = $23_1 - Math_imul($21_1, 9) | 0;
      if (($23_1 | 0) > (7 | 0)) {
       break label$29
      }
      $3_1 = 100;
      label$30 : while (1) {
       $23_1 = $23_1 + 1 | 0;
       if (($23_1 | 0) == (8 | 0)) {
        break label$29
       }
       $3_1 = Math_imul($3_1, 10);
       continue label$30;
      };
     }
     $22_1 = $10_1 + 4 | 0;
     label$31 : {
      label$32 : {
       $23_1 = HEAP32[$10_1 >> 2] | 0;
       $19_1 = ($23_1 >>> 0) / ($3_1 >>> 0) | 0;
       $21_1 = $23_1 - Math_imul($19_1, $3_1) | 0;
       if ($21_1) {
        break label$32
       }
       if (($22_1 | 0) == ($11_1 | 0)) {
        break label$31
       }
      }
      $377_1 = ($22_1 | 0) == ($11_1 | 0) ? 1.0 : 1.5;
      $22_1 = $3_1 >>> 1 | 0;
      $26_1 = $21_1 >>> 0 < $22_1 >>> 0 ? .5 : ($21_1 | 0) == ($22_1 | 0) ? $377_1 : 1.5;
      $1_1 = $19_1 & 1 | 0 ? 9007199254740994.0 : 9007199254740992.0;
      label$33 : {
       if ($7_1) {
        break label$33
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$33
       }
       $26_1 = -$26_1;
       $1_1 = -$1_1;
      }
      $23_1 = $23_1 - $21_1 | 0;
      HEAP32[$10_1 >> 2] = $23_1;
      if ($1_1 + $26_1 == $1_1) {
       break label$31
      }
      $17_1 = $23_1 + $3_1 | 0;
      HEAP32[$10_1 >> 2] = $17_1;
      label$34 : {
       if ($17_1 >>> 0 < 1e9 >>> 0) {
        break label$34
       }
       label$35 : while (1) {
        HEAP32[$10_1 >> 2] = 0;
        label$36 : {
         $10_1 = $10_1 + -4 | 0;
         if ($10_1 >>> 0 >= $18_1 >>> 0) {
          break label$36
         }
         $18_1 = $18_1 + -4 | 0;
         HEAP32[$18_1 >> 2] = 0;
        }
        $17_1 = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
        HEAP32[$10_1 >> 2] = $17_1;
        if ($17_1 >>> 0 > 999999999 >>> 0) {
         continue label$35
        }
        break label$35;
       };
      }
      $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
      $23_1 = HEAP32[$18_1 >> 2] | 0;
      if ($23_1 >>> 0 < 10 >>> 0) {
       break label$31
      }
      $3_1 = 100;
      label$37 : while (1) {
       $17_1 = $17_1 + 1 | 0;
       if ($23_1 >>> 0 < $3_1 >>> 0) {
        break label$31
       }
       $3_1 = Math_imul($3_1, 10);
       continue label$37;
      };
     }
     $3_1 = $10_1 + 4 | 0;
     $11_1 = $11_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $11_1;
    }
    label$38 : {
     label$39 : while (1) {
      $3_1 = $11_1;
      $23_1 = $11_1 >>> 0 <= $18_1 >>> 0;
      if ($23_1) {
       break label$38
      }
      $11_1 = $3_1 + -4 | 0;
      if (!(HEAP32[$11_1 >> 2] | 0)) {
       continue label$39
      }
      break label$39;
     };
    }
    label$40 : {
     label$41 : {
      if (($13_1 | 0) == (103 | 0)) {
       break label$41
      }
      $22_1 = $4_1 & 8 | 0;
      break label$40;
     }
     $11_1 = $14_1 ? $14_1 : 1;
     $10_1 = ($11_1 | 0) > ($17_1 | 0) & ($17_1 | 0) > (-5 | 0) | 0;
     $14_1 = ($10_1 ? $17_1 ^ -1 | 0 : -1) + $11_1 | 0;
     $5_1 = ($10_1 ? -1 : -2) + $5_1 | 0;
     $22_1 = $4_1 & 8 | 0;
     if ($22_1) {
      break label$40
     }
     $11_1 = -9;
     label$42 : {
      if ($23_1) {
       break label$42
      }
      $10_1 = HEAP32[($3_1 + -4 | 0) >> 2] | 0;
      if (!$10_1) {
       break label$42
      }
      $11_1 = 0;
      if (($10_1 >>> 0) % (10 >>> 0) | 0) {
       break label$42
      }
      $23_1 = 0;
      $11_1 = 100;
      label$43 : {
       label$44 : while (1) {
        if (($10_1 >>> 0) % ($11_1 >>> 0) | 0) {
         break label$43
        }
        $23_1 = $23_1 + 1 | 0;
        $11_1 = Math_imul($11_1, 10);
        continue label$44;
       };
      }
      $11_1 = $23_1 ^ -1 | 0;
     }
     $23_1 = Math_imul(($3_1 - $16_1 | 0) >> 2 | 0, 9);
     label$45 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$45
      }
      $22_1 = 0;
      $11_1 = ($23_1 + $11_1 | 0) + -9 | 0;
      $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
      $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
      break label$40;
     }
     $22_1 = 0;
     $11_1 = (($17_1 + $23_1 | 0) + $11_1 | 0) + -9 | 0;
     $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
     $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
    }
    $19_1 = ($14_1 | $22_1 | 0 | 0) != (0 | 0);
    label$46 : {
     label$47 : {
      $23_1 = $5_1 & -33 | 0;
      if (($23_1 | 0) != (70 | 0)) {
       break label$47
      }
      $11_1 = ($17_1 | 0) > (0 | 0) ? $17_1 : 0;
      break label$46;
     }
     label$48 : {
      $11_1 = $17_1 >> 31 | 0;
      i64toi32_i32$1 = 0;
      $11_1 = $770(($17_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$1 | 0, $12_1 | 0) | 0;
      if (($12_1 - $11_1 | 0 | 0) > (1 | 0)) {
       break label$48
      }
      label$49 : while (1) {
       $11_1 = $11_1 + -1 | 0;
       HEAP8[$11_1 >> 0] = 48;
       if (($12_1 - $11_1 | 0 | 0) < (2 | 0)) {
        continue label$49
       }
       break label$49;
      };
     }
     $20_1 = $11_1 + -2 | 0;
     HEAP8[$20_1 >> 0] = $5_1;
     HEAP8[($11_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
     $11_1 = $12_1 - $20_1 | 0;
    }
    $10_1 = ((($8_1 + $14_1 | 0) + $19_1 | 0) + $11_1 | 0) + 1 | 0;
    $771($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
    $765($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $771($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$50 : {
     label$51 : {
      label$52 : {
       label$53 : {
        if (($23_1 | 0) != (70 | 0)) {
         break label$53
        }
        $21_1 = $6_1 + 16 | 0 | 8 | 0;
        $17_1 = $6_1 + 16 | 0 | 9 | 0;
        $23_1 = $18_1 >>> 0 > $16_1 >>> 0 ? $16_1 : $18_1;
        $18_1 = $23_1;
        label$54 : while (1) {
         i64toi32_i32$4 = $18_1;
         i64toi32_i32$1 = HEAP32[$18_1 >> 2] | 0;
         i64toi32_i32$5 = 0;
         $11_1 = $770(i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, $17_1 | 0) | 0;
         label$55 : {
          label$56 : {
           if (($18_1 | 0) == ($23_1 | 0)) {
            break label$56
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$55
           }
           label$57 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$57
            }
            break label$55;
           };
          }
          if (($11_1 | 0) != ($17_1 | 0)) {
           break label$55
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $21_1;
         }
         $765($0_1 | 0, $11_1 | 0, $17_1 - $11_1 | 0 | 0);
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 <= $16_1 >>> 0) {
          continue label$54
         }
         break label$54;
        };
        $11_1 = 0;
        if (!$19_1) {
         break label$51
        }
        $765($0_1 | 0, 4026 | 0, 1 | 0);
        if ($18_1 >>> 0 >= $3_1 >>> 0) {
         break label$52
        }
        if (($14_1 | 0) < (1 | 0)) {
         break label$52
        }
        label$58 : while (1) {
         label$59 : {
          i64toi32_i32$4 = $18_1;
          i64toi32_i32$5 = HEAP32[$18_1 >> 2] | 0;
          i64toi32_i32$1 = 0;
          $11_1 = $770(i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, $17_1 | 0) | 0;
          if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$59
          }
          label$60 : while (1) {
           $11_1 = $11_1 + -1 | 0;
           HEAP8[$11_1 >> 0] = 48;
           if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$60
           }
           break label$60;
          };
         }
         $765($0_1 | 0, $11_1 | 0, (($14_1 | 0) < (9 | 0) ? $14_1 : 9) | 0);
         $11_1 = $14_1 + -9 | 0;
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 >= $3_1 >>> 0) {
          break label$51
         }
         $23_1 = ($14_1 | 0) > (9 | 0);
         $14_1 = $11_1;
         if ($23_1) {
          continue label$58
         }
         break label$51;
        };
       }
       label$61 : {
        if (($14_1 | 0) < (0 | 0)) {
         break label$61
        }
        $21_1 = $3_1 >>> 0 > $18_1 >>> 0 ? $3_1 : $18_1 + 4 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $16_1 = $6_1 + 16 | 0 | 8 | 0;
        $17_1 = $18_1;
        label$62 : while (1) {
         label$63 : {
          i64toi32_i32$4 = $17_1;
          i64toi32_i32$1 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$5 = 0;
          $11_1 = $770(i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, $3_1 | 0) | 0;
          if (($11_1 | 0) != ($3_1 | 0)) {
           break label$63
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $16_1;
         }
         label$64 : {
          label$65 : {
           if (($17_1 | 0) == ($18_1 | 0)) {
            break label$65
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$64
           }
           label$66 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$66
            }
            break label$64;
           };
          }
          $765($0_1 | 0, $11_1 | 0, 1 | 0);
          $11_1 = $11_1 + 1 | 0;
          label$67 : {
           if (($14_1 | 0) > (0 | 0)) {
            break label$67
           }
           if (!$22_1) {
            break label$64
           }
          }
          $765($0_1 | 0, 4026 | 0, 1 | 0);
         }
         $23_1 = $3_1 - $11_1 | 0;
         $765($0_1 | 0, $11_1 | 0, (($14_1 | 0) > ($23_1 | 0) ? $23_1 : $14_1) | 0);
         $14_1 = $14_1 - $23_1 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $21_1 >>> 0) {
          break label$61
         }
         if (($14_1 | 0) > (-1 | 0)) {
          continue label$62
         }
         break label$62;
        };
       }
       $771($0_1 | 0, 48 | 0, $14_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $765($0_1 | 0, $20_1 | 0, $12_1 - $20_1 | 0 | 0);
       break label$50;
      }
      $11_1 = $14_1;
     }
     $771($0_1 | 0, 48 | 0, $11_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $771($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $17_1 = $5_1 & 32 | 0;
   $14_1 = $17_1 ? $9_1 + 9 | 0 : $9_1;
   label$68 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$68
    }
    $11_1 = 12 - $3_1 | 0;
    if (!$11_1) {
     break label$68
    }
    $26_1 = 8.0;
    label$69 : while (1) {
     $26_1 = $26_1 * 16.0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$69
     }
     break label$69;
    };
    label$70 : {
     if ((HEAPU8[$14_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$70
     }
     $1_1 = -($26_1 + (-$1_1 - $26_1));
     break label$68;
    }
    $1_1 = $1_1 + $26_1 - $26_1;
   }
   label$71 : {
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $821_1 = $11_1;
    $11_1 = $11_1 >> 31 | 0;
    i64toi32_i32$5 = 0;
    $11_1 = $770(($821_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$5 | 0, $12_1 | 0) | 0;
    if (($11_1 | 0) != ($12_1 | 0)) {
     break label$71
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $11_1 = $6_1 + 15 | 0;
   }
   $22_1 = $8_1 | 2 | 0;
   $18_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $21_1 = $11_1 + -2 | 0;
   HEAP8[$21_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($11_1 + -1 | 0) >> 0] = ($18_1 | 0) < (0 | 0) ? 45 : 43;
   $23_1 = $4_1 & 8 | 0;
   $18_1 = $6_1 + 16 | 0;
   label$72 : while (1) {
    $11_1 = $18_1;
    label$73 : {
     label$74 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$74
      }
      $18_1 = ~~$1_1;
      break label$73;
     }
     $18_1 = -2147483648;
    }
    HEAP8[$11_1 >> 0] = HEAPU8[($18_1 + 11392 | 0) >> 0] | 0 | $17_1 | 0;
    $1_1 = ($1_1 - +($18_1 | 0)) * 16.0;
    label$75 : {
     $18_1 = $11_1 + 1 | 0;
     if (($18_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$75
     }
     label$76 : {
      if ($1_1 != 0.0) {
       break label$76
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$76
      }
      if (!$23_1) {
       break label$75
      }
     }
     HEAP8[($11_1 + 1 | 0) >> 0] = 46;
     $18_1 = $11_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$72
    }
    break label$72;
   };
   label$77 : {
    label$78 : {
     if (!$3_1) {
      break label$78
     }
     if ((($18_1 - ($6_1 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$78
     }
     $11_1 = (($3_1 + $12_1 | 0) - $21_1 | 0) + 2 | 0;
     break label$77;
    }
    $11_1 = ($12_1 - (($6_1 + 16 | 0) + $21_1 | 0) | 0) + $18_1 | 0;
   }
   $10_1 = $11_1 + $22_1 | 0;
   $771($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
   $765($0_1 | 0, $14_1 | 0, $22_1 | 0);
   $771($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $18_1 = $18_1 - ($6_1 + 16 | 0) | 0;
   $765($0_1 | 0, $6_1 + 16 | 0 | 0, $18_1 | 0);
   $17_1 = $12_1 - $21_1 | 0;
   $771($0_1 | 0, 48 | 0, $11_1 - ($18_1 + $17_1 | 0) | 0 | 0, 0 | 0, 0 | 0);
   $765($0_1 | 0, $21_1 | 0, $17_1 | 0);
   $771($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
  }
  global$0 = $6_1 + 560 | 0;
  return (($10_1 | 0) < ($2_1 | 0) ? $2_1 : $10_1) | 0;
 }
 
 function $774($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 15 | 0) & -16 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  (wasm2js_i32$0 = $0_1, wasm2js_f64$0 = +$762($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
 }
 
 function $775($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $776($0_1) {
  $0_1 = $0_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  (wasm2js_i32$0 = $755() | 0, wasm2js_i32$1 = $0_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return -1 | 0;
 }
 
 function $777($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $7_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($776(fimport$22(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$4
      }
      label$5 : while (1) {
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($4_1 | 0)) {
        break label$3
       }
       if (($4_1 | 0) <= (-1 | 0)) {
        break label$2
       }
       $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $5_1 = $4_1 >>> 0 > $8_1 >>> 0;
       $9_1 = $1_1 + ($5_1 << 3 | 0) | 0;
       $8_1 = $4_1 - ($5_1 ? $8_1 : 0) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $8_1 | 0;
       $9_1 = $1_1 + ($5_1 ? 12 : 4) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $4_1 | 0;
       $1_1 = $5_1 ? $1_1 + 8 | 0 : $1_1;
       $7_1 = $7_1 - $5_1 | 0;
       if (!($776(fimport$22(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     if (($6_1 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $4_1 = $2_1;
    break label$1;
   }
   $4_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$1
   }
   $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $778($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $779($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $780() {
  $778(13320 | 0);
  return 13328 | 0;
 }
 
 function $781() {
  $779(13320 | 0);
 }
 
 function $782($0_1) {
  $0_1 = $0_1 | 0;
  $415(2236 | 0);
  abort();
 }
 
 function $783($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $784($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = $790($0_1 | 0) | 0;
   if (($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $10_1 = $269($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($9_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($8_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($8_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $791(HEAP32[($459($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $9_1 + -1 | 0;
   }
   $11_1 = $2_1 + 1 | 0;
   $2_1 = $793($792($0_1 | 0) | 0 | 0, $11_1 | 0) | 0;
   $794($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $795($783($2_1 | 0) | 0 | 0, $783($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    if (!$6_1) {
     break label$5
    }
    $795(($783($2_1 | 0) | 0) + $4_1 | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   label$6 : {
    $9_1 = $3_1 - ($4_1 + $5_1 | 0) | 0;
    if (!$9_1) {
     break label$6
    }
    $795((($783($2_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($783($10_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $9_1 | 0) | 0;
   }
   label$7 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (11 | 0)) {
     break label$7
    }
    $796($792($0_1 | 0) | 0 | 0, $10_1 | 0, $1_1 | 0);
   }
   $797($0_1 | 0, $2_1 | 0);
   $798($0_1 | 0, $11_1 | 0);
   $4_1 = ($6_1 + $4_1 | 0) + $9_1 | 0;
   $788($0_1 | 0, $4_1 | 0);
   HEAP8[($8_1 + 7 | 0) >> 0] = 0;
   $786($2_1 + $4_1 | 0 | 0, $8_1 + 7 | 0 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $782($0_1 | 0);
  abort();
 }
 
 function $785($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $786($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
 }
 
 function $787($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($263($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $788($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $264($0_1 | 0) | 0, wasm2js_i32$1 = $1_1), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
 }
 
 function $789($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $264($0_1 | 0) | 0, wasm2js_i32$1 = $1_1), HEAP8[(wasm2js_i32$0 + 11 | 0) >> 0] = wasm2js_i32$1;
 }
 
 function $790($0_1) {
  $0_1 = $0_1 | 0;
  return ($799($425($0_1 | 0) | 0 | 0) | 0) + -16 | 0 | 0;
 }
 
 function $791($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 10;
  label$1 : {
   if ($0_1 >>> 0 < 11 >>> 0) {
    break label$1
   }
   $0_1 = $800($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (11 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $792($0_1) {
  $0_1 = $0_1 | 0;
  return $802($0_1 | 0) | 0 | 0;
 }
 
 function $793($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $801($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $794($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $795($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $868($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $796($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $804($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $797($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $264($0_1 | 0) | 0, wasm2js_i32$1 = $1_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 
 function $798($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $264($0_1 | 0) | 0, wasm2js_i32$1 = $1_1 | -2147483648 | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
 }
 
 function $799($0_1) {
  $0_1 = $0_1 | 0;
  return $809($0_1 | 0) | 0 | 0;
 }
 
 function $800($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 15 | 0) & -16 | 0 | 0;
 }
 
 function $801($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($799($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $415(2350 | 0);
   abort();
  }
  return $416($1_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $802($0_1) {
  $0_1 = $0_1 | 0;
  return $810($0_1 | 0) | 0 | 0;
 }
 
 function $803($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($262($0_1 | 0) | 0)) {
    break label$1
   }
   $796($792($0_1 | 0) | 0 | 0, $467($0_1 | 0) | 0 | 0, $787($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $804($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $442($1_1 | 0, $2_1 | 0, 1 | 0);
 }
 
 function $805($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($790($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $789($0_1 | 0, $2_1 | 0);
     $4_1 = $468($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $791($2_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $793($792($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $797($0_1 | 0, $4_1 | 0);
    $798($0_1 | 0, $5_1 | 0);
    $788($0_1 | 0, $2_1 | 0);
   }
   $795($783($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $786($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $782($0_1 | 0);
  abort();
 }
 
 function $806($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $3_1 = $468($0_1 | 0) | 0;
     $789($0_1 | 0, $2_1 | 0);
     break label$2;
    }
    if (($790($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
     break label$1
    }
    $3_1 = $791($2_1 | 0) | 0;
    $4_1 = $3_1 + 1 | 0;
    $3_1 = $793($792($0_1 | 0) | 0 | 0, $4_1 | 0) | 0;
    $797($0_1 | 0, $3_1 | 0);
    $798($0_1 | 0, $4_1 | 0);
    $788($0_1 | 0, $2_1 | 0);
   }
   $795($783($3_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
   return;
  }
  $782($0_1 | 0);
  abort();
 }
 
 function $807($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $32_1 = 0, $36_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $787($0_1 | 0) | 0;
    if ($4_1 >>> 0 <= $2_1 >>> 0) {
     break label$2
    }
    $4_1 = $467($0_1 | 0) | 0;
    $788($0_1 | 0, $2_1 | 0);
    $795($783($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $786($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    $785($0_1 | 0, $2_1 | 0);
    break label$1;
   }
   $32_1 = $4_1 + -1 | 0;
   $36_1 = ($2_1 - $4_1 | 0) + 1 | 0;
   $4_1 = $430($0_1 | 0) | 0;
   $784($0_1 | 0, $32_1 | 0, $36_1 | 0, $4_1 | 0, 0 | 0, $4_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $808($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 10 >>> 0) {
     break label$2
    }
    $4_1 = $468($0_1 | 0) | 0;
    $789($0_1 | 0, $2_1 | 0);
    $795($783($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $786($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    $785($0_1 | 0, $2_1 | 0);
    break label$1;
   }
   $4_1 = $463($0_1 | 0) | 0;
   $784($0_1 | 0, 10 | 0, $2_1 + -10 | 0 | 0, $4_1 | 0, 0 | 0, $4_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $809($0_1) {
  $0_1 = $0_1 | 0;
  return -1 | 0;
 }
 
 function $810($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $811($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 11408 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $812($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = $878($1_1 | 0) | 0;
  $3_1 = $753($2_1 + 13 | 0 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$3_1 >> 2] = $2_1;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = $868($813($3_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return $0_1 | 0;
 }
 
 function $813($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 12 | 0 | 0;
 }
 
 function $814($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $811($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 11452 + 8 | 0;
  $812($0_1 + 4 | 0 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $815($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $816($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $817() {
  return $816(13332 | 0) | 0 | 0;
 }
 
 function $818($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $819($0_1) {
  $0_1 = $0_1 | 0;
  $754($0_1 | 0);
 }
 
 function $820($0_1) {
  $0_1 = $0_1 | 0;
  return 1947 | 0;
 }
 
 function $821($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 11452 + 8 | 0;
  $822($0_1 + 4 | 0 | 0) | 0;
  $818($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $822($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!($815($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = $823(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($824($1_1 + 8 | 0 | 0) | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $754($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $823($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + -12 | 0 | 0;
 }
 
 function $824($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $825($0_1) {
  $0_1 = $0_1 | 0;
  $754($821($0_1 | 0) | 0 | 0);
 }
 
 function $826($0_1) {
  $0_1 = $0_1 | 0;
  return $827($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $827($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $828($0_1) {
  $0_1 = $0_1 | 0;
  $821($0_1 | 0) | 0;
  $754($0_1 | 0);
 }
 
 function $829($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $830($0_1) {
  $0_1 = $0_1 | 0;
  $829($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $831($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $832($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $833($0_1) {
  $0_1 = $0_1 | 0;
  $830($0_1 | 0) | 0;
  $754($0_1 | 0);
 }
 
 function $834($0_1) {
  $0_1 = $0_1 | 0;
  $830($0_1 | 0) | 0;
  $754($0_1 | 0);
 }
 
 function $835($0_1) {
  $0_1 = $0_1 | 0;
  $830($0_1 | 0) | 0;
  $754($0_1 | 0);
 }
 
 function $836($0_1) {
  $0_1 = $0_1 | 0;
  $830($0_1 | 0) | 0;
  $754($0_1 | 0);
 }
 
 function $837($0_1) {
  $0_1 = $0_1 | 0;
  $830($0_1 | 0) | 0;
  $754($0_1 | 0);
 }
 
 function $838($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $839($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $839($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  label$2 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !($739($587($0_1 | 0) | 0 | 0, $587($1_1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function $840($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  label$1 : {
   if ($839($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   $4_1 = 0;
   $1_1 = $841($1_1 | 0, 11612 | 0, 11660 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   $869($3_1 + 8 | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = 1;
   HEAP32[($3_1 + 20 | 0) >> 2] = -1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
   label$2 : {
    $4_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
    if (($4_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   }
   $4_1 = ($4_1 | 0) == (1 | 0);
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $841($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = HEAP32[($5_1 + -4 | 0) >> 2] | 0;
  $5_1 = HEAP32[($5_1 + -8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
  $1_1 = 0;
  $869($4_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
  $0_1 = $0_1 + $5_1 | 0;
  label$1 : {
   label$2 : {
    if (!($839($6_1 | 0, $2_1 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, $0_1, 1, 0);
    $1_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) ? $0_1 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, 1, 0);
   label$3 : {
    switch (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) {
    case 0:
     $1_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($4_1 + 28 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$3;
    default:
     break label$1;
    };
   }
   label$5 : {
    if ((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$5
    }
    if (HEAP32[($4_1 + 48 | 0) >> 2] | 0) {
     break label$1
    }
    if ((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $1_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 64 | 0;
  return $1_1 | 0;
 }
 
 function $842($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if ($4_1) {
    break label$1
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   return;
  }
  label$2 : {
   label$3 : {
    if (($4_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = 2;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $843($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($839($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $842($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $844($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($839($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $842($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $845($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    $5_1 = 0;
    break label$1;
   }
   $5_1 = $4_1 >> 8 | 0;
   if (!($4_1 & 1 | 0)) {
    break label$1
   }
   $5_1 = $846(HEAP32[$2_1 >> 2] | 0 | 0, $5_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $5_1 | 0, $4_1 & 2 | 0 ? $3_1 : 2);
 }
 
 function $846($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[($0_1 + $1_1 | 0) >> 2] | 0 | 0;
 }
 
 function $847($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($839($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $842($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $5_1 = $0_1 + 16 | 0;
  $845($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  label$2 : {
   if (($4_1 | 0) < (2 | 0)) {
    break label$2
   }
   $4_1 = $5_1 + ($4_1 << 3 | 0) | 0;
   $0_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    $845($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    $0_1 = $0_1 + 8 | 0;
    if ($0_1 >>> 0 < $4_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function $848($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 24 | 0) {
     break label$2
    }
    $3_1 = 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $841($1_1 | 0, 11612 | 0, 11708 | 0, 0 | 0) | 0;
    if (!$4_1) {
     break label$1
    }
    $3_1 = ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 24 | 0 | 0) != (0 | 0);
   }
   $3_1 = $839($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $849($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (!($839($1_1 | 0, 11976 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = 0;
    $4_1 = 1;
    break label$1;
   }
   label$3 : {
    if (!($848($0_1 | 0, $1_1 | 0, $1_1 | 0) | 0)) {
     break label$3
    }
    $4_1 = 1;
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    break label$1;
   }
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    $4_1 = 0;
    $1_1 = $841($1_1 | 0, 11612 | 0, 11756 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    label$5 : {
     $5_1 = HEAP32[$2_1 >> 2] | 0;
     if (!$5_1) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($5_1 & ($6_1 ^ -1 | 0) | 0) & 7 | 0) {
     break label$1
    }
    if ((($5_1 ^ -1 | 0) & $6_1 | 0) & 96 | 0) {
     break label$1
    }
    $4_1 = 1;
    if ($839(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
     break label$1
    }
    label$6 : {
     if (!($839(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 11964 | 0, 0 | 0) | 0)) {
      break label$6
     }
     $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$1
     }
     $4_1 = !($841($1_1 | 0, 11612 | 0, 11808 | 0, 0 | 0) | 0);
     break label$1;
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    $4_1 = 0;
    label$7 : {
     $5_1 = $841($5_1 | 0, 11612 | 0, 11756 | 0, 0 | 0) | 0;
     if (!$5_1) {
      break label$7
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
     $4_1 = $850($5_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$1
    }
    $4_1 = 0;
    label$8 : {
     $5_1 = $841($5_1 | 0, 11612 | 0, 11868 | 0, 0 | 0) | 0;
     if (!$5_1) {
      break label$8
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
     $4_1 = $851($5_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$1
    }
    $4_1 = 0;
    $0_1 = $841($0_1 | 0, 11612 | 0, 11660 | 0, 0 | 0) | 0;
    if (!$0_1) {
     break label$1
    }
    $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = 0;
    $1_1 = $841($1_1 | 0, 11612 | 0, 11660 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $869($3_1 + 8 | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
    HEAP32[($3_1 + 56 | 0) >> 2] = 1;
    HEAP32[($3_1 + 20 | 0) >> 2] = -1;
    HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
    label$9 : {
     $1_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
     if (($1_1 | 0) != (1 | 0)) {
      break label$9
     }
     if (!(HEAP32[$2_1 >> 2] | 0)) {
      break label$9
     }
     HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
    }
    $4_1 = ($1_1 | 0) == (1 | 0);
    break label$1;
   }
   $4_1 = 0;
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $850($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if ($1_1) {
      break label$3
     }
     return 0 | 0;
    }
    $2_1 = 0;
    $1_1 = $841($1_1 | 0, 11612 | 0, 11756 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
     break label$1
    }
    label$4 : {
     if (!($839(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     return 1 | 0;
    }
    if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$1
    }
    label$5 : {
     $3_1 = $841($3_1 | 0, 11612 | 0, 11756 | 0, 0 | 0) | 0;
     if (!$3_1) {
      break label$5
     }
     $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     $0_1 = $3_1;
     continue label$2;
    }
    break label$2;
   };
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $2_1 = 0;
   $0_1 = $841($0_1 | 0, 11612 | 0, 11868 | 0, 0 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $2_1 = $851($0_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $851($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = $841($1_1 | 0, 11612 | 0, 11868 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
    break label$1
   }
   $2_1 = 0;
   if (!($839(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2_1 = $839(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $852($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 52 | 0) >> 0] = 1;
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     if ($3_1) {
      break label$3
     }
     HEAP32[($1_1 + 36 | 0) >> 2] = 1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     if (($4_1 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    label$4 : {
     if (($3_1 | 0) != ($2_1 | 0)) {
      break label$4
     }
     label$5 : {
      $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      if (($3_1 | 0) != (2 | 0)) {
       break label$5
      }
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
      $3_1 = $4_1;
     }
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     if (($3_1 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
  }
 }
 
 function $853($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
    break label$1
   }
   if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
  }
 }
 
 function $854($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (!($839($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $853($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($839($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     $5_1 = $0_1 + 16 | 0;
     $3_1 = $5_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     $6_1 = 0;
     $7_1 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : while (1) {
         if ($5_1 >>> 0 >= $3_1 >>> 0) {
          break label$9
         }
         HEAP16[($1_1 + 52 | 0) >> 1] = 0;
         $855($5_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, 1 | 0, $4_1 | 0);
         if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
          break label$9
         }
         label$11 : {
          if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
           break label$11
          }
          label$12 : {
           if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
            break label$12
           }
           $8_1 = 1;
           if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
            break label$8
           }
           $6_1 = 1;
           $7_1 = 1;
           $8_1 = 1;
           if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
            break label$11
           }
           break label$8;
          }
          $6_1 = 1;
          $8_1 = $7_1;
          if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
           break label$8
          }
         }
         $5_1 = $5_1 + 8 | 0;
         continue label$10;
        };
       }
       $5_1 = 4;
       $8_1 = $7_1;
       if (!($6_1 & 1 | 0)) {
        break label$7
       }
      }
      $5_1 = 3;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
     if ($8_1 & 1 | 0) {
      break label$2
     }
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $8_1 = $0_1 + 16 | 0;
   $856($8_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   if (($5_1 | 0) < (2 | 0)) {
    break label$2
   }
   $8_1 = $8_1 + ($5_1 << 3 | 0) | 0;
   $5_1 = $0_1 + 24 | 0;
   label$13 : {
    label$14 : {
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if ($0_1 & 2 | 0) {
      break label$14
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$13
     }
    }
    label$15 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     $856($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$15
     }
     break label$2;
    };
   }
   label$16 : {
    if ($0_1 & 1 | 0) {
     break label$16
    }
    label$17 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     $856($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$17
     }
     break label$2;
    };
   }
   label$18 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$19 : {
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$19
     }
     if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
    }
    $856($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    $5_1 = $5_1 + 8 | 0;
    if ($5_1 >>> 0 < $8_1 >>> 0) {
     continue label$18
    }
    break label$18;
   };
  }
 }
 
 function $855($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $7_1 = $6_1 >> 8 | 0;
  label$1 : {
   if (!($6_1 & 1 | 0)) {
    break label$1
   }
   $7_1 = $846(HEAP32[$3_1 >> 2] | 0 | 0, $7_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1 + $7_1 | 0, $6_1 & 2 | 0 ? $4_1 : 2, $5_1);
 }
 
 function $856($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $6_1 = $5_1 >> 8 | 0;
  label$1 : {
   if (!($5_1 & 1 | 0)) {
    break label$1
   }
   $6_1 = $846(HEAP32[$2_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $5_1 & 2 | 0 ? $3_1 : 2, $4_1);
 }
 
 function $857($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($839($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $853($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($839($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     label$7 : {
      if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $858($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($839($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $853($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   if (!($839($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$4
     }
     if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $859($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   if (!($839($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $852($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $6_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 0;
  $8_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = 0;
  $9_1 = $0_1 + 16 | 0;
  $855($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $6_1 = $6_1 | $10_1 | 0;
  $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  $8_1 = $8_1 | $11_1 | 0;
  label$2 : {
   if (($7_1 | 0) < (2 | 0)) {
    break label$2
   }
   $9_1 = $9_1 + ($7_1 << 3 | 0) | 0;
   $7_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if (!($11_1 & 255 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$2
      }
      if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
       break label$4
      }
      break label$2;
     }
     if (!($10_1 & 255 | 0)) {
      break label$4
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP16[($1_1 + 52 | 0) >> 1] = 0;
    $855($7_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    $6_1 = $10_1 | $6_1 | 0;
    $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    $8_1 = $11_1 | $8_1 | 0;
    $7_1 = $7_1 + 8 | 0;
    if ($7_1 >>> 0 < $9_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP8[($1_1 + 53 | 0) >> 0] = ($6_1 & 255 | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 52 | 0) >> 0] = ($8_1 & 255 | 0 | 0) != (0 | 0);
 }
 
 function $860($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($839($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $852($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $861($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($839($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $852($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $862($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $8_1 = 0, $2_1 = 0, $12_1 = 0, $7_1 = 0, $9_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $11_1 = 0, $1_1 = 0, $80_1 = 0, $93_1 = 0, $104_1 = 0, $112_1 = 0, $120_1 = 0, $211_1 = 0, $222_1 = 0, $230_1 = 0, $238_1 = 0, $273_1 = 0, $346_1 = 0, $353_1 = 0, $360_1 = 0, $451_1 = 0, $462_1 = 0, $470_1 = 0, $478_1 = 0, $1170 = 0, $1177 = 0, $1184 = 0, $1306 = 0, $1308 = 0, $1369 = 0, $1376 = 0, $1383 = 0, $1616 = 0, $1623 = 0, $1630 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               if ($0_1 >>> 0 > 244 >>> 0) {
                break label$13
               }
               label$14 : {
                $2_1 = HEAP32[(0 + 13336 | 0) >> 2] | 0;
                $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
                $4_1 = $3_1 >>> 3 | 0;
                $0_1 = $2_1 >>> $4_1 | 0;
                if (!($0_1 & 3 | 0)) {
                 break label$14
                }
                $5_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
                $6_1 = $5_1 << 3 | 0;
                $4_1 = HEAP32[($6_1 + 13384 | 0) >> 2] | 0;
                $0_1 = $4_1 + 8 | 0;
                label$15 : {
                 label$16 : {
                  $3_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $6_1 = $6_1 + 13376 | 0;
                  if (($3_1 | 0) != ($6_1 | 0)) {
                   break label$16
                  }
                  (wasm2js_i32$0 = 0, wasm2js_i32$1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 13336 | 0) >> 2] = wasm2js_i32$1;
                  break label$15;
                 }
                 HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
                 HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
                }
                $5_1 = $5_1 << 3 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
                $4_1 = $4_1 + $5_1 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                break label$1;
               }
               $7_1 = HEAP32[(0 + 13344 | 0) >> 2] | 0;
               if ($3_1 >>> 0 <= $7_1 >>> 0) {
                break label$12
               }
               label$17 : {
                if (!$0_1) {
                 break label$17
                }
                label$18 : {
                 label$19 : {
                  $80_1 = $0_1 << $4_1 | 0;
                  $0_1 = 2 << $4_1 | 0;
                  $0_1 = $80_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                  $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                  $93_1 = $0_1;
                  $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                  $4_1 = $93_1 >>> $0_1 | 0;
                  $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                  $104_1 = $5_1 | $0_1 | 0;
                  $0_1 = $4_1 >>> $5_1 | 0;
                  $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                  $112_1 = $104_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                  $120_1 = $112_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                  $5_1 = ($120_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                  $6_1 = $5_1 << 3 | 0;
                  $4_1 = HEAP32[($6_1 + 13384 | 0) >> 2] | 0;
                  $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $6_1 = $6_1 + 13376 | 0;
                  if (($0_1 | 0) != ($6_1 | 0)) {
                   break label$19
                  }
                  $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
                  HEAP32[(0 + 13336 | 0) >> 2] = $2_1;
                  break label$18;
                 }
                 HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
                 HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
                }
                $0_1 = $4_1 + 8 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                $6_1 = $4_1 + $3_1 | 0;
                $8_1 = $5_1 << 3 | 0;
                $5_1 = $8_1 - $3_1 | 0;
                HEAP32[($6_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
                HEAP32[($4_1 + $8_1 | 0) >> 2] = $5_1;
                label$20 : {
                 if (!$7_1) {
                  break label$20
                 }
                 $8_1 = $7_1 >>> 3 | 0;
                 $3_1 = ($8_1 << 3 | 0) + 13376 | 0;
                 $4_1 = HEAP32[(0 + 13356 | 0) >> 2] | 0;
                 label$21 : {
                  label$22 : {
                   $8_1 = 1 << $8_1 | 0;
                   if ($2_1 & $8_1 | 0) {
                    break label$22
                   }
                   HEAP32[(0 + 13336 | 0) >> 2] = $2_1 | $8_1 | 0;
                   $8_1 = $3_1;
                   break label$21;
                  }
                  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                 }
                 HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                 HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                 HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                 HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
                }
                HEAP32[(0 + 13356 | 0) >> 2] = $6_1;
                HEAP32[(0 + 13344 | 0) >> 2] = $5_1;
                break label$1;
               }
               $9_1 = HEAP32[(0 + 13340 | 0) >> 2] | 0;
               if (!$9_1) {
                break label$12
               }
               $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
               $211_1 = $0_1;
               $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
               $4_1 = $211_1 >>> $0_1 | 0;
               $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
               $222_1 = $5_1 | $0_1 | 0;
               $0_1 = $4_1 >>> $5_1 | 0;
               $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
               $230_1 = $222_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
               $238_1 = $230_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
               $6_1 = HEAP32[(((($238_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 13640 | 0) >> 2] | 0;
               $4_1 = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $5_1 = $6_1;
               label$23 : {
                label$24 : while (1) {
                 label$25 : {
                  $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                  if ($0_1) {
                   break label$25
                  }
                  $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                  if (!$0_1) {
                   break label$23
                  }
                 }
                 $5_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                 $273_1 = $5_1;
                 $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
                 $4_1 = $5_1 ? $273_1 : $4_1;
                 $6_1 = $5_1 ? $0_1 : $6_1;
                 $5_1 = $0_1;
                 continue label$24;
                };
               }
               $10_1 = $6_1 + $3_1 | 0;
               if ($10_1 >>> 0 <= $6_1 >>> 0) {
                break label$11
               }
               $11_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
               label$26 : {
                $8_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
                if (($8_1 | 0) == ($6_1 | 0)) {
                 break label$26
                }
                $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
                HEAP32[(0 + 13352 | 0) >> 2] | 0;
                HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
                HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
                break label$2;
               }
               label$27 : {
                $5_1 = $6_1 + 20 | 0;
                $0_1 = HEAP32[$5_1 >> 2] | 0;
                if ($0_1) {
                 break label$27
                }
                $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$10
                }
                $5_1 = $6_1 + 16 | 0;
               }
               label$28 : while (1) {
                $12_1 = $5_1;
                $8_1 = $0_1;
                $5_1 = $0_1 + 20 | 0;
                $0_1 = HEAP32[$5_1 >> 2] | 0;
                if ($0_1) {
                 continue label$28
                }
                $5_1 = $8_1 + 16 | 0;
                $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$28
                }
                break label$28;
               };
               HEAP32[$12_1 >> 2] = 0;
               break label$2;
              }
              $3_1 = -1;
              if ($0_1 >>> 0 > -65 >>> 0) {
               break label$12
              }
              $0_1 = $0_1 + 11 | 0;
              $3_1 = $0_1 & -8 | 0;
              $7_1 = HEAP32[(0 + 13340 | 0) >> 2] | 0;
              if (!$7_1) {
               break label$12
              }
              $12_1 = 0;
              label$29 : {
               if ($3_1 >>> 0 < 256 >>> 0) {
                break label$29
               }
               $12_1 = 31;
               if ($3_1 >>> 0 > 16777215 >>> 0) {
                break label$29
               }
               $0_1 = $0_1 >>> 8 | 0;
               $346_1 = $0_1;
               $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
               $4_1 = $346_1 << $0_1 | 0;
               $353_1 = $4_1;
               $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
               $5_1 = $353_1 << $4_1 | 0;
               $360_1 = $5_1;
               $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
               $0_1 = (($360_1 << $5_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $5_1 | 0) | 0;
               $12_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
              }
              $4_1 = 0 - $3_1 | 0;
              label$30 : {
               label$31 : {
                label$32 : {
                 label$33 : {
                  $5_1 = HEAP32[(($12_1 << 2 | 0) + 13640 | 0) >> 2] | 0;
                  if ($5_1) {
                   break label$33
                  }
                  $0_1 = 0;
                  $8_1 = 0;
                  break label$32;
                 }
                 $0_1 = 0;
                 $6_1 = $3_1 << (($12_1 | 0) == (31 | 0) ? 0 : 25 - ($12_1 >>> 1 | 0) | 0) | 0;
                 $8_1 = 0;
                 label$34 : while (1) {
                  label$35 : {
                   $2_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                   if ($2_1 >>> 0 >= $4_1 >>> 0) {
                    break label$35
                   }
                   $4_1 = $2_1;
                   $8_1 = $5_1;
                   if ($4_1) {
                    break label$35
                   }
                   $4_1 = 0;
                   $8_1 = $5_1;
                   $0_1 = $5_1;
                   break label$31;
                  }
                  $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                  $5_1 = HEAP32[(($5_1 + (($6_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                  $0_1 = $2_1 ? (($2_1 | 0) == ($5_1 | 0) ? $0_1 : $2_1) : $0_1;
                  $6_1 = $6_1 << 1 | 0;
                  if ($5_1) {
                   continue label$34
                  }
                  break label$34;
                 };
                }
                label$36 : {
                 if ($0_1 | $8_1 | 0) {
                  break label$36
                 }
                 $8_1 = 0;
                 $0_1 = 2 << $12_1 | 0;
                 $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                 if (!$0_1) {
                  break label$12
                 }
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $451_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $5_1 = $451_1 >>> $0_1 | 0;
                 $6_1 = ($5_1 >>> 5 | 0) & 8 | 0;
                 $462_1 = $6_1 | $0_1 | 0;
                 $0_1 = $5_1 >>> $6_1 | 0;
                 $5_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $470_1 = $462_1 | $5_1 | 0;
                 $0_1 = $0_1 >>> $5_1 | 0;
                 $5_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $478_1 = $470_1 | $5_1 | 0;
                 $0_1 = $0_1 >>> $5_1 | 0;
                 $5_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $0_1 = HEAP32[(((($478_1 | $5_1 | 0) + ($0_1 >>> $5_1 | 0) | 0) << 2 | 0) + 13640 | 0) >> 2] | 0;
                }
                if (!$0_1) {
                 break label$30
                }
               }
               label$37 : while (1) {
                $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $6_1 = $2_1 >>> 0 < $4_1 >>> 0;
                label$38 : {
                 $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                 if ($5_1) {
                  break label$38
                 }
                 $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                }
                $4_1 = $6_1 ? $2_1 : $4_1;
                $8_1 = $6_1 ? $0_1 : $8_1;
                $0_1 = $5_1;
                if ($0_1) {
                 continue label$37
                }
                break label$37;
               };
              }
              if (!$8_1) {
               break label$12
              }
              if ($4_1 >>> 0 >= ((HEAP32[(0 + 13344 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
               break label$12
              }
              $12_1 = $8_1 + $3_1 | 0;
              if ($12_1 >>> 0 <= $8_1 >>> 0) {
               break label$11
              }
              $9_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
              label$39 : {
               $6_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
               if (($6_1 | 0) == ($8_1 | 0)) {
                break label$39
               }
               $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
               HEAP32[(0 + 13352 | 0) >> 2] | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
               HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
               break label$3;
              }
              label$40 : {
               $5_1 = $8_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                break label$40
               }
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$9
               }
               $5_1 = $8_1 + 16 | 0;
              }
              label$41 : while (1) {
               $2_1 = $5_1;
               $6_1 = $0_1;
               $5_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                continue label$41
               }
               $5_1 = $6_1 + 16 | 0;
               $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$41
               }
               break label$41;
              };
              HEAP32[$2_1 >> 2] = 0;
              break label$3;
             }
             label$42 : {
              $0_1 = HEAP32[(0 + 13344 | 0) >> 2] | 0;
              if ($0_1 >>> 0 < $3_1 >>> 0) {
               break label$42
              }
              $4_1 = HEAP32[(0 + 13356 | 0) >> 2] | 0;
              label$43 : {
               label$44 : {
                $5_1 = $0_1 - $3_1 | 0;
                if ($5_1 >>> 0 < 16 >>> 0) {
                 break label$44
                }
                HEAP32[(0 + 13344 | 0) >> 2] = $5_1;
                $6_1 = $4_1 + $3_1 | 0;
                HEAP32[(0 + 13356 | 0) >> 2] = $6_1;
                HEAP32[($6_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
                HEAP32[($4_1 + $0_1 | 0) >> 2] = $5_1;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                break label$43;
               }
               HEAP32[(0 + 13356 | 0) >> 2] = 0;
               HEAP32[(0 + 13344 | 0) >> 2] = 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
               $0_1 = $4_1 + $0_1 | 0;
               HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
              }
              $0_1 = $4_1 + 8 | 0;
              break label$1;
             }
             label$45 : {
              $6_1 = HEAP32[(0 + 13348 | 0) >> 2] | 0;
              if ($6_1 >>> 0 <= $3_1 >>> 0) {
               break label$45
              }
              $4_1 = $6_1 - $3_1 | 0;
              HEAP32[(0 + 13348 | 0) >> 2] = $4_1;
              $0_1 = HEAP32[(0 + 13360 | 0) >> 2] | 0;
              $5_1 = $0_1 + $3_1 | 0;
              HEAP32[(0 + 13360 | 0) >> 2] = $5_1;
              HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              $0_1 = $0_1 + 8 | 0;
              break label$1;
             }
             label$46 : {
              label$47 : {
               if (!(HEAP32[(0 + 13808 | 0) >> 2] | 0)) {
                break label$47
               }
               $4_1 = HEAP32[(0 + 13816 | 0) >> 2] | 0;
               break label$46;
              }
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = -1;
              HEAP32[(i64toi32_i32$1 + 13820 | 0) >> 2] = -1;
              HEAP32[(i64toi32_i32$1 + 13824 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 4096;
              HEAP32[(i64toi32_i32$1 + 13812 | 0) >> 2] = 4096;
              HEAP32[(i64toi32_i32$1 + 13816 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(0 + 13808 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
              HEAP32[(0 + 13828 | 0) >> 2] = 0;
              HEAP32[(0 + 13780 | 0) >> 2] = 0;
              $4_1 = 4096;
             }
             $0_1 = 0;
             $7_1 = $3_1 + 47 | 0;
             $2_1 = $4_1 + $7_1 | 0;
             $12_1 = 0 - $4_1 | 0;
             $8_1 = $2_1 & $12_1 | 0;
             if ($8_1 >>> 0 <= $3_1 >>> 0) {
              break label$1
             }
             $0_1 = 0;
             label$48 : {
              $4_1 = HEAP32[(0 + 13776 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$48
              }
              $5_1 = HEAP32[(0 + 13768 | 0) >> 2] | 0;
              $9_1 = $5_1 + $8_1 | 0;
              if ($9_1 >>> 0 <= $5_1 >>> 0) {
               break label$1
              }
              if ($9_1 >>> 0 > $4_1 >>> 0) {
               break label$1
              }
             }
             if ((HEAPU8[(0 + 13780 | 0) >> 0] | 0) & 4 | 0) {
              break label$6
             }
             label$49 : {
              label$50 : {
               label$51 : {
                $4_1 = HEAP32[(0 + 13360 | 0) >> 2] | 0;
                if (!$4_1) {
                 break label$51
                }
                $0_1 = 13784;
                label$52 : while (1) {
                 label$53 : {
                  $5_1 = HEAP32[$0_1 >> 2] | 0;
                  if ($5_1 >>> 0 > $4_1 >>> 0) {
                   break label$53
                  }
                  if (($5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                   break label$50
                  }
                 }
                 $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                 if ($0_1) {
                  continue label$52
                 }
                 break label$52;
                };
               }
               $6_1 = $866(0 | 0) | 0;
               if (($6_1 | 0) == (-1 | 0)) {
                break label$7
               }
               $2_1 = $8_1;
               label$54 : {
                $0_1 = HEAP32[(0 + 13812 | 0) >> 2] | 0;
                $4_1 = $0_1 + -1 | 0;
                if (!($4_1 & $6_1 | 0)) {
                 break label$54
                }
                $2_1 = ($8_1 - $6_1 | 0) + (($4_1 + $6_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
               }
               if ($2_1 >>> 0 <= $3_1 >>> 0) {
                break label$7
               }
               if ($2_1 >>> 0 > 2147483646 >>> 0) {
                break label$7
               }
               label$55 : {
                $0_1 = HEAP32[(0 + 13776 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$55
                }
                $4_1 = HEAP32[(0 + 13768 | 0) >> 2] | 0;
                $5_1 = $4_1 + $2_1 | 0;
                if ($5_1 >>> 0 <= $4_1 >>> 0) {
                 break label$7
                }
                if ($5_1 >>> 0 > $0_1 >>> 0) {
                 break label$7
                }
               }
               $0_1 = $866($2_1 | 0) | 0;
               if (($0_1 | 0) != ($6_1 | 0)) {
                break label$49
               }
               break label$5;
              }
              $2_1 = ($2_1 - $6_1 | 0) & $12_1 | 0;
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              $6_1 = $866($2_1 | 0) | 0;
              if (($6_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
               break label$8
              }
              $0_1 = $6_1;
             }
             label$56 : {
              if (($0_1 | 0) == (-1 | 0)) {
               break label$56
              }
              if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
               break label$56
              }
              label$57 : {
               $4_1 = HEAP32[(0 + 13816 | 0) >> 2] | 0;
               $4_1 = (($7_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
               if ($4_1 >>> 0 <= 2147483646 >>> 0) {
                break label$57
               }
               $6_1 = $0_1;
               break label$5;
              }
              label$58 : {
               if (($866($4_1 | 0) | 0 | 0) == (-1 | 0)) {
                break label$58
               }
               $2_1 = $4_1 + $2_1 | 0;
               $6_1 = $0_1;
               break label$5;
              }
              $866(0 - $2_1 | 0 | 0) | 0;
              break label$7;
             }
             $6_1 = $0_1;
             if (($0_1 | 0) != (-1 | 0)) {
              break label$5
             }
             break label$7;
            }
            abort();
           }
           $8_1 = 0;
           break label$2;
          }
          $6_1 = 0;
          break label$3;
         }
         if (($6_1 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 13780 | 0) >> 2] = HEAP32[(0 + 13780 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $6_1 = $866($8_1 | 0) | 0;
       $0_1 = $866(0 | 0) | 0;
       if (($6_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if ($6_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       $2_1 = $0_1 - $6_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0_1 = (HEAP32[(0 + 13768 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 13768 | 0) >> 2] = $0_1;
      label$59 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 13772 | 0) >> 2] | 0) >>> 0) {
        break label$59
       }
       HEAP32[(0 + 13772 | 0) >> 2] = $0_1;
      }
      label$60 : {
       label$61 : {
        label$62 : {
         label$63 : {
          $4_1 = HEAP32[(0 + 13360 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$63
          }
          $0_1 = 13784;
          label$64 : while (1) {
           $5_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($6_1 | 0) == ($5_1 + $8_1 | 0 | 0)) {
            break label$62
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$64
           }
           break label$61;
          };
         }
         label$65 : {
          label$66 : {
           $0_1 = HEAP32[(0 + 13352 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$66
           }
           if ($6_1 >>> 0 >= $0_1 >>> 0) {
            break label$65
           }
          }
          HEAP32[(0 + 13352 | 0) >> 2] = $6_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 13788 | 0) >> 2] = $2_1;
         HEAP32[(0 + 13784 | 0) >> 2] = $6_1;
         HEAP32[(0 + 13368 | 0) >> 2] = -1;
         HEAP32[(0 + 13372 | 0) >> 2] = HEAP32[(0 + 13808 | 0) >> 2] | 0;
         HEAP32[(0 + 13796 | 0) >> 2] = 0;
         label$67 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $5_1 = $4_1 + 13376 | 0;
          HEAP32[($4_1 + 13384 | 0) >> 2] = $5_1;
          HEAP32[($4_1 + 13388 | 0) >> 2] = $5_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$67
          }
          break label$67;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0;
         $5_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 13348 | 0) >> 2] = $5_1;
         $4_1 = $6_1 + $4_1 | 0;
         HEAP32[(0 + 13360 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
         HEAP32[(($6_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 13364 | 0) >> 2] = HEAP32[(0 + 13824 | 0) >> 2] | 0;
         break label$60;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$61
        }
        if ($5_1 >>> 0 > $4_1 >>> 0) {
         break label$61
        }
        if ($6_1 >>> 0 <= $4_1 >>> 0) {
         break label$61
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $5_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 13360 | 0) >> 2] = $5_1;
        $6_1 = (HEAP32[(0 + 13348 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $6_1 - $0_1 | 0;
        HEAP32[(0 + 13348 | 0) >> 2] = $0_1;
        HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $6_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 13364 | 0) >> 2] = HEAP32[(0 + 13824 | 0) >> 2] | 0;
        break label$60;
       }
       label$68 : {
        $8_1 = HEAP32[(0 + 13352 | 0) >> 2] | 0;
        if ($6_1 >>> 0 >= $8_1 >>> 0) {
         break label$68
        }
        HEAP32[(0 + 13352 | 0) >> 2] = $6_1;
        $8_1 = $6_1;
       }
       $5_1 = $6_1 + $2_1 | 0;
       $0_1 = 13784;
       label$69 : {
        label$70 : {
         label$71 : {
          label$72 : {
           label$73 : {
            label$74 : {
             label$75 : {
              label$76 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
                break label$75
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$76
               }
               break label$74;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$73
             }
            }
            $0_1 = 13784;
            label$77 : while (1) {
             label$78 : {
              $5_1 = HEAP32[$0_1 >> 2] | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$78
              }
              $5_1 = $5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$72
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$77;
            };
           }
           HEAP32[$0_1 >> 2] = $6_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $12_1 = $6_1 + (($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($12_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $2_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           $3_1 = $12_1 + $3_1 | 0;
           $5_1 = $2_1 - $3_1 | 0;
           label$79 : {
            if (($4_1 | 0) != ($2_1 | 0)) {
             break label$79
            }
            HEAP32[(0 + 13360 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 13348 | 0) >> 2] | 0) + $5_1 | 0;
            HEAP32[(0 + 13348 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$70;
           }
           label$80 : {
            if ((HEAP32[(0 + 13356 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
             break label$80
            }
            HEAP32[(0 + 13356 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 13344 | 0) >> 2] | 0) + $5_1 | 0;
            HEAP32[(0 + 13344 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($3_1 + $0_1 | 0) >> 2] = $0_1;
            break label$70;
           }
           label$81 : {
            $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            if (($0_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$81
            }
            $7_1 = $0_1 & -8 | 0;
            label$82 : {
             label$83 : {
              if ($0_1 >>> 0 > 255 >>> 0) {
               break label$83
              }
              $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
              $8_1 = $0_1 >>> 3 | 0;
              $6_1 = ($8_1 << 3 | 0) + 13376 | 0;
              label$84 : {
               $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($0_1 | 0) != ($4_1 | 0)) {
                break label$84
               }
               (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 13336 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 13336 | 0) >> 2] = wasm2js_i32$1;
               break label$82;
              }
              HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
              break label$82;
             }
             $9_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
             label$85 : {
              label$86 : {
               $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($6_1 | 0) == ($2_1 | 0)) {
                break label$86
               }
               $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
               HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
               break label$85;
              }
              label$87 : {
               $0_1 = $2_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$87
               }
               $0_1 = $2_1 + 16 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$87
               }
               $6_1 = 0;
               break label$85;
              }
              label$88 : while (1) {
               $8_1 = $0_1;
               $6_1 = $4_1;
               $0_1 = $4_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                continue label$88
               }
               $0_1 = $6_1 + 16 | 0;
               $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
               if ($4_1) {
                continue label$88
               }
               break label$88;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$82
             }
             label$89 : {
              label$90 : {
               $4_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
               $0_1 = ($4_1 << 2 | 0) + 13640 | 0;
               if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                break label$90
               }
               HEAP32[$0_1 >> 2] = $6_1;
               if ($6_1) {
                break label$89
               }
               (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 13340 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 13340 | 0) >> 2] = wasm2js_i32$1;
               break label$82;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
              if (!$6_1) {
               break label$82
              }
             }
             HEAP32[($6_1 + 24 | 0) >> 2] = $9_1;
             label$91 : {
              $0_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$91
              }
              HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
             }
             $0_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
             if (!$0_1) {
              break label$82
             }
             HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
             HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
            }
            $5_1 = $7_1 + $5_1 | 0;
            $2_1 = $2_1 + $7_1 | 0;
           }
           HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
           HEAP32[($3_1 + $5_1 | 0) >> 2] = $5_1;
           label$92 : {
            if ($5_1 >>> 0 > 255 >>> 0) {
             break label$92
            }
            $4_1 = $5_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 13376 | 0;
            label$93 : {
             label$94 : {
              $5_1 = HEAP32[(0 + 13336 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($5_1 & $4_1 | 0) {
               break label$94
              }
              HEAP32[(0 + 13336 | 0) >> 2] = $5_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$93;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
            HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
            HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
            break label$70;
           }
           $0_1 = 31;
           label$95 : {
            if ($5_1 >>> 0 > 16777215 >>> 0) {
             break label$95
            }
            $0_1 = $5_1 >>> 8 | 0;
            $1170 = $0_1;
            $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $4_1 = $1170 << $0_1 | 0;
            $1177 = $4_1;
            $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $6_1 = $1177 << $4_1 | 0;
            $1184 = $6_1;
            $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $0_1 = (($1184 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $6_1 | 0) | 0;
            $0_1 = ($0_1 << 1 | 0 | (($5_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
           i64toi32_i32$1 = $3_1;
           i64toi32_i32$0 = 0;
           HEAP32[($3_1 + 16 | 0) >> 2] = 0;
           HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $4_1 = ($0_1 << 2 | 0) + 13640 | 0;
           label$96 : {
            label$97 : {
             $6_1 = HEAP32[(0 + 13340 | 0) >> 2] | 0;
             $8_1 = 1 << $0_1 | 0;
             if ($6_1 & $8_1 | 0) {
              break label$97
             }
             HEAP32[(0 + 13340 | 0) >> 2] = $6_1 | $8_1 | 0;
             HEAP32[$4_1 >> 2] = $3_1;
             HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
             break label$96;
            }
            $0_1 = $5_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
            $6_1 = HEAP32[$4_1 >> 2] | 0;
            label$98 : while (1) {
             $4_1 = $6_1;
             if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($5_1 | 0)) {
              break label$71
             }
             $6_1 = $0_1 >>> 29 | 0;
             $0_1 = $0_1 << 1 | 0;
             $8_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
             $6_1 = HEAP32[$8_1 >> 2] | 0;
             if ($6_1) {
              continue label$98
             }
             break label$98;
            };
            HEAP32[$8_1 >> 2] = $3_1;
            HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
           }
           HEAP32[($3_1 + 12 | 0) >> 2] = $3_1;
           HEAP32[($3_1 + 8 | 0) >> 2] = $3_1;
           break label$70;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0;
          $12_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 13348 | 0) >> 2] = $12_1;
          $8_1 = $6_1 + $8_1 | 0;
          HEAP32[(0 + 13360 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $12_1 | 1 | 0;
          HEAP32[(($6_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 13364 | 0) >> 2] = HEAP32[(0 + 13824 | 0) >> 2] | 0;
          $0_1 = ($5_1 + (($5_1 + -39 | 0) & 7 | 0 ? (39 - $5_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 13792 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 13796 | 0) >> 2] | 0;
          $1306 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1306;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 13784 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 13788 | 0) >> 2] | 0;
          $1308 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1308;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 13792 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 13788 | 0) >> 2] = $2_1;
          HEAP32[(0 + 13784 | 0) >> 2] = $6_1;
          HEAP32[(0 + 13796 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$99 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $6_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($5_1 >>> 0 > $6_1 >>> 0) {
            continue label$99
           }
           break label$99;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$60
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          label$100 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$100
           }
           $5_1 = $2_1 >>> 3 | 0;
           $0_1 = ($5_1 << 3 | 0) + 13376 | 0;
           label$101 : {
            label$102 : {
             $6_1 = HEAP32[(0 + 13336 | 0) >> 2] | 0;
             $5_1 = 1 << $5_1 | 0;
             if ($6_1 & $5_1 | 0) {
              break label$102
             }
             HEAP32[(0 + 13336 | 0) >> 2] = $6_1 | $5_1 | 0;
             $5_1 = $0_1;
             break label$101;
            }
            $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
           break label$60;
          }
          $0_1 = 31;
          label$103 : {
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$103
           }
           $0_1 = $2_1 >>> 8 | 0;
           $1369 = $0_1;
           $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $5_1 = $1369 << $0_1 | 0;
           $1376 = $5_1;
           $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $6_1 = $1376 << $5_1 | 0;
           $1383 = $6_1;
           $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1383 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $6_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $5_1 = ($0_1 << 2 | 0) + 13640 | 0;
          label$104 : {
           label$105 : {
            $6_1 = HEAP32[(0 + 13340 | 0) >> 2] | 0;
            $8_1 = 1 << $0_1 | 0;
            if ($6_1 & $8_1 | 0) {
             break label$105
            }
            HEAP32[(0 + 13340 | 0) >> 2] = $6_1 | $8_1 | 0;
            HEAP32[$5_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
            break label$104;
           }
           $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $6_1 = HEAP32[$5_1 >> 2] | 0;
           label$106 : while (1) {
            $5_1 = $6_1;
            if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
             break label$69
            }
            $6_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $8_1 = ($5_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
            $6_1 = HEAP32[$8_1 >> 2] | 0;
            if ($6_1) {
             continue label$106
            }
            break label$106;
           };
           HEAP32[$8_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$60;
         }
         $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 24 | 0) >> 2] = 0;
         HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $12_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 13348 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 13348 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 13360 | 0) >> 2] | 0;
      $5_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 13360 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     (wasm2js_i32$0 = $755() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $0_1 = 0;
     break label$1;
    }
    label$107 : {
     if (!$9_1) {
      break label$107
     }
     label$108 : {
      label$109 : {
       $5_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($5_1 << 2 | 0) + 13640 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$109
       }
       HEAP32[$0_1 >> 2] = $6_1;
       if ($6_1) {
        break label$108
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       HEAP32[(0 + 13340 | 0) >> 2] = $7_1;
       break label$107;
      }
      HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$107
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $9_1;
     label$110 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$110
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$107
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
    }
    label$111 : {
     label$112 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$112
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$111;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($12_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($12_1 + $4_1 | 0) >> 2] = $4_1;
     label$113 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$113
      }
      $4_1 = $4_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 13376 | 0;
      label$114 : {
       label$115 : {
        $5_1 = HEAP32[(0 + 13336 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($5_1 & $4_1 | 0) {
         break label$115
        }
        HEAP32[(0 + 13336 | 0) >> 2] = $5_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$114;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $12_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $4_1;
      break label$111;
     }
     $0_1 = 31;
     label$116 : {
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$116
      }
      $0_1 = $4_1 >>> 8 | 0;
      $1616 = $0_1;
      $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $5_1 = $1616 << $0_1 | 0;
      $1623 = $5_1;
      $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1623 << $5_1 | 0;
      $1630 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1630 << $3_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($4_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($12_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$0 = 0;
     HEAP32[($12_1 + 16 | 0) >> 2] = 0;
     HEAP32[($12_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $5_1 = ($0_1 << 2 | 0) + 13640 | 0;
     label$117 : {
      label$118 : {
       label$119 : {
        $3_1 = 1 << $0_1 | 0;
        if ($7_1 & $3_1 | 0) {
         break label$119
        }
        HEAP32[(0 + 13340 | 0) >> 2] = $7_1 | $3_1 | 0;
        HEAP32[$5_1 >> 2] = $12_1;
        HEAP32[($12_1 + 24 | 0) >> 2] = $5_1;
        break label$118;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       label$120 : while (1) {
        $5_1 = $3_1;
        if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$117
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $6_1 = ($5_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$6_1 >> 2] | 0;
        if ($3_1) {
         continue label$120
        }
        break label$120;
       };
       HEAP32[$6_1 >> 2] = $12_1;
       HEAP32[($12_1 + 24 | 0) >> 2] = $5_1;
      }
      HEAP32[($12_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $12_1;
      break label$111;
     }
     $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $12_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $12_1;
     HEAP32[($12_1 + 24 | 0) >> 2] = 0;
     HEAP32[($12_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($12_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$121 : {
    if (!$11_1) {
     break label$121
    }
    label$122 : {
     label$123 : {
      $5_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($5_1 << 2 | 0) + 13640 | 0;
      if (($6_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$123
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$122
      }
      (wasm2js_i32$0 = 0, wasm2js_i32$1 = $9_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 13340 | 0) >> 2] = wasm2js_i32$1;
      break label$121;
     }
     HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($6_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$121
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $11_1;
    label$124 : {
     $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$124
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$121
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$125 : {
    label$126 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$126
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $6_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$125;
    }
    HEAP32[($6_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    HEAP32[($10_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($10_1 + $4_1 | 0) >> 2] = $4_1;
    label$127 : {
     if (!$7_1) {
      break label$127
     }
     $3_1 = $7_1 >>> 3 | 0;
     $5_1 = ($3_1 << 3 | 0) + 13376 | 0;
     $0_1 = HEAP32[(0 + 13356 | 0) >> 2] | 0;
     label$128 : {
      label$129 : {
       $3_1 = 1 << $3_1 | 0;
       if ($3_1 & $2_1 | 0) {
        break label$129
       }
       HEAP32[(0 + 13336 | 0) >> 2] = $3_1 | $2_1 | 0;
       $3_1 = $5_1;
       break label$128;
      }
      $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    }
    HEAP32[(0 + 13356 | 0) >> 2] = $10_1;
    HEAP32[(0 + 13344 | 0) >> 2] = $4_1;
   }
   $0_1 = $6_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $863($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $6_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $379_1 = 0, $386_1 = 0, $393_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 13352 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 13356 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      $5_1 = $2_1 >>> 3 | 0;
      $6_1 = ($5_1 << 3 | 0) + 13376 | 0;
      label$5 : {
       $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($2_1 | 0) != ($4_1 | 0)) {
        break label$5
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 13336 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 13336 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $6_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($1_1 | 0)) {
        break label$7
       }
       $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
       break label$6;
      }
      label$8 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $6_1 = 0;
       break label$6;
      }
      label$9 : while (1) {
       $5_1 = $2_1;
       $6_1 = $4_1;
       $2_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       $2_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[$5_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$10 : {
      label$11 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 13640 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$11
       }
       HEAP32[$2_1 >> 2] = $6_1;
       if ($6_1) {
        break label$10
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 13340 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 13340 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$12 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$12
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 13344 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$13 : {
    label$14 : {
     if ($2_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if ((HEAP32[(0 + 13360 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$15
      }
      HEAP32[(0 + 13360 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 13348 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 13348 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 13356 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 13344 | 0) >> 2] = 0;
      HEAP32[(0 + 13356 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if ((HEAP32[(0 + 13356 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$16
      }
      HEAP32[(0 + 13356 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 13344 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 13344 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$17 : {
      label$18 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       $5_1 = $2_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 13376 | 0;
       label$19 : {
        $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($2_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 13336 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 13336 | 0) >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 13352 | 0) >> 2] | 0;
        HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
        break label$20;
       }
       label$22 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $2_1;
        $6_1 = $4_1;
        $2_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        $2_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 13640 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$25
        }
        HEAP32[$2_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 13340 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 13340 | 0) >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 13356 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 13344 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$27 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 13376 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 13336 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 13336 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$28;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 31;
   label$30 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $2_1 = $0_1 >>> 8 | 0;
    $379_1 = $2_1;
    $2_1 = (($2_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $379_1 << $2_1 | 0;
    $386_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $386_1 << $4_1 | 0;
    $393_1 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($393_1 << $6_1 | 0) >>> 15 | 0) - ($2_1 | $4_1 | 0 | $6_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 13640 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      label$34 : {
       $6_1 = HEAP32[(0 + 13340 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($6_1 & $3_1 | 0) {
        break label$34
       }
       HEAP32[(0 + 13340 | 0) >> 2] = $6_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$33;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $6_1 = HEAP32[$4_1 >> 2] | 0;
      label$35 : while (1) {
       $4_1 = $6_1;
       if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$32
       }
       $6_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
       $6_1 = HEAP32[$3_1 >> 2] | 0;
       if ($6_1) {
        continue label$35
       }
       break label$35;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$31;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 13368 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 13368 | 0) >> 2] = $1_1 ? $1_1 : -1;
  }
 }
 
 function $864($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $13_1 = 0, $6$hi = 0, $8$hi = 0, $3_1 = 0, $3$hi = 0, $16_1 = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $2_1 = 0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$1 = __wasm_i64_mul($0_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$0;
   $2_1 = i64toi32_i32$1;
   if (($1_1 | $0_1 | 0) >>> 0 < 65536 >>> 0) {
    break label$1
   }
   $16_1 = $2_1;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $13_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = ($13_1 | 0) != (0 | 0) ? -1 : $16_1;
  }
  label$3 : {
   $0_1 = $862($2_1 | 0) | 0;
   if (!$0_1) {
    break label$3
   }
   if (!((HEAPU8[($0_1 + -4 | 0) >> 0] | 0) & 3 | 0)) {
    break label$3
   }
   $869($0_1 | 0, 0 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $865() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function $866($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = HEAP32[(0 + 13084 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 3 | 0) & -4 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    if ($0_1 >>> 0 <= $1_1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0_1 >>> 0 <= ($865() | 0) >>> 0) {
     break label$3
    }
    if (!(fimport$23($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 13084 | 0) >> 2] = $0_1;
   return $1_1 | 0;
  }
  (wasm2js_i32$0 = $755() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return -1 | 0;
 }
 
 function $867($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if (($1_1 | 0) >= (2047 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   label$4 : {
    if (($1_1 | 0) <= (-2045 | 0)) {
     break label$4
    }
    $1_1 = $1_1 + 1022 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   $1_1 = (($1_1 | 0) > (-3066 | 0) ? $1_1 : -3066) + 2044 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $868($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$24($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0_1 & 3 | 0) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (!($2_1 & 3 | 0)) {
       break label$4
      }
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $869($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $6$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $870($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = $0_1 + $2_1 | 0;
    if (($1_1 - $3_1 | 0) >>> 0 > (0 - ($2_1 << 1 | 0) | 0) >>> 0) {
     break label$2
    }
    return $868($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
   }
   $4_1 = ($1_1 ^ $0_1 | 0) & 3 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$5
      }
      label$6 : {
       if (!$4_1) {
        break label$6
       }
       $3_1 = $0_1;
       break label$3;
      }
      label$7 : {
       if ($0_1 & 3 | 0) {
        break label$7
       }
       $3_1 = $0_1;
       break label$4;
      }
      $3_1 = $0_1;
      label$8 : while (1) {
       if (!$2_1) {
        break label$1
       }
       HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = $3_1 + 1 | 0;
       if (!($3_1 & 3 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     label$9 : {
      if ($4_1) {
       break label$9
      }
      label$10 : {
       if (!($3_1 & 3 | 0)) {
        break label$10
       }
       label$11 : while (1) {
        if (!$2_1) {
         break label$1
        }
        $2_1 = $2_1 + -1 | 0;
        $3_1 = $0_1 + $2_1 | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
        if ($3_1 & 3 | 0) {
         continue label$11
        }
        break label$11;
       };
      }
      if ($2_1 >>> 0 <= 3 >>> 0) {
       break label$9
      }
      label$12 : while (1) {
       $2_1 = $2_1 + -4 | 0;
       HEAP32[($0_1 + $2_1 | 0) >> 2] = HEAP32[($1_1 + $2_1 | 0) >> 2] | 0;
       if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$2_1) {
      break label$1
     }
     label$13 : while (1) {
      $2_1 = $2_1 + -1 | 0;
      HEAP8[($0_1 + $2_1 | 0) >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$1;
     };
    }
    if ($2_1 >>> 0 <= 3 >>> 0) {
     break label$3
    }
    label$14 : while (1) {
     HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$14
     }
     break label$14;
    };
   }
   if (!$2_1) {
    break label$1
   }
   label$15 : while (1) {
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $871($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $872($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($871($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP8[($2_1 + 75 | 0) >> 0] | 0 | 0) <= (-1 | 0)) {
      break label$5
     }
     $4_1 = $1_1;
     label$6 : while (1) {
      label$7 : {
       $3_1 = $4_1;
       if ($3_1) {
        break label$7
       }
       $3_1 = $1_1;
       break label$4;
      }
      $4_1 = $3_1 + -1 | 0;
      if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
       continue label$6
      }
      break label$6;
     };
     $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
     if ($4_1 >>> 0 < $3_1 >>> 0) {
      break label$1
     }
     $0_1 = $0_1 + $3_1 | 0;
     $3_1 = $1_1 - $3_1 | 0;
     $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
     break label$4;
    }
    $3_1 = $1_1;
   }
   $868($5_1 | 0, $0_1 | 0, $3_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
   $4_1 = $1_1;
  }
  return $4_1 | 0;
 }
 
 function $873($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $874($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $875($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $772(HEAP32[(0 + 12404 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $876($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $877($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $878($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($1_1 & 3 | 0)) {
     break label$2
    }
    $1_1 = $0_1;
    label$3 : while (1) {
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     $1_1 = $1_1 + 1 | 0;
     if ($1_1 & 3 | 0) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$4
    }
    break label$4;
   };
   label$5 : {
    if ($3_1 & 255 | 0) {
     break label$5
    }
    return $2_1 - $0_1 | 0 | 0;
   }
   label$6 : while (1) {
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $879() {
  return global$0 | 0;
 }
 
 function $880($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $881($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $882() {
  global$2 = 5257760;
  global$1 = (14872 + 15 | 0) & -16 | 0;
 }
 
 function $883() {
  return global$0 - global$1 | 0 | 0;
 }
 
 function $884() {
  return global$1 | 0;
 }
 
 function $885($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return $886($0_1 | 0) | 0 | 0;
    }
    $1_1 = $876($0_1 | 0) | 0;
    $2_1 = $886($0_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $877($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 13232 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = $885(HEAP32[(0 + 13232 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0_1 = HEAP32[($780() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $1_1 = 0;
     label$7 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1_1 = $876($0_1 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2_1 = $886($0_1 | 0) | 0 | $2_1 | 0;
     }
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      $877($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $781();
  }
  return $2_1 | 0;
 }
 
 function $886($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
   if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function $887($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $888($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $887($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$25($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $889($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $18_1 = 0, $19_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $12_1 = 0, $14_1 = 0;
  $5_1 = $0_1;
  $6_1 = $1_1;
  $7_1 = $2_1;
  i64toi32_i32$0 = $3$hi;
  $9_1 = $3_1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $12_1 = $18_1;
  i64toi32_i32$1 = $4$hi;
  $14_1 = $4_1;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $19_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $19_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$26($5_1 | 0, $6_1 | 0, $7_1 | 0, $9_1 | 0, $12_1 | 0, $14_1 | 0, $19_1 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = Table([null, $8, $62, $64, $96, $97, $270, $275, $280, $281, $302, $303, $307, $308, $313, $314, $317, $318, $324, $325, $327, $328, $330, $331, $333, $334, $336, $337, $338, $340, $343, $349, $354, $356, $358, $362, $366, $370, $518, $523, $529, $536, $543, $560, $821, $684, $773, $774, $818, $819, $820, $825, $826, $828, $830, $833, $831, $832, $838, $834, $840, $861, $858, $843, $835, $860, $857, $844, $836, $859, $854, $847, $837, $849, $873, $777, $874]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = buffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "__wasm_call_ctors": $0, 
  "malloc": $862, 
  "free": $863, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "fit_sarimax_old": $273, 
  "predict_sarimax_old": $274, 
  "fit_autoarima_old": $278, 
  "predict_autoarima_old": $279, 
  "__getTypeName": $586, 
  "__embind_register_native_and_builtin_types": $588, 
  "fflush": $885, 
  "__errno_location": $755, 
  "stackSave": $879, 
  "stackRestore": $880, 
  "stackAlloc": $881, 
  "emscripten_stack_init": $882, 
  "emscripten_stack_get_free": $883, 
  "emscripten_stack_get_end": $884, 
  "dynCall_jiji": $888
 };
}

  return asmFunc(asmLibraryArg);
}

)(asmLibraryArg);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;
if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) {
  Object.defineProperty(Module, 'INITIAL_MEMORY', {
    configurable: true,
    get: function() {
      abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      // In theory we should not need to emit the maximum if we want "unlimited"
      // or 4GB of memory, but VMs error on that atm, see
      // https://github.com/emscripten-core/emscripten/issues/14130
      // And in the pthreads case we definitely need to emit a maximum. So
      // always emit one.
      'maximum': 2147483648 / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grows downwards
  HEAPU32[(max >> 2)+1] = 0x2135467;
  HEAPU32[(max >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[(max >> 2)+1];
  var cookie2 = HEAPU32[(max >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -s SUPPORT_BIG_ENDIAN=1 to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  
  callRuntimeCallbacks(__ATINIT__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  readyPromiseReject(e);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

  var wasmBinaryFile = 'arima-emscripten-module.wasm';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch === 'function'
      && !isFileURI(wasmBinaryFile)
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise(function(resolve, reject) {
          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
        });
      }
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      var result = WebAssembly.instantiate(binary, info);
      return result;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiationResult, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  // If instantiation fails, reject the module ready promise.
  instantiateAsync().catch(readyPromiseReject);
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  var runtimeKeepaliveCounter=0;
  function keepRuntimeAlive() {
      return noExitRuntime || runtimeKeepaliveCounter > 0;
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  var ExceptionInfoAttrs={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};
  function ___cxa_allocate_exception(size) {
      // Thrown object is prepended by exception metadata block
      return _malloc(size + ExceptionInfoAttrs.SIZE) + ExceptionInfoAttrs.SIZE;
    }

  function ExceptionInfo(excPtr) {
      this.excPtr = excPtr;
      this.ptr = excPtr - ExceptionInfoAttrs.SIZE;
  
      this.set_type = function(type) {
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.TYPE_OFFSET))>>2)] = type;
      };
  
      this.get_type = function() {
        return HEAP32[(((this.ptr)+(ExceptionInfoAttrs.TYPE_OFFSET))>>2)];
      };
  
      this.set_destructor = function(destructor) {
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.DESTRUCTOR_OFFSET))>>2)] = destructor;
      };
  
      this.get_destructor = function() {
        return HEAP32[(((this.ptr)+(ExceptionInfoAttrs.DESTRUCTOR_OFFSET))>>2)];
      };
  
      this.set_refcount = function(refcount) {
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)] = refcount;
      };
  
      this.set_caught = function (caught) {
        caught = caught ? 1 : 0;
        HEAP8[(((this.ptr)+(ExceptionInfoAttrs.CAUGHT_OFFSET))>>0)] = caught;
      };
  
      this.get_caught = function () {
        return HEAP8[(((this.ptr)+(ExceptionInfoAttrs.CAUGHT_OFFSET))>>0)] != 0;
      };
  
      this.set_rethrown = function (rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(((this.ptr)+(ExceptionInfoAttrs.RETHROWN_OFFSET))>>0)] = rethrown;
      };
  
      this.get_rethrown = function () {
        return HEAP8[(((this.ptr)+(ExceptionInfoAttrs.RETHROWN_OFFSET))>>0)] != 0;
      };
  
      // Initialize native structure fields. Should be called once after allocated.
      this.init = function(type, destructor) {
        this.set_type(type);
        this.set_destructor(destructor);
        this.set_refcount(0);
        this.set_caught(false);
        this.set_rethrown(false);
      }
  
      this.add_ref = function() {
        var value = HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)];
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)] = value + 1;
      };
  
      // Returns true if last reference released.
      this.release_ref = function() {
        var prev = HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)];
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)] = prev - 1;
        assert(prev > 0);
        return prev === 1;
      };
    }
  
  var exceptionLast=0;
  
  var uncaughtExceptionCount=0;
  function ___cxa_throw(ptr, type, destructor) {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s NO_DISABLE_EXCEPTION_CATCHING or -s EXCEPTION_CATCHING_ALLOWED=[..] to catch.";
    }

  var structRegistrations={};
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  var char_0=48;
  
  var char_9=57;
  function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }
  function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }
  function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }
  var InternalError=undefined;
  function throwInternalError(message) {
      throw new InternalError(message);
    }
  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }
  function __embind_finalize_value_object(structType) {
      var reg = structRegistrations[structType];
      delete structRegistrations[structType];
  
      var rawConstructor = reg.rawConstructor;
      var rawDestructor = reg.rawDestructor;
      var fieldRecords = reg.fields;
      var fieldTypes = fieldRecords.map(function(field) { return field.getterReturnType; }).
                concat(fieldRecords.map(function(field) { return field.setterArgumentType; }));
      whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes) {
          var fields = {};
          fieldRecords.forEach(function(field, i) {
              var fieldName = field.fieldName;
              var getterReturnType = fieldTypes[i];
              var getter = field.getter;
              var getterContext = field.getterContext;
              var setterArgumentType = fieldTypes[i + fieldRecords.length];
              var setter = field.setter;
              var setterContext = field.setterContext;
              fields[fieldName] = {
                  read: function(ptr) {
                      return getterReturnType['fromWireType'](
                          getter(getterContext, ptr));
                  },
                  write: function(ptr, o) {
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                      runDestructors(destructors);
                  }
              };
          });
  
          return [{
              name: reg.name,
              'fromWireType': function(ptr) {
                  var rv = {};
                  for (var i in fields) {
                      rv[i] = fields[i].read(ptr);
                  }
                  rawDestructor(ptr);
                  return rv;
              },
              'toWireType': function(destructors, o) {
                  // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
                  // assume all fields are present without checking.
                  for (var fieldName in fields) {
                      if (!(fieldName in o)) {
                          throw new TypeError('Missing field:  "' + fieldName + '"');
                      }
                  }
                  var ptr = rawConstructor();
                  for (fieldName in fields) {
                      fields[fieldName].write(ptr, o[fieldName]);
                  }
                  if (destructors !== null) {
                      destructors.push(rawDestructor, ptr);
                  }
                  return ptr;
              },
              'argPackAdvance': 8,
              'readValueFromPointer': simpleReadValueFromPointer,
              destructorFunction: rawDestructor,
          }];
      });
    }

  function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {}

  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
  var embind_charCodes=undefined;
  function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  var BindingError=undefined;
  function throwBindingError(message) {
      throw new BindingError(message);
    }
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }
  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }
  
  var finalizationGroup=false;
  
  function detachFinalizer(handle) {}
  
  function runDestructor($$) {
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }
  function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
          runDestructor($$);
      }
    }
  function attachFinalizer(handle) {
      if ('undefined' === typeof FinalizationGroup) {
          attachFinalizer = function (handle) { return handle; };
          return handle;
      }
      // If the running environment has a FinalizationGroup (see
      // https://github.com/tc39/proposal-weakrefs), then attach finalizers
      // for class handles.  We check for the presence of FinalizationGroup
      // at run-time, not build-time.
      finalizationGroup = new FinalizationGroup(function (iter) {
          for (var result = iter.next(); !result.done; result = iter.next()) {
              var $$ = result.value;
              if (!$$.ptr) {
                  console.warn('object already deleted: ' + $$.ptr);
              } else {
                  releaseClassHandle($$);
              }
          }
      });
      attachFinalizer = function(handle) {
          finalizationGroup.register(handle, handle.$$, handle.$$);
          return handle;
      };
      detachFinalizer = function(handle) {
          finalizationGroup.unregister(handle.$$);
      };
      return attachFinalizer(handle);
    }
  function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          }));
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      detachFinalizer(this);
      releaseClassHandle(this.$$);
  
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }
  function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }
  function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }
  function ClassHandle() {
    }
  
  var registeredPointers={};
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
  /** @param {number=} numArguments */
  function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  /** @constructor */
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }
  function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }
  var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }
  function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return attachFinalizer(Object.create(prototype, {
          $$: {
              value: record,
          },
      }));
    }
  function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }
  function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }
  /** @constructor
      @param {*=} pointeeType,
      @param {*=} sharingPolicy,
      @param {*=} rawGetPointee,
      @param {*=} rawConstructor,
      @param {*=} rawShare,
      @param {*=} rawDestructor,
       */
  function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  /** @param {number=} numArguments */
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function dynCallLegacy(sig, ptr, args) {
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      if (args && args.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      var f = Module["dynCall_" + sig];
      return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);
    }
  function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.includes('j')) {
        return dynCallLegacy(sig, ptr, args);
      }
      assert(wasmTable.get(ptr), 'missing table entry in dynCall: ' + ptr);
      return wasmTable.get(ptr).apply(null, args)
    }
  function getDynCaller(sig, ptr) {
      assert(sig.includes('j'), 'getDynCaller should only be called with i64 sigs')
      var argCache = [];
      return function() {
        argCache.length = arguments.length;
        for (var i = 0; i < arguments.length; i++) {
          argCache[i] = arguments[i];
        }
        return dynCall(sig, ptr, argCache);
      };
    }
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller() {
        if (signature.includes('j')) {
          return getDynCaller(signature, rawFunction);
        }
        return wasmTable.get(rawFunction);
      }
  
      var fp = makeDynCaller();
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
  function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  destructors.length = 0;
                  args.length = argCount;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for (var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for (var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for (var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (methodName.startsWith("@@")) {
              methodName = Symbol[methodName.substring(2)];
          }
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];
  function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }
  function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }
  function __emval_register(value) {
      switch (value) {
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }
  function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }
  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.includes('unsigned'));
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if (stdStringIsUTF8) {
                  var decodeStartPtr = value + 4;
                  // Looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                      var currentBytePtr = value + 4 + i;
                      if (i == length || HEAPU8[currentBytePtr] == 0) {
                          var maxRead = currentBytePtr - decodeStartPtr;
                          var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                          if (str === undefined) {
                              str = stringSegment;
                          } else {
                              str += String.fromCharCode(0);
                              str += stringSegment;
                          }
                          decodeStartPtr = currentBytePtr + 1;
                      }
                  }
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if (valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
          decodeString = UTF16ToString;
          encodeString = stringToUTF16;
          lengthBytesUTF = lengthBytesUTF16;
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          decodeString = UTF32ToString;
          encodeString = stringToUTF32;
          lengthBytesUTF = lengthBytesUTF32;
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              // Code mostly taken from _embind_register_std_string fromWireType
              var length = HEAPU32[value >> 2];
              var HEAP = getHeap();
              var str;
  
              var decodeStartPtr = value + 4;
              // Looping here to support possible embedded '0' bytes
              for (var i = 0; i <= length; ++i) {
                  var currentBytePtr = value + 4 + i * charSize;
                  if (i == length || HEAP[currentBytePtr >> shift] == 0) {
                      var maxReadBytes = currentBytePtr - decodeStartPtr;
                      var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                      if (str === undefined) {
                          str = stringSegment;
                      } else {
                          str += String.fromCharCode(0);
                          str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + charSize;
                  }
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (!(typeof value === 'string')) {
                  throwBindingError('Cannot pass non-string to C++ string type ' + name);
              }
  
              // assumes 4-byte alignment
              var length = lengthBytesUTF(value);
              var ptr = _malloc(4 + length + charSize);
              HEAPU32[ptr >> 2] = length >> shift;
  
              encodeString(value, ptr + 4, length + charSize);
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_value_object(
      rawType,
      name,
      constructorSignature,
      rawConstructor,
      destructorSignature,
      rawDestructor
    ) {
      structRegistrations[rawType] = {
          name: readLatin1String(name),
          rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
          rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
          fields: [],
      };
    }

  function __embind_register_value_object_field(
      structType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      structRegistrations[structType].fields.push({
          fieldName: readLatin1String(fieldName),
          getterReturnType: getterReturnType,
          getter: embind__requireFunction(getterSignature, getter),
          getterContext: getterContext,
          setterArgumentType: setterArgumentType,
          setter: embind__requireFunction(setterSignature, setter),
          setterContext: setterContext,
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }


  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }
  function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function _abort() {
      abort();
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
        console.error('emscripten_realloc_buffer: Attempted to grow heap from ' + buffer.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
      // implicit 0 return to save code size (caller will cast "undefined" into 0
      // anyhow)
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
      // Memory resize rules:
      // 1. Always increase heap size to at least the requested size, rounded up to next page multiple.
      // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap geometrically: increase the heap size according to 
      //                                         MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%),
      //                                         At most overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap linearly: increase the heap size by at least MEMORY_GROWTH_LINEAR_STEP bytes.
      // 3. Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 4. If we were unable to allocate as much memory, it may be due to over-eager decision to excessively reserve due to (3) above.
      //    Hence if an allocation fails, cut down on the amount of excess growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit is set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      // In CAN_ADDRESS_2GB mode, stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate full 4GB Wasm memories, the size will wrap
      // back to 0 bytes in Wasm side for any code that deals with heap sizes, which would require special casing all heap size related code to treat
      // 0 specially.
      var maxHeapSize = 2147483648;
      if (requestedSize > maxHeapSize) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + maxHeapSize + ' bytes!');
        return false;
      }
  
      // Loop through potential heap size increases. If we attempt a too eager reservation that fails, cut down on the
      // attempted size and reserve a smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
          err('Warning: Enlarging memory arrays, this is not fast! ' + [oldSize, newSize]);
  
          return true;
        }
      }
      err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
      return false;
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      if (typeof _fflush !== 'undefined') _fflush(0);
      var buffers = SYSCALLS.buffers;
      if (buffers[1].length) SYSCALLS.printChar(1, 10);
      if (buffers[2].length) SYSCALLS.printChar(2, 10);
    }
  
  var SYSCALLS={mappings:{},buffers:[null,[],[]],printChar:function(stream, curr) {
        var buffer = SYSCALLS.buffers[stream];
        assert(buffer);
        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  function _fd_write(fd, iov, iovcnt, pnum) {
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          SYSCALLS.printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAP32[((pnum)>>2)] = num
      return 0;
    }

  function _setTempRet0(val) {
      setTempRet0(val);
    }
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
      /**@suppress{checkTypes}*/
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmLibraryArg = {
  "__cxa_allocate_exception": ___cxa_allocate_exception,
  "__cxa_throw": ___cxa_throw,
  "_embind_finalize_value_object": __embind_finalize_value_object,
  "_embind_register_bigint": __embind_register_bigint,
  "_embind_register_bool": __embind_register_bool,
  "_embind_register_class": __embind_register_class,
  "_embind_register_class_constructor": __embind_register_class_constructor,
  "_embind_register_class_function": __embind_register_class_function,
  "_embind_register_emval": __embind_register_emval,
  "_embind_register_float": __embind_register_float,
  "_embind_register_function": __embind_register_function,
  "_embind_register_integer": __embind_register_integer,
  "_embind_register_memory_view": __embind_register_memory_view,
  "_embind_register_std_string": __embind_register_std_string,
  "_embind_register_std_wstring": __embind_register_std_wstring,
  "_embind_register_value_object": __embind_register_value_object,
  "_embind_register_value_object_field": __embind_register_value_object_field,
  "_embind_register_void": __embind_register_void,
  "_emval_decref": __emval_decref,
  "_emval_incref": __emval_incref,
  "_emval_take_value": __emval_take_value,
  "abort": _abort,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "exit": _exit,
  "fd_write": _fd_write,
  "getTempRet0": getTempRet0,
  "memory": wasmMemory,
  "setTempRet0": setTempRet0
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var _fit_sarimax_old = Module["_fit_sarimax_old"] = createExportWrapper("fit_sarimax_old");

/** @type {function(...*):?} */
var _predict_sarimax_old = Module["_predict_sarimax_old"] = createExportWrapper("predict_sarimax_old");

/** @type {function(...*):?} */
var _fit_autoarima_old = Module["_fit_autoarima_old"] = createExportWrapper("fit_autoarima_old");

/** @type {function(...*):?} */
var _predict_autoarima_old = Module["_predict_autoarima_old"] = createExportWrapper("predict_autoarima_old");

/** @type {function(...*):?} */
var ___getTypeName = Module["___getTypeName"] = createExportWrapper("__getTypeName");

/** @type {function(...*):?} */
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = createExportWrapper("__embind_register_native_and_builtin_types");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");





// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setFileTime")) Module["setFileTime"] = function() { abort("'setFileTime' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton4")) Module["inetPton4"] = function() { abort("'inetPton4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop4")) Module["inetNtop4"] = function() { abort("'inetNtop4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton6")) Module["inetPton6"] = function() { abort("'inetPton6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop6")) Module["inetNtop6"] = function() { abort("'inetNtop6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readSockaddr")) Module["readSockaddr"] = function() { abort("'readSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeSockaddr")) Module["writeSockaddr"] = function() { abort("'writeSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() { abort("'withBuiltinMalloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepaliveCounter")) Module["runtimeKeepaliveCounter"] = function() { abort("'runtimeKeepaliveCounter' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "keepRuntimeAlive")) Module["keepRuntimeAlive"] = function() { abort("'keepRuntimeAlive' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePush")) Module["runtimeKeepalivePush"] = function() { abort("'runtimeKeepalivePush' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePop")) Module["runtimeKeepalivePop"] = function() { abort("'runtimeKeepalivePop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callUserCallback")) Module["callUserCallback"] = function() { abort("'callUserCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeExit")) Module["maybeExit"] = function() { abort("'maybeExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asmjsMangle")) Module["asmjsMangle"] = function() { abort("'asmjsMangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketFromFD")) Module["getSocketFromFD"] = function() { abort("'getSocketFromFD' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketAddress")) Module["getSocketAddress"] = function() { abort("'getSocketAddress' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerKeyEventCallback")) Module["registerKeyEventCallback"] = function() { abort("'registerKeyEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBoundingClientRect")) Module["getBoundingClientRect"] = function() { abort("'getBoundingClientRect' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillMouseEventData")) Module["fillMouseEventData"] = function() { abort("'fillMouseEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerMouseEventCallback")) Module["registerMouseEventCallback"] = function() { abort("'registerMouseEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerWheelEventCallback")) Module["registerWheelEventCallback"] = function() { abort("'registerWheelEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerUiEventCallback")) Module["registerUiEventCallback"] = function() { abort("'registerUiEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFocusEventCallback")) Module["registerFocusEventCallback"] = function() { abort("'registerFocusEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceOrientationEventData")) Module["fillDeviceOrientationEventData"] = function() { abort("'fillDeviceOrientationEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceOrientationEventCallback")) Module["registerDeviceOrientationEventCallback"] = function() { abort("'registerDeviceOrientationEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceMotionEventData")) Module["fillDeviceMotionEventData"] = function() { abort("'fillDeviceMotionEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceMotionEventCallback")) Module["registerDeviceMotionEventCallback"] = function() { abort("'registerDeviceMotionEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "screenOrientation")) Module["screenOrientation"] = function() { abort("'screenOrientation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillOrientationChangeEventData")) Module["fillOrientationChangeEventData"] = function() { abort("'fillOrientationChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerOrientationChangeEventCallback")) Module["registerOrientationChangeEventCallback"] = function() { abort("'registerOrientationChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillFullscreenChangeEventData")) Module["fillFullscreenChangeEventData"] = function() { abort("'fillFullscreenChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFullscreenChangeEventCallback")) Module["registerFullscreenChangeEventCallback"] = function() { abort("'registerFullscreenChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerRestoreOldStyle")) Module["registerRestoreOldStyle"] = function() { abort("'registerRestoreOldStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "hideEverythingExceptGivenElement")) Module["hideEverythingExceptGivenElement"] = function() { abort("'hideEverythingExceptGivenElement' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreHiddenElements")) Module["restoreHiddenElements"] = function() { abort("'restoreHiddenElements' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setLetterbox")) Module["setLetterbox"] = function() { abort("'setLetterbox' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "currentFullscreenStrategy")) Module["currentFullscreenStrategy"] = function() { abort("'currentFullscreenStrategy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreOldWindowedStyle")) Module["restoreOldWindowedStyle"] = function() { abort("'restoreOldWindowedStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "softFullscreenResizeWebGLRenderTarget")) Module["softFullscreenResizeWebGLRenderTarget"] = function() { abort("'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "doRequestFullscreen")) Module["doRequestFullscreen"] = function() { abort("'doRequestFullscreen' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillPointerlockChangeEventData")) Module["fillPointerlockChangeEventData"] = function() { abort("'fillPointerlockChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockChangeEventCallback")) Module["registerPointerlockChangeEventCallback"] = function() { abort("'registerPointerlockChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockErrorEventCallback")) Module["registerPointerlockErrorEventCallback"] = function() { abort("'registerPointerlockErrorEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requestPointerLock")) Module["requestPointerLock"] = function() { abort("'requestPointerLock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillVisibilityChangeEventData")) Module["fillVisibilityChangeEventData"] = function() { abort("'fillVisibilityChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerVisibilityChangeEventCallback")) Module["registerVisibilityChangeEventCallback"] = function() { abort("'registerVisibilityChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerTouchEventCallback")) Module["registerTouchEventCallback"] = function() { abort("'registerTouchEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillGamepadEventData")) Module["fillGamepadEventData"] = function() { abort("'fillGamepadEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerGamepadEventCallback")) Module["registerGamepadEventCallback"] = function() { abort("'registerGamepadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBeforeUnloadEventCallback")) Module["registerBeforeUnloadEventCallback"] = function() { abort("'registerBeforeUnloadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillBatteryEventData")) Module["fillBatteryEventData"] = function() { abort("'fillBatteryEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "battery")) Module["battery"] = function() { abort("'battery' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBatteryEventCallback")) Module["registerBatteryEventCallback"] = function() { abort("'registerBatteryEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setCanvasElementSize")) Module["setCanvasElementSize"] = function() { abort("'setCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCanvasElementSize")) Module["getCanvasElementSize"] = function() { abort("'getCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flush_NO_FILESYSTEM")) Module["flush_NO_FILESYSTEM"] = function() { abort("'flush_NO_FILESYSTEM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "uncaughtExceptionCount")) Module["uncaughtExceptionCount"] = function() { abort("'uncaughtExceptionCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfoAttrs")) Module["ExceptionInfoAttrs"] = function() { abort("'ExceptionInfoAttrs' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "_setNetworkCallback")) Module["_setNetworkCallback"] = function() { abort("'_setNetworkCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetUniformLocation")) Module["webglGetUniformLocation"] = function() { abort("'webglGetUniformLocation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglPrepareUniformLocationsBeforeFirstUse")) Module["webglPrepareUniformLocationsBeforeFirstUse"] = function() { abort("'webglPrepareUniformLocationsBeforeFirstUse' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetLeftBracePos")) Module["webglGetLeftBracePos"] = function() { abort("'webglGetLeftBracePos' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_handle_array")) Module["emval_handle_array"] = function() { abort("'emval_handle_array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_free_list")) Module["emval_free_list"] = function() { abort("'emval_free_list' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_symbols")) Module["emval_symbols"] = function() { abort("'emval_symbols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval")) Module["init_emval"] = function() { abort("'init_emval' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles")) Module["count_emval_handles"] = function() { abort("'count_emval_handles' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval")) Module["get_first_emval"] = function() { abort("'get_first_emval' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol")) Module["getStringOrSymbol"] = function() { abort("'getStringOrSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireHandle")) Module["requireHandle"] = function() { abort("'requireHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_newers")) Module["emval_newers"] = function() { abort("'emval_newers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator")) Module["craftEmvalAllocator"] = function() { abort("'craftEmvalAllocator' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_get_global")) Module["emval_get_global"] = function() { abort("'emval_get_global' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_methodCallers")) Module["emval_methodCallers"] = function() { abort("'emval_methodCallers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError")) Module["InternalError"] = function() { abort("'InternalError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError")) Module["BindingError"] = function() { abort("'BindingError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError")) Module["UnboundTypeError"] = function() { abort("'UnboundTypeError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError")) Module["PureVirtualError"] = function() { abort("'PureVirtualError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind")) Module["init_embind"] = function() { abort("'init_embind' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError")) Module["throwInternalError"] = function() { abort("'throwInternalError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError")) Module["throwBindingError"] = function() { abort("'throwBindingError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError")) Module["throwUnboundTypeError"] = function() { abort("'throwUnboundTypeError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable")) Module["ensureOverloadTable"] = function() { abort("'ensureOverloadTable' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol")) Module["exposePublicSymbol"] = function() { abort("'exposePublicSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol")) Module["replacePublicSymbol"] = function() { abort("'replacePublicSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "extendError")) Module["extendError"] = function() { abort("'extendError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction")) Module["createNamedFunction"] = function() { abort("'createNamedFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances")) Module["registeredInstances"] = function() { abort("'registeredInstances' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer")) Module["getBasestPointer"] = function() { abort("'getBasestPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance")) Module["registerInheritedInstance"] = function() { abort("'registerInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance")) Module["unregisterInheritedInstance"] = function() { abort("'unregisterInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance")) Module["getInheritedInstance"] = function() { abort("'getInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount")) Module["getInheritedInstanceCount"] = function() { abort("'getInheritedInstanceCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances")) Module["getLiveInheritedInstances"] = function() { abort("'getLiveInheritedInstances' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredTypes")) Module["registeredTypes"] = function() { abort("'registeredTypes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "awaitingDependencies")) Module["awaitingDependencies"] = function() { abort("'awaitingDependencies' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "typeDependencies")) Module["typeDependencies"] = function() { abort("'typeDependencies' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredPointers")) Module["registeredPointers"] = function() { abort("'registeredPointers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerType")) Module["registerType"] = function() { abort("'registerType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved")) Module["whenDependentTypesAreResolved"] = function() { abort("'whenDependentTypesAreResolved' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes")) Module["embind_charCodes"] = function() { abort("'embind_charCodes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_init_charCodes")) Module["embind_init_charCodes"] = function() { abort("'embind_init_charCodes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String")) Module["readLatin1String"] = function() { abort("'readLatin1String' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTypeName")) Module["getTypeName"] = function() { abort("'getTypeName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heap32VectorToArray")) Module["heap32VectorToArray"] = function() { abort("'heap32VectorToArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType")) Module["requireRegisteredType"] = function() { abort("'requireRegisteredType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize")) Module["getShiftFromSize"] = function() { abort("'getShiftFromSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer")) Module["integerReadValueFromPointer"] = function() { abort("'integerReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer")) Module["enumReadValueFromPointer"] = function() { abort("'enumReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer")) Module["floatReadValueFromPointer"] = function() { abort("'floatReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "simpleReadValueFromPointer")) Module["simpleReadValueFromPointer"] = function() { abort("'simpleReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructors")) Module["runDestructors"] = function() { abort("'runDestructors' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "new_")) Module["new_"] = function() { abort("'new_' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction")) Module["craftInvokerFunction"] = function() { abort("'craftInvokerFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction")) Module["embind__requireFunction"] = function() { abort("'embind__requireFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tupleRegistrations")) Module["tupleRegistrations"] = function() { abort("'tupleRegistrations' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "structRegistrations")) Module["structRegistrations"] = function() { abort("'structRegistrations' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType")) Module["genericPointerToWireType"] = function() { abort("'genericPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType")) Module["constNoSmartPtrRawPointerToWireType"] = function() { abort("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType")) Module["nonConstNoSmartPtrRawPointerToWireType"] = function() { abort("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer")) Module["init_RegisteredPointer"] = function() { abort("'init_RegisteredPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer")) Module["RegisteredPointer"] = function() { abort("'RegisteredPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_getPointee")) Module["RegisteredPointer_getPointee"] = function() { abort("'RegisteredPointer_getPointee' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_destructor")) Module["RegisteredPointer_destructor"] = function() { abort("'RegisteredPointer_destructor' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_deleteObject")) Module["RegisteredPointer_deleteObject"] = function() { abort("'RegisteredPointer_deleteObject' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType")) Module["RegisteredPointer_fromWireType"] = function() { abort("'RegisteredPointer_fromWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructor")) Module["runDestructor"] = function() { abort("'runDestructor' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle")) Module["releaseClassHandle"] = function() { abort("'releaseClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "finalizationGroup")) Module["finalizationGroup"] = function() { abort("'finalizationGroup' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer_deps")) Module["detachFinalizer_deps"] = function() { abort("'detachFinalizer_deps' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer")) Module["detachFinalizer"] = function() { abort("'detachFinalizer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer")) Module["attachFinalizer"] = function() { abort("'attachFinalizer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle")) Module["makeClassHandle"] = function() { abort("'makeClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle")) Module["init_ClassHandle"] = function() { abort("'init_ClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle")) Module["ClassHandle"] = function() { abort("'ClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isAliasOf")) Module["ClassHandle_isAliasOf"] = function() { abort("'ClassHandle_isAliasOf' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted")) Module["throwInstanceAlreadyDeleted"] = function() { abort("'throwInstanceAlreadyDeleted' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone")) Module["ClassHandle_clone"] = function() { abort("'ClassHandle_clone' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete")) Module["ClassHandle_delete"] = function() { abort("'ClassHandle_delete' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "deletionQueue")) Module["deletionQueue"] = function() { abort("'deletionQueue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isDeleted")) Module["ClassHandle_isDeleted"] = function() { abort("'ClassHandle_isDeleted' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater")) Module["ClassHandle_deleteLater"] = function() { abort("'ClassHandle_deleteLater' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes")) Module["flushPendingDeletes"] = function() { abort("'flushPendingDeletes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "delayFunction")) Module["delayFunction"] = function() { abort("'delayFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction")) Module["setDelayFunction"] = function() { abort("'setDelayFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredClass")) Module["RegisteredClass"] = function() { abort("'RegisteredClass' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "shallowCopyInternalPointer")) Module["shallowCopyInternalPointer"] = function() { abort("'shallowCopyInternalPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "downcastPointer")) Module["downcastPointer"] = function() { abort("'downcastPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer")) Module["upcastPointer"] = function() { abort("'upcastPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "validateThis")) Module["validateThis"] = function() { abort("'validateThis' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_0")) Module["char_0"] = function() { abort("'char_0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_9")) Module["char_9"] = function() { abort("'char_9' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName")) Module["makeLegalFunctionName"] = function() { abort("'makeLegalFunctionName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  _emscripten_stack_init();
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    readyPromiseResolve(Module);
    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush();
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  EXITSTATUS = status;

  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && keepRuntimeAlive() && status === 0) {
    return;
  }

  if (keepRuntimeAlive()) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      readyPromiseReject(msg);
      err(msg);
    }
  } else {

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);

    ABORT = true;
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();







  return Module.ready
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
  module.exports = Module;
else if (typeof define === 'function' && define['amd'])
  define([], function() { return Module; });
else if (typeof exports === 'object')
  exports["Module"] = Module;
