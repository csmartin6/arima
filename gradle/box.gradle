/**
 * @license Copyright 2020 Palantir Technologies, Inc. All rights reserved.
 */

def getBashStyle(color) {
    def colorCodes = [
        bold: '1',
        underline: '4',
        reversed: '7',
        black: '30',
        red: '31',
        green: '32',
        yellow: '33',
        blue: '34',
        magenta: '35',
        cyan: '36',
        white: '37',
        reset: '0'
    ]
    return "\u001b[${colorCodes[color]}m"
}

/** Remove ANSI characters (bash color codes) from a string */
def lineWithoutAnsiChars(line) {
    return line.replaceAll("\u001B\\[[;\\d]*m", "")
}

/** Create a colored box surrounding the provided text */
def createBox(multiLineText, color) {
    def highlightColor = getBashStyle(color)
    def normalColor = getBashStyle("reset")

    // Remove any indents and space before and after
    def trimmedText = multiLineText.stripIndent().trim()

    // Calculate the length longest line, so that we can build the box
    def longestLineLength = 0
    lineWithoutAnsiChars(trimmedText).eachLine { line ->
        if (line.length() > longestLineLength) {
            longestLineLength = line.length()
        }
    }

    // Create the output
    def output = "${highlightColor}┌" + '─'.multiply(longestLineLength + 2) + '┐\n'
    trimmedText.eachLine { line ->
        def spacePaddingLength = longestLineLength - lineWithoutAnsiChars(line).length()
        output += "│${normalColor} " + line + ' '.multiply(spacePaddingLength) + " ${highlightColor}│\n"
    }
    output += '└' + '─'.multiply(longestLineLength + 2) + '┘'
    return output
}

ext {
    createBox = this.&createBox
    getBashStyle = this.&getBashStyle
}
